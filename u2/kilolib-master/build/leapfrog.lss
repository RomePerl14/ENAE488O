
build/leapfrog.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
       c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      18:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_6>
      1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      2c:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__vector_11>
      30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      38:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__vector_14>
      3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      5c:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__vector_23>
      60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
      68:	73 07       	cpc	r23, r19
      6a:	ca 07       	cpc	r28, r26
      6c:	de 07       	cpc	r29, r30
      6e:	0f 08       	sbc	r0, r15
      70:	16 08       	sbc	r1, r6
      72:	f5 07       	cpc	r31, r21
      74:	19 08       	sbc	r1, r9
      76:	77 09       	sbc	r23, r7
      78:	68 0a       	sbc	r6, r24
      7a:	68 0a       	sbc	r6, r24
      7c:	80 09       	sbc	r24, r0
      7e:	83 09       	sbc	r24, r3
      80:	86 09       	sbc	r24, r6
      82:	88 09       	sbc	r24, r8
      84:	8a 09       	sbc	r24, r10
      86:	8c 09       	sbc	r24, r12
      88:	3d 0a       	sbc	r3, r29
      8a:	9e 09       	sbc	r25, r14
      8c:	07 2c       	mov	r0, r7
      8e:	7a a5       	ldd	r23, Y+42	; 0x2a
      90:	ba 6c       	ori	r27, 0xCA	; 202
      92:	c5 90       	lpm	r12, Z+
      94:	da 3b       	cpi	r29, 0xBA	; 186
      96:	93 65       	ori	r25, 0x53	; 83
      98:	fc 8b       	std	Y+20, r31	; 0x14
      9a:	bc 53       	subi	r27, 0x3C	; 60
      9c:	f8 10       	cpse	r15, r8
      9e:	fd 3c       	cpi	r31, 0xCD	; 205
      a0:	56 92       	lac	Z, r5
      a2:	83 4d       	sbci	r24, 0xD3	; 211
      a4:	bd 87       	std	Y+13, r27	; 0x0d
      a6:	9d 3a       	cpi	r25, 0xAD	; 173
      a8:	b6 3d       	cpi	r27, 0xD6	; 214
      aa:	cb c9       	rjmp	.-3178   	; 0xfffff442 <__eeprom_end+0xff7ef442>
      ac:	bf 5b       	subi	r27, 0xBF	; 191
      ae:	be 73       	andi	r27, 0x3E	; 62
      b0:	da 0f       	add	r29, r26
      b2:	c9 3f       	cpi	r28, 0xF9	; 249

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      c0:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      c2:	0f b6       	in	r0, 0x3f	; 63
      c4:	f8 94       	cli
      c6:	a8 95       	wdr
      c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      cc:	88 61       	ori	r24, 0x18	; 24
      ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      d2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      d6:	0f be       	out	0x3f, r0	; 63

000000d8 <__do_copy_data>:
      d8:	11 e0       	ldi	r17, 0x01	; 1
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b1 e0       	ldi	r27, 0x01	; 1
      de:	e2 ef       	ldi	r30, 0xF2	; 242
      e0:	fd e1       	ldi	r31, 0x1D	; 29
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
      e4:	05 90       	lpm	r0, Z+
      e6:	0d 92       	st	X+, r0
      e8:	a4 31       	cpi	r26, 0x14	; 20
      ea:	b1 07       	cpc	r27, r17
      ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
      ee:	21 e0       	ldi	r18, 0x01	; 1
      f0:	a4 e1       	ldi	r26, 0x14	; 20
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
      f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
      f8:	a6 39       	cpi	r26, 0x96	; 150
      fa:	b2 07       	cpc	r27, r18
      fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
      fe:	0e 94 1a 0b 	call	0x1634	; 0x1634 <main>
     102:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <_exit>

00000106 <__bad_interrupt>:
     106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <message_tx>:
    }
                                                                                                                                                                                                               
}

message_t *message_tx() 
{
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
    msg.type = NORMAL;
     10e:	c4 e2       	ldi	r28, 0x24	; 36
     110:	d1 e0       	ldi	r29, 0x01	; 1
     112:	19 86       	std	Y+9, r1	; 0x09
    // Transmit our kilo_uid
    msg.data[0] = (uint8_t) kilo_uid; // just incase
     114:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <kilo_uid>
     118:	88 83       	st	Y, r24
    // transmit our local leap counter to the network (indcates whether we've succesfully leaped)
    msg.data[1] = (uint8_t) current_leap_count;
     11a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <current_leap_count>
     11e:	89 83       	std	Y+1, r24	; 0x01
    // (ONLY MEANINGFUL WHEN NOT AT THE END OF THE LINE)
    // transmit out distance to our second neighbor (right next to us) so that the moving kilobot 
    // can use it to calculate the angle between n1 and n2 for the SSS law of cosines calculation
    msg.data[2] = (uint8_t) neighbor2_cur_dist;
     120:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <neighbor2_cur_dist>
     124:	8a 83       	std	Y+2, r24	; 0x02
    
    // Do this thing
    msg.crc = message_crc(&msg);
     126:	ce 01       	movw	r24, r28
     128:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <message_crc>
     12c:	9b 87       	std	Y+11, r25	; 0x0b
     12e:	8a 87       	std	Y+10, r24	; 0x0a

    return &msg;
}
     130:	ce 01       	movw	r24, r28
     132:	df 91       	pop	r29
     134:	cf 91       	pop	r28
     136:	08 95       	ret

00000138 <set_motion>:

message_t msg; // message variable

// function to set new motion (from orbit-planet.c.c)
void set_motion(motion_t new_motion) {
    if (cur_motion != new_motion) {
     138:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <cur_motion>
     13c:	98 17       	cp	r25, r24
     13e:	01 f1       	breq	.+64     	; 0x180 <set_motion+0x48>
        cur_motion = new_motion;
     140:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <cur_motion>
        switch(cur_motion) {
     144:	81 30       	cpi	r24, 0x01	; 1
     146:	41 f0       	breq	.+16     	; 0x158 <set_motion+0x20>
     148:	28 f0       	brcs	.+10     	; 0x154 <set_motion+0x1c>
     14a:	82 30       	cpi	r24, 0x02	; 2
     14c:	61 f0       	breq	.+24     	; 0x166 <set_motion+0x2e>
     14e:	83 30       	cpi	r24, 0x03	; 3
     150:	81 f0       	breq	.+32     	; 0x172 <set_motion+0x3a>
     152:	08 95       	ret
            case STOP:
                set_motors(0,0);
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	11 c0       	rjmp	.+34     	; 0x17a <set_motion+0x42>
                break;
            case FORWARD:
                spinup_motors();
     158:	0e 94 73 04 	call	0x8e6	; 0x8e6 <spinup_motors>
                set_motors(kilo_straight_left, kilo_straight_right);
     15c:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <kilo_straight_right>
     160:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <kilo_straight_left>
     164:	0b c0       	rjmp	.+22     	; 0x17c <set_motion+0x44>
                break;
            case LEFT:
                spinup_motors();
     166:	0e 94 73 04 	call	0x8e6	; 0x8e6 <spinup_motors>
                set_motors(kilo_turn_left, 0); 
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <kilo_turn_left>
     170:	05 c0       	rjmp	.+10     	; 0x17c <set_motion+0x44>
                break;
            case RIGHT:
                spinup_motors();
     172:	0e 94 73 04 	call	0x8e6	; 0x8e6 <spinup_motors>
                set_motors(0, kilo_turn_right); 
     176:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <kilo_turn_right>
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <set_motors>
     180:	08 95       	ret

00000182 <orbit_normal>:
    }
}

// orbit around the selected node (from orbit-planet.c.c)
void orbit_normal() {
    if (cur_distance < TOOCLOSE_DISTANCE) {
     182:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cur_distance>
     186:	8e 31       	cpi	r24, 0x1E	; 30
     188:	18 f4       	brcc	.+6      	; 0x190 <orbit_normal+0xe>
        orbit_state = ORBIT_TOOCLOSE;
     18a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <orbit_state>
     18e:	08 95       	ret
    } else {
        switch(current_direction)
     190:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <current_direction>
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	19 f0       	breq	.+6      	; 0x19e <orbit_normal+0x1c>
     198:	82 30       	cpi	r24, 0x02	; 2
     19a:	39 f0       	breq	.+14     	; 0x1aa <orbit_normal+0x28>
     19c:	08 95       	ret
        {
            case COUNTER_CLOCKWISE:
                if (orbit_distance < DESIRED_DISTANCE)
     19e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <orbit_distance>
     1a2:	83 32       	cpi	r24, 0x23	; 35
     1a4:	30 f4       	brcc	.+12     	; 0x1b2 <orbit_normal+0x30>
                    set_motion(RIGHT);
     1a6:	83 e0       	ldi	r24, 0x03	; 3
     1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <orbit_normal+0x32>
                else
                    set_motion(LEFT);
                break;
            case CLOCKWISE:
                if (orbit_distance < DESIRED_DISTANCE)
     1aa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <orbit_distance>
     1ae:	83 32       	cpi	r24, 0x23	; 35
     1b0:	d0 f7       	brcc	.-12     	; 0x1a6 <orbit_normal+0x24>
        {
            case COUNTER_CLOCKWISE:
                if (orbit_distance < DESIRED_DISTANCE)
                    set_motion(RIGHT);
                else
                    set_motion(LEFT);
     1b2:	82 e0       	ldi	r24, 0x02	; 2
     1b4:	0c 94 9c 00 	jmp	0x138	; 0x138 <set_motion>

000001b8 <orbit_tooclose>:
    }
}

// if we get to close, change up what we're doing (from orbit-planet.c_)
void orbit_tooclose() {
    if (orbit_distance >= DESIRED_DISTANCE)
     1b8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <orbit_distance>
     1bc:	83 32       	cpi	r24, 0x23	; 35
     1be:	20 f0       	brcs	.+8      	; 0x1c8 <orbit_tooclose+0x10>
        orbit_state = ORBIT_NORMAL;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <orbit_state>
     1c6:	08 95       	ret
    else
        set_motion(FORWARD);
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	0c 94 9c 00 	jmp	0x138	; 0x138 <set_motion>

000001ce <find_current_location>:

// find the location of each kilobot in the network
void find_current_location()
{
    // Find out current order
    for(uint8_t i=0;i<num_kilobots;i+=1)
     1ce:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <num_kilobots>
    {
        if(kilo_uid == kilo_leap_order[i]) // if we're in the kilo_leap_order (which we should be), find the location
     1d2:	a0 91 91 01 	lds	r26, 0x0191	; 0x800191 <kilo_uid>
     1d6:	b0 91 92 01 	lds	r27, 0x0192	; 0x800192 <kilo_uid+0x1>
     1da:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     1de:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     1e2:	e3 e0       	ldi	r30, 0x03	; 3
     1e4:	f1 e0       	ldi	r31, 0x01	; 1

// find the location of each kilobot in the network
void find_current_location()
{
    // Find out current order
    for(uint8_t i=0;i<num_kilobots;i+=1)
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	86 17       	cp	r24, r22
     1ec:	48 f4       	brcc	.+18     	; 0x200 <find_current_location+0x32>
    {
        if(kilo_uid == kilo_leap_order[i]) // if we're in the kilo_leap_order (which we should be), find the location
     1ee:	21 91       	ld	r18, Z+
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	2a 17       	cp	r18, r26
     1f4:	3b 07       	cpc	r19, r27
     1f6:	11 f4       	brne	.+4      	; 0x1fc <find_current_location+0x2e>
        {
            current_leap_location = i;
     1f8:	58 2f       	mov	r21, r24
     1fa:	49 2f       	mov	r20, r25
     1fc:	01 96       	adiw	r24, 0x01	; 1
     1fe:	f5 cf       	rjmp	.-22     	; 0x1ea <find_current_location+0x1c>
     200:	50 93 00 01 	sts	0x0100, r21	; 0x800100 <__DATA_REGION_ORIGIN__>
     204:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     208:	08 95       	ret

0000020a <find_neighbors>:
void find_neighbors()
{
    // Get your neighbors
    // This should maintain that we're always keeping track of the right nodes and the distance we are from
    // them, no matter what the current order is of the network
    if(current_leap_location == 0) // at the front of the line
     20a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     20e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     212:	00 97       	sbiw	r24, 0x00	; 0
     214:	69 f4       	brne	.+26     	; 0x230 <find_neighbors+0x26>
    {
        neighbor1_kilo_id = kilo_leap_order[current_leap_location+1];
     216:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <kilo_leap_order+0x1>
     21a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <neighbor1_kilo_id>
        neighbor1_cur_leap_location = current_leap_location + 1;
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <neighbor1_cur_leap_location>

        neighbor2_kilo_id = kilo_leap_order[current_leap_location+2];
     224:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <kilo_leap_order+0x2>
     228:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <neighbor2_kilo_id>
        neighbor2_cur_leap_location = current_leap_location + 2;
     22c:	82 e0       	ldi	r24, 0x02	; 2
     22e:	22 c0       	rjmp	.+68     	; 0x274 <find_neighbors+0x6a>
    }
    else if (current_leap_location == 1) // one away from the front
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	91 05       	cpc	r25, r1
     234:	71 f4       	brne	.+28     	; 0x252 <find_neighbors+0x48>
    {
        neighbor1_kilo_id = kilo_leap_order[current_leap_location+1];
     236:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <kilo_leap_order+0x2>
     23a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <neighbor1_kilo_id>
        neighbor1_cur_leap_location = current_leap_location + 1;
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <neighbor1_cur_leap_location>

        neighbor2_kilo_id = kilo_leap_order[current_leap_location-1];
     244:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <kilo_leap_order>
     248:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <neighbor2_kilo_id>
        neighbor2_cur_leap_location = current_leap_location - 1;
     24c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <neighbor2_cur_leap_location>
     250:	08 95       	ret
    }
    else // anywhere else, we don't need to worry about roll over
    {
        neighbor1_kilo_id = kilo_leap_order[current_leap_location-2];
     252:	9c 01       	movw	r18, r24
     254:	2d 5f       	subi	r18, 0xFD	; 253
     256:	3e 4f       	sbci	r19, 0xFE	; 254
     258:	f9 01       	movw	r30, r18
     25a:	32 97       	sbiw	r30, 0x02	; 2
     25c:	90 81       	ld	r25, Z
     25e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <neighbor1_kilo_id>
        neighbor2_kilo_id = kilo_leap_order[current_leap_location-1];
     262:	31 96       	adiw	r30, 0x01	; 1
     264:	90 81       	ld	r25, Z
     266:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <neighbor2_kilo_id>

        neighbor1_cur_leap_location = current_leap_location - 2;
     26a:	9e ef       	ldi	r25, 0xFE	; 254
     26c:	98 0f       	add	r25, r24
     26e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <neighbor1_cur_leap_location>
        neighbor2_cur_leap_location = current_leap_location - 1;
     272:	81 50       	subi	r24, 0x01	; 1
     274:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <neighbor2_cur_leap_location>
     278:	08 95       	ret

0000027a <shift_locations>:
    }
}

// shift the known location of each kilobot
void shift_locations()
{
     27a:	ef 92       	push	r14
     27c:	ff 92       	push	r15
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
        kilo_leap_order[i] = copy_of_kilo_leap_order[i-1]; // shift every other element to the right one index
    }

    // update the kilobots local understanding of node locations
    find_current_location();
}
     28a:	0d b7       	in	r16, 0x3d	; 61
     28c:	1e b7       	in	r17, 0x3e	; 62

// shift the known location of each kilobot
void shift_locations()
{
    // Shift the order of the kilobot network to account for the last node moving to the front of the line
    uint8_t copy_of_kilo_leap_order[num_kilobots]; // make a copy of the current order
     28e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <num_kilobots>
     292:	8d b7       	in	r24, 0x3d	; 61
     294:	9e b7       	in	r25, 0x3e	; 62
     296:	82 1b       	sub	r24, r18
     298:	91 09       	sbc	r25, r1
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	9e bf       	out	0x3e, r25	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	8d bf       	out	0x3d, r24	; 61
     2a4:	01 96       	adiw	r24, 0x01	; 1
    uint8_t end = num_kilobots-1; // the ending location of the kilobot order
     2a6:	3f ef       	ldi	r19, 0xFF	; 255
     2a8:	32 0f       	add	r19, r18
     2aa:	43 e0       	ldi	r20, 0x03	; 3
     2ac:	51 e0       	ldi	r21, 0x01	; 1
     2ae:	7c 01       	movw	r14, r24

    for(uint8_t i=0;i<num_kilobots;i+=1)
     2b0:	fc 01       	movw	r30, r24
     2b2:	6e 2f       	mov	r22, r30
     2b4:	68 1b       	sub	r22, r24
     2b6:	62 17       	cp	r22, r18
     2b8:	28 f4       	brcc	.+10     	; 0x2c4 <shift_locations+0x4a>
    {
        copy_of_kilo_leap_order[i] = kilo_leap_order[i]; // fill the copy
     2ba:	da 01       	movw	r26, r20
     2bc:	6d 91       	ld	r22, X+
     2be:	ad 01       	movw	r20, r26
     2c0:	61 93       	st	Z+, r22
     2c2:	f7 cf       	rjmp	.-18     	; 0x2b2 <shift_locations+0x38>
    }

    // Make the first element the last element
    kilo_leap_order[0] = copy_of_kilo_leap_order[end]; // set the new front position to be the back position
     2c4:	fc 01       	movw	r30, r24
     2c6:	e3 0f       	add	r30, r19
     2c8:	f1 1d       	adc	r31, r1
     2ca:	80 81       	ld	r24, Z
     2cc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_leap_order>
     2d0:	e4 e0       	ldi	r30, 0x04	; 4
     2d2:	f1 e0       	ldi	r31, 0x01	; 1
    for(uint8_t i=1;i<num_kilobots;i+=1)
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	82 17       	cp	r24, r18
     2d8:	30 f4       	brcc	.+12     	; 0x2e6 <shift_locations+0x6c>
    {
        kilo_leap_order[i] = copy_of_kilo_leap_order[i-1]; // shift every other element to the right one index
     2da:	d7 01       	movw	r26, r14
     2dc:	9d 91       	ld	r25, X+
     2de:	7d 01       	movw	r14, r26
     2e0:	91 93       	st	Z+, r25
        copy_of_kilo_leap_order[i] = kilo_leap_order[i]; // fill the copy
    }

    // Make the first element the last element
    kilo_leap_order[0] = copy_of_kilo_leap_order[end]; // set the new front position to be the back position
    for(uint8_t i=1;i<num_kilobots;i+=1)
     2e2:	8f 5f       	subi	r24, 0xFF	; 255
     2e4:	f8 cf       	rjmp	.-16     	; 0x2d6 <shift_locations+0x5c>
    {
        kilo_leap_order[i] = copy_of_kilo_leap_order[i-1]; // shift every other element to the right one index
    }

    // update the kilobots local understanding of node locations
    find_current_location();
     2e6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <find_current_location>
}
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	1e bf       	out	0x3e, r17	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	0d bf       	out	0x3d, r16	; 61
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	ef 90       	pop	r14
     300:	08 95       	ret

00000302 <find_kilo_color>:

// find the identifying color of the kilobot base of kilo_uid
void find_kilo_color()
{
    // currently allows for up to 6 kilobots to be color coded, but does not limit overarching number of kilobots
    if(kilo_uid == 0)
     302:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <kilo_uid>
     306:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <kilo_uid+0x1>
     30a:	00 97       	sbiw	r24, 0x00	; 0
     30c:	11 f4       	brne	.+4      	; 0x312 <find_kilo_color+0x10>
    {
        set_color(RGB(0,0,0));
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	1e c0       	rjmp	.+60     	; 0x34e <find_kilo_color+0x4c>
    }
    else if(kilo_uid == 1)
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	91 05       	cpc	r25, r1
     316:	11 f4       	brne	.+4      	; 0x31c <find_kilo_color+0x1a>
    {
        set_color(RGB(1,0,0));
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	19 c0       	rjmp	.+50     	; 0x34e <find_kilo_color+0x4c>
    }
    else if(kilo_uid == 2)
     31c:	82 30       	cpi	r24, 0x02	; 2
     31e:	91 05       	cpc	r25, r1
     320:	11 f4       	brne	.+4      	; 0x326 <find_kilo_color+0x24>
    {
        set_color(RGB(0,1,0));
     322:	84 e0       	ldi	r24, 0x04	; 4
     324:	14 c0       	rjmp	.+40     	; 0x34e <find_kilo_color+0x4c>
    }
    else if(kilo_uid == 3)
     326:	83 30       	cpi	r24, 0x03	; 3
     328:	91 05       	cpc	r25, r1
     32a:	11 f4       	brne	.+4      	; 0x330 <find_kilo_color+0x2e>
    {
        set_color(RGB(0,0,1));
     32c:	80 e1       	ldi	r24, 0x10	; 16
     32e:	0f c0       	rjmp	.+30     	; 0x34e <find_kilo_color+0x4c>
    }
    else if(kilo_uid == 4)
     330:	84 30       	cpi	r24, 0x04	; 4
     332:	91 05       	cpc	r25, r1
     334:	11 f4       	brne	.+4      	; 0x33a <find_kilo_color+0x38>
    {
        set_color(RGB(1,1,0));
     336:	85 e0       	ldi	r24, 0x05	; 5
     338:	0a c0       	rjmp	.+20     	; 0x34e <find_kilo_color+0x4c>
    }
    else if(kilo_uid == 5)
     33a:	85 30       	cpi	r24, 0x05	; 5
     33c:	91 05       	cpc	r25, r1
     33e:	11 f4       	brne	.+4      	; 0x344 <find_kilo_color+0x42>
    {
        set_color(RGB(1,0,1));
     340:	81 e1       	ldi	r24, 0x11	; 17
     342:	05 c0       	rjmp	.+10     	; 0x34e <find_kilo_color+0x4c>
    }
    else if(kilo_uid == 6)
     344:	06 97       	sbiw	r24, 0x06	; 6
     346:	11 f4       	brne	.+4      	; 0x34c <find_kilo_color+0x4a>
    {
        set_color(RGB(0,1,1));
     348:	84 e1       	ldi	r24, 0x14	; 20
     34a:	01 c0       	rjmp	.+2      	; 0x34e <find_kilo_color+0x4c>
    }
    else
    {
        set_color(RGB(1,1,1));
     34c:	85 e1       	ldi	r24, 0x15	; 21
     34e:	0c 94 40 07 	jmp	0xe80	; 0xe80 <set_color>

00000352 <setup>:

// setup schtuff
void setup() 
{   
    // This code is made for N >= 3 kilobots
    if(num_kilobots == 2) // if there are only two kilbots indicated, hold forever and tell the user by flashing red
     352:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_kilobots>
     356:	82 30       	cpi	r24, 0x02	; 2
     358:	59 f4       	brne	.+22     	; 0x370 <setup+0x1e>
    {
        while(1)
        {
            set_color(RGB(1,0,0));
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
            delay(200);
     360:	88 ec       	ldi	r24, 0xC8	; 200
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
            set_color(RGB(0,0,0));
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
     36e:	f5 cf       	rjmp	.-22     	; 0x35a <setup+0x8>
        }
    }
    
    // set up message
    msg.type = NORMAL;
     370:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <msg+0x9>
    msg.data[0] = kilo_uid;
     374:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <kilo_uid>
     378:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <msg>
    msg.data[1] = 0;
     37c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <msg+0x1>
    msg.data[2] = 0;
     380:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <msg+0x2>
    msg.data[3] = 0;
     384:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <msg+0x3>
    msg.data[4] = 0;
     388:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <msg+0x4>
    msg.data[5] = 0;
     38c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <msg+0x5>
    msg.data[6] = 0;
     390:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <msg+0x6>
    msg.data[7] = 0;
     394:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <msg+0x7>
    msg.crc = message_crc(&msg);
     398:	84 e2       	ldi	r24, 0x24	; 36
     39a:	91 e0       	ldi	r25, 0x01	; 1
     39c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <message_crc>
     3a0:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <msg+0xb>
     3a4:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <msg+0xa>
    
    // find out current color
    find_kilo_color();
     3a8:	0e 94 81 01 	call	0x302	; 0x302 <find_kilo_color>

    // find current order in the kilo_list
    find_current_location();
     3ac:	0e 94 e7 00 	call	0x1ce	; 0x1ce <find_current_location>

    
    if(current_leap_location == -1) // if our ID is not in the list of expected IDs
     3b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     3b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	59 f4       	brne	.+22     	; 0x3d2 <setup+0x80>
    {
        while(1) // loop forever, and tell the user by flashing white
        {   
            set_color(RGB(1,1,1));
     3bc:	85 e1       	ldi	r24, 0x15	; 21
     3be:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
            delay(200);
     3c2:	88 ec       	ldi	r24, 0xC8	; 200
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
            set_color(RGB(0,0,0));
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
     3d0:	f5 cf       	rjmp	.-22     	; 0x3bc <setup+0x6a>
        }
    }

    // find our neighbors
    find_neighbors();
     3d2:	0e 94 05 01 	call	0x20a	; 0x20a <find_neighbors>

    // start counter-clockwise 
    current_direction = COUNTER_CLOCKWISE;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <current_direction>

    // starting state for all nodes
    current_leap_state = LEAP_NORMAL;
     3dc:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <current_leap_state>
     3e0:	08 95       	ret

000003e2 <loop>:
}

// now loop
void loop() {
     3e2:	cf 93       	push	r28
    if (cur_distance == 0) // skip state machine if no distance measurement available
     3e4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <cur_distance>
     3e8:	88 23       	and	r24, r24
     3ea:	09 f4       	brne	.+2      	; 0x3ee <loop+0xc>
     3ec:	9d c0       	rjmp	.+314    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
    {
        return;
    }
    else if(neighbor1_cur_dist == 0 || neighbor2_cur_dist == 0) // skip state machine if we have not yet received distances from our neighbors
     3ee:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <neighbor1_cur_dist>
     3f2:	88 23       	and	r24, r24
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <loop+0x16>
     3f6:	98 c0       	rjmp	.+304    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     3f8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <neighbor2_cur_dist>
     3fc:	88 23       	and	r24, r24
     3fe:	09 f4       	brne	.+2      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     400:	93 c0       	rjmp	.+294    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
    {
        return;
    }
    if(new_message == 1) // if we got a new message, turn off our LED to indicate that we've received it
     402:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <new_message>
     406:	81 30       	cpi	r24, 0x01	; 1
     408:	29 f4       	brne	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
    {
        new_message = 0;
     40a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <new_message>
        set_color(RGB(0,0,0));
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
    }

    // If we're at the end of the order, move to the front
    if(current_leap_location == (num_kilobots-1))
     414:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <num_kilobots>
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     420:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     424:	82 17       	cp	r24, r18
     426:	93 07       	cpc	r25, r19
     428:	09 f0       	breq	.+2      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     42a:	7a c0       	rjmp	.+244    	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
    {
        // do travelling state machine
        if(current_leap_state == LEAP_NORMAL)
     42c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current_leap_state>
     430:	81 11       	cpse	r24, r1
     432:	27 c0       	rjmp	.+78     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
        {
            if(neighbor1_cur_dist <= neighbor2_cur_dist) // check if we're closer to neighbor 1 than neighbor 2
     434:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <neighbor1_cur_dist>
     438:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <neighbor2_cur_dist>
     43c:	89 17       	cp	r24, r25
     43e:	08 f1       	brcs	.+66     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
            {
                // if we are, and neighbor 1 is at the front, switch states
                if((neighbor1_cur_leap_location-1) < 0)
     440:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <neighbor1_cur_leap_location>
     444:	28 2f       	mov	r18, r24
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	21 15       	cp	r18, r1
     44a:	31 05       	cpc	r19, r1
     44c:	31 f4       	brne	.+12     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
                {
                    current_leap_state = LEAP_SHIFT;
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <current_leap_state>
                    orbit_distance = neighbor1_cur_dist;
     454:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <orbit_distance>
     458:	14 c0       	rjmp	.+40     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
                }
                // if we are, but neighbor 1 is not at the front, switch our neighbors and continue traveling up the line
                else
                {
                    neighbor2_kilo_id = neighbor1_kilo_id;
     45a:	40 91 35 01 	lds	r20, 0x0135	; 0x800135 <neighbor1_kilo_id>
     45e:	40 93 20 01 	sts	0x0120, r20	; 0x800120 <neighbor2_kilo_id>
                    neighbor2_cur_leap_location = neighbor1_cur_leap_location;
     462:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <neighbor2_cur_leap_location>
                    neighbor2_cur_dist = neighbor1_cur_dist;
     466:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <neighbor2_cur_dist>

                    neighbor1_kilo_id = kilo_leap_order[neighbor1_cur_leap_location-1];
     46a:	f9 01       	movw	r30, r18
     46c:	ee 5f       	subi	r30, 0xFE	; 254
     46e:	fe 4f       	sbci	r31, 0xFE	; 254
     470:	90 81       	ld	r25, Z
     472:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <neighbor1_kilo_id>
                    neighbor1_cur_leap_location = neighbor1_cur_leap_location - 1;
     476:	81 50       	subi	r24, 0x01	; 1
     478:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <neighbor1_cur_leap_location>
                    neighbor1_cur_dist = 100; // set it to max before we receive a message
     47c:	84 e6       	ldi	r24, 0x64	; 100
     47e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <neighbor1_cur_dist>
                }
            }
        }

        // LEAP-STATE STATE MACHINE
        switch(current_leap_state)
     482:	c0 91 34 01 	lds	r28, 0x0134	; 0x800134 <current_leap_state>
     486:	c1 30       	cpi	r28, 0x01	; 1
     488:	21 f0       	breq	.+8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     48a:	b8 f0       	brcs	.+46     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     48c:	c2 30       	cpi	r28, 0x02	; 2
     48e:	09 f1       	breq	.+66     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     490:	4b c0       	rjmp	.+150    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
                }
                break;
            // If we are in the shifting phase, set our color to white and start 
            // computing the angle to figure out when we're on the other side of the front node
            case LEAP_SHIFT:
                set_color(RGB(1,1,1)); // set the color to indicate the state switch
     492:	85 e1       	ldi	r24, 0x15	; 21
     494:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
                // start computing the angle, and if we are smaller than a certain amount (close to 0), switch states
                // if(compute_SSS() < 1e-6)
                // {
                //     current_leap_state = LEAP_FRONT;
                // }
                if(neighbor2_cur_dist >= (neighbor1_cur_dist + dist_for_SSS+7))
     498:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <neighbor1_cur_dist>
     49c:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <dist_for_SSS>
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	82 0f       	add	r24, r18
     4a4:	91 1d       	adc	r25, r1
     4a6:	06 96       	adiw	r24, 0x06	; 6
     4a8:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <neighbor2_cur_dist>
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	82 17       	cp	r24, r18
     4b0:	93 07       	cpc	r25, r19
     4b2:	1c f4       	brge	.+6      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
                {
                    current_leap_state = LEAP_FRONT;
     4b4:	82 e0       	ldi	r24, 0x02	; 2
     4b6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <current_leap_state>
                }
            

                // Orbit state machine
                switch(orbit_state) 
     4ba:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <orbit_state>
     4be:	88 23       	and	r24, r24
     4c0:	29 f0       	breq	.+10     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
     4c2:	81 30       	cpi	r24, 0x01	; 1
     4c4:	89 f5       	brne	.+98     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
    else
    {
        set_motion(STOP);
    }
                                                                                                                                                                                                               
}
     4c6:	cf 91       	pop	r28

                // Orbit state machine
                switch(orbit_state) 
                {
                    case ORBIT_NORMAL:
                        orbit_normal();
     4c8:	0c 94 c1 00 	jmp	0x182	; 0x182 <orbit_normal>
    else
    {
        set_motion(STOP);
    }
                                                                                                                                                                                                               
}
     4cc:	cf 91       	pop	r28
                {
                    case ORBIT_NORMAL:
                        orbit_normal();
                        break;
                    case ORBIT_TOOCLOSE:
                        orbit_tooclose();
     4ce:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <orbit_tooclose>
                break;

            // If we've made it to the front, do some shutdown procedures
            case LEAP_FRONT:
                // Turn off our LED to indicate we've made it to the front
                set_color(RGB(0,0,0));
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>

                // Set motion to STOP
                set_motion(STOP);
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	0e 94 9c 00 	call	0x138	; 0x138 <set_motion>

                // Shift our local kilo_order list to account for us reaching the front
                shift_locations();
     4de:	0e 94 3d 01 	call	0x27a	; 0x27a <shift_locations>
                find_neighbors(); // Find our new neighbors 
     4e2:	0e 94 05 01 	call	0x20a	; 0x20a <find_neighbors>
                
                // set a 1 second delay just cause
                delay(1000);
     4e6:	88 ee       	ldi	r24, 0xE8	; 232
     4e8:	93 e0       	ldi	r25, 0x03	; 3
     4ea:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>

                // Update our leap count so that we can inform the network we've leaped successfully
                current_leap_count = (current_leap_count + 1) % 254;
     4ee:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <current_leap_count>
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	6e ef       	ldi	r22, 0xFE	; 254
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	0e 94 31 0b 	call	0x1662	; 0x1662 <__divmodhi4>
     4fe:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <current_leap_count>

                // Find our color
                find_kilo_color();
     502:	0e 94 81 01 	call	0x302	; 0x302 <find_kilo_color>
                
                // Switch orbit directions now that we're facing the opposite way
                switch(current_direction)
     506:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <current_direction>
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	31 f0       	breq	.+12     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     50e:	82 30       	cpi	r24, 0x02	; 2
     510:	59 f4       	brne	.+22     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
                {
                    case CLOCKWISE:
                        current_direction = COUNTER_CLOCKWISE;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <current_direction>
     518:	07 c0       	rjmp	.+14     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
                        break;
                    case COUNTER_CLOCKWISE:
                        current_direction = CLOCKWISE;
     51a:	c0 93 22 01 	sts	0x0122, r28	; 0x800122 <current_direction>
     51e:	04 c0       	rjmp	.+8      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
        }
    }
    // If we're not at the very end of the line, just stop
    else
    {
        set_motion(STOP);
     520:	80 e0       	ldi	r24, 0x00	; 0
    }
                                                                                                                                                                                                               
}
     522:	cf 91       	pop	r28
        }
    }
    // If we're not at the very end of the line, just stop
    else
    {
        set_motion(STOP);
     524:	0c 94 9c 00 	jmp	0x138	; 0x138 <set_motion>
    }
                                                                                                                                                                                                               
}
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <message_rx>:
    msg.crc = message_crc(&msg);

    return &msg;
}

void message_rx(message_t *m, distance_measurement_t *d) {
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	ec 01       	movw	r28, r24
    new_message = 1; // indicate we've received a new message
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <new_message>
    dist = *d; // get the distance from our sender
     538:	fb 01       	movw	r30, r22
     53a:	80 81       	ld	r24, Z
     53c:	91 81       	ldd	r25, Z+1	; 0x01
     53e:	a2 81       	ldd	r26, Z+2	; 0x02
     540:	b3 81       	ldd	r27, Z+3	; 0x03
     542:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <dist>
     546:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <dist+0x1>
     54a:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <dist+0x2>
     54e:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <dist+0x3>
    rx_kilo_id = m->data[0]; // get the received kilo_uid
     552:	88 81       	ld	r24, Y
     554:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rx_kilo_id>
    neighbor_current_leap_count = m->data[1]; // get the leap_count from our neighbor
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>

    // estimate the current distance
    cur_distance = estimate_distance(&dist);
     55e:	80 e3       	ldi	r24, 0x30	; 48
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 4c 05 	call	0xa98	; 0xa98 <estimate_distance>
     566:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <cur_distance>

    if(cur_distance == 0) return; // skip below if the cur_distance is 0
     56a:	88 23       	and	r24, r24
     56c:	89 f1       	breq	.+98     	; 0x5d0 <message_rx+0xa4>

    // map the distance to the correct node
    if(rx_kilo_id == neighbor1_kilo_id)
     56e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <rx_kilo_id>
     572:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <neighbor1_kilo_id>
     576:	92 13       	cpse	r25, r18
     578:	03 c0       	rjmp	.+6      	; 0x580 <message_rx+0x54>
    {
        neighbor1_cur_dist = cur_distance;
     57a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <neighbor1_cur_dist>
     57e:	09 c0       	rjmp	.+18     	; 0x592 <message_rx+0x66>
    }
    else if(rx_kilo_id == neighbor2_kilo_id)
     580:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <neighbor2_kilo_id>
     584:	92 13       	cpse	r25, r18
     586:	05 c0       	rjmp	.+10     	; 0x592 <message_rx+0x66>
    {
        neighbor2_cur_dist = cur_distance;
     588:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <neighbor2_cur_dist>
        // distance from n1-n2
        dist_for_SSS = m->data[2]; // (ONLY MEANINGFUL WHEN AT THE END OF THE LINE)
     58c:	8a 81       	ldd	r24, Y+2	; 0x02
     58e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <dist_for_SSS>
    }

    // If we've gotten a message, flash our color
    find_kilo_color();
     592:	0e 94 81 01 	call	0x302	; 0x302 <find_kilo_color>

    // Check what leap state we are in, and set the node that we're focusing on
    switch(current_leap_state)
     596:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <current_leap_state>
     59a:	88 23       	and	r24, r24
     59c:	29 f0       	breq	.+10     	; 0x5a8 <message_rx+0x7c>
     59e:	81 30       	cpi	r24, 0x01	; 1
     5a0:	39 f4       	brne	.+14     	; 0x5b0 <message_rx+0x84>
            // our node of focuse should be the one right next to us
            orbit_distance = neighbor2_cur_dist;
            break;
        case LEAP_SHIFT:
            // if we're maneuvering to the front, our node of focus is n1
            orbit_distance = neighbor1_cur_dist;
     5a2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <neighbor1_cur_dist>
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <message_rx+0x80>
    // Check what leap state we are in, and set the node that we're focusing on
    switch(current_leap_state)
    {
        case LEAP_NORMAL:
            // our node of focuse should be the one right next to us
            orbit_distance = neighbor2_cur_dist;
     5a8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <neighbor2_cur_dist>
            break;
        case LEAP_SHIFT:
            // if we're maneuvering to the front, our node of focus is n1
            orbit_distance = neighbor1_cur_dist;
     5ac:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <orbit_distance>
            break;
    }

    // If we received a leap count from a neighbor that's greater than ours, that means someone made it
    // and we need to update our local status
    if(current_leap_count < neighbor_current_leap_count)
     5b0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
     5b4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current_leap_count>
     5b8:	98 17       	cp	r25, r24
     5ba:	50 f4       	brcc	.+20     	; 0x5d0 <message_rx+0xa4>
    {
        // set it equal so we don't cause a cascading effect and don't check this again
        current_leap_count = neighbor_current_leap_count;
     5bc:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <current_leap_count>
        
        // set our leap state to normal incase we are next to move
        current_leap_state = LEAP_NORMAL;
     5c0:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <current_leap_state>
        shift_locations(); // update our local understanding of the current order
     5c4:	0e 94 3d 01 	call	0x27a	; 0x27a <shift_locations>
        find_neighbors(); // find our new neighbors
        return;
    }
}
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
        current_leap_count = neighbor_current_leap_count;
        
        // set our leap state to normal incase we are next to move
        current_leap_state = LEAP_NORMAL;
        shift_locations(); // update our local understanding of the current order
        find_neighbors(); // find our new neighbors
     5cc:	0c 94 05 01 	jmp	0x20a	; 0x20a <find_neighbors>
        return;
    }
}
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <compute_SSS>:
    }
}

// compute the angle B given, sides a, b, c
float compute_SSS()
{
     5d6:	4f 92       	push	r4
     5d8:	5f 92       	push	r5
     5da:	6f 92       	push	r6
     5dc:	7f 92       	push	r7
     5de:	8f 92       	push	r8
     5e0:	9f 92       	push	r9
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <compute_SSS+0x1e>
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <compute_SSS+0x20>
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
    // Assuming B is the angle we are looking for
    float a = (float) neighbor2_cur_dist;
     5fa:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <neighbor2_cur_dist>
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatunsisf>
     608:	6b 01       	movw	r12, r22
     60a:	7c 01       	movw	r14, r24
    float b = (float) neighbor1_cur_dist;
     60c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <neighbor1_cur_dist>
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatunsisf>
     61a:	4b 01       	movw	r8, r22
     61c:	5c 01       	movw	r10, r24
    float c = (float) dist_for_SSS;
     61e:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <dist_for_SSS>
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatunsisf>
     62c:	69 83       	std	Y+1, r22	; 0x01
     62e:	7a 83       	std	Y+2, r23	; 0x02
     630:	8b 83       	std	Y+3, r24	; 0x03
     632:	9c 83       	std	Y+4, r25	; 0x04
    return( acos( ((c*c) + (a*a) - (b*b)) / (2*a*c) ) );
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     63c:	2b 01       	movw	r4, r22
     63e:	3c 01       	movw	r6, r24
     640:	a7 01       	movw	r20, r14
     642:	96 01       	movw	r18, r12
     644:	c7 01       	movw	r24, r14
     646:	b6 01       	movw	r22, r12
     648:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     64c:	9b 01       	movw	r18, r22
     64e:	ac 01       	movw	r20, r24
     650:	c3 01       	movw	r24, r6
     652:	b2 01       	movw	r22, r4
     654:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
     658:	2b 01       	movw	r4, r22
     65a:	3c 01       	movw	r6, r24
     65c:	a5 01       	movw	r20, r10
     65e:	94 01       	movw	r18, r8
     660:	c5 01       	movw	r24, r10
     662:	b4 01       	movw	r22, r8
     664:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     668:	9b 01       	movw	r18, r22
     66a:	ac 01       	movw	r20, r24
     66c:	c3 01       	movw	r24, r6
     66e:	b2 01       	movw	r22, r4
     670:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__subsf3>
     674:	4b 01       	movw	r8, r22
     676:	5c 01       	movw	r10, r24
     678:	a7 01       	movw	r20, r14
     67a:	96 01       	movw	r18, r12
     67c:	c7 01       	movw	r24, r14
     67e:	b6 01       	movw	r22, r12
     680:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
     684:	29 81       	ldd	r18, Y+1	; 0x01
     686:	3a 81       	ldd	r19, Y+2	; 0x02
     688:	4b 81       	ldd	r20, Y+3	; 0x03
     68a:	5c 81       	ldd	r21, Y+4	; 0x04
     68c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     690:	9b 01       	movw	r18, r22
     692:	ac 01       	movw	r20, r24
     694:	c5 01       	movw	r24, r10
     696:	b4 01       	movw	r22, r8
     698:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__divsf3>
}
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	df 90       	pop	r13
     6ae:	cf 90       	pop	r12
     6b0:	bf 90       	pop	r11
     6b2:	af 90       	pop	r10
     6b4:	9f 90       	pop	r9
     6b6:	8f 90       	pop	r8
     6b8:	7f 90       	pop	r7
     6ba:	6f 90       	pop	r6
     6bc:	5f 90       	pop	r5
     6be:	4f 90       	pop	r4
{
    // Assuming B is the angle we are looking for
    float a = (float) neighbor2_cur_dist;
    float b = (float) neighbor1_cur_dist;
    float c = (float) dist_for_SSS;
    return( acos( ((c*c) + (a*a) - (b*b)) / (2*a*c) ) );
     6c0:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <acos>

000006c4 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     6c4:	08 95       	ret

000006c6 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	08 95       	ret

000006cc <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     6cc:	08 95       	ret

000006ce <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     6ce:	df 92       	push	r13
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
    cli();
     6dc:	f8 94       	cli

    ports_off();
     6de:	14 b8       	out	0x04, r1	; 4
     6e0:	17 b8       	out	0x07, r1	; 7
     6e2:	1a b8       	out	0x0a, r1	; 10
     6e4:	15 b8       	out	0x05, r1	; 5
     6e6:	18 b8       	out	0x08, r1	; 8
     6e8:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     6ea:	52 9a       	sbi	0x0a, 2	; 10
     6ec:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     6ee:	14 bc       	out	0x24, r1	; 36
     6f0:	85 e0       	ldi	r24, 0x05	; 5
     6f2:	85 bd       	out	0x25, r24	; 37
     6f4:	8f ef       	ldi	r24, 0xFF	; 255
     6f6:	87 bd       	out	0x27, r24	; 39
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     6fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     702:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     706:	2f e8       	ldi	r18, 0x8F	; 143
     708:	3b e0       	ldi	r19, 0x0B	; 11
     70a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     70e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     712:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     716:	53 98       	cbi	0x0a, 3	; 10
     718:	23 98       	cbi	0x04, 3	; 4
     71a:	91 ea       	ldi	r25, 0xA1	; 161
     71c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     720:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     724:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     728:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     72c:	8b e0       	ldi	r24, 0x0B	; 11
     72e:	80 bf       	out	0x30, r24	; 48
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     736:	86 e0       	ldi	r24, 0x06	; 6
     738:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     73c:	83 e8       	ldi	r24, 0x83	; 131
     73e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     742:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     746:	80 64       	ori	r24, 0x40	; 64
     748:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     74c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     750:	86 fd       	sbrc	r24, 6
     752:	fc cf       	rjmp	.-8      	; 0x74c <kilo_init+0x7e>
    adc_trigger_high_gain();
     754:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     758:	83 ea       	ldi	r24, 0xA3	; 163
     75a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
    if (osccal != 0xFF)
     76c:	8f 3f       	cpi	r24, 0xFF	; 255
     76e:	11 f0       	breq	.+4      	; 0x774 <kilo_init+0xa6>
        OSCCAL = osccal;
     770:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     774:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <rx_busy>
    rx_leadingbit = 1;
     778:	c1 e0       	ldi	r28, 0x01	; 1
     77a:	c0 93 38 01 	sts	0x0138, r28	; 0x800138 <rx_leadingbit>
    rx_leadingbyte = 1;
     77e:	c0 93 7c 01 	sts	0x017C, r28	; 0x80017c <rx_leadingbyte>
    rx_byteindex = 0;
     782:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_byteindex>
    rx_bytevalue = 0;
     786:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     78a:	80 e9       	ldi	r24, 0x90	; 144
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
     792:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     796:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <tx_mask>
     79a:	88 73       	andi	r24, 0x38	; 56
     79c:	11 f0       	breq	.+4      	; 0x7a2 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     79e:	c0 93 55 01 	sts	0x0155, r28	; 0x800155 <tx_mask>
    tx_clock = 0;
     7a2:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <tx_clock+0x1>
     7a6:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <tx_clock>
    tx_increment = 255;
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <tx_increment+0x1>
     7b2:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <tx_increment>
    kilo_ticks = 0;
     7b6:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <kilo_ticks>
     7ba:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <kilo_ticks+0x1>
     7be:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <kilo_ticks+0x2>
     7c2:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <kilo_ticks+0x3>
    kilo_state = IDLE;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <kilo_state>
    kilo_tx_period = 3906;
     7cc:	82 e4       	ldi	r24, 0x42	; 66
     7ce:	9f e0       	ldi	r25, 0x0F	; 15
     7d0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <kilo_tx_period+0x1>
     7d4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     7d8:	80 eb       	ldi	r24, 0xB0	; 176
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
     7e0:	c8 2f       	mov	r28, r24
     7e2:	81 eb       	ldi	r24, 0xB1	; 177
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
     7ea:	2c 2f       	mov	r18, r28
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	38 2b       	or	r19, r24
     7f0:	30 93 92 01 	sts	0x0192, r19	; 0x800192 <kilo_uid+0x1>
     7f4:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     7f8:	85 e0       	ldi	r24, 0x05	; 5
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
     800:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     804:	89 e0       	ldi	r24, 0x09	; 9
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
     80c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     810:	8c e0       	ldi	r24, 0x0C	; 12
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
     818:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     81c:	84 e1       	ldi	r24, 0x14	; 20
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
     824:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <kilo_straight_right>
     828:	00 e6       	ldi	r16, 0x60	; 96
     82a:	11 e0       	ldi	r17, 0x01	; 1
     82c:	59 e3       	ldi	r21, 0x39	; 57
     82e:	e5 2e       	mov	r14, r21
     830:	51 e0       	ldi	r21, 0x01	; 1
     832:	f5 2e       	mov	r15, r21
     834:	c0 e2       	ldi	r28, 0x20	; 32
     836:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     838:	ce 01       	movw	r24, r28
     83a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
     83e:	d8 2e       	mov	r13, r24
     840:	ce 01       	movw	r24, r28
     842:	01 96       	adiw	r24, 0x01	; 1
     844:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
     848:	2d 2d       	mov	r18, r13
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	32 2f       	mov	r19, r18
     84e:	22 27       	eor	r18, r18
     850:	28 2b       	or	r18, r24
     852:	f8 01       	movw	r30, r16
     854:	21 93       	st	Z+, r18
     856:	31 93       	st	Z+, r19
     858:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     85a:	ce 01       	movw	r24, r28
     85c:	c0 96       	adiw	r24, 0x30	; 48
     85e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
     862:	d8 2e       	mov	r13, r24
     864:	ce 01       	movw	r24, r28
     866:	c1 96       	adiw	r24, 0x31	; 49
     868:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <eeprom_read_byte>
     86c:	2d 2d       	mov	r18, r13
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	32 2f       	mov	r19, r18
     872:	22 27       	eor	r18, r18
     874:	28 2b       	or	r18, r24
     876:	f7 01       	movw	r30, r14
     878:	21 93       	st	Z+, r18
     87a:	31 93       	st	Z+, r19
     87c:	7f 01       	movw	r14, r30
     87e:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     880:	cc 33       	cpi	r28, 0x3C	; 60
     882:	d1 05       	cpc	r29, r1
     884:	c9 f6       	brne	.-78     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     886:	78 94       	sei
}
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	08 95       	ret

00000898 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	8f 93       	push	r24
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	a8 95       	wdr
     8aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     8ae:	88 61       	ori	r24, 0x18	; 24
     8b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     8b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     8b8:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     8ba:	8f 91       	pop	r24
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     8c6:	00 97       	sbiw	r24, 0x00	; 0
     8c8:	41 f0       	breq	.+16     	; 0x8da <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ca:	ef ec       	ldi	r30, 0xCF	; 207
     8cc:	f7 e0       	ldi	r31, 0x07	; 7
     8ce:	31 97       	sbiw	r30, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <delay+0x8>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <delay+0xe>
     8d4:	00 00       	nop
        _delay_ms(1);
        ms--;
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f6 cf       	rjmp	.-20     	; 0x8c6 <delay>
    }
}
     8da:	08 95       	ret

000008dc <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8dc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     8e0:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     8e4:	08 95       	ret

000008e6 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     8ec:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     8f0:	8f e0       	ldi	r24, 0x0F	; 15
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <delay>

000008f8 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     8f8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_busy>
     8fc:	81 11       	cpse	r24, r1
     8fe:	1e c0       	rjmp	.+60     	; 0x93c <__stack+0x3d>
        cli();
     900:	f8 94       	cli
        adc_setup_conversion(7);
     902:	87 e0       	ldi	r24, 0x07	; 7
     904:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     908:	83 e8       	ldi	r24, 0x83	; 131
     90a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     90e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     912:	80 64       	ori	r24, 0x40	; 64
     914:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     918:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     91c:	86 fd       	sbrc	r24, 6
     91e:	fc cf       	rjmp	.-8      	; 0x918 <__stack+0x19>
        light = ADCW;                             // store AD result
     920:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     924:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     928:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     92c:	23 ea       	ldi	r18, 0xA3	; 163
     92e:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     938:	78 94       	sei
     93a:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     940:	08 95       	ret

00000942 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     942:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_busy>
     946:	81 11       	cpse	r24, r1
     948:	1e c0       	rjmp	.+60     	; 0x986 <get_temperature+0x44>
        cli();
     94a:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     94c:	88 ec       	ldi	r24, 0xC8	; 200
     94e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     952:	87 e8       	ldi	r24, 0x87	; 135
     954:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     958:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     95c:	80 64       	ori	r24, 0x40	; 64
     95e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     962:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     966:	86 fd       	sbrc	r24, 6
     968:	fc cf       	rjmp	.-8      	; 0x962 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     96a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     96e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     972:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     976:	23 ea       	ldi	r18, 0xA3	; 163
     978:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     982:	78 94       	sei
     984:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     986:	8f ef       	ldi	r24, 0xFF	; 255
     988:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     98a:	08 95       	ret

0000098c <rand_hard>:

uint8_t rand_hard() {
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     994:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     996:	e3 ea       	ldi	r30, 0xA3	; 163
     998:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     99a:	c6 e0       	ldi	r28, 0x06	; 6
     99c:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     99e:	a1 e0       	ldi	r26, 0x01	; 1
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     9a2:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     9a4:	f8 94       	cli
            adc_setup_conversion(6);
     9a6:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     9aa:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     9ae:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9b2:	40 64       	ori	r20, 0x40	; 64
     9b4:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     9b8:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9bc:	46 fd       	sbrc	r20, 6
     9be:	fc cf       	rjmp	.-8      	; 0x9b8 <rand_hard+0x2c>
            a = ADCW&0x1;
     9c0:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     9c4:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     9c8:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     9ca:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9ce:	50 64       	ori	r21, 0x40	; 64
     9d0:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     9d4:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9d8:	56 fd       	sbrc	r21, 6
     9da:	fc cf       	rjmp	.-8      	; 0x9d4 <rand_hard+0x48>
            b = ADCW&0x1;
     9dc:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     9e0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     9e4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     9e8:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9ec:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     9f0:	78 94       	sei
            tries++;
     9f2:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     9f4:	61 70       	andi	r22, 0x01	; 1
     9f6:	46 17       	cp	r20, r22
     9f8:	51 f0       	breq	.+20     	; 0xa0e <rand_hard+0x82>
        if (a)
     9fa:	44 23       	and	r20, r20
     9fc:	59 f0       	breq	.+22     	; 0xa14 <rand_hard+0x88>
            num |= (1<<i);
     9fe:	ad 01       	movw	r20, r26
     a00:	02 2e       	mov	r0, r18
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <rand_hard+0x7a>
     a04:	44 0f       	add	r20, r20
     a06:	0a 94       	dec	r0
     a08:	ea f7       	brpl	.-6      	; 0xa04 <rand_hard+0x78>
     a0a:	84 2b       	or	r24, r20
     a0c:	03 c0       	rjmp	.+6      	; 0xa14 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     a0e:	90 38       	cpi	r25, 0x80	; 128
     a10:	49 f6       	brne	.-110    	; 0x9a4 <rand_hard+0x18>
     a12:	f3 cf       	rjmp	.-26     	; 0x9fa <rand_hard+0x6e>
     a14:	2f 5f       	subi	r18, 0xFF	; 255
     a16:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     a18:	28 30       	cpi	r18, 0x08	; 8
     a1a:	31 05       	cpc	r19, r1
     a1c:	09 f0       	breq	.+2      	; 0xa20 <rand_hard+0x94>
     a1e:	c1 cf       	rjmp	.-126    	; 0x9a2 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     a26:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <seed>
     a2a:	98 e0       	ldi	r25, 0x08	; 8
     a2c:	89 9f       	mul	r24, r25
     a2e:	90 01       	movw	r18, r0
     a30:	11 24       	eor	r1, r1
     a32:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     a34:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <accumulator>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	89 0f       	add	r24, r25
     a3c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <accumulator>
     a40:	82 2f       	mov	r24, r18
     a42:	82 95       	swap	r24
     a44:	86 95       	lsr	r24
     a46:	87 70       	andi	r24, 0x07	; 7
     a48:	28 27       	eor	r18, r24
     a4a:	96 95       	lsr	r25
     a4c:	96 95       	lsr	r25
     a4e:	82 2f       	mov	r24, r18
     a50:	89 27       	eor	r24, r25
     a52:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <seed>
    return seed;
}
     a56:	08 95       	ret

00000a58 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     a58:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <seed>
     a5c:	08 95       	ret

00000a5e <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     a5e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_busy>
     a62:	81 11       	cpse	r24, r1
     a64:	16 c0       	rjmp	.+44     	; 0xa92 <get_voltage+0x34>
        cli();                                    // disable interrupts
     a66:	f8 94       	cli
        adc_setup_conversion(6);
     a68:	86 e0       	ldi	r24, 0x06	; 6
     a6a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     a6e:	83 e8       	ldi	r24, 0x83	; 131
     a70:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     a74:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a78:	80 64       	ori	r24, 0x40	; 64
     a7a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     a7e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a82:	86 fd       	sbrc	r24, 6
     a84:	fc cf       	rjmp	.-8      	; 0xa7e <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a86:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     a8a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a8e:	78 94       	sei
     a90:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a92:	8f ef       	ldi	r24, 0xFF	; 255
     a94:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a96:	08 95       	ret

00000a98 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a98:	2f 92       	push	r2
     a9a:	3f 92       	push	r3
     a9c:	4f 92       	push	r4
     a9e:	5f 92       	push	r5
     aa0:	6f 92       	push	r6
     aa2:	7f 92       	push	r7
     aa4:	8f 92       	push	r8
     aa6:	9f 92       	push	r9
     aa8:	af 92       	push	r10
     aaa:	bf 92       	push	r11
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     abe:	fc 01       	movw	r30, r24
     ac0:	c2 81       	ldd	r28, Z+2	; 0x02
     ac2:	d3 81       	ldd	r29, Z+3	; 0x03
     ac4:	c4 38       	cpi	r28, 0x84	; 132
     ac6:	f3 e0       	ldi	r31, 0x03	; 3
     ac8:	df 07       	cpc	r29, r31
     aca:	0c f0       	brlt	.+2      	; 0xace <estimate_distance+0x36>
     acc:	7e c0       	rjmp	.+252    	; 0xbca <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     ace:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <kilo_irhigh>
     ad2:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <kilo_irhigh+0x1>
     ad6:	8c 17       	cp	r24, r28
     ad8:	9d 07       	cpc	r25, r29
     ada:	08 f4       	brcc	.+2      	; 0xade <estimate_distance+0x46>
     adc:	6f c0       	rjmp	.+222    	; 0xbbc <estimate_distance+0x124>
     ade:	eb e3       	ldi	r30, 0x3B	; 59
     ae0:	f1 e0       	ldi	r31, 0x01	; 1
     ae2:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     ae4:	81 91       	ld	r24, Z+
     ae6:	91 91       	ld	r25, Z+
     ae8:	8c 17       	cp	r24, r28
     aea:	9d 07       	cpc	r25, r29
     aec:	20 f0       	brcs	.+8      	; 0xaf6 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     aee:	1f 5f       	subi	r17, 0xFF	; 255
     af0:	1e 30       	cpi	r17, 0x0E	; 14
     af2:	c1 f7       	brne	.-16     	; 0xae4 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     af4:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     af6:	81 2f       	mov	r24, r17
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	fc 01       	movw	r30, r24
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	e7 5c       	subi	r30, 0xC7	; 199
     b02:	fe 4f       	sbci	r31, 0xFE	; 254
     b04:	e0 80       	ld	r14, Z
     b06:	f1 80       	ldd	r15, Z+1	; 0x01
     b08:	88 0f       	add	r24, r24
     b0a:	99 1f       	adc	r25, r25
     b0c:	fc 01       	movw	r30, r24
     b0e:	e9 5c       	subi	r30, 0xC9	; 201
     b10:	fe 4f       	sbci	r31, 0xFE	; 254
     b12:	80 81       	ld	r24, Z
     b14:	91 81       	ldd	r25, Z+1	; 0x01
     b16:	b7 01       	movw	r22, r14
     b18:	68 1b       	sub	r22, r24
     b1a:	79 0b       	sbc	r23, r25
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatunsisf>
     b24:	9b 01       	movw	r18, r22
     b26:	ac 01       	movw	r20, r24
     b28:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
     b2c:	4b 01       	movw	r8, r22
     b2e:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     b30:	be 01       	movw	r22, r28
     b32:	0d 2e       	mov	r0, r29
     b34:	00 0c       	add	r0, r0
     b36:	88 0b       	sbc	r24, r24
     b38:	99 0b       	sbc	r25, r25
     b3a:	0e 94 96 0c 	call	0x192c	; 0x192c <__floatsisf>
     b3e:	2b 01       	movw	r4, r22
     b40:	3c 01       	movw	r6, r24
     b42:	b7 01       	movw	r22, r14
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatunsisf>
     b4c:	6b 01       	movw	r12, r22
     b4e:	7c 01       	movw	r14, r24
     b50:	61 2f       	mov	r22, r17
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatunsisf>
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	5f e3       	ldi	r21, 0x3F	; 63
     b64:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	a9 01       	movw	r20, r18
     b6e:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
     b72:	a5 01       	movw	r20, r10
     b74:	94 01       	movw	r18, r8
     b76:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     b7a:	9b 01       	movw	r18, r22
     b7c:	ac 01       	movw	r20, r24
     b7e:	c7 01       	movw	r24, r14
     b80:	b6 01       	movw	r22, r12
     b82:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__subsf3>
     b86:	9b 01       	movw	r18, r22
     b88:	ac 01       	movw	r20, r24
     b8a:	c3 01       	movw	r24, r6
     b8c:	b2 01       	movw	r22, r4
     b8e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	40 e2       	ldi	r20, 0x20	; 32
     b98:	51 e4       	ldi	r21, 0x41	; 65
     b9a:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     b9e:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__fixsfsi>
     ba2:	7b 01       	movw	r14, r22
     ba4:	c5 01       	movw	r24, r10
     ba6:	b4 01       	movw	r22, r8
     ba8:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__fixsfsi>
     bac:	ab 01       	movw	r20, r22
     bae:	bc 01       	movw	r22, r24
     bb0:	c7 01       	movw	r24, r14
     bb2:	ba 01       	movw	r22, r20
     bb4:	0e 94 31 0b 	call	0x1662	; 0x1662 <__divmodhi4>
     bb8:	16 2f       	mov	r17, r22
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     bbc:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     bbe:	cd 3b       	cpi	r28, 0xBD	; 189
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	d8 07       	cpc	r29, r24
     bc4:	0c f4       	brge	.+2      	; 0xbc8 <estimate_distance+0x130>
     bc6:	ca c0       	rjmp	.+404    	; 0xd5c <estimate_distance+0x2c4>
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     bca:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     bcc:	f1 01       	movw	r30, r2
     bce:	c0 80       	ld	r12, Z
     bd0:	d1 80       	ldd	r13, Z+1	; 0x01
     bd2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <kilo_irlow>
     bd6:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <kilo_irlow+0x1>
     bda:	8c 15       	cp	r24, r12
     bdc:	9d 05       	cpc	r25, r13
     bde:	88 f0       	brcs	.+34     	; 0xc02 <estimate_distance+0x16a>
     be0:	e2 e6       	ldi	r30, 0x62	; 98
     be2:	f1 e0       	ldi	r31, 0x01	; 1
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     bea:	e1 90       	ld	r14, Z+
     bec:	f1 90       	ld	r15, Z+
     bee:	ec 14       	cp	r14, r12
     bf0:	fd 04       	cpc	r15, r13
     bf2:	08 f4       	brcc	.+2      	; 0xbf6 <estimate_distance+0x15e>
     bf4:	58 c0       	rjmp	.+176    	; 0xca6 <estimate_distance+0x20e>
     bf6:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     bf8:	8e 30       	cpi	r24, 0x0E	; 14
     bfa:	91 05       	cpc	r25, r1
     bfc:	a9 f7       	brne	.-22     	; 0xbe8 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     bfe:	0a e5       	ldi	r16, 0x5A	; 90
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     c02:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     c04:	1f 3f       	cpi	r17, 0xFF	; 255
     c06:	09 f4       	brne	.+2      	; 0xc0a <estimate_distance+0x172>
     c08:	4b c0       	rjmp	.+150    	; 0xca0 <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     c0a:	be 01       	movw	r22, r28
     c0c:	dd 0f       	add	r29, r29
     c0e:	88 0b       	sbc	r24, r24
     c10:	99 0b       	sbc	r25, r25
     c12:	0e 94 96 0c 	call	0x192c	; 0x192c <__floatsisf>
     c16:	6b 01       	movw	r12, r22
     c18:	7c 01       	movw	r14, r24
     c1a:	61 2f       	mov	r22, r17
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatunsisf>
     c26:	4b 01       	movw	r8, r22
     c28:	5c 01       	movw	r10, r24
     c2a:	a7 01       	movw	r20, r14
     c2c:	96 01       	movw	r18, r12
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	81 e6       	ldi	r24, 0x61	; 97
     c34:	94 e4       	ldi	r25, 0x44	; 68
     c36:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__subsf3>
     c3a:	9b 01       	movw	r18, r22
     c3c:	ac 01       	movw	r20, r24
     c3e:	c5 01       	movw	r24, r10
     c40:	b4 01       	movw	r22, r8
     c42:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     c46:	4b 01       	movw	r8, r22
     c48:	5c 01       	movw	r10, r24
     c4a:	60 2f       	mov	r22, r16
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatunsisf>
     c56:	2b 01       	movw	r4, r22
     c58:	3c 01       	movw	r6, r24
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	4f e2       	ldi	r20, 0x2F	; 47
     c60:	54 e4       	ldi	r21, 0x44	; 68
     c62:	c7 01       	movw	r24, r14
     c64:	b6 01       	movw	r22, r12
     c66:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__subsf3>
     c6a:	9b 01       	movw	r18, r22
     c6c:	ac 01       	movw	r20, r24
     c6e:	c3 01       	movw	r24, r6
     c70:	b2 01       	movw	r22, r4
     c72:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     c76:	9b 01       	movw	r18, r22
     c78:	ac 01       	movw	r20, r24
     c7a:	c5 01       	movw	r24, r10
     c7c:	b4 01       	movw	r22, r8
     c7e:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	48 e4       	ldi	r20, 0x48	; 72
     c88:	53 e4       	ldi	r21, 0x43	; 67
     c8a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <__divsf3>
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	44 e0       	ldi	r20, 0x04	; 4
     c94:	52 e4       	ldi	r21, 0x42	; 66
     c96:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
     c9a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
     c9e:	60 c0       	rjmp	.+192    	; 0xd60 <estimate_distance+0x2c8>
        } else {
            return 33 + dist_low;
     ca0:	61 e2       	ldi	r22, 0x21	; 33
     ca2:	60 0f       	add	r22, r16
     ca4:	5d c0       	rjmp	.+186    	; 0xd60 <estimate_distance+0x2c8>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	fc 01       	movw	r30, r24
     cac:	e2 5a       	subi	r30, 0xA2	; 162
     cae:	fe 4f       	sbci	r31, 0xFE	; 254
     cb0:	80 81       	ld	r24, Z
     cb2:	91 81       	ldd	r25, Z+1	; 0x01
     cb4:	b7 01       	movw	r22, r14
     cb6:	68 1b       	sub	r22, r24
     cb8:	79 0b       	sbc	r23, r25
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatunsisf>
     cc2:	9b 01       	movw	r18, r22
     cc4:	ac 01       	movw	r20, r24
     cc6:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
     cca:	4b 01       	movw	r8, r22
     ccc:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     cce:	b6 01       	movw	r22, r12
     cd0:	dd 0c       	add	r13, r13
     cd2:	88 0b       	sbc	r24, r24
     cd4:	99 0b       	sbc	r25, r25
     cd6:	0e 94 96 0c 	call	0x192c	; 0x192c <__floatsisf>
     cda:	2b 01       	movw	r4, r22
     cdc:	3c 01       	movw	r6, r24
     cde:	b7 01       	movw	r22, r14
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatunsisf>
     ce8:	6b 01       	movw	r12, r22
     cea:	7c 01       	movw	r14, r24
     cec:	63 2d       	mov	r22, r3
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 94 0c 	call	0x1928	; 0x1928 <__floatunsisf>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	5f e3       	ldi	r21, 0x3F	; 63
     d00:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	a9 01       	movw	r20, r18
     d0a:	0e 94 80 0b 	call	0x1700	; 0x1700 <__addsf3>
     d0e:	a5 01       	movw	r20, r10
     d10:	94 01       	movw	r18, r8
     d12:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     d16:	9b 01       	movw	r18, r22
     d18:	ac 01       	movw	r20, r24
     d1a:	c7 01       	movw	r24, r14
     d1c:	b6 01       	movw	r22, r12
     d1e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__subsf3>
     d22:	9b 01       	movw	r18, r22
     d24:	ac 01       	movw	r20, r24
     d26:	c3 01       	movw	r24, r6
     d28:	b2 01       	movw	r22, r4
     d2a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e2       	ldi	r20, 0x20	; 32
     d34:	51 e4       	ldi	r21, 0x41	; 65
     d36:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__mulsf3>
     d3a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__fixsfsi>
     d3e:	7b 01       	movw	r14, r22
     d40:	c5 01       	movw	r24, r10
     d42:	b4 01       	movw	r22, r8
     d44:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__fixsfsi>
     d48:	ab 01       	movw	r20, r22
     d4a:	bc 01       	movw	r22, r24
     d4c:	c7 01       	movw	r24, r14
     d4e:	ba 01       	movw	r22, r20
     d50:	0e 94 31 0b 	call	0x1662	; 0x1662 <__divmodhi4>
     d54:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     d56:	6f 3f       	cpi	r22, 0xFF	; 255
     d58:	09 f0       	breq	.+2      	; 0xd5c <estimate_distance+0x2c4>
     d5a:	54 cf       	rjmp	.-344    	; 0xc04 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     d5c:	61 e2       	ldi	r22, 0x21	; 33
     d5e:	61 0f       	add	r22, r17
    }
}
     d60:	86 2f       	mov	r24, r22
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	df 90       	pop	r13
     d70:	cf 90       	pop	r12
     d72:	bf 90       	pop	r11
     d74:	af 90       	pop	r10
     d76:	9f 90       	pop	r9
     d78:	8f 90       	pop	r8
     d7a:	7f 90       	pop	r7
     d7c:	6f 90       	pop	r6
     d7e:	5f 90       	pop	r5
     d80:	4f 90       	pop	r4
     d82:	3f 90       	pop	r3
     d84:	2f 90       	pop	r2
     d86:	08 95       	ret

00000d88 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d88:	1f 92       	push	r1
     d8a:	0f 92       	push	r0
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	2f 93       	push	r18
     d94:	3f 93       	push	r19
     d96:	4f 93       	push	r20
     d98:	5f 93       	push	r21
     d9a:	6f 93       	push	r22
     d9c:	7f 93       	push	r23
     d9e:	8f 93       	push	r24
     da0:	9f 93       	push	r25
     da2:	af 93       	push	r26
     da4:	bf 93       	push	r27
     da6:	ef 93       	push	r30
     da8:	ff 93       	push	r31
    tx_clock += tx_increment;
     daa:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <tx_clock>
     dae:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <tx_clock+0x1>
     db2:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <tx_increment>
     db6:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <tx_increment+0x1>
     dba:	82 0f       	add	r24, r18
     dbc:	93 1f       	adc	r25, r19
     dbe:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <tx_clock+0x1>
     dc2:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <tx_clock>
    tx_increment = 0xFF;
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <tx_increment+0x1>
     dce:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <tx_increment>
    OCR0A = tx_increment;
     dd2:	8f ef       	ldi	r24, 0xFF	; 255
     dd4:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     dd6:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <kilo_ticks>
     dda:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <kilo_ticks+0x1>
     dde:	a0 91 5d 01 	lds	r26, 0x015D	; 0x80015d <kilo_ticks+0x2>
     de2:	b0 91 5e 01 	lds	r27, 0x015E	; 0x80015e <kilo_ticks+0x3>
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	a1 1d       	adc	r26, r1
     dea:	b1 1d       	adc	r27, r1
     dec:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <kilo_ticks>
     df0:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <kilo_ticks+0x1>
     df4:	a0 93 5d 01 	sts	0x015D, r26	; 0x80015d <kilo_ticks+0x2>
     df8:	b0 93 5e 01 	sts	0x015E, r27	; 0x80015e <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     dfc:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_busy>
     e00:	81 11       	cpse	r24, r1
     e02:	2d c0       	rjmp	.+90     	; 0xe5e <__vector_14+0xd6>
     e04:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <kilo_tx_period>
     e08:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <kilo_tx_period+0x1>
     e0c:	20 91 7f 01 	lds	r18, 0x017F	; 0x80017f <tx_clock>
     e10:	30 91 80 01 	lds	r19, 0x0180	; 0x800180 <tx_clock+0x1>
     e14:	82 17       	cp	r24, r18
     e16:	93 07       	cpc	r25, r19
     e18:	10 f5       	brcc	.+68     	; 0xe5e <__vector_14+0xd6>
     e1a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <kilo_state>
     e1e:	84 30       	cpi	r24, 0x04	; 4
     e20:	f1 f4       	brne	.+60     	; 0xe5e <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     e22:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <kilo_message_tx>
     e26:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <kilo_message_tx+0x1>
     e2a:	09 95       	icall
        if (msg) {
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	b9 f0       	breq	.+46     	; 0xe5e <__vector_14+0xd6>
            if (message_send(msg)) {
     e30:	0e 94 97 0a 	call	0x152e	; 0x152e <message_send>
     e34:	88 23       	and	r24, r24
     e36:	51 f0       	breq	.+20     	; 0xe4c <__vector_14+0xc4>
                kilo_message_tx_success();
     e38:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <kilo_message_tx_success>
     e3c:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <kilo_message_tx_success+0x1>
     e40:	09 95       	icall
                tx_clock = 0;
     e42:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <tx_clock+0x1>
     e46:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <tx_clock>
     e4a:	09 c0       	rjmp	.+18     	; 0xe5e <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     e4c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <rand>
     e50:	9c 01       	movw	r18, r24
     e52:	33 27       	eor	r19, r19
     e54:	30 93 7e 01 	sts	0x017E, r19	; 0x80017e <tx_increment+0x1>
     e58:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <tx_increment>
                OCR0A = tx_increment;
     e5c:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e80:	80 ff       	sbrs	r24, 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <set_color+0x8>
        DDRD |= (1<<5);
     e84:	55 9a       	sbi	0x0a, 5	; 10
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     e88:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e8a:	81 ff       	sbrs	r24, 1
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <set_color+0x12>
        DDRD |= (1<<4);
     e8e:	54 9a       	sbi	0x0a, 4	; 10
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     e92:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e94:	82 ff       	sbrs	r24, 2
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <set_color+0x1c>
        DDRC |= (1<<3);
     e98:	3b 9a       	sbi	0x07, 3	; 7
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     e9c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e9e:	83 ff       	sbrs	r24, 3
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <set_color+0x26>
        DDRC |= (1<<2);
     ea2:	3a 9a       	sbi	0x07, 2	; 7
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     ea6:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     ea8:	84 ff       	sbrs	r24, 4
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <set_color+0x30>
        DDRC |= (1<<5);
     eac:	3d 9a       	sbi	0x07, 5	; 7
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     eb0:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     eb2:	85 ff       	sbrs	r24, 5
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <set_color+0x3a>
        DDRC |= (1<<4);
     eb6:	3c 9a       	sbi	0x07, 4	; 7
     eb8:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     eba:	3c 98       	cbi	0x07, 4	; 7
     ebc:	08 95       	ret

00000ebe <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     ebe:	8c 01       	movw	r16, r24
     ec0:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     ec2:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     ec4:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     ec6:	84 e0       	ldi	r24, 0x04	; 4
     ec8:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     eca:	98 e1       	ldi	r25, 0x18	; 24
     ecc:	c9 2e       	mov	r12, r25
     ece:	29 e2       	ldi	r18, 0x29	; 41
     ed0:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     ed2:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <kilo_state>
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	e7 30       	cpi	r30, 0x07	; 7
     eda:	f1 05       	cpc	r31, r1
     edc:	d0 f7       	brcc	.-12     	; 0xed2 <kilo_start+0x14>
     ede:	ec 5c       	subi	r30, 0xCC	; 204
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__tablejump2__>
            case SLEEPING:
                cli();
     ee6:	f8 94       	cli
                acomp_off();
     ee8:	80 b7       	in	r24, 0x30	; 48
     eea:	87 7f       	andi	r24, 0xF7	; 247
     eec:	80 bf       	out	0x30, r24	; 48
                adc_off();
     eee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ef2:	8f 77       	andi	r24, 0x7F	; 127
     ef4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     ef8:	14 b8       	out	0x04, r1	; 4
     efa:	17 b8       	out	0x07, r1	; 7
     efc:	1a b8       	out	0x0a, r1	; 10
     efe:	15 b8       	out	0x05, r1	; 5
     f00:	18 b8       	out	0x08, r1	; 8
     f02:	1b b8       	out	0x0b, r1	; 11
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	a8 95       	wdr
     f0a:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     f14:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     f18:	80 64       	ori	r24, 0x40	; 64
     f1a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     f1e:	83 b7       	in	r24, 0x33	; 51
     f20:	81 7f       	andi	r24, 0xF1	; 241
     f22:	84 60       	ori	r24, 0x04	; 4
     f24:	83 bf       	out	0x33, r24	; 51
                cli();
     f26:	f8 94       	cli
                sleep_enable();
     f28:	83 b7       	in	r24, 0x33	; 51
     f2a:	81 60       	ori	r24, 0x01	; 1
     f2c:	83 bf       	out	0x33, r24	; 51
                sei();
     f2e:	78 94       	sei
                sleep_cpu();
     f30:	88 95       	sleep
                sleep_disable();
     f32:	83 b7       	in	r24, 0x33	; 51
     f34:	8e 7f       	andi	r24, 0xFE	; 254
     f36:	83 bf       	out	0x33, r24	; 51
                sei();
     f38:	78 94       	sei
                rx_busy = 0;
     f3a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <rx_busy>
                ports_on();
     f3e:	52 9a       	sbi	0x0a, 2	; 10
     f40:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     f42:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f46:	80 68       	ori	r24, 0x80	; 128
     f48:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f4c:	87 e5       	ldi	r24, 0x57	; 87
     f4e:	92 e0       	ldi	r25, 0x02	; 2
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <kilo_start+0x92>
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <kilo_start+0x98>
     f56:	00 00       	nop
                _delay_us(300);
                acomp_on();
     f58:	80 b7       	in	r24, 0x30	; 48
     f5a:	88 61       	ori	r24, 0x18	; 24
     f5c:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     f5e:	8f e3       	ldi	r24, 0x3F	; 63
     f60:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f64:	ef e1       	ldi	r30, 0x1F	; 31
     f66:	fe e4       	ldi	r31, 0x4E	; 78
     f68:	31 97       	sbiw	r30, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <kilo_start+0xaa>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <kilo_start+0xb0>
     f6e:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     f70:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_busy>
     f74:	88 23       	and	r24, r24
     f76:	09 f4       	brne	.+2      	; 0xf7a <kilo_start+0xbc>
     f78:	50 c0       	rjmp	.+160    	; 0x101a <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     f7a:	83 e0       	ldi	r24, 0x03	; 3
     f7c:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
     f80:	ff ef       	ldi	r31, 0xFF	; 255
     f82:	20 e7       	ldi	r18, 0x70	; 112
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	f1 50       	subi	r31, 0x01	; 1
     f88:	20 40       	sbci	r18, 0x00	; 0
     f8a:	80 40       	sbci	r24, 0x00	; 0
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <kilo_start+0xc8>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <kilo_start+0xd2>
     f90:	00 00       	nop
     f92:	43 c0       	rjmp	.+134    	; 0x101a <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     f94:	8c e0       	ldi	r24, 0x0C	; 12
     f96:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
     f9a:	ef ec       	ldi	r30, 0xCF	; 207
     f9c:	f7 e0       	ldi	r31, 0x07	; 7
     f9e:	31 97       	sbiw	r30, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <kilo_start+0xe0>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <kilo_start+0xe6>
     fa4:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
     fac:	ff ef       	ldi	r31, 0xFF	; 255
     fae:	21 ee       	ldi	r18, 0xE1	; 225
     fb0:	84 e0       	ldi	r24, 0x04	; 4
     fb2:	f1 50       	subi	r31, 0x01	; 1
     fb4:	20 40       	sbci	r18, 0x00	; 0
     fb6:	80 40       	sbci	r24, 0x00	; 0
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <kilo_start+0xf4>
     fba:	2c c0       	rjmp	.+88     	; 0x1014 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     fbc:	0e 94 2f 05 	call	0xa5e	; 0xa5e <get_voltage>
                if(voltage > 682)
     fc0:	8b 3a       	cpi	r24, 0xAB	; 171
     fc2:	e2 e0       	ldi	r30, 0x02	; 2
     fc4:	9e 07       	cpc	r25, r30
     fc6:	24 f0       	brlt	.+8      	; 0xfd0 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     fc8:	8c e0       	ldi	r24, 0x0C	; 12
     fca:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
     fce:	81 cf       	rjmp	.-254    	; 0xed2 <kilo_start+0x14>
                else if(voltage > 648)
     fd0:	89 38       	cpi	r24, 0x89	; 137
     fd2:	f2 e0       	ldi	r31, 0x02	; 2
     fd4:	9f 07       	cpc	r25, r31
     fd6:	14 f0       	brlt	.+4      	; 0xfdc <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     fd8:	80 e3       	ldi	r24, 0x30	; 48
     fda:	f7 cf       	rjmp	.-18     	; 0xfca <kilo_start+0x10c>
                else if(voltage > 614)
     fdc:	87 36       	cpi	r24, 0x67	; 103
     fde:	92 40       	sbci	r25, 0x02	; 2
     fe0:	14 f0       	brlt	.+4      	; 0xfe6 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     fe2:	8f e0       	ldi	r24, 0x0F	; 15
     fe4:	f2 cf       	rjmp	.-28     	; 0xfca <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	f0 cf       	rjmp	.-32     	; 0xfca <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     fea:	48 99       	sbic	0x09, 0	; 9
     fec:	16 c0       	rjmp	.+44     	; 0x101a <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
     ff4:	8f ec       	ldi	r24, 0xCF	; 207
     ff6:	97 e0       	ldi	r25, 0x07	; 7
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <kilo_start+0x13a>
     ffc:	00 c0       	rjmp	.+0      	; 0xffe <kilo_start+0x140>
     ffe:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
    1006:	9f ef       	ldi	r25, 0xFF	; 255
    1008:	e1 ee       	ldi	r30, 0xE1	; 225
    100a:	f4 e0       	ldi	r31, 0x04	; 4
    100c:	91 50       	subi	r25, 0x01	; 1
    100e:	e0 40       	sbci	r30, 0x00	; 0
    1010:	f0 40       	sbci	r31, 0x00	; 0
    1012:	e1 f7       	brne	.-8      	; 0x100c <kilo_start+0x14e>
    1014:	00 c0       	rjmp	.+0      	; 0x1016 <kilo_start+0x158>
    1016:	00 00       	nop
    1018:	5c cf       	rjmp	.-328    	; 0xed2 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	d6 cf       	rjmp	.-84     	; 0xfca <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
    101e:	d1 11       	cpse	r29, r1
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <kilo_start+0x168>
                    setup();
    1022:	f8 01       	movw	r30, r16
    1024:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
    1026:	d0 92 1f 01 	sts	0x011F, r13	; 0x80011f <kilo_state>
    102a:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
    102c:	f7 01       	movw	r30, r14
    102e:	09 95       	icall
                break;
    1030:	50 cf       	rjmp	.-352    	; 0xed2 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
    1032:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <cur_motion>
    1036:	81 11       	cpse	r24, r1
    1038:	07 c0       	rjmp	.+14     	; 0x1048 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    103a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
    103e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
    1042:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <prev_motion>
    1046:	45 cf       	rjmp	.-374    	; 0xed2 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
    1048:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <cur_motion>
    104c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <prev_motion>
    1050:	98 17       	cp	r25, r24
    1052:	09 f4       	brne	.+2      	; 0x1056 <kilo_start+0x198>
    1054:	3e cf       	rjmp	.-388    	; 0xed2 <kilo_start+0x14>
                        prev_motion = cur_motion;
    1056:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <cur_motion>
    105a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
    105e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <cur_motion>
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	89 f4       	brne	.+34     	; 0x1088 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1066:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
    106a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    106e:	8f e2       	ldi	r24, 0x2F	; 47
    1070:	95 e7       	ldi	r25, 0x75	; 117
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	f1 f7       	brne	.-4      	; 0x1072 <kilo_start+0x1b4>
    1076:	00 c0       	rjmp	.+0      	; 0x1078 <kilo_start+0x1ba>
    1078:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
    107a:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    107e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
    1082:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1086:	25 cf       	rjmp	.-438    	; 0xed2 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
    1088:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    108c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
    1090:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	59 f4       	brne	.+22     	; 0x10ae <kilo_start+0x1f0>
    1098:	ef e2       	ldi	r30, 0x2F	; 47
    109a:	f5 e7       	ldi	r31, 0x75	; 117
    109c:	31 97       	sbiw	r30, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <kilo_start+0x1de>
    10a0:	00 c0       	rjmp	.+0      	; 0x10a2 <kilo_start+0x1e4>
    10a2:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
    10a4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    10a8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    10ac:	10 c0       	rjmp	.+32     	; 0x10ce <kilo_start+0x210>
    10ae:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
    10b2:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10b6:	8f e2       	ldi	r24, 0x2F	; 47
    10b8:	95 e7       	ldi	r25, 0x75	; 117
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <kilo_start+0x1fc>
    10be:	00 c0       	rjmp	.+0      	; 0x10c0 <kilo_start+0x202>
    10c0:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
    10c2:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <kilo_straight_right>
    10c6:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    10ca:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
    10ce:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10d2:	ff ce       	rjmp	.-514    	; 0xed2 <kilo_start+0x14>

000010d4 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    10d4:	1f 92       	push	r1
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    rx_timer_off();
    10e2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    10e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    10ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <rx_leadingbit>
    rx_leadingbyte = 1;
    10f4:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rx_leadingbyte>
    rx_busy = 0;
    10f8:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <rx_busy>
    adc_trigger_high_gain();
    10fc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1100:	93 ea       	ldi	r25, 0xA3	; 163
    1102:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1106:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	0f 90       	pop	r0
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	0f 90       	pop	r0
    1114:	1f 90       	pop	r1
    1116:	18 95       	reti

00001118 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    1118:	1f 92       	push	r1
    111a:	0f 92       	push	r0
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	0f 92       	push	r0
    1120:	11 24       	eor	r1, r1
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	2f 93       	push	r18
    1128:	3f 93       	push	r19
    112a:	4f 93       	push	r20
    112c:	5f 93       	push	r21
    112e:	6f 93       	push	r22
    1130:	7f 93       	push	r23
    1132:	8f 93       	push	r24
    1134:	9f 93       	push	r25
    1136:	af 93       	push	r26
    1138:	bf 93       	push	r27
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    113e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1142:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    114c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rx_leadingbit>
    1150:	88 23       	and	r24, r24
    1152:	21 f1       	breq	.+72     	; 0x119c <__vector_23+0x84>
        rx_timer_on();
    1154:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1158:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    115c:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
    1160:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <rx_bytevalue>
        rx_leadingbit = 0;
    1164:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <rx_leadingbit>
        if (rx_leadingbyte) {
    1168:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rx_leadingbyte>
    116c:	88 23       	and	r24, r24
    116e:	09 f4       	brne	.+2      	; 0x1172 <__vector_23+0x5a>
    1170:	af c1       	rjmp	.+862    	; 0x14d0 <__vector_23+0x3b8>
            adc_finish_conversion();
    1172:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1176:	86 fd       	sbrc	r24, 6
    1178:	fc cf       	rjmp	.-8      	; 0x1172 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
    117a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    117e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1182:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <rx_dist+0x3>
    1186:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <rx_dist+0x2>
            adc_trigger_low_gain();
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1190:	93 ea       	ldi	r25, 0xA3	; 163
    1192:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1196:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
    119a:	9a c1       	rjmp	.+820    	; 0x14d0 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    119c:	c9 01       	movw	r24, r18
    119e:	87 58       	subi	r24, 0x87	; 135
    11a0:	91 09       	sbc	r25, r1
    11a2:	84 37       	cpi	r24, 0x74	; 116
    11a4:	99 40       	sbci	r25, 0x09	; 9
    11a6:	a0 f0       	brcs	.+40     	; 0x11d0 <__vector_23+0xb8>
            rx_timer_off();
    11a8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    11ac:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    11b0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
    11b4:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <rx_leadingbit>
            rx_leadingbyte = 1;
    11b8:	40 93 7c 01 	sts	0x017C, r20	; 0x80017c <rx_leadingbyte>
            rx_busy = 0;
    11bc:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <rx_busy>
            adc_trigger_high_gain();
    11c0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    11c4:	83 ea       	ldi	r24, 0xA3	; 163
    11c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    11ca:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
    11ce:	80 c1       	rjmp	.+768    	; 0x14d0 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    11d0:	26 58       	subi	r18, 0x86	; 134
    11d2:	31 09       	sbc	r19, r1
    11d4:	a4 ef       	ldi	r26, 0xF4	; 244
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__umulhisi3>
    11dc:	8c 01       	movw	r16, r24
    11de:	22 27       	eor	r18, r18
    11e0:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
    11e2:	08 30       	cpi	r16, 0x08	; 8
    11e4:	60 f4       	brcc	.+24     	; 0x11fe <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	01 c0       	rjmp	.+2      	; 0x11ee <__vector_23+0xd6>
    11ec:	88 0f       	add	r24, r24
    11ee:	0a 95       	dec	r16
    11f0:	ea f7       	brpl	.-6      	; 0x11ec <__vector_23+0xd4>
    11f2:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <rx_bytevalue>
    11f6:	89 2b       	or	r24, r25
    11f8:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <rx_bytevalue>
    11fc:	69 c1       	rjmp	.+722    	; 0x14d0 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    11fe:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <rx_leadingbit>
                if (rx_leadingbyte) {
    1202:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rx_leadingbyte>
    1206:	88 23       	and	r24, r24
    1208:	41 f1       	breq	.+80     	; 0x125a <__vector_23+0x142>
                    adc_finish_conversion();
    120a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    120e:	86 fd       	sbrc	r24, 6
    1210:	fc cf       	rjmp	.-8      	; 0x120a <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
    1212:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1216:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    121a:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <rx_dist+0x1>
    121e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <rx_dist>
                    adc_trigger_high_gain();
    1222:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1226:	83 ea       	ldi	r24, 0xA3	; 163
    1228:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
    1232:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <rx_bytevalue>
    1236:	99 23       	and	r25, r25
    1238:	59 f0       	breq	.+22     	; 0x1250 <__vector_23+0x138>
                        rx_timer_off();
    123a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    123e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1242:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
    1246:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <rx_leadingbyte>
                        rx_busy = 0;
    124a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <rx_busy>
    124e:	40 c1       	rjmp	.+640    	; 0x14d0 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1250:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <rx_leadingbyte>
                        rx_byteindex = 0;
    1254:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_byteindex>
    1258:	3b c1       	rjmp	.+630    	; 0x14d0 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    125a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_byteindex>
    125e:	e8 2f       	mov	r30, r24
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	ee 57       	subi	r30, 0x7E	; 126
    1264:	fe 4f       	sbci	r31, 0xFE	; 254
    1266:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <rx_bytevalue>
    126a:	90 83       	st	Z, r25
                    rx_byteindex++;
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
    1272:	8c 30       	cpi	r24, 0x0C	; 12
    1274:	09 f0       	breq	.+2      	; 0x1278 <__vector_23+0x160>
    1276:	2c c1       	rjmp	.+600    	; 0x14d0 <__vector_23+0x3b8>
                        rx_timer_off();
    1278:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    127c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1280:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
    1284:	40 93 7c 01 	sts	0x017C, r20	; 0x80017c <rx_leadingbyte>
                        rx_busy = 0;
    1288:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
    128c:	00 91 8c 01 	lds	r16, 0x018C	; 0x80018c <rx_msg+0xa>
    1290:	10 91 8d 01 	lds	r17, 0x018D	; 0x80018d <rx_msg+0xb>
    1294:	82 e8       	ldi	r24, 0x82	; 130
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <message_crc>
    129c:	08 17       	cp	r16, r24
    129e:	19 07       	cpc	r17, r25
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <__vector_23+0x18c>
    12a2:	16 c1       	rjmp	.+556    	; 0x14d0 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    12a4:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <rx_msg+0x9>
    12a8:	e7 fd       	sbrc	r30, 7
    12aa:	0a c0       	rjmp	.+20     	; 0x12c0 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
    12ac:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <kilo_message_rx>
    12b0:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <kilo_message_rx+0x1>
    12b4:	67 e5       	ldi	r22, 0x57	; 87
    12b6:	71 e0       	ldi	r23, 0x01	; 1
    12b8:	82 e8       	ldi	r24, 0x82	; 130
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	09 95       	icall
    12be:	08 c1       	rjmp	.+528    	; 0x14d0 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    12c0:	88 e7       	ldi	r24, 0x78	; 120
    12c2:	8e 0f       	add	r24, r30
    12c4:	83 30       	cpi	r24, 0x03	; 3
    12c6:	30 f0       	brcs	.+12     	; 0x12d4 <__vector_23+0x1bc>
        motors_off();
    12c8:	53 98       	cbi	0x0a, 3	; 10
    12ca:	23 98       	cbi	0x04, 3	; 4
    12cc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    12d0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
    12d4:	8e 2f       	mov	r24, r30
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	fc 01       	movw	r30, r24
    12da:	e0 58       	subi	r30, 0x80	; 128
    12dc:	f1 09       	sbc	r31, r1
    12de:	eb 30       	cpi	r30, 0x0B	; 11
    12e0:	f1 05       	cpc	r31, r1
    12e2:	08 f0       	brcs	.+2      	; 0x12e6 <__vector_23+0x1ce>
    12e4:	f5 c0       	rjmp	.+490    	; 0x14d0 <__vector_23+0x3b8>
    12e6:	e5 5c       	subi	r30, 0xC5	; 197
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__tablejump2__>
        case BOOT:
            tx_timer_off();
    12ee:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    12f2:	8d 7f       	andi	r24, 0xFD	; 253
    12f4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    12f8:	16 bc       	out	0x26, r1	; 38
            bootload();
    12fa:	e0 e0       	ldi	r30, 0x00	; 0
    12fc:	f0 e7       	ldi	r31, 0x70	; 112
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
    1300:	e0 e0       	ldi	r30, 0x00	; 0
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1306:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <kilo_state>
    130a:	e2 c0       	rjmp	.+452    	; 0x14d0 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	b2 c0       	rjmp	.+356    	; 0x1474 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
    1310:	85 e0       	ldi	r24, 0x05	; 5
    1312:	b0 c0       	rjmp	.+352    	; 0x1474 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	ae c0       	rjmp	.+348    	; 0x1474 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1318:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <kilo_state>
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	09 f4       	brne	.+2      	; 0x1322 <__vector_23+0x20a>
    1320:	d7 c0       	rjmp	.+430    	; 0x14d0 <__vector_23+0x3b8>
    1322:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <kilo_state>
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	09 f4       	brne	.+2      	; 0x132c <__vector_23+0x214>
    132a:	d2 c0       	rjmp	.+420    	; 0x14d0 <__vector_23+0x3b8>
                motors_on();
    132c:	53 9a       	sbi	0x0a, 3	; 10
    132e:	23 9a       	sbi	0x04, 3	; 4
    1330:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1334:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
    1338:	83 e0       	ldi	r24, 0x03	; 3
    133a:	9c c0       	rjmp	.+312    	; 0x1474 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    133c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rx_msg>
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	09 f4       	brne	.+2      	; 0x1346 <__vector_23+0x22e>
    1344:	4b c0       	rjmp	.+150    	; 0x13dc <__vector_23+0x2c4>
    1346:	80 f4       	brcc	.+32     	; 0x1368 <__vector_23+0x250>
    1348:	88 23       	and	r24, r24
    134a:	a9 f0       	breq	.+42     	; 0x1376 <__vector_23+0x25e>
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	09 f0       	breq	.+2      	; 0x1352 <__vector_23+0x23a>
    1350:	82 c0       	rjmp	.+260    	; 0x1456 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1352:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <rx_msg+0x1>
    1356:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <rx_msg+0x2>
    135a:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <kilo_uid+0x1>
    135e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <kilo_uid>
                    cur_motion = MOVE_STOP;
    1362:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <cur_motion>
    1366:	77 c0       	rjmp	.+238    	; 0x1456 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	09 f4       	brne	.+2      	; 0x136e <__vector_23+0x256>
    136c:	49 c0       	rjmp	.+146    	; 0x1400 <__vector_23+0x2e8>
    136e:	84 30       	cpi	r24, 0x04	; 4
    1370:	09 f4       	brne	.+2      	; 0x1374 <__vector_23+0x25c>
    1372:	58 c0       	rjmp	.+176    	; 0x1424 <__vector_23+0x30c>
    1374:	70 c0       	rjmp	.+224    	; 0x1456 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1376:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <kilo_state>
    137a:	86 30       	cpi	r24, 0x06	; 6
    137c:	09 f0       	breq	.+2      	; 0x1380 <__vector_23+0x268>
    137e:	6b c0       	rjmp	.+214    	; 0x1456 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1380:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <kilo_uid>
    1384:	80 eb       	ldi	r24, 0xB0	; 176
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    138c:	60 91 92 01 	lds	r22, 0x0192	; 0x800192 <kilo_uid+0x1>
    1390:	81 eb       	ldi	r24, 0xB1	; 177
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1398:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <kilo_turn_left>
    139c:	85 e0       	ldi	r24, 0x05	; 5
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    13a4:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <kilo_turn_right>
    13a8:	89 e0       	ldi	r24, 0x09	; 9
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    13b0:	60 91 93 01 	lds	r22, 0x0193	; 0x800193 <kilo_straight_left>
    13b4:	8c e0       	ldi	r24, 0x0C	; 12
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    13bc:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <kilo_straight_right>
    13c0:	84 e1       	ldi	r24, 0x14	; 20
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <eeprom_write_byte>
                        motors_off();
    13c8:	53 98       	cbi	0x0a, 3	; 10
    13ca:	23 98       	cbi	0x04, 3	; 4
    13cc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    13d0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <kilo_state>
    13da:	3d c0       	rjmp	.+122    	; 0x1456 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    13dc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <cur_motion>
    13e0:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <rx_msg+0x3>
    13e4:	91 30       	cpi	r25, 0x01	; 1
    13e6:	21 f4       	brne	.+8      	; 0x13f0 <__vector_23+0x2d8>
    13e8:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <kilo_turn_left>
    13ec:	89 17       	cp	r24, r25
    13ee:	99 f1       	breq	.+102    	; 0x1456 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    13f0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <prev_motion>
                        cur_motion = MOVE_LEFT;
    13f4:	91 e0       	ldi	r25, 0x01	; 1
    13f6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    13fa:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <kilo_turn_left>
    13fe:	2b c0       	rjmp	.+86     	; 0x1456 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1400:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <cur_motion>
    1404:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <rx_msg+0x4>
    1408:	92 30       	cpi	r25, 0x02	; 2
    140a:	21 f4       	brne	.+8      	; 0x1414 <__vector_23+0x2fc>
    140c:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <kilo_turn_right>
    1410:	89 17       	cp	r24, r25
    1412:	09 f1       	breq	.+66     	; 0x1456 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1414:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <prev_motion>
                        cur_motion = MOVE_RIGHT;
    1418:	92 e0       	ldi	r25, 0x02	; 2
    141a:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    141e:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <kilo_turn_right>
    1422:	19 c0       	rjmp	.+50     	; 0x1456 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1424:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <cur_motion>
    1428:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <rx_msg+0x6>
    142c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <rx_msg+0x5>
    1430:	23 30       	cpi	r18, 0x03	; 3
    1432:	41 f4       	brne	.+16     	; 0x1444 <__vector_23+0x32c>
    1434:	20 91 94 01 	lds	r18, 0x0194	; 0x800194 <kilo_straight_right>
    1438:	82 13       	cpse	r24, r18
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <__vector_23+0x32c>
    143c:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <kilo_straight_left>
    1440:	92 17       	cp	r25, r18
    1442:	49 f0       	breq	.+18     	; 0x1456 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1444:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    1448:	23 e0       	ldi	r18, 0x03	; 3
    144a:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    144e:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    1452:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1456:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rx_msg>
    145a:	88 23       	and	r24, r24
    145c:	c9 f1       	breq	.+114    	; 0x14d0 <__vector_23+0x3b8>
    145e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <kilo_state>
    1462:	86 30       	cpi	r24, 0x06	; 6
    1464:	a9 f1       	breq	.+106    	; 0x14d0 <__vector_23+0x3b8>
                motors_on();
    1466:	53 9a       	sbi	0x0a, 3	; 10
    1468:	23 9a       	sbi	0x04, 3	; 4
    146a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    146e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    1472:	86 e0       	ldi	r24, 0x06	; 6
    1474:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <kilo_state>
    1478:	2b c0       	rjmp	.+86     	; 0x14d0 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    147a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <kilo_state>
    147e:	86 30       	cpi	r24, 0x06	; 6
    1480:	81 f0       	breq	.+32     	; 0x14a2 <__vector_23+0x38a>
                motors_on();
    1482:	53 9a       	sbi	0x0a, 3	; 10
    1484:	23 9a       	sbi	0x04, 3	; 4
    1486:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    148a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	0e 94 40 07 	call	0xe80	; 0xe80 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    1494:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <cur_motion>
    1498:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <prev_motion>
                kilo_state = MOVING;
    149c:	86 e0       	ldi	r24, 0x06	; 6
    149e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	00 90 82 01 	lds	r0, 0x0182	; 0x800182 <rx_msg>
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <__vector_23+0x398>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <__vector_23+0x394>
    14b4:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <kilo_uid>
    14b8:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <kilo_uid+0x1>
    14bc:	82 23       	and	r24, r18
    14be:	93 23       	and	r25, r19
    14c0:	89 2b       	or	r24, r25
    14c2:	21 f0       	breq	.+8      	; 0x14cc <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <cur_motion>
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    14cc:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <cur_motion>
                    }
                }
            }
        }
    }
}
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    14f6:	fc 01       	movw	r30, r24
    14f8:	9c 01       	movw	r18, r24
    14fa:	26 5f       	subi	r18, 0xF6	; 246
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1502:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1504:	84 27       	eor	r24, r20
    1506:	08 2e       	mov	r0, r24
    1508:	82 95       	swap	r24
    150a:	80 7f       	andi	r24, 0xF0	; 240
    150c:	80 25       	eor	r24, r0
    150e:	09 2e       	mov	r0, r25
    1510:	98 2f       	mov	r25, r24
    1512:	82 95       	swap	r24
    1514:	8f 70       	andi	r24, 0x0F	; 15
    1516:	08 26       	eor	r0, r24
    1518:	86 95       	lsr	r24
    151a:	98 27       	eor	r25, r24
    151c:	89 27       	eor	r24, r25
    151e:	88 0f       	add	r24, r24
    1520:	88 0f       	add	r24, r24
    1522:	88 0f       	add	r24, r24
    1524:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1526:	e2 17       	cp	r30, r18
    1528:	f3 07       	cpc	r31, r19
    152a:	59 f7       	brne	.-42     	; 0x1502 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    152c:	08 95       	ret

0000152e <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    152e:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1530:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1532:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1534:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <tx_mask>
    or tmpreg1, ddrreg
    1538:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    153a:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    153c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    153e:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <tx_mask>
    1542:	20 30       	cpi	r18, 0x00	; 0
    1544:	29 f0       	breq	.+10     	; 0x1550 <message_send+0x22>
    1546:	00 00       	nop
    1548:	25 b1       	in	r18, 0x05	; 5
    154a:	23 2b       	or	r18, r19
    154c:	25 b9       	out	0x05, r18	; 5
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <message_send+0x2a>
    1550:	00 00       	nop
    1552:	00 00       	nop
    1554:	00 00       	nop
    1556:	00 c0       	rjmp	.+0      	; 0x1558 <message_send+0x2a>
    1558:	00 00       	nop
    155a:	00 00       	nop
    155c:	00 00       	nop
    155e:	30 95       	com	r19
    1560:	25 b1       	in	r18, 0x05	; 5
    1562:	23 23       	and	r18, r19
    1564:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1566:	2e ea       	ldi	r18, 0xAE	; 174
    1568:	2a 95       	dec	r18
    156a:	f1 f7       	brne	.-4      	; 0x1568 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    156c:	2b ee       	ldi	r18, 0xEB	; 235

0000156e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    156e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1570:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1572:	0a c0       	rjmp	.+20     	; 0x1588 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1574:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1576:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <tx_mask>
    com tmpreg2
    157a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    157c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    157e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1580:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1582:	0f be       	out	0x3f, r0	; 63
    return 0
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	08 95       	ret

00001588 <nocollision>:
nocollision:
    nop
    1588:	00 00       	nop
    dec tmpreg1
    158a:	2a 95       	dec	r18
    brne checkcollision
    158c:	81 f7       	brne	.-32     	; 0x156e <checkcollision>

    ldi tmpreg1, 0x01
    158e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1590:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <tx_mask>
    1594:	20 30       	cpi	r18, 0x00	; 0
    1596:	29 f0       	breq	.+10     	; 0x15a2 <nocollision+0x1a>
    1598:	00 00       	nop
    159a:	25 b1       	in	r18, 0x05	; 5
    159c:	23 2b       	or	r18, r19
    159e:	25 b9       	out	0x05, r18	; 5
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <nocollision+0x22>
    15a2:	00 00       	nop
    15a4:	00 00       	nop
    15a6:	00 00       	nop
    15a8:	00 c0       	rjmp	.+0      	; 0x15aa <nocollision+0x22>
    15aa:	00 00       	nop
    15ac:	00 00       	nop
    15ae:	00 00       	nop
    15b0:	30 95       	com	r19
    15b2:	25 b1       	in	r18, 0x05	; 5
    15b4:	23 23       	and	r18, r19
    15b6:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    15b8:	00 00       	nop
    15ba:	24 e5       	ldi	r18, 0x54	; 84
    15bc:	2a 95       	dec	r18
    15be:	f1 f7       	brne	.-4      	; 0x15bc <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    15c0:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    15c2:	8c e0       	ldi	r24, 0x0C	; 12

000015c4 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    15c4:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    15c8:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    15ca:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    15cc:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    15ce:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    15d0:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    15d4:	50 e0       	ldi	r21, 0x00	; 0

000015d6 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    15d6:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    15d8:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    15da:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    15dc:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    15de:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <tx_mask>
    15e2:	20 30       	cpi	r18, 0x00	; 0
    15e4:	29 f0       	breq	.+10     	; 0x15f0 <sendbit+0x1a>
    15e6:	00 00       	nop
    15e8:	25 b1       	in	r18, 0x05	; 5
    15ea:	23 2b       	or	r18, r19
    15ec:	25 b9       	out	0x05, r18	; 5
    15ee:	04 c0       	rjmp	.+8      	; 0x15f8 <sendbit+0x22>
    15f0:	00 00       	nop
    15f2:	00 00       	nop
    15f4:	00 00       	nop
    15f6:	00 c0       	rjmp	.+0      	; 0x15f8 <sendbit+0x22>
    15f8:	00 00       	nop
    15fa:	00 00       	nop
    15fc:	00 00       	nop
    15fe:	30 95       	com	r19
    1600:	25 b1       	in	r18, 0x05	; 5
    1602:	23 23       	and	r18, r19
    1604:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1606:	00 00       	nop
    1608:	21 e5       	ldi	r18, 0x51	; 81
    160a:	2a 95       	dec	r18
    160c:	f1 f7       	brne	.-4      	; 0x160a <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    160e:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1610:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1612:	9a 95       	dec	r25
    brne sendbit
    1614:	01 f7       	brne	.-64     	; 0x15d6 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1616:	8a 95       	dec	r24
    brne sendbyte
    1618:	a9 f6       	brne	.-86     	; 0x15c4 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    161a:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    161c:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    161e:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1620:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1622:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <tx_mask>
    com tmpreg2
    1626:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1628:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    162a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    162c:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    162e:	0f be       	out	0x3f, r0	; 63
    return 1
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	08 95       	ret

00001634 <main>:
    }
}

// Do main things
int main() {
    kilo_init();
    1634:	0e 94 67 03 	call	0x6ce	; 0x6ce <kilo_init>
    kilo_message_rx = message_rx;
    1638:	86 e9       	ldi	r24, 0x96	; 150
    163a:	92 e0       	ldi	r25, 0x02	; 2
    163c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <kilo_message_rx+0x1>
    1640:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <kilo_message_rx>
    kilo_message_tx = message_tx;
    1644:	85 e8       	ldi	r24, 0x85	; 133
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <kilo_message_tx+0x1>
    164c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <kilo_message_tx>
    kilo_start(setup, loop);
    1650:	61 ef       	ldi	r22, 0xF1	; 241
    1652:	71 e0       	ldi	r23, 0x01	; 1
    1654:	89 ea       	ldi	r24, 0xA9	; 169
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	0e 94 5f 07 	call	0xebe	; 0xebe <kilo_start>

    return 0;
}
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	08 95       	ret

00001662 <__divmodhi4>:
    1662:	97 fb       	bst	r25, 7
    1664:	07 2e       	mov	r0, r23
    1666:	16 f4       	brtc	.+4      	; 0x166c <__divmodhi4+0xa>
    1668:	00 94       	com	r0
    166a:	07 d0       	rcall	.+14     	; 0x167a <__divmodhi4_neg1>
    166c:	77 fd       	sbrc	r23, 7
    166e:	09 d0       	rcall	.+18     	; 0x1682 <__divmodhi4_neg2>
    1670:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__udivmodhi4>
    1674:	07 fc       	sbrc	r0, 7
    1676:	05 d0       	rcall	.+10     	; 0x1682 <__divmodhi4_neg2>
    1678:	3e f4       	brtc	.+14     	; 0x1688 <__divmodhi4_exit>

0000167a <__divmodhi4_neg1>:
    167a:	90 95       	com	r25
    167c:	81 95       	neg	r24
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	08 95       	ret

00001682 <__divmodhi4_neg2>:
    1682:	70 95       	com	r23
    1684:	61 95       	neg	r22
    1686:	7f 4f       	sbci	r23, 0xFF	; 255

00001688 <__divmodhi4_exit>:
    1688:	08 95       	ret

0000168a <__tablejump2__>:
    168a:	ee 0f       	add	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	05 90       	lpm	r0, Z+
    1690:	f4 91       	lpm	r31, Z
    1692:	e0 2d       	mov	r30, r0
    1694:	09 94       	ijmp

00001696 <__umulhisi3>:
    1696:	a2 9f       	mul	r26, r18
    1698:	b0 01       	movw	r22, r0
    169a:	b3 9f       	mul	r27, r19
    169c:	c0 01       	movw	r24, r0
    169e:	a3 9f       	mul	r26, r19
    16a0:	70 0d       	add	r23, r0
    16a2:	81 1d       	adc	r24, r1
    16a4:	11 24       	eor	r1, r1
    16a6:	91 1d       	adc	r25, r1
    16a8:	b2 9f       	mul	r27, r18
    16aa:	70 0d       	add	r23, r0
    16ac:	81 1d       	adc	r24, r1
    16ae:	11 24       	eor	r1, r1
    16b0:	91 1d       	adc	r25, r1
    16b2:	08 95       	ret

000016b4 <__udivmodhi4>:
    16b4:	aa 1b       	sub	r26, r26
    16b6:	bb 1b       	sub	r27, r27
    16b8:	51 e1       	ldi	r21, 0x11	; 17
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <__udivmodhi4_ep>

000016bc <__udivmodhi4_loop>:
    16bc:	aa 1f       	adc	r26, r26
    16be:	bb 1f       	adc	r27, r27
    16c0:	a6 17       	cp	r26, r22
    16c2:	b7 07       	cpc	r27, r23
    16c4:	10 f0       	brcs	.+4      	; 0x16ca <__udivmodhi4_ep>
    16c6:	a6 1b       	sub	r26, r22
    16c8:	b7 0b       	sbc	r27, r23

000016ca <__udivmodhi4_ep>:
    16ca:	88 1f       	adc	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	5a 95       	dec	r21
    16d0:	a9 f7       	brne	.-22     	; 0x16bc <__udivmodhi4_loop>
    16d2:	80 95       	com	r24
    16d4:	90 95       	com	r25
    16d6:	bc 01       	movw	r22, r24
    16d8:	cd 01       	movw	r24, r26
    16da:	08 95       	ret

000016dc <acos>:
    16dc:	9f 93       	push	r25
    16de:	9f 77       	andi	r25, 0x7F	; 127
    16e0:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__fp_arccos>
    16e4:	0f 90       	pop	r0
    16e6:	00 20       	and	r0, r0
    16e8:	42 f4       	brpl	.+16     	; 0x16fa <acos+0x1e>
    16ea:	90 58       	subi	r25, 0x80	; 128
    16ec:	a2 ea       	ldi	r26, 0xA2	; 162
    16ee:	2a ed       	ldi	r18, 0xDA	; 218
    16f0:	3f e0       	ldi	r19, 0x0F	; 15
    16f2:	49 e4       	ldi	r20, 0x49	; 73
    16f4:	50 e4       	ldi	r21, 0x40	; 64
    16f6:	0e 94 97 0b 	call	0x172e	; 0x172e <__addsf3x>
    16fa:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__fp_round>

000016fe <__subsf3>:
    16fe:	50 58       	subi	r21, 0x80	; 128

00001700 <__addsf3>:
    1700:	bb 27       	eor	r27, r27
    1702:	aa 27       	eor	r26, r26
    1704:	0e 94 97 0b 	call	0x172e	; 0x172e <__addsf3x>
    1708:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__fp_round>
    170c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__fp_pscA>
    1710:	38 f0       	brcs	.+14     	; 0x1720 <__addsf3+0x20>
    1712:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fp_pscB>
    1716:	20 f0       	brcs	.+8      	; 0x1720 <__addsf3+0x20>
    1718:	39 f4       	brne	.+14     	; 0x1728 <__addsf3+0x28>
    171a:	9f 3f       	cpi	r25, 0xFF	; 255
    171c:	19 f4       	brne	.+6      	; 0x1724 <__addsf3+0x24>
    171e:	26 f4       	brtc	.+8      	; 0x1728 <__addsf3+0x28>
    1720:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__fp_nan>
    1724:	0e f4       	brtc	.+2      	; 0x1728 <__addsf3+0x28>
    1726:	e0 95       	com	r30
    1728:	e7 fb       	bst	r30, 7
    172a:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_inf>

0000172e <__addsf3x>:
    172e:	e9 2f       	mov	r30, r25
    1730:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fp_split3>
    1734:	58 f3       	brcs	.-42     	; 0x170c <__addsf3+0xc>
    1736:	ba 17       	cp	r27, r26
    1738:	62 07       	cpc	r22, r18
    173a:	73 07       	cpc	r23, r19
    173c:	84 07       	cpc	r24, r20
    173e:	95 07       	cpc	r25, r21
    1740:	20 f0       	brcs	.+8      	; 0x174a <__addsf3x+0x1c>
    1742:	79 f4       	brne	.+30     	; 0x1762 <__addsf3x+0x34>
    1744:	a6 f5       	brtc	.+104    	; 0x17ae <__addsf3x+0x80>
    1746:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__fp_zero>
    174a:	0e f4       	brtc	.+2      	; 0x174e <__addsf3x+0x20>
    174c:	e0 95       	com	r30
    174e:	0b 2e       	mov	r0, r27
    1750:	ba 2f       	mov	r27, r26
    1752:	a0 2d       	mov	r26, r0
    1754:	0b 01       	movw	r0, r22
    1756:	b9 01       	movw	r22, r18
    1758:	90 01       	movw	r18, r0
    175a:	0c 01       	movw	r0, r24
    175c:	ca 01       	movw	r24, r20
    175e:	a0 01       	movw	r20, r0
    1760:	11 24       	eor	r1, r1
    1762:	ff 27       	eor	r31, r31
    1764:	59 1b       	sub	r21, r25
    1766:	99 f0       	breq	.+38     	; 0x178e <__addsf3x+0x60>
    1768:	59 3f       	cpi	r21, 0xF9	; 249
    176a:	50 f4       	brcc	.+20     	; 0x1780 <__addsf3x+0x52>
    176c:	50 3e       	cpi	r21, 0xE0	; 224
    176e:	68 f1       	brcs	.+90     	; 0x17ca <__addsf3x+0x9c>
    1770:	1a 16       	cp	r1, r26
    1772:	f0 40       	sbci	r31, 0x00	; 0
    1774:	a2 2f       	mov	r26, r18
    1776:	23 2f       	mov	r18, r19
    1778:	34 2f       	mov	r19, r20
    177a:	44 27       	eor	r20, r20
    177c:	58 5f       	subi	r21, 0xF8	; 248
    177e:	f3 cf       	rjmp	.-26     	; 0x1766 <__addsf3x+0x38>
    1780:	46 95       	lsr	r20
    1782:	37 95       	ror	r19
    1784:	27 95       	ror	r18
    1786:	a7 95       	ror	r26
    1788:	f0 40       	sbci	r31, 0x00	; 0
    178a:	53 95       	inc	r21
    178c:	c9 f7       	brne	.-14     	; 0x1780 <__addsf3x+0x52>
    178e:	7e f4       	brtc	.+30     	; 0x17ae <__addsf3x+0x80>
    1790:	1f 16       	cp	r1, r31
    1792:	ba 0b       	sbc	r27, r26
    1794:	62 0b       	sbc	r22, r18
    1796:	73 0b       	sbc	r23, r19
    1798:	84 0b       	sbc	r24, r20
    179a:	ba f0       	brmi	.+46     	; 0x17ca <__addsf3x+0x9c>
    179c:	91 50       	subi	r25, 0x01	; 1
    179e:	a1 f0       	breq	.+40     	; 0x17c8 <__addsf3x+0x9a>
    17a0:	ff 0f       	add	r31, r31
    17a2:	bb 1f       	adc	r27, r27
    17a4:	66 1f       	adc	r22, r22
    17a6:	77 1f       	adc	r23, r23
    17a8:	88 1f       	adc	r24, r24
    17aa:	c2 f7       	brpl	.-16     	; 0x179c <__addsf3x+0x6e>
    17ac:	0e c0       	rjmp	.+28     	; 0x17ca <__addsf3x+0x9c>
    17ae:	ba 0f       	add	r27, r26
    17b0:	62 1f       	adc	r22, r18
    17b2:	73 1f       	adc	r23, r19
    17b4:	84 1f       	adc	r24, r20
    17b6:	48 f4       	brcc	.+18     	; 0x17ca <__addsf3x+0x9c>
    17b8:	87 95       	ror	r24
    17ba:	77 95       	ror	r23
    17bc:	67 95       	ror	r22
    17be:	b7 95       	ror	r27
    17c0:	f7 95       	ror	r31
    17c2:	9e 3f       	cpi	r25, 0xFE	; 254
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <__addsf3x+0x9a>
    17c6:	b0 cf       	rjmp	.-160    	; 0x1728 <__addsf3+0x28>
    17c8:	93 95       	inc	r25
    17ca:	88 0f       	add	r24, r24
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <__addsf3x+0xa2>
    17ce:	99 27       	eor	r25, r25
    17d0:	ee 0f       	add	r30, r30
    17d2:	97 95       	ror	r25
    17d4:	87 95       	ror	r24
    17d6:	08 95       	ret

000017d8 <__divsf3>:
    17d8:	0e 94 00 0c 	call	0x1800	; 0x1800 <__divsf3x>
    17dc:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__fp_round>
    17e0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fp_pscB>
    17e4:	58 f0       	brcs	.+22     	; 0x17fc <__divsf3+0x24>
    17e6:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__fp_pscA>
    17ea:	40 f0       	brcs	.+16     	; 0x17fc <__divsf3+0x24>
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <__divsf3+0x20>
    17ee:	5f 3f       	cpi	r21, 0xFF	; 255
    17f0:	29 f0       	breq	.+10     	; 0x17fc <__divsf3+0x24>
    17f2:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_inf>
    17f6:	51 11       	cpse	r21, r1
    17f8:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_szero>
    17fc:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__fp_nan>

00001800 <__divsf3x>:
    1800:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fp_split3>
    1804:	68 f3       	brcs	.-38     	; 0x17e0 <__divsf3+0x8>

00001806 <__divsf3_pse>:
    1806:	99 23       	and	r25, r25
    1808:	b1 f3       	breq	.-20     	; 0x17f6 <__divsf3+0x1e>
    180a:	55 23       	and	r21, r21
    180c:	91 f3       	breq	.-28     	; 0x17f2 <__divsf3+0x1a>
    180e:	95 1b       	sub	r25, r21
    1810:	55 0b       	sbc	r21, r21
    1812:	bb 27       	eor	r27, r27
    1814:	aa 27       	eor	r26, r26
    1816:	62 17       	cp	r22, r18
    1818:	73 07       	cpc	r23, r19
    181a:	84 07       	cpc	r24, r20
    181c:	38 f0       	brcs	.+14     	; 0x182c <__divsf3_pse+0x26>
    181e:	9f 5f       	subi	r25, 0xFF	; 255
    1820:	5f 4f       	sbci	r21, 0xFF	; 255
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	44 1f       	adc	r20, r20
    1828:	aa 1f       	adc	r26, r26
    182a:	a9 f3       	breq	.-22     	; 0x1816 <__divsf3_pse+0x10>
    182c:	35 d0       	rcall	.+106    	; 0x1898 <__divsf3_pse+0x92>
    182e:	0e 2e       	mov	r0, r30
    1830:	3a f0       	brmi	.+14     	; 0x1840 <__divsf3_pse+0x3a>
    1832:	e0 e8       	ldi	r30, 0x80	; 128
    1834:	32 d0       	rcall	.+100    	; 0x189a <__divsf3_pse+0x94>
    1836:	91 50       	subi	r25, 0x01	; 1
    1838:	50 40       	sbci	r21, 0x00	; 0
    183a:	e6 95       	lsr	r30
    183c:	00 1c       	adc	r0, r0
    183e:	ca f7       	brpl	.-14     	; 0x1832 <__divsf3_pse+0x2c>
    1840:	2b d0       	rcall	.+86     	; 0x1898 <__divsf3_pse+0x92>
    1842:	fe 2f       	mov	r31, r30
    1844:	29 d0       	rcall	.+82     	; 0x1898 <__divsf3_pse+0x92>
    1846:	66 0f       	add	r22, r22
    1848:	77 1f       	adc	r23, r23
    184a:	88 1f       	adc	r24, r24
    184c:	bb 1f       	adc	r27, r27
    184e:	26 17       	cp	r18, r22
    1850:	37 07       	cpc	r19, r23
    1852:	48 07       	cpc	r20, r24
    1854:	ab 07       	cpc	r26, r27
    1856:	b0 e8       	ldi	r27, 0x80	; 128
    1858:	09 f0       	breq	.+2      	; 0x185c <__divsf3_pse+0x56>
    185a:	bb 0b       	sbc	r27, r27
    185c:	80 2d       	mov	r24, r0
    185e:	bf 01       	movw	r22, r30
    1860:	ff 27       	eor	r31, r31
    1862:	93 58       	subi	r25, 0x83	; 131
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	3a f0       	brmi	.+14     	; 0x1876 <__divsf3_pse+0x70>
    1868:	9e 3f       	cpi	r25, 0xFE	; 254
    186a:	51 05       	cpc	r21, r1
    186c:	78 f0       	brcs	.+30     	; 0x188c <__divsf3_pse+0x86>
    186e:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_inf>
    1872:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_szero>
    1876:	5f 3f       	cpi	r21, 0xFF	; 255
    1878:	e4 f3       	brlt	.-8      	; 0x1872 <__divsf3_pse+0x6c>
    187a:	98 3e       	cpi	r25, 0xE8	; 232
    187c:	d4 f3       	brlt	.-12     	; 0x1872 <__divsf3_pse+0x6c>
    187e:	86 95       	lsr	r24
    1880:	77 95       	ror	r23
    1882:	67 95       	ror	r22
    1884:	b7 95       	ror	r27
    1886:	f7 95       	ror	r31
    1888:	9f 5f       	subi	r25, 0xFF	; 255
    188a:	c9 f7       	brne	.-14     	; 0x187e <__divsf3_pse+0x78>
    188c:	88 0f       	add	r24, r24
    188e:	91 1d       	adc	r25, r1
    1890:	96 95       	lsr	r25
    1892:	87 95       	ror	r24
    1894:	97 f9       	bld	r25, 7
    1896:	08 95       	ret
    1898:	e1 e0       	ldi	r30, 0x01	; 1
    189a:	66 0f       	add	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	88 1f       	adc	r24, r24
    18a0:	bb 1f       	adc	r27, r27
    18a2:	62 17       	cp	r22, r18
    18a4:	73 07       	cpc	r23, r19
    18a6:	84 07       	cpc	r24, r20
    18a8:	ba 07       	cpc	r27, r26
    18aa:	20 f0       	brcs	.+8      	; 0x18b4 <__divsf3_pse+0xae>
    18ac:	62 1b       	sub	r22, r18
    18ae:	73 0b       	sbc	r23, r19
    18b0:	84 0b       	sbc	r24, r20
    18b2:	ba 0b       	sbc	r27, r26
    18b4:	ee 1f       	adc	r30, r30
    18b6:	88 f7       	brcc	.-30     	; 0x189a <__divsf3_pse+0x94>
    18b8:	e0 95       	com	r30
    18ba:	08 95       	ret

000018bc <__fixsfsi>:
    18bc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__fixunssfsi>
    18c0:	68 94       	set
    18c2:	b1 11       	cpse	r27, r1
    18c4:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_szero>
    18c8:	08 95       	ret

000018ca <__fixunssfsi>:
    18ca:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_splitA>
    18ce:	88 f0       	brcs	.+34     	; 0x18f2 <__fixunssfsi+0x28>
    18d0:	9f 57       	subi	r25, 0x7F	; 127
    18d2:	98 f0       	brcs	.+38     	; 0x18fa <__fixunssfsi+0x30>
    18d4:	b9 2f       	mov	r27, r25
    18d6:	99 27       	eor	r25, r25
    18d8:	b7 51       	subi	r27, 0x17	; 23
    18da:	b0 f0       	brcs	.+44     	; 0x1908 <__fixunssfsi+0x3e>
    18dc:	e1 f0       	breq	.+56     	; 0x1916 <__fixunssfsi+0x4c>
    18de:	66 0f       	add	r22, r22
    18e0:	77 1f       	adc	r23, r23
    18e2:	88 1f       	adc	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	1a f0       	brmi	.+6      	; 0x18ee <__fixunssfsi+0x24>
    18e8:	ba 95       	dec	r27
    18ea:	c9 f7       	brne	.-14     	; 0x18de <__fixunssfsi+0x14>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <__fixunssfsi+0x4c>
    18ee:	b1 30       	cpi	r27, 0x01	; 1
    18f0:	91 f0       	breq	.+36     	; 0x1916 <__fixunssfsi+0x4c>
    18f2:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__fp_zero>
    18f6:	b1 e0       	ldi	r27, 0x01	; 1
    18f8:	08 95       	ret
    18fa:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__fp_zero>
    18fe:	67 2f       	mov	r22, r23
    1900:	78 2f       	mov	r23, r24
    1902:	88 27       	eor	r24, r24
    1904:	b8 5f       	subi	r27, 0xF8	; 248
    1906:	39 f0       	breq	.+14     	; 0x1916 <__fixunssfsi+0x4c>
    1908:	b9 3f       	cpi	r27, 0xF9	; 249
    190a:	cc f3       	brlt	.-14     	; 0x18fe <__fixunssfsi+0x34>
    190c:	86 95       	lsr	r24
    190e:	77 95       	ror	r23
    1910:	67 95       	ror	r22
    1912:	b3 95       	inc	r27
    1914:	d9 f7       	brne	.-10     	; 0x190c <__fixunssfsi+0x42>
    1916:	3e f4       	brtc	.+14     	; 0x1926 <__fixunssfsi+0x5c>
    1918:	90 95       	com	r25
    191a:	80 95       	com	r24
    191c:	70 95       	com	r23
    191e:	61 95       	neg	r22
    1920:	7f 4f       	sbci	r23, 0xFF	; 255
    1922:	8f 4f       	sbci	r24, 0xFF	; 255
    1924:	9f 4f       	sbci	r25, 0xFF	; 255
    1926:	08 95       	ret

00001928 <__floatunsisf>:
    1928:	e8 94       	clt
    192a:	09 c0       	rjmp	.+18     	; 0x193e <__floatsisf+0x12>

0000192c <__floatsisf>:
    192c:	97 fb       	bst	r25, 7
    192e:	3e f4       	brtc	.+14     	; 0x193e <__floatsisf+0x12>
    1930:	90 95       	com	r25
    1932:	80 95       	com	r24
    1934:	70 95       	com	r23
    1936:	61 95       	neg	r22
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	8f 4f       	sbci	r24, 0xFF	; 255
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	99 23       	and	r25, r25
    1940:	a9 f0       	breq	.+42     	; 0x196c <__floatsisf+0x40>
    1942:	f9 2f       	mov	r31, r25
    1944:	96 e9       	ldi	r25, 0x96	; 150
    1946:	bb 27       	eor	r27, r27
    1948:	93 95       	inc	r25
    194a:	f6 95       	lsr	r31
    194c:	87 95       	ror	r24
    194e:	77 95       	ror	r23
    1950:	67 95       	ror	r22
    1952:	b7 95       	ror	r27
    1954:	f1 11       	cpse	r31, r1
    1956:	f8 cf       	rjmp	.-16     	; 0x1948 <__floatsisf+0x1c>
    1958:	fa f4       	brpl	.+62     	; 0x1998 <__floatsisf+0x6c>
    195a:	bb 0f       	add	r27, r27
    195c:	11 f4       	brne	.+4      	; 0x1962 <__floatsisf+0x36>
    195e:	60 ff       	sbrs	r22, 0
    1960:	1b c0       	rjmp	.+54     	; 0x1998 <__floatsisf+0x6c>
    1962:	6f 5f       	subi	r22, 0xFF	; 255
    1964:	7f 4f       	sbci	r23, 0xFF	; 255
    1966:	8f 4f       	sbci	r24, 0xFF	; 255
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	16 c0       	rjmp	.+44     	; 0x1998 <__floatsisf+0x6c>
    196c:	88 23       	and	r24, r24
    196e:	11 f0       	breq	.+4      	; 0x1974 <__floatsisf+0x48>
    1970:	96 e9       	ldi	r25, 0x96	; 150
    1972:	11 c0       	rjmp	.+34     	; 0x1996 <__floatsisf+0x6a>
    1974:	77 23       	and	r23, r23
    1976:	21 f0       	breq	.+8      	; 0x1980 <__floatsisf+0x54>
    1978:	9e e8       	ldi	r25, 0x8E	; 142
    197a:	87 2f       	mov	r24, r23
    197c:	76 2f       	mov	r23, r22
    197e:	05 c0       	rjmp	.+10     	; 0x198a <__floatsisf+0x5e>
    1980:	66 23       	and	r22, r22
    1982:	71 f0       	breq	.+28     	; 0x19a0 <__floatsisf+0x74>
    1984:	96 e8       	ldi	r25, 0x86	; 134
    1986:	86 2f       	mov	r24, r22
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	2a f0       	brmi	.+10     	; 0x1998 <__floatsisf+0x6c>
    198e:	9a 95       	dec	r25
    1990:	66 0f       	add	r22, r22
    1992:	77 1f       	adc	r23, r23
    1994:	88 1f       	adc	r24, r24
    1996:	da f7       	brpl	.-10     	; 0x198e <__floatsisf+0x62>
    1998:	88 0f       	add	r24, r24
    199a:	96 95       	lsr	r25
    199c:	87 95       	ror	r24
    199e:	97 f9       	bld	r25, 7
    19a0:	08 95       	ret

000019a2 <__fp_arccos>:
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	1f 93       	push	r17
    19a8:	0f 93       	push	r16
    19aa:	8b 01       	movw	r16, r22
    19ac:	ec 01       	movw	r28, r24
    19ae:	ec e8       	ldi	r30, 0x8C	; 140
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__fp_powser>
    19b6:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__fp_round>
    19ba:	98 01       	movw	r18, r16
    19bc:	ae 01       	movw	r20, r28
    19be:	8b 01       	movw	r16, r22
    19c0:	ec 01       	movw	r28, r24
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	80 e8       	ldi	r24, 0x80	; 128
    19c8:	9f e3       	ldi	r25, 0x3F	; 63
    19ca:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__subsf3>
    19ce:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <sqrt>
    19d2:	98 01       	movw	r18, r16
    19d4:	ae 01       	movw	r20, r28
    19d6:	0f 91       	pop	r16
    19d8:	1f 91       	pop	r17
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__mulsf3x>

000019e2 <__fp_inf>:
    19e2:	97 f9       	bld	r25, 7
    19e4:	9f 67       	ori	r25, 0x7F	; 127
    19e6:	80 e8       	ldi	r24, 0x80	; 128
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	08 95       	ret

000019ee <__fp_nan>:
    19ee:	9f ef       	ldi	r25, 0xFF	; 255
    19f0:	80 ec       	ldi	r24, 0xC0	; 192
    19f2:	08 95       	ret

000019f4 <__fp_powser>:
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	1f 93       	push	r17
    19fa:	0f 93       	push	r16
    19fc:	ff 92       	push	r15
    19fe:	ef 92       	push	r14
    1a00:	df 92       	push	r13
    1a02:	7b 01       	movw	r14, r22
    1a04:	8c 01       	movw	r16, r24
    1a06:	68 94       	set
    1a08:	06 c0       	rjmp	.+12     	; 0x1a16 <__fp_powser+0x22>
    1a0a:	da 2e       	mov	r13, r26
    1a0c:	ef 01       	movw	r28, r30
    1a0e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__mulsf3x>
    1a12:	fe 01       	movw	r30, r28
    1a14:	e8 94       	clt
    1a16:	a5 91       	lpm	r26, Z+
    1a18:	25 91       	lpm	r18, Z+
    1a1a:	35 91       	lpm	r19, Z+
    1a1c:	45 91       	lpm	r20, Z+
    1a1e:	55 91       	lpm	r21, Z+
    1a20:	a6 f3       	brts	.-24     	; 0x1a0a <__fp_powser+0x16>
    1a22:	ef 01       	movw	r28, r30
    1a24:	0e 94 97 0b 	call	0x172e	; 0x172e <__addsf3x>
    1a28:	fe 01       	movw	r30, r28
    1a2a:	97 01       	movw	r18, r14
    1a2c:	a8 01       	movw	r20, r16
    1a2e:	da 94       	dec	r13
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <__fp_powser+0x18>
    1a32:	df 90       	pop	r13
    1a34:	ef 90       	pop	r14
    1a36:	ff 90       	pop	r15
    1a38:	0f 91       	pop	r16
    1a3a:	1f 91       	pop	r17
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	08 95       	ret

00001a42 <__fp_pscA>:
    1a42:	00 24       	eor	r0, r0
    1a44:	0a 94       	dec	r0
    1a46:	16 16       	cp	r1, r22
    1a48:	17 06       	cpc	r1, r23
    1a4a:	18 06       	cpc	r1, r24
    1a4c:	09 06       	cpc	r0, r25
    1a4e:	08 95       	ret

00001a50 <__fp_pscB>:
    1a50:	00 24       	eor	r0, r0
    1a52:	0a 94       	dec	r0
    1a54:	12 16       	cp	r1, r18
    1a56:	13 06       	cpc	r1, r19
    1a58:	14 06       	cpc	r1, r20
    1a5a:	05 06       	cpc	r0, r21
    1a5c:	08 95       	ret

00001a5e <__fp_round>:
    1a5e:	09 2e       	mov	r0, r25
    1a60:	03 94       	inc	r0
    1a62:	00 0c       	add	r0, r0
    1a64:	11 f4       	brne	.+4      	; 0x1a6a <__fp_round+0xc>
    1a66:	88 23       	and	r24, r24
    1a68:	52 f0       	brmi	.+20     	; 0x1a7e <__fp_round+0x20>
    1a6a:	bb 0f       	add	r27, r27
    1a6c:	40 f4       	brcc	.+16     	; 0x1a7e <__fp_round+0x20>
    1a6e:	bf 2b       	or	r27, r31
    1a70:	11 f4       	brne	.+4      	; 0x1a76 <__fp_round+0x18>
    1a72:	60 ff       	sbrs	r22, 0
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <__fp_round+0x20>
    1a76:	6f 5f       	subi	r22, 0xFF	; 255
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7e:	08 95       	ret

00001a80 <__fp_split3>:
    1a80:	57 fd       	sbrc	r21, 7
    1a82:	90 58       	subi	r25, 0x80	; 128
    1a84:	44 0f       	add	r20, r20
    1a86:	55 1f       	adc	r21, r21
    1a88:	59 f0       	breq	.+22     	; 0x1aa0 <__fp_splitA+0x10>
    1a8a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a8c:	71 f0       	breq	.+28     	; 0x1aaa <__fp_splitA+0x1a>
    1a8e:	47 95       	ror	r20

00001a90 <__fp_splitA>:
    1a90:	88 0f       	add	r24, r24
    1a92:	97 fb       	bst	r25, 7
    1a94:	99 1f       	adc	r25, r25
    1a96:	61 f0       	breq	.+24     	; 0x1ab0 <__fp_splitA+0x20>
    1a98:	9f 3f       	cpi	r25, 0xFF	; 255
    1a9a:	79 f0       	breq	.+30     	; 0x1aba <__fp_splitA+0x2a>
    1a9c:	87 95       	ror	r24
    1a9e:	08 95       	ret
    1aa0:	12 16       	cp	r1, r18
    1aa2:	13 06       	cpc	r1, r19
    1aa4:	14 06       	cpc	r1, r20
    1aa6:	55 1f       	adc	r21, r21
    1aa8:	f2 cf       	rjmp	.-28     	; 0x1a8e <__fp_split3+0xe>
    1aaa:	46 95       	lsr	r20
    1aac:	f1 df       	rcall	.-30     	; 0x1a90 <__fp_splitA>
    1aae:	08 c0       	rjmp	.+16     	; 0x1ac0 <__fp_splitA+0x30>
    1ab0:	16 16       	cp	r1, r22
    1ab2:	17 06       	cpc	r1, r23
    1ab4:	18 06       	cpc	r1, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	f1 cf       	rjmp	.-30     	; 0x1a9c <__fp_splitA+0xc>
    1aba:	86 95       	lsr	r24
    1abc:	71 05       	cpc	r23, r1
    1abe:	61 05       	cpc	r22, r1
    1ac0:	08 94       	sec
    1ac2:	08 95       	ret

00001ac4 <__fp_zero>:
    1ac4:	e8 94       	clt

00001ac6 <__fp_szero>:
    1ac6:	bb 27       	eor	r27, r27
    1ac8:	66 27       	eor	r22, r22
    1aca:	77 27       	eor	r23, r23
    1acc:	cb 01       	movw	r24, r22
    1ace:	97 f9       	bld	r25, 7
    1ad0:	08 95       	ret

00001ad2 <__mulsf3>:
    1ad2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__mulsf3x>
    1ad6:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__fp_round>
    1ada:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__fp_pscA>
    1ade:	38 f0       	brcs	.+14     	; 0x1aee <__mulsf3+0x1c>
    1ae0:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__fp_pscB>
    1ae4:	20 f0       	brcs	.+8      	; 0x1aee <__mulsf3+0x1c>
    1ae6:	95 23       	and	r25, r21
    1ae8:	11 f0       	breq	.+4      	; 0x1aee <__mulsf3+0x1c>
    1aea:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_inf>
    1aee:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__fp_nan>
    1af2:	11 24       	eor	r1, r1
    1af4:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_szero>

00001af8 <__mulsf3x>:
    1af8:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <__fp_split3>
    1afc:	70 f3       	brcs	.-36     	; 0x1ada <__mulsf3+0x8>

00001afe <__mulsf3_pse>:
    1afe:	95 9f       	mul	r25, r21
    1b00:	c1 f3       	breq	.-16     	; 0x1af2 <__mulsf3+0x20>
    1b02:	95 0f       	add	r25, r21
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	55 1f       	adc	r21, r21
    1b08:	62 9f       	mul	r22, r18
    1b0a:	f0 01       	movw	r30, r0
    1b0c:	72 9f       	mul	r23, r18
    1b0e:	bb 27       	eor	r27, r27
    1b10:	f0 0d       	add	r31, r0
    1b12:	b1 1d       	adc	r27, r1
    1b14:	63 9f       	mul	r22, r19
    1b16:	aa 27       	eor	r26, r26
    1b18:	f0 0d       	add	r31, r0
    1b1a:	b1 1d       	adc	r27, r1
    1b1c:	aa 1f       	adc	r26, r26
    1b1e:	64 9f       	mul	r22, r20
    1b20:	66 27       	eor	r22, r22
    1b22:	b0 0d       	add	r27, r0
    1b24:	a1 1d       	adc	r26, r1
    1b26:	66 1f       	adc	r22, r22
    1b28:	82 9f       	mul	r24, r18
    1b2a:	22 27       	eor	r18, r18
    1b2c:	b0 0d       	add	r27, r0
    1b2e:	a1 1d       	adc	r26, r1
    1b30:	62 1f       	adc	r22, r18
    1b32:	73 9f       	mul	r23, r19
    1b34:	b0 0d       	add	r27, r0
    1b36:	a1 1d       	adc	r26, r1
    1b38:	62 1f       	adc	r22, r18
    1b3a:	83 9f       	mul	r24, r19
    1b3c:	a0 0d       	add	r26, r0
    1b3e:	61 1d       	adc	r22, r1
    1b40:	22 1f       	adc	r18, r18
    1b42:	74 9f       	mul	r23, r20
    1b44:	33 27       	eor	r19, r19
    1b46:	a0 0d       	add	r26, r0
    1b48:	61 1d       	adc	r22, r1
    1b4a:	23 1f       	adc	r18, r19
    1b4c:	84 9f       	mul	r24, r20
    1b4e:	60 0d       	add	r22, r0
    1b50:	21 1d       	adc	r18, r1
    1b52:	82 2f       	mov	r24, r18
    1b54:	76 2f       	mov	r23, r22
    1b56:	6a 2f       	mov	r22, r26
    1b58:	11 24       	eor	r1, r1
    1b5a:	9f 57       	subi	r25, 0x7F	; 127
    1b5c:	50 40       	sbci	r21, 0x00	; 0
    1b5e:	9a f0       	brmi	.+38     	; 0x1b86 <__mulsf3_pse+0x88>
    1b60:	f1 f0       	breq	.+60     	; 0x1b9e <__mulsf3_pse+0xa0>
    1b62:	88 23       	and	r24, r24
    1b64:	4a f0       	brmi	.+18     	; 0x1b78 <__mulsf3_pse+0x7a>
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	bb 1f       	adc	r27, r27
    1b6c:	66 1f       	adc	r22, r22
    1b6e:	77 1f       	adc	r23, r23
    1b70:	88 1f       	adc	r24, r24
    1b72:	91 50       	subi	r25, 0x01	; 1
    1b74:	50 40       	sbci	r21, 0x00	; 0
    1b76:	a9 f7       	brne	.-22     	; 0x1b62 <__mulsf3_pse+0x64>
    1b78:	9e 3f       	cpi	r25, 0xFE	; 254
    1b7a:	51 05       	cpc	r21, r1
    1b7c:	80 f0       	brcs	.+32     	; 0x1b9e <__mulsf3_pse+0xa0>
    1b7e:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_inf>
    1b82:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__fp_szero>
    1b86:	5f 3f       	cpi	r21, 0xFF	; 255
    1b88:	e4 f3       	brlt	.-8      	; 0x1b82 <__mulsf3_pse+0x84>
    1b8a:	98 3e       	cpi	r25, 0xE8	; 232
    1b8c:	d4 f3       	brlt	.-12     	; 0x1b82 <__mulsf3_pse+0x84>
    1b8e:	86 95       	lsr	r24
    1b90:	77 95       	ror	r23
    1b92:	67 95       	ror	r22
    1b94:	b7 95       	ror	r27
    1b96:	f7 95       	ror	r31
    1b98:	e7 95       	ror	r30
    1b9a:	9f 5f       	subi	r25, 0xFF	; 255
    1b9c:	c1 f7       	brne	.-16     	; 0x1b8e <__mulsf3_pse+0x90>
    1b9e:	fe 2b       	or	r31, r30
    1ba0:	88 0f       	add	r24, r24
    1ba2:	91 1d       	adc	r25, r1
    1ba4:	96 95       	lsr	r25
    1ba6:	87 95       	ror	r24
    1ba8:	97 f9       	bld	r25, 7
    1baa:	08 95       	ret
    1bac:	19 f4       	brne	.+6      	; 0x1bb4 <__mulsf3_pse+0xb6>
    1bae:	16 f4       	brtc	.+4      	; 0x1bb4 <__mulsf3_pse+0xb6>
    1bb0:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__fp_nan>
    1bb4:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__fp_mpack>

00001bb8 <sqrt>:
    1bb8:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_splitA>
    1bbc:	b8 f3       	brcs	.-18     	; 0x1bac <__mulsf3_pse+0xae>
    1bbe:	99 23       	and	r25, r25
    1bc0:	c9 f3       	breq	.-14     	; 0x1bb4 <__mulsf3_pse+0xb6>
    1bc2:	b6 f3       	brts	.-20     	; 0x1bb0 <__mulsf3_pse+0xb2>
    1bc4:	9f 57       	subi	r25, 0x7F	; 127
    1bc6:	55 0b       	sbc	r21, r21
    1bc8:	87 ff       	sbrs	r24, 7
    1bca:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fp_norm2>
    1bce:	00 24       	eor	r0, r0
    1bd0:	a0 e6       	ldi	r26, 0x60	; 96
    1bd2:	40 ea       	ldi	r20, 0xA0	; 160
    1bd4:	90 01       	movw	r18, r0
    1bd6:	80 58       	subi	r24, 0x80	; 128
    1bd8:	56 95       	lsr	r21
    1bda:	97 95       	ror	r25
    1bdc:	28 f4       	brcc	.+10     	; 0x1be8 <sqrt+0x30>
    1bde:	80 5c       	subi	r24, 0xC0	; 192
    1be0:	66 0f       	add	r22, r22
    1be2:	77 1f       	adc	r23, r23
    1be4:	88 1f       	adc	r24, r24
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <sqrt+0x38>
    1be8:	26 17       	cp	r18, r22
    1bea:	37 07       	cpc	r19, r23
    1bec:	48 07       	cpc	r20, r24
    1bee:	30 f4       	brcc	.+12     	; 0x1bfc <sqrt+0x44>
    1bf0:	62 1b       	sub	r22, r18
    1bf2:	73 0b       	sbc	r23, r19
    1bf4:	84 0b       	sbc	r24, r20
    1bf6:	20 29       	or	r18, r0
    1bf8:	31 29       	or	r19, r1
    1bfa:	4a 2b       	or	r20, r26
    1bfc:	a6 95       	lsr	r26
    1bfe:	17 94       	ror	r1
    1c00:	07 94       	ror	r0
    1c02:	20 25       	eor	r18, r0
    1c04:	31 25       	eor	r19, r1
    1c06:	4a 27       	eor	r20, r26
    1c08:	58 f7       	brcc	.-42     	; 0x1be0 <sqrt+0x28>
    1c0a:	66 0f       	add	r22, r22
    1c0c:	77 1f       	adc	r23, r23
    1c0e:	88 1f       	adc	r24, r24
    1c10:	20 f0       	brcs	.+8      	; 0x1c1a <sqrt+0x62>
    1c12:	26 17       	cp	r18, r22
    1c14:	37 07       	cpc	r19, r23
    1c16:	48 07       	cpc	r20, r24
    1c18:	30 f4       	brcc	.+12     	; 0x1c26 <sqrt+0x6e>
    1c1a:	62 0b       	sbc	r22, r18
    1c1c:	73 0b       	sbc	r23, r19
    1c1e:	84 0b       	sbc	r24, r20
    1c20:	20 0d       	add	r18, r0
    1c22:	31 1d       	adc	r19, r1
    1c24:	41 1d       	adc	r20, r1
    1c26:	a0 95       	com	r26
    1c28:	81 f7       	brne	.-32     	; 0x1c0a <sqrt+0x52>
    1c2a:	b9 01       	movw	r22, r18
    1c2c:	84 2f       	mov	r24, r20
    1c2e:	91 58       	subi	r25, 0x81	; 129
    1c30:	88 0f       	add	r24, r24
    1c32:	96 95       	lsr	r25
    1c34:	87 95       	ror	r24
    1c36:	08 95       	ret

00001c38 <__fp_mpack>:
    1c38:	9f 3f       	cpi	r25, 0xFF	; 255
    1c3a:	31 f0       	breq	.+12     	; 0x1c48 <__fp_mpack_finite+0xc>

00001c3c <__fp_mpack_finite>:
    1c3c:	91 50       	subi	r25, 0x01	; 1
    1c3e:	20 f4       	brcc	.+8      	; 0x1c48 <__fp_mpack_finite+0xc>
    1c40:	87 95       	ror	r24
    1c42:	77 95       	ror	r23
    1c44:	67 95       	ror	r22
    1c46:	b7 95       	ror	r27
    1c48:	88 0f       	add	r24, r24
    1c4a:	91 1d       	adc	r25, r1
    1c4c:	96 95       	lsr	r25
    1c4e:	87 95       	ror	r24
    1c50:	97 f9       	bld	r25, 7
    1c52:	08 95       	ret

00001c54 <__fp_norm2>:
    1c54:	91 50       	subi	r25, 0x01	; 1
    1c56:	50 40       	sbci	r21, 0x00	; 0
    1c58:	66 0f       	add	r22, r22
    1c5a:	77 1f       	adc	r23, r23
    1c5c:	88 1f       	adc	r24, r24
    1c5e:	d2 f7       	brpl	.-12     	; 0x1c54 <__fp_norm2>
    1c60:	08 95       	ret

00001c62 <do_rand>:
    1c62:	8f 92       	push	r8
    1c64:	9f 92       	push	r9
    1c66:	af 92       	push	r10
    1c68:	bf 92       	push	r11
    1c6a:	cf 92       	push	r12
    1c6c:	df 92       	push	r13
    1c6e:	ef 92       	push	r14
    1c70:	ff 92       	push	r15
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	ec 01       	movw	r28, r24
    1c78:	68 81       	ld	r22, Y
    1c7a:	79 81       	ldd	r23, Y+1	; 0x01
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c80:	61 15       	cp	r22, r1
    1c82:	71 05       	cpc	r23, r1
    1c84:	81 05       	cpc	r24, r1
    1c86:	91 05       	cpc	r25, r1
    1c88:	21 f4       	brne	.+8      	; 0x1c92 <do_rand+0x30>
    1c8a:	64 e2       	ldi	r22, 0x24	; 36
    1c8c:	79 ed       	ldi	r23, 0xD9	; 217
    1c8e:	8b e5       	ldi	r24, 0x5B	; 91
    1c90:	97 e0       	ldi	r25, 0x07	; 7
    1c92:	2d e1       	ldi	r18, 0x1D	; 29
    1c94:	33 ef       	ldi	r19, 0xF3	; 243
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__divmodsi4>
    1c9e:	49 01       	movw	r8, r18
    1ca0:	5a 01       	movw	r10, r20
    1ca2:	9b 01       	movw	r18, r22
    1ca4:	ac 01       	movw	r20, r24
    1ca6:	a7 ea       	ldi	r26, 0xA7	; 167
    1ca8:	b1 e4       	ldi	r27, 0x41	; 65
    1caa:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__muluhisi3>
    1cae:	6b 01       	movw	r12, r22
    1cb0:	7c 01       	movw	r14, r24
    1cb2:	ac ee       	ldi	r26, 0xEC	; 236
    1cb4:	b4 ef       	ldi	r27, 0xF4	; 244
    1cb6:	a5 01       	movw	r20, r10
    1cb8:	94 01       	movw	r18, r8
    1cba:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__mulohisi3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	8c 0d       	add	r24, r12
    1cc4:	9d 1d       	adc	r25, r13
    1cc6:	ae 1d       	adc	r26, r14
    1cc8:	bf 1d       	adc	r27, r15
    1cca:	b7 ff       	sbrs	r27, 7
    1ccc:	03 c0       	rjmp	.+6      	; 0x1cd4 <do_rand+0x72>
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	a1 09       	sbc	r26, r1
    1cd2:	b0 48       	sbci	r27, 0x80	; 128
    1cd4:	88 83       	st	Y, r24
    1cd6:	99 83       	std	Y+1, r25	; 0x01
    1cd8:	aa 83       	std	Y+2, r26	; 0x02
    1cda:	bb 83       	std	Y+3, r27	; 0x03
    1cdc:	9f 77       	andi	r25, 0x7F	; 127
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	ff 90       	pop	r15
    1ce4:	ef 90       	pop	r14
    1ce6:	df 90       	pop	r13
    1ce8:	cf 90       	pop	r12
    1cea:	bf 90       	pop	r11
    1cec:	af 90       	pop	r10
    1cee:	9f 90       	pop	r9
    1cf0:	8f 90       	pop	r8
    1cf2:	08 95       	ret

00001cf4 <rand_r>:
    1cf4:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <do_rand>
    1cf8:	08 95       	ret

00001cfa <rand>:
    1cfa:	8f e0       	ldi	r24, 0x0F	; 15
    1cfc:	91 e0       	ldi	r25, 0x01	; 1
    1cfe:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <do_rand>
    1d02:	08 95       	ret

00001d04 <srand>:
    1d04:	a0 e0       	ldi	r26, 0x00	; 0
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <next>
    1d0c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <next+0x1>
    1d10:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <next+0x2>
    1d14:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <next+0x3>
    1d18:	08 95       	ret

00001d1a <eeprom_read_byte>:
    1d1a:	f9 99       	sbic	0x1f, 1	; 31
    1d1c:	fe cf       	rjmp	.-4      	; 0x1d1a <eeprom_read_byte>
    1d1e:	92 bd       	out	0x22, r25	; 34
    1d20:	81 bd       	out	0x21, r24	; 33
    1d22:	f8 9a       	sbi	0x1f, 0	; 31
    1d24:	99 27       	eor	r25, r25
    1d26:	80 b5       	in	r24, 0x20	; 32
    1d28:	08 95       	ret

00001d2a <eeprom_write_byte>:
    1d2a:	26 2f       	mov	r18, r22

00001d2c <eeprom_write_r18>:
    1d2c:	f9 99       	sbic	0x1f, 1	; 31
    1d2e:	fe cf       	rjmp	.-4      	; 0x1d2c <eeprom_write_r18>
    1d30:	1f ba       	out	0x1f, r1	; 31
    1d32:	92 bd       	out	0x22, r25	; 34
    1d34:	81 bd       	out	0x21, r24	; 33
    1d36:	20 bd       	out	0x20, r18	; 32
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	fa 9a       	sbi	0x1f, 2	; 31
    1d3e:	f9 9a       	sbi	0x1f, 1	; 31
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	01 96       	adiw	r24, 0x01	; 1
    1d44:	08 95       	ret

00001d46 <__divmodsi4>:
    1d46:	05 2e       	mov	r0, r21
    1d48:	97 fb       	bst	r25, 7
    1d4a:	1e f4       	brtc	.+6      	; 0x1d52 <__divmodsi4+0xc>
    1d4c:	00 94       	com	r0
    1d4e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__negsi2>
    1d52:	57 fd       	sbrc	r21, 7
    1d54:	07 d0       	rcall	.+14     	; 0x1d64 <__divmodsi4_neg2>
    1d56:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__udivmodsi4>
    1d5a:	07 fc       	sbrc	r0, 7
    1d5c:	03 d0       	rcall	.+6      	; 0x1d64 <__divmodsi4_neg2>
    1d5e:	4e f4       	brtc	.+18     	; 0x1d72 <__divmodsi4_exit>
    1d60:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__negsi2>

00001d64 <__divmodsi4_neg2>:
    1d64:	50 95       	com	r21
    1d66:	40 95       	com	r20
    1d68:	30 95       	com	r19
    1d6a:	21 95       	neg	r18
    1d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6e:	4f 4f       	sbci	r20, 0xFF	; 255
    1d70:	5f 4f       	sbci	r21, 0xFF	; 255

00001d72 <__divmodsi4_exit>:
    1d72:	08 95       	ret

00001d74 <__negsi2>:
    1d74:	90 95       	com	r25
    1d76:	80 95       	com	r24
    1d78:	70 95       	com	r23
    1d7a:	61 95       	neg	r22
    1d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d80:	9f 4f       	sbci	r25, 0xFF	; 255
    1d82:	08 95       	ret

00001d84 <__muluhisi3>:
    1d84:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__umulhisi3>
    1d88:	a5 9f       	mul	r26, r21
    1d8a:	90 0d       	add	r25, r0
    1d8c:	b4 9f       	mul	r27, r20
    1d8e:	90 0d       	add	r25, r0
    1d90:	a4 9f       	mul	r26, r20
    1d92:	80 0d       	add	r24, r0
    1d94:	91 1d       	adc	r25, r1
    1d96:	11 24       	eor	r1, r1
    1d98:	08 95       	ret

00001d9a <__mulshisi3>:
    1d9a:	b7 ff       	sbrs	r27, 7
    1d9c:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__muluhisi3>

00001da0 <__mulohisi3>:
    1da0:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__muluhisi3>
    1da4:	82 1b       	sub	r24, r18
    1da6:	93 0b       	sbc	r25, r19
    1da8:	08 95       	ret

00001daa <__udivmodsi4>:
    1daa:	a1 e2       	ldi	r26, 0x21	; 33
    1dac:	1a 2e       	mov	r1, r26
    1dae:	aa 1b       	sub	r26, r26
    1db0:	bb 1b       	sub	r27, r27
    1db2:	fd 01       	movw	r30, r26
    1db4:	0d c0       	rjmp	.+26     	; 0x1dd0 <__udivmodsi4_ep>

00001db6 <__udivmodsi4_loop>:
    1db6:	aa 1f       	adc	r26, r26
    1db8:	bb 1f       	adc	r27, r27
    1dba:	ee 1f       	adc	r30, r30
    1dbc:	ff 1f       	adc	r31, r31
    1dbe:	a2 17       	cp	r26, r18
    1dc0:	b3 07       	cpc	r27, r19
    1dc2:	e4 07       	cpc	r30, r20
    1dc4:	f5 07       	cpc	r31, r21
    1dc6:	20 f0       	brcs	.+8      	; 0x1dd0 <__udivmodsi4_ep>
    1dc8:	a2 1b       	sub	r26, r18
    1dca:	b3 0b       	sbc	r27, r19
    1dcc:	e4 0b       	sbc	r30, r20
    1dce:	f5 0b       	sbc	r31, r21

00001dd0 <__udivmodsi4_ep>:
    1dd0:	66 1f       	adc	r22, r22
    1dd2:	77 1f       	adc	r23, r23
    1dd4:	88 1f       	adc	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	1a 94       	dec	r1
    1dda:	69 f7       	brne	.-38     	; 0x1db6 <__udivmodsi4_loop>
    1ddc:	60 95       	com	r22
    1dde:	70 95       	com	r23
    1de0:	80 95       	com	r24
    1de2:	90 95       	com	r25
    1de4:	9b 01       	movw	r18, r22
    1de6:	ac 01       	movw	r20, r24
    1de8:	bd 01       	movw	r22, r26
    1dea:	cf 01       	movw	r24, r30
    1dec:	08 95       	ret

00001dee <_exit>:
    1dee:	f8 94       	cli

00001df0 <__stop_program>:
    1df0:	ff cf       	rjmp	.-2      	; 0x1df0 <__stop_program>
