
build/make_a_triangle.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	2f 05       	cpc	r18, r15
      6a:	86 05       	cpc	r24, r6
      6c:	9a 05       	cpc	r25, r10
      6e:	cb 05       	cpc	r28, r11
      70:	d2 05       	cpc	r29, r2
      72:	b1 05       	cpc	r27, r1
      74:	d5 05       	cpc	r29, r5
      76:	33 07       	cpc	r19, r19
      78:	24 08       	sbc	r2, r4
      7a:	24 08       	sbc	r2, r4
      7c:	3c 07       	cpc	r19, r28
      7e:	3f 07       	cpc	r19, r31
      80:	42 07       	cpc	r20, r18
      82:	44 07       	cpc	r20, r20
      84:	46 07       	cpc	r20, r22
      86:	48 07       	cpc	r20, r24
      88:	f9 07       	cpc	r31, r25
      8a:	5a 07       	cpc	r21, r26

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 e0       	ldi	r30, 0x04	; 4
      b8:	f8 e1       	ldi	r31, 0x18	; 24
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a3 38       	cpi	r26, 0x83	; 131
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <main>
      da:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
    
    new_message = 1;
}

message_t *message_tx() 
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
    // Transmit my ID number
    msg.type = NORMAL;
      e6:	c4 e1       	ldi	r28, 0x14	; 20
      e8:	d1 e0       	ldi	r29, 0x01	; 1
      ea:	19 86       	std	Y+9, r1	; 0x09
    msg.data[0] = (uint8_t) kilo_uid; 
      ec:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <kilo_uid>
      f0:	88 83       	st	Y, r24
    msg.crc = message_crc(&msg);
      f2:	ce 01       	movw	r24, r28
      f4:	0e 94 37 08 	call	0x106e	; 0x106e <message_crc>
      f8:	9b 87       	std	Y+11, r25	; 0x0b
      fa:	8a 87       	std	Y+10, r24	; 0x0a

    return &msg;
}
      fc:	ce 01       	movw	r24, r28
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	08 95       	ret

00000104 <setup>:
    }
}

void setup() 
{ 
    msg.type = NORMAL;
     104:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <msg+0x9>
    msg.data[0] = kilo_uid;
     108:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <kilo_uid>
     10c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <msg>
    msg.data[1] = 0;
     110:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <msg+0x1>
    msg.data[2] = 0;
     114:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <msg+0x2>
    msg.data[3] = 0;
     118:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <msg+0x3>
    msg.data[4] = 0;
     11c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <msg+0x4>
    msg.data[5] = 0;
     120:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <msg+0x5>
    msg.data[6] = 0;
     124:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <msg+0x6>
    msg.data[7] = 0;
     128:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <msg+0x7>
    msg.crc = message_crc(&msg);
     12c:	84 e1       	ldi	r24, 0x14	; 20
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	0e 94 37 08 	call	0x106e	; 0x106e <message_crc>
     134:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <msg+0xb>
     138:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <msg+0xa>
    if(kilo_uid == 1)
     13c:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <kilo_uid>
     140:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_uid+0x1>
     144:	81 30       	cpi	r24, 0x01	; 1
     146:	91 05       	cpc	r25, r1
     148:	11 f4       	brne	.+4      	; 0x14e <setup+0x4a>
    {
        set_color(RGB(1,0,0));
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	08 c0       	rjmp	.+16     	; 0x15e <setup+0x5a>
    }
    else if(kilo_uid == 2)
     14e:	82 30       	cpi	r24, 0x02	; 2
     150:	91 05       	cpc	r25, r1
     152:	11 f4       	brne	.+4      	; 0x158 <setup+0x54>
    {
        set_color(RGB(0,1,0));
     154:	84 e0       	ldi	r24, 0x04	; 4
     156:	03 c0       	rjmp	.+6      	; 0x15e <setup+0x5a>
    }
    else if(kilo_uid == 3)
     158:	03 97       	sbiw	r24, 0x03	; 3
     15a:	19 f4       	brne	.+6      	; 0x162 <setup+0x5e>
    {
        set_color(RGB(0,0,1));
     15c:	80 e1       	ldi	r24, 0x10	; 16
     15e:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <set_color>
     162:	08 95       	ret

00000164 <message_rx>:

// read message, and get the distance
void message_rx(message_t *m, distance_measurement_t *d) 
{
    // When I've recieved a message, figure out who it's from
    friend_uid = m->data[0];
     164:	fc 01       	movw	r30, r24
     166:	80 81       	ld	r24, Z
     168:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <friend_uid>
    if(friend_uid == 3)
     16c:	83 30       	cpi	r24, 0x03	; 3
     16e:	41 f4       	brne	.+16     	; 0x180 <message_rx+0x1c>
     170:	cb 01       	movw	r24, r22
    {
        distance_from_friend = estimate_distance(d);
     172:	0e 94 08 03 	call	0x610	; 0x610 <estimate_distance>
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <distance_from_friend+0x1>
     17c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <distance_from_friend>
    }
    
    new_message = 1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <new_message>
     186:	08 95       	ret

00000188 <set_motion>:
   

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     188:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <current_motion>
     18c:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <current_motion+0x1>
     190:	28 17       	cp	r18, r24
     192:	39 07       	cpc	r19, r25
     194:	21 f1       	breq	.+72     	; 0x1de <set_motion+0x56>
    {
        current_motion = new_motion;
     196:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <current_motion+0x1>
     19a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <current_motion>
        
        if (current_motion == STOP)
     19e:	00 97       	sbiw	r24, 0x00	; 0
     1a0:	11 f4       	brne	.+4      	; 0x1a6 <set_motion+0x1e>
        {
            set_motors(0, 0);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	19 c0       	rjmp	.+50     	; 0x1d8 <set_motion+0x50>
        }
        else if (current_motion == FORWARD)
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	91 05       	cpc	r25, r1
     1aa:	39 f4       	brne	.+14     	; 0x1ba <set_motion+0x32>
        {
            spinup_motors();
     1ac:	0e 94 2f 02 	call	0x45e	; 0x45e <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     1b0:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <kilo_straight_right>
     1b4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <kilo_straight_left>
     1b8:	10 c0       	rjmp	.+32     	; 0x1da <set_motion+0x52>
        }
        else if (current_motion == LEFT)
     1ba:	82 30       	cpi	r24, 0x02	; 2
     1bc:	91 05       	cpc	r25, r1
     1be:	31 f4       	brne	.+12     	; 0x1cc <set_motion+0x44>
        {
            spinup_motors();
     1c0:	0e 94 2f 02 	call	0x45e	; 0x45e <spinup_motors>
            set_motors(kilo_turn_left, 0);
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <kilo_turn_left>
     1ca:	07 c0       	rjmp	.+14     	; 0x1da <set_motion+0x52>
        }
        else if (current_motion == RIGHT)
     1cc:	03 97       	sbiw	r24, 0x03	; 3
     1ce:	39 f4       	brne	.+14     	; 0x1de <set_motion+0x56>
        {
            spinup_motors();
     1d0:	0e 94 2f 02 	call	0x45e	; 0x45e <spinup_motors>
            set_motors(0, kilo_turn_right);
     1d4:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <kilo_turn_right>
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	0c 94 2a 02 	jmp	0x454	; 0x454 <set_motors>
     1de:	08 95       	ret

000001e0 <loop>:

}


void loop() 
{
     1e0:	cf 93       	push	r28
    if(new_message == 1)
     1e2:	c0 91 0f 01 	lds	r28, 0x010F	; 0x80010f <new_message>
     1e6:	c1 30       	cpi	r28, 0x01	; 1
     1e8:	39 f5       	brne	.+78     	; 0x238 <loop+0x58>
    {
        new_message = 0;
     1ea:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <new_message>
        // get the current distance from the message
        if(kilo_uid == 2)
     1ee:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <kilo_uid>
     1f2:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <kilo_uid+0x1>
     1f6:	02 97       	sbiw	r24, 0x02	; 2
     1f8:	f9 f4       	brne	.+62     	; 0x238 <loop+0x58>
        {
            if(kilo_made_it == 0)
     1fa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     1fe:	81 11       	cpse	r24, r1
     200:	1b c0       	rjmp	.+54     	; 0x238 <loop+0x58>
            {
                set_color(RGB(0,1,0));
     202:	84 e0       	ldi	r24, 0x04	; 4
     204:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <set_color>
                if(distance_from_friend < 80)
     208:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <distance_from_friend>
     20c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <distance_from_friend+0x1>
     210:	80 35       	cpi	r24, 0x50	; 80
     212:	91 05       	cpc	r25, r1
     214:	44 f4       	brge	.+16     	; 0x226 <loop+0x46>
                {
                    set_color(RGB(0,1,0));
     216:	84 e0       	ldi	r24, 0x04	; 4
     218:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <set_color>
                    set_motion(FORWARD);
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	90 e0       	ldi	r25, 0x00	; 0
                    kilo_made_it = 1;
                }
            }
        }
    }
}
     220:	cf 91       	pop	r28
            {
                set_color(RGB(0,1,0));
                if(distance_from_friend < 80)
                {
                    set_color(RGB(0,1,0));
                    set_motion(FORWARD);
     222:	0c 94 c4 00 	jmp	0x188	; 0x188 <set_motion>
                }
                else
                {
                    set_motion(STOP);
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 c4 00 	call	0x188	; 0x188 <set_motion>
                    set_color(RGB(1,1,1));
     22e:	85 e1       	ldi	r24, 0x15	; 21
     230:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <set_color>
                    kilo_made_it = 1;
     234:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <__data_end>
                }
            }
        }
    }
}
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     23c:	08 95       	ret

0000023e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	08 95       	ret

00000244 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     244:	08 95       	ret

00000246 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     246:	df 92       	push	r13
     248:	ef 92       	push	r14
     24a:	ff 92       	push	r15
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
    cli();
     254:	f8 94       	cli

    ports_off();
     256:	14 b8       	out	0x04, r1	; 4
     258:	17 b8       	out	0x07, r1	; 7
     25a:	1a b8       	out	0x0a, r1	; 10
     25c:	15 b8       	out	0x05, r1	; 5
     25e:	18 b8       	out	0x08, r1	; 8
     260:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     262:	52 9a       	sbi	0x0a, 2	; 10
     264:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     266:	14 bc       	out	0x24, r1	; 36
     268:	85 e0       	ldi	r24, 0x05	; 5
     26a:	85 bd       	out	0x25, r24	; 37
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	87 bd       	out	0x27, r24	; 39
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     276:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     27a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     27e:	2f e8       	ldi	r18, 0x8F	; 143
     280:	3b e0       	ldi	r19, 0x0B	; 11
     282:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     286:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     28a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     28e:	53 98       	cbi	0x0a, 3	; 10
     290:	23 98       	cbi	0x04, 3	; 4
     292:	91 ea       	ldi	r25, 0xA1	; 161
     294:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     298:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     29c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     2a0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     2a4:	8b e0       	ldi	r24, 0x0B	; 11
     2a6:	80 bf       	out	0x30, r24	; 48
     2a8:	83 e0       	ldi	r24, 0x03	; 3
     2aa:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     2ae:	86 e0       	ldi	r24, 0x06	; 6
     2b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     2b4:	83 e8       	ldi	r24, 0x83	; 131
     2b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2be:	80 64       	ori	r24, 0x40	; 64
     2c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2c8:	86 fd       	sbrc	r24, 6
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <kilo_init+0x7e>
    adc_trigger_high_gain();
     2cc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     2d0:	83 ea       	ldi	r24, 0xA3	; 163
     2d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
    if (osccal != 0xFF)
     2e4:	8f 3f       	cpi	r24, 0xFF	; 255
     2e6:	11 f0       	breq	.+4      	; 0x2ec <kilo_init+0xa6>
        OSCCAL = osccal;
     2e8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     2ec:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_busy>
    rx_leadingbit = 1;
     2f0:	c1 e0       	ldi	r28, 0x01	; 1
     2f2:	c0 93 25 01 	sts	0x0125, r28	; 0x800125 <rx_leadingbit>
    rx_leadingbyte = 1;
     2f6:	c0 93 69 01 	sts	0x0169, r28	; 0x800169 <rx_leadingbyte>
    rx_byteindex = 0;
     2fa:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <rx_byteindex>
    rx_bytevalue = 0;
     2fe:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     302:	80 e9       	ldi	r24, 0x90	; 144
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
     30a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     30e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <tx_mask>
     312:	88 73       	andi	r24, 0x38	; 56
     314:	11 f0       	breq	.+4      	; 0x31a <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     316:	c0 93 42 01 	sts	0x0142, r28	; 0x800142 <tx_mask>
    tx_clock = 0;
     31a:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <tx_clock+0x1>
     31e:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <tx_clock>
    tx_increment = 255;
     322:	8f ef       	ldi	r24, 0xFF	; 255
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <tx_increment+0x1>
     32a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <tx_increment>
    kilo_ticks = 0;
     32e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <kilo_ticks>
     332:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <kilo_ticks+0x1>
     336:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <kilo_ticks+0x2>
     33a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <kilo_ticks+0x3>
    kilo_state = IDLE;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
    kilo_tx_period = 3906;
     344:	82 e4       	ldi	r24, 0x42	; 66
     346:	9f e0       	ldi	r25, 0x0F	; 15
     348:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <kilo_tx_period+0x1>
     34c:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     350:	80 eb       	ldi	r24, 0xB0	; 176
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
     358:	c8 2f       	mov	r28, r24
     35a:	81 eb       	ldi	r24, 0xB1	; 177
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
     362:	2c 2f       	mov	r18, r28
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	38 2b       	or	r19, r24
     368:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <kilo_uid+0x1>
     36c:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     370:	85 e0       	ldi	r24, 0x05	; 5
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
     378:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     37c:	89 e0       	ldi	r24, 0x09	; 9
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
     384:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     388:	8c e0       	ldi	r24, 0x0C	; 12
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
     390:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     394:	84 e1       	ldi	r24, 0x14	; 20
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
     39c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <kilo_straight_right>
     3a0:	0d e4       	ldi	r16, 0x4D	; 77
     3a2:	11 e0       	ldi	r17, 0x01	; 1
     3a4:	56 e2       	ldi	r21, 0x26	; 38
     3a6:	e5 2e       	mov	r14, r21
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	f5 2e       	mov	r15, r21
     3ac:	c0 e2       	ldi	r28, 0x20	; 32
     3ae:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     3b0:	ce 01       	movw	r24, r28
     3b2:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
     3b6:	d8 2e       	mov	r13, r24
     3b8:	ce 01       	movw	r24, r28
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
     3c0:	2d 2d       	mov	r18, r13
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	32 2f       	mov	r19, r18
     3c6:	22 27       	eor	r18, r18
     3c8:	28 2b       	or	r18, r24
     3ca:	f8 01       	movw	r30, r16
     3cc:	21 93       	st	Z+, r18
     3ce:	31 93       	st	Z+, r19
     3d0:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     3d2:	ce 01       	movw	r24, r28
     3d4:	c0 96       	adiw	r24, 0x30	; 48
     3d6:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
     3da:	d8 2e       	mov	r13, r24
     3dc:	ce 01       	movw	r24, r28
     3de:	c1 96       	adiw	r24, 0x31	; 49
     3e0:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_read_byte>
     3e4:	2d 2d       	mov	r18, r13
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	32 2f       	mov	r19, r18
     3ea:	22 27       	eor	r18, r18
     3ec:	28 2b       	or	r18, r24
     3ee:	f7 01       	movw	r30, r14
     3f0:	21 93       	st	Z+, r18
     3f2:	31 93       	st	Z+, r19
     3f4:	7f 01       	movw	r14, r30
     3f6:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     3f8:	cc 33       	cpi	r28, 0x3C	; 60
     3fa:	d1 05       	cpc	r29, r1
     3fc:	c9 f6       	brne	.-78     	; 0x3b0 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     3fe:	78 94       	sei
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	08 95       	ret

00000410 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     410:	1f 92       	push	r1
     412:	0f 92       	push	r0
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	0f 92       	push	r0
     418:	11 24       	eor	r1, r1
     41a:	8f 93       	push	r24
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	a8 95       	wdr
     422:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     426:	88 61       	ori	r24, 0x18	; 24
     428:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     42c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     430:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     432:	8f 91       	pop	r24
     434:	0f 90       	pop	r0
     436:	0f be       	out	0x3f, r0	; 63
     438:	0f 90       	pop	r0
     43a:	1f 90       	pop	r1
     43c:	18 95       	reti

0000043e <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	41 f0       	breq	.+16     	; 0x452 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     442:	ef ec       	ldi	r30, 0xCF	; 207
     444:	f7 e0       	ldi	r31, 0x07	; 7
     446:	31 97       	sbiw	r30, 0x01	; 1
     448:	f1 f7       	brne	.-4      	; 0x446 <delay+0x8>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <delay+0xe>
     44c:	00 00       	nop
        _delay_ms(1);
        ms--;
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f6 cf       	rjmp	.-20     	; 0x43e <delay>
    }
}
     452:	08 95       	ret

00000454 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     454:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     458:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     45c:	08 95       	ret

0000045e <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     45e:	8f ef       	ldi	r24, 0xFF	; 255
     460:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     464:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     468:	8f e0       	ldi	r24, 0x0F	; 15
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <delay>

00000470 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     470:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <rx_busy>
     474:	81 11       	cpse	r24, r1
     476:	1e c0       	rjmp	.+60     	; 0x4b4 <get_ambientlight+0x44>
        cli();
     478:	f8 94       	cli
        adc_setup_conversion(7);
     47a:	87 e0       	ldi	r24, 0x07	; 7
     47c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     480:	83 e8       	ldi	r24, 0x83	; 131
     482:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     486:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     48a:	80 64       	ori	r24, 0x40	; 64
     48c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     490:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     494:	86 fd       	sbrc	r24, 6
     496:	fc cf       	rjmp	.-8      	; 0x490 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     498:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     49c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     4a0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4a4:	23 ea       	ldi	r18, 0xA3	; 163
     4a6:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     4b0:	78 94       	sei
     4b2:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     4b4:	8f ef       	ldi	r24, 0xFF	; 255
     4b6:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     4b8:	08 95       	ret

000004ba <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     4ba:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <rx_busy>
     4be:	81 11       	cpse	r24, r1
     4c0:	1e c0       	rjmp	.+60     	; 0x4fe <get_temperature+0x44>
        cli();
     4c2:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     4c4:	88 ec       	ldi	r24, 0xC8	; 200
     4c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     4ca:	87 e8       	ldi	r24, 0x87	; 135
     4cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     4d0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4d4:	80 64       	ori	r24, 0x40	; 64
     4d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     4da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4de:	86 fd       	sbrc	r24, 6
     4e0:	fc cf       	rjmp	.-8      	; 0x4da <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     4e2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4e6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     4ea:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4ee:	23 ea       	ldi	r18, 0xA3	; 163
     4f0:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     4fa:	78 94       	sei
     4fc:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     502:	08 95       	ret

00000504 <rand_hard>:

uint8_t rand_hard() {
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     50c:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     50e:	e3 ea       	ldi	r30, 0xA3	; 163
     510:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     512:	c6 e0       	ldi	r28, 0x06	; 6
     514:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     516:	a1 e0       	ldi	r26, 0x01	; 1
     518:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     51a:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     51c:	f8 94       	cli
            adc_setup_conversion(6);
     51e:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     522:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     526:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     52a:	40 64       	ori	r20, 0x40	; 64
     52c:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     530:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     534:	46 fd       	sbrc	r20, 6
     536:	fc cf       	rjmp	.-8      	; 0x530 <rand_hard+0x2c>
            a = ADCW&0x1;
     538:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     53c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     540:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     542:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     546:	50 64       	ori	r21, 0x40	; 64
     548:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     54c:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     550:	56 fd       	sbrc	r21, 6
     552:	fc cf       	rjmp	.-8      	; 0x54c <rand_hard+0x48>
            b = ADCW&0x1;
     554:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     558:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     55c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     560:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     564:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     568:	78 94       	sei
            tries++;
     56a:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     56c:	61 70       	andi	r22, 0x01	; 1
     56e:	46 17       	cp	r20, r22
     570:	51 f0       	breq	.+20     	; 0x586 <rand_hard+0x82>
        if (a)
     572:	44 23       	and	r20, r20
     574:	59 f0       	breq	.+22     	; 0x58c <rand_hard+0x88>
            num |= (1<<i);
     576:	ad 01       	movw	r20, r26
     578:	02 2e       	mov	r0, r18
     57a:	01 c0       	rjmp	.+2      	; 0x57e <rand_hard+0x7a>
     57c:	44 0f       	add	r20, r20
     57e:	0a 94       	dec	r0
     580:	ea f7       	brpl	.-6      	; 0x57c <rand_hard+0x78>
     582:	84 2b       	or	r24, r20
     584:	03 c0       	rjmp	.+6      	; 0x58c <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     586:	90 38       	cpi	r25, 0x80	; 128
     588:	49 f6       	brne	.-110    	; 0x51c <rand_hard+0x18>
     58a:	f3 cf       	rjmp	.-26     	; 0x572 <rand_hard+0x6e>
     58c:	2f 5f       	subi	r18, 0xFF	; 255
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     590:	28 30       	cpi	r18, 0x08	; 8
     592:	31 05       	cpc	r19, r1
     594:	09 f0       	breq	.+2      	; 0x598 <rand_hard+0x94>
     596:	c1 cf       	rjmp	.-126    	; 0x51a <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     59e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5a2:	98 e0       	ldi	r25, 0x08	; 8
     5a4:	89 9f       	mul	r24, r25
     5a6:	90 01       	movw	r18, r0
     5a8:	11 24       	eor	r1, r1
     5aa:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     5ac:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <accumulator>
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	89 0f       	add	r24, r25
     5b4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <accumulator>
     5b8:	82 2f       	mov	r24, r18
     5ba:	82 95       	swap	r24
     5bc:	86 95       	lsr	r24
     5be:	87 70       	andi	r24, 0x07	; 7
     5c0:	28 27       	eor	r18, r24
     5c2:	96 95       	lsr	r25
     5c4:	96 95       	lsr	r25
     5c6:	82 2f       	mov	r24, r18
     5c8:	89 27       	eor	r24, r25
     5ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     5ce:	08 95       	ret

000005d0 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     5d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     5d4:	08 95       	ret

000005d6 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     5d6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <rx_busy>
     5da:	81 11       	cpse	r24, r1
     5dc:	16 c0       	rjmp	.+44     	; 0x60a <get_voltage+0x34>
        cli();                                    // disable interrupts
     5de:	f8 94       	cli
        adc_setup_conversion(6);
     5e0:	86 e0       	ldi	r24, 0x06	; 6
     5e2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5e6:	83 e8       	ldi	r24, 0x83	; 131
     5e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     5ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5f0:	80 64       	ori	r24, 0x40	; 64
     5f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5fa:	86 fd       	sbrc	r24, 6
     5fc:	fc cf       	rjmp	.-8      	; 0x5f6 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     5fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     602:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     606:	78 94       	sei
     608:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     60a:	8f ef       	ldi	r24, 0xFF	; 255
     60c:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     60e:	08 95       	ret

00000610 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     610:	2f 92       	push	r2
     612:	3f 92       	push	r3
     614:	4f 92       	push	r4
     616:	5f 92       	push	r5
     618:	6f 92       	push	r6
     61a:	7f 92       	push	r7
     61c:	8f 92       	push	r8
     61e:	9f 92       	push	r9
     620:	af 92       	push	r10
     622:	bf 92       	push	r11
     624:	cf 92       	push	r12
     626:	df 92       	push	r13
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     636:	fc 01       	movw	r30, r24
     638:	c2 81       	ldd	r28, Z+2	; 0x02
     63a:	d3 81       	ldd	r29, Z+3	; 0x03
     63c:	c4 38       	cpi	r28, 0x84	; 132
     63e:	f3 e0       	ldi	r31, 0x03	; 3
     640:	df 07       	cpc	r29, r31
     642:	0c f0       	brlt	.+2      	; 0x646 <estimate_distance+0x36>
     644:	7e c0       	rjmp	.+252    	; 0x742 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     646:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <kilo_irhigh>
     64a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <kilo_irhigh+0x1>
     64e:	8c 17       	cp	r24, r28
     650:	9d 07       	cpc	r25, r29
     652:	08 f4       	brcc	.+2      	; 0x656 <estimate_distance+0x46>
     654:	6f c0       	rjmp	.+222    	; 0x734 <estimate_distance+0x124>
     656:	e8 e2       	ldi	r30, 0x28	; 40
     658:	f1 e0       	ldi	r31, 0x01	; 1
     65a:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     65c:	81 91       	ld	r24, Z+
     65e:	91 91       	ld	r25, Z+
     660:	8c 17       	cp	r24, r28
     662:	9d 07       	cpc	r25, r29
     664:	20 f0       	brcs	.+8      	; 0x66e <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     666:	1f 5f       	subi	r17, 0xFF	; 255
     668:	1e 30       	cpi	r17, 0x0E	; 14
     66a:	c1 f7       	brne	.-16     	; 0x65c <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     66c:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     66e:	81 2f       	mov	r24, r17
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	fc 01       	movw	r30, r24
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	ea 5d       	subi	r30, 0xDA	; 218
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
     67c:	e0 80       	ld	r14, Z
     67e:	f1 80       	ldd	r15, Z+1	; 0x01
     680:	88 0f       	add	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	fc 01       	movw	r30, r24
     686:	ec 5d       	subi	r30, 0xDC	; 220
     688:	fe 4f       	sbci	r31, 0xFE	; 254
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
     68e:	b7 01       	movw	r22, r14
     690:	68 1b       	sub	r22, r24
     692:	79 0b       	sbc	r23, r25
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 3f 0a 	call	0x147e	; 0x147e <__floatunsisf>
     69c:	9b 01       	movw	r18, r22
     69e:	ac 01       	movw	r20, r24
     6a0:	0e 94 2b 09 	call	0x1256	; 0x1256 <__addsf3>
     6a4:	4b 01       	movw	r8, r22
     6a6:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     6a8:	be 01       	movw	r22, r28
     6aa:	0d 2e       	mov	r0, r29
     6ac:	00 0c       	add	r0, r0
     6ae:	88 0b       	sbc	r24, r24
     6b0:	99 0b       	sbc	r25, r25
     6b2:	0e 94 41 0a 	call	0x1482	; 0x1482 <__floatsisf>
     6b6:	2b 01       	movw	r4, r22
     6b8:	3c 01       	movw	r6, r24
     6ba:	b7 01       	movw	r22, r14
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 3f 0a 	call	0x147e	; 0x147e <__floatunsisf>
     6c4:	6b 01       	movw	r12, r22
     6c6:	7c 01       	movw	r14, r24
     6c8:	61 2f       	mov	r22, r17
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 3f 0a 	call	0x147e	; 0x147e <__floatunsisf>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	5f e3       	ldi	r21, 0x3F	; 63
     6dc:	0e 94 cd 0a 	call	0x159a	; 0x159a <__mulsf3>
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	a9 01       	movw	r20, r18
     6e6:	0e 94 2b 09 	call	0x1256	; 0x1256 <__addsf3>
     6ea:	a5 01       	movw	r20, r10
     6ec:	94 01       	movw	r18, r8
     6ee:	0e 94 cd 0a 	call	0x159a	; 0x159a <__mulsf3>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	c7 01       	movw	r24, r14
     6f8:	b6 01       	movw	r22, r12
     6fa:	0e 94 2a 09 	call	0x1254	; 0x1254 <__subsf3>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	c3 01       	movw	r24, r6
     704:	b2 01       	movw	r22, r4
     706:	0e 94 2a 09 	call	0x1254	; 0x1254 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	40 e2       	ldi	r20, 0x20	; 32
     710:	51 e4       	ldi	r21, 0x41	; 65
     712:	0e 94 cd 0a 	call	0x159a	; 0x159a <__mulsf3>
     716:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fixsfsi>
     71a:	7b 01       	movw	r14, r22
     71c:	c5 01       	movw	r24, r10
     71e:	b4 01       	movw	r22, r8
     720:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fixsfsi>
     724:	ab 01       	movw	r20, r22
     726:	bc 01       	movw	r22, r24
     728:	c7 01       	movw	r24, r14
     72a:	ba 01       	movw	r22, r20
     72c:	0e 94 ed 08 	call	0x11da	; 0x11da <__divmodhi4>
     730:	16 2f       	mov	r17, r22
     732:	01 c0       	rjmp	.+2      	; 0x736 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     734:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     736:	cd 3b       	cpi	r28, 0xBD	; 189
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	d8 07       	cpc	r29, r24
     73c:	0c f4       	brge	.+2      	; 0x740 <estimate_distance+0x130>
     73e:	ca c0       	rjmp	.+404    	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
     740:	01 c0       	rjmp	.+2      	; 0x744 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     742:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     744:	f1 01       	movw	r30, r2
     746:	c0 80       	ld	r12, Z
     748:	d1 80       	ldd	r13, Z+1	; 0x01
     74a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <kilo_irlow>
     74e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <kilo_irlow+0x1>
     752:	8c 15       	cp	r24, r12
     754:	9d 05       	cpc	r25, r13
     756:	88 f0       	brcs	.+34     	; 0x77a <estimate_distance+0x16a>
     758:	ef e4       	ldi	r30, 0x4F	; 79
     75a:	f1 e0       	ldi	r31, 0x01	; 1
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     762:	e1 90       	ld	r14, Z+
     764:	f1 90       	ld	r15, Z+
     766:	ec 14       	cp	r14, r12
     768:	fd 04       	cpc	r15, r13
     76a:	08 f4       	brcc	.+2      	; 0x76e <estimate_distance+0x15e>
     76c:	58 c0       	rjmp	.+176    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     76e:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     770:	8e 30       	cpi	r24, 0x0E	; 14
     772:	91 05       	cpc	r25, r1
     774:	a9 f7       	brne	.-22     	; 0x760 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     776:	0a e5       	ldi	r16, 0x5A	; 90
     778:	01 c0       	rjmp	.+2      	; 0x77c <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     77a:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     77c:	1f 3f       	cpi	r17, 0xFF	; 255
     77e:	09 f4       	brne	.+2      	; 0x782 <estimate_distance+0x172>
     780:	4b c0       	rjmp	.+150    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     782:	be 01       	movw	r22, r28
     784:	dd 0f       	add	r29, r29
     786:	88 0b       	sbc	r24, r24
     788:	99 0b       	sbc	r25, r25
     78a:	0e 94 41 0a 	call	0x1482	; 0x1482 <__floatsisf>
     78e:	6b 01       	movw	r12, r22
     790:	7c 01       	movw	r14, r24
     792:	61 2f       	mov	r22, r17
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 3f 0a 	call	0x147e	; 0x147e <__floatunsisf>
     79e:	4b 01       	movw	r8, r22
     7a0:	5c 01       	movw	r10, r24
     7a2:	a7 01       	movw	r20, r14
     7a4:	96 01       	movw	r18, r12
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	81 e6       	ldi	r24, 0x61	; 97
     7ac:	94 e4       	ldi	r25, 0x44	; 68
     7ae:	0e 94 2a 09 	call	0x1254	; 0x1254 <__subsf3>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24
     7b6:	c5 01       	movw	r24, r10
     7b8:	b4 01       	movw	r22, r8
     7ba:	0e 94 cd 0a 	call	0x159a	; 0x159a <__mulsf3>
     7be:	4b 01       	movw	r8, r22
     7c0:	5c 01       	movw	r10, r24
     7c2:	60 2f       	mov	r22, r16
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 3f 0a 	call	0x147e	; 0x147e <__floatunsisf>
     7ce:	2b 01       	movw	r4, r22
     7d0:	3c 01       	movw	r6, r24
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	4f e2       	ldi	r20, 0x2F	; 47
     7d8:	54 e4       	ldi	r21, 0x44	; 68
     7da:	c7 01       	movw	r24, r14
     7dc:	b6 01       	movw	r22, r12
     7de:	0e 94 2a 09 	call	0x1254	; 0x1254 <__subsf3>
     7e2:	9b 01       	movw	r18, r22
     7e4:	ac 01       	movw	r20, r24
     7e6:	c3 01       	movw	r24, r6
     7e8:	b2 01       	movw	r22, r4
     7ea:	0e 94 cd 0a 	call	0x159a	; 0x159a <__mulsf3>
     7ee:	9b 01       	movw	r18, r22
     7f0:	ac 01       	movw	r20, r24
     7f2:	c5 01       	movw	r24, r10
     7f4:	b4 01       	movw	r22, r8
     7f6:	0e 94 2b 09 	call	0x1256	; 0x1256 <__addsf3>
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	48 e4       	ldi	r20, 0x48	; 72
     800:	53 e4       	ldi	r21, 0x43	; 67
     802:	0e 94 97 09 	call	0x132e	; 0x132e <__divsf3>
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	44 e0       	ldi	r20, 0x04	; 4
     80c:	52 e4       	ldi	r21, 0x42	; 66
     80e:	0e 94 2b 09 	call	0x1256	; 0x1256 <__addsf3>
     812:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fixunssfsi>
     816:	60 c0       	rjmp	.+192    	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
        } else {
            return 33 + dist_low;
     818:	61 e2       	ldi	r22, 0x21	; 33
     81a:	60 0f       	add	r22, r16
     81c:	5d c0       	rjmp	.+186    	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	fc 01       	movw	r30, r24
     824:	e5 5b       	subi	r30, 0xB5	; 181
     826:	fe 4f       	sbci	r31, 0xFE	; 254
     828:	80 81       	ld	r24, Z
     82a:	91 81       	ldd	r25, Z+1	; 0x01
     82c:	b7 01       	movw	r22, r14
     82e:	68 1b       	sub	r22, r24
     830:	79 0b       	sbc	r23, r25
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 3f 0a 	call	0x147e	; 0x147e <__floatunsisf>
     83a:	9b 01       	movw	r18, r22
     83c:	ac 01       	movw	r20, r24
     83e:	0e 94 2b 09 	call	0x1256	; 0x1256 <__addsf3>
     842:	4b 01       	movw	r8, r22
     844:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     846:	b6 01       	movw	r22, r12
     848:	dd 0c       	add	r13, r13
     84a:	88 0b       	sbc	r24, r24
     84c:	99 0b       	sbc	r25, r25
     84e:	0e 94 41 0a 	call	0x1482	; 0x1482 <__floatsisf>
     852:	2b 01       	movw	r4, r22
     854:	3c 01       	movw	r6, r24
     856:	b7 01       	movw	r22, r14
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 3f 0a 	call	0x147e	; 0x147e <__floatunsisf>
     860:	6b 01       	movw	r12, r22
     862:	7c 01       	movw	r14, r24
     864:	63 2d       	mov	r22, r3
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 3f 0a 	call	0x147e	; 0x147e <__floatunsisf>
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	5f e3       	ldi	r21, 0x3F	; 63
     878:	0e 94 cd 0a 	call	0x159a	; 0x159a <__mulsf3>
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	a9 01       	movw	r20, r18
     882:	0e 94 2b 09 	call	0x1256	; 0x1256 <__addsf3>
     886:	a5 01       	movw	r20, r10
     888:	94 01       	movw	r18, r8
     88a:	0e 94 cd 0a 	call	0x159a	; 0x159a <__mulsf3>
     88e:	9b 01       	movw	r18, r22
     890:	ac 01       	movw	r20, r24
     892:	c7 01       	movw	r24, r14
     894:	b6 01       	movw	r22, r12
     896:	0e 94 2a 09 	call	0x1254	; 0x1254 <__subsf3>
     89a:	9b 01       	movw	r18, r22
     89c:	ac 01       	movw	r20, r24
     89e:	c3 01       	movw	r24, r6
     8a0:	b2 01       	movw	r22, r4
     8a2:	0e 94 2a 09 	call	0x1254	; 0x1254 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e2       	ldi	r20, 0x20	; 32
     8ac:	51 e4       	ldi	r21, 0x41	; 65
     8ae:	0e 94 cd 0a 	call	0x159a	; 0x159a <__mulsf3>
     8b2:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fixsfsi>
     8b6:	7b 01       	movw	r14, r22
     8b8:	c5 01       	movw	r24, r10
     8ba:	b4 01       	movw	r22, r8
     8bc:	0e 94 09 0a 	call	0x1412	; 0x1412 <__fixsfsi>
     8c0:	ab 01       	movw	r20, r22
     8c2:	bc 01       	movw	r22, r24
     8c4:	c7 01       	movw	r24, r14
     8c6:	ba 01       	movw	r22, r20
     8c8:	0e 94 ed 08 	call	0x11da	; 0x11da <__divmodhi4>
     8cc:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     8ce:	6f 3f       	cpi	r22, 0xFF	; 255
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
     8d2:	54 cf       	rjmp	.-344    	; 0x77c <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     8d4:	61 e2       	ldi	r22, 0x21	; 33
     8d6:	61 0f       	add	r22, r17
    }
}
     8d8:	86 2f       	mov	r24, r22
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	bf 90       	pop	r11
     8ec:	af 90       	pop	r10
     8ee:	9f 90       	pop	r9
     8f0:	8f 90       	pop	r8
     8f2:	7f 90       	pop	r7
     8f4:	6f 90       	pop	r6
     8f6:	5f 90       	pop	r5
     8f8:	4f 90       	pop	r4
     8fa:	3f 90       	pop	r3
     8fc:	2f 90       	pop	r2
     8fe:	08 95       	ret

00000900 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	2f 93       	push	r18
     90c:	3f 93       	push	r19
     90e:	4f 93       	push	r20
     910:	5f 93       	push	r21
     912:	6f 93       	push	r22
     914:	7f 93       	push	r23
     916:	8f 93       	push	r24
     918:	9f 93       	push	r25
     91a:	af 93       	push	r26
     91c:	bf 93       	push	r27
     91e:	ef 93       	push	r30
     920:	ff 93       	push	r31
    tx_clock += tx_increment;
     922:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <tx_clock>
     926:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <tx_clock+0x1>
     92a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <tx_increment>
     92e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <tx_increment+0x1>
     932:	82 0f       	add	r24, r18
     934:	93 1f       	adc	r25, r19
     936:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <tx_clock+0x1>
     93a:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <tx_clock>
    tx_increment = 0xFF;
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <tx_increment+0x1>
     946:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <tx_increment>
    OCR0A = tx_increment;
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     94e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <kilo_ticks>
     952:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <kilo_ticks+0x1>
     956:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <kilo_ticks+0x2>
     95a:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <kilo_ticks+0x3>
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	a1 1d       	adc	r26, r1
     962:	b1 1d       	adc	r27, r1
     964:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <kilo_ticks>
     968:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <kilo_ticks+0x1>
     96c:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <kilo_ticks+0x2>
     970:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     974:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <rx_busy>
     978:	81 11       	cpse	r24, r1
     97a:	2d c0       	rjmp	.+90     	; 0x9d6 <__vector_14+0xd6>
     97c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <kilo_tx_period>
     980:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <kilo_tx_period+0x1>
     984:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <tx_clock>
     988:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <tx_clock+0x1>
     98c:	82 17       	cp	r24, r18
     98e:	93 07       	cpc	r25, r19
     990:	10 f5       	brcc	.+68     	; 0x9d6 <__vector_14+0xd6>
     992:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	f1 f4       	brne	.+60     	; 0x9d6 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     99a:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     99e:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     9a2:	09 95       	icall
        if (msg) {
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	b9 f0       	breq	.+46     	; 0x9d6 <__vector_14+0xd6>
            if (message_send(msg)) {
     9a8:	0e 94 53 08 	call	0x10a6	; 0x10a6 <message_send>
     9ac:	88 23       	and	r24, r24
     9ae:	51 f0       	breq	.+20     	; 0x9c4 <__vector_14+0xc4>
                kilo_message_tx_success();
     9b0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     9b4:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     9b8:	09 95       	icall
                tx_clock = 0;
     9ba:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <tx_clock+0x1>
     9be:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <tx_clock>
     9c2:	09 c0       	rjmp	.+18     	; 0x9d6 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     9c4:	0e 94 86 0b 	call	0x170c	; 0x170c <rand>
     9c8:	9c 01       	movw	r18, r24
     9ca:	33 27       	eor	r19, r19
     9cc:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <tx_increment+0x1>
     9d0:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <tx_increment>
                OCR0A = tx_increment;
     9d4:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     9d6:	ff 91       	pop	r31
     9d8:	ef 91       	pop	r30
     9da:	bf 91       	pop	r27
     9dc:	af 91       	pop	r26
     9de:	9f 91       	pop	r25
     9e0:	8f 91       	pop	r24
     9e2:	7f 91       	pop	r23
     9e4:	6f 91       	pop	r22
     9e6:	5f 91       	pop	r21
     9e8:	4f 91       	pop	r20
     9ea:	3f 91       	pop	r19
     9ec:	2f 91       	pop	r18
     9ee:	0f 90       	pop	r0
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	0f 90       	pop	r0
     9f4:	1f 90       	pop	r1
     9f6:	18 95       	reti

000009f8 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     9f8:	80 ff       	sbrs	r24, 0
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <set_color+0x8>
        DDRD |= (1<<5);
     9fc:	55 9a       	sbi	0x0a, 5	; 10
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     a00:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     a02:	81 ff       	sbrs	r24, 1
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <set_color+0x12>
        DDRD |= (1<<4);
     a06:	54 9a       	sbi	0x0a, 4	; 10
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     a0a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     a0c:	82 ff       	sbrs	r24, 2
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <set_color+0x1c>
        DDRC |= (1<<3);
     a10:	3b 9a       	sbi	0x07, 3	; 7
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     a14:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     a16:	83 ff       	sbrs	r24, 3
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <set_color+0x26>
        DDRC |= (1<<2);
     a1a:	3a 9a       	sbi	0x07, 2	; 7
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     a1e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     a20:	84 ff       	sbrs	r24, 4
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <set_color+0x30>
        DDRC |= (1<<5);
     a24:	3d 9a       	sbi	0x07, 5	; 7
     a26:	01 c0       	rjmp	.+2      	; 0xa2a <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     a28:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     a2a:	85 ff       	sbrs	r24, 5
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <set_color+0x3a>
        DDRC |= (1<<4);
     a2e:	3c 9a       	sbi	0x07, 4	; 7
     a30:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     a32:	3c 98       	cbi	0x07, 4	; 7
     a34:	08 95       	ret

00000a36 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     a36:	8c 01       	movw	r16, r24
     a38:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     a3a:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     a3c:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a3e:	84 e0       	ldi	r24, 0x04	; 4
     a40:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     a42:	98 e1       	ldi	r25, 0x18	; 24
     a44:	c9 2e       	mov	r12, r25
     a46:	29 e2       	ldi	r18, 0x29	; 41
     a48:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     a4a:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <kilo_state>
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	e7 30       	cpi	r30, 0x07	; 7
     a52:	f1 05       	cpc	r31, r1
     a54:	d0 f7       	brcc	.-12     	; 0xa4a <kilo_start+0x14>
     a56:	ec 5c       	subi	r30, 0xCC	; 204
     a58:	ff 4f       	sbci	r31, 0xFF	; 255
     a5a:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__tablejump2__>
            case SLEEPING:
                cli();
     a5e:	f8 94       	cli
                acomp_off();
     a60:	80 b7       	in	r24, 0x30	; 48
     a62:	87 7f       	andi	r24, 0xF7	; 247
     a64:	80 bf       	out	0x30, r24	; 48
                adc_off();
     a66:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a6a:	8f 77       	andi	r24, 0x7F	; 127
     a6c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     a70:	14 b8       	out	0x04, r1	; 4
     a72:	17 b8       	out	0x07, r1	; 7
     a74:	1a b8       	out	0x0a, r1	; 10
     a76:	15 b8       	out	0x05, r1	; 5
     a78:	18 b8       	out	0x08, r1	; 8
     a7a:	1b b8       	out	0x0b, r1	; 11
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	a8 95       	wdr
     a82:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a86:	0f be       	out	0x3f, r0	; 63
     a88:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     a8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a90:	80 64       	ori	r24, 0x40	; 64
     a92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a96:	83 b7       	in	r24, 0x33	; 51
     a98:	81 7f       	andi	r24, 0xF1	; 241
     a9a:	84 60       	ori	r24, 0x04	; 4
     a9c:	83 bf       	out	0x33, r24	; 51
                cli();
     a9e:	f8 94       	cli
                sleep_enable();
     aa0:	83 b7       	in	r24, 0x33	; 51
     aa2:	81 60       	ori	r24, 0x01	; 1
     aa4:	83 bf       	out	0x33, r24	; 51
                sei();
     aa6:	78 94       	sei
                sleep_cpu();
     aa8:	88 95       	sleep
                sleep_disable();
     aaa:	83 b7       	in	r24, 0x33	; 51
     aac:	8e 7f       	andi	r24, 0xFE	; 254
     aae:	83 bf       	out	0x33, r24	; 51
                sei();
     ab0:	78 94       	sei
                rx_busy = 0;
     ab2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_busy>
                ports_on();
     ab6:	52 9a       	sbi	0x0a, 2	; 10
     ab8:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     aba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     abe:	80 68       	ori	r24, 0x80	; 128
     ac0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ac4:	87 e5       	ldi	r24, 0x57	; 87
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <kilo_start+0x92>
     acc:	00 c0       	rjmp	.+0      	; 0xace <kilo_start+0x98>
     ace:	00 00       	nop
                _delay_us(300);
                acomp_on();
     ad0:	80 b7       	in	r24, 0x30	; 48
     ad2:	88 61       	ori	r24, 0x18	; 24
     ad4:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     ad6:	8f e3       	ldi	r24, 0x3F	; 63
     ad8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     adc:	ef e1       	ldi	r30, 0x1F	; 31
     ade:	fe e4       	ldi	r31, 0x4E	; 78
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <kilo_start+0xaa>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <kilo_start+0xb0>
     ae6:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     ae8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <rx_busy>
     aec:	88 23       	and	r24, r24
     aee:	09 f4       	brne	.+2      	; 0xaf2 <kilo_start+0xbc>
     af0:	50 c0       	rjmp	.+160    	; 0xb92 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <set_color>
     af8:	ff ef       	ldi	r31, 0xFF	; 255
     afa:	20 e7       	ldi	r18, 0x70	; 112
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	f1 50       	subi	r31, 0x01	; 1
     b00:	20 40       	sbci	r18, 0x00	; 0
     b02:	80 40       	sbci	r24, 0x00	; 0
     b04:	e1 f7       	brne	.-8      	; 0xafe <kilo_start+0xc8>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <kilo_start+0xd2>
     b08:	00 00       	nop
     b0a:	43 c0       	rjmp	.+134    	; 0xb92 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     b0c:	8c e0       	ldi	r24, 0x0C	; 12
     b0e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <set_color>
     b12:	ef ec       	ldi	r30, 0xCF	; 207
     b14:	f7 e0       	ldi	r31, 0x07	; 7
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <kilo_start+0xe0>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <kilo_start+0xe6>
     b1c:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <set_color>
     b24:	ff ef       	ldi	r31, 0xFF	; 255
     b26:	21 ee       	ldi	r18, 0xE1	; 225
     b28:	84 e0       	ldi	r24, 0x04	; 4
     b2a:	f1 50       	subi	r31, 0x01	; 1
     b2c:	20 40       	sbci	r18, 0x00	; 0
     b2e:	80 40       	sbci	r24, 0x00	; 0
     b30:	e1 f7       	brne	.-8      	; 0xb2a <kilo_start+0xf4>
     b32:	2c c0       	rjmp	.+88     	; 0xb8c <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     b34:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <get_voltage>
                if(voltage > 682)
     b38:	8b 3a       	cpi	r24, 0xAB	; 171
     b3a:	e2 e0       	ldi	r30, 0x02	; 2
     b3c:	9e 07       	cpc	r25, r30
     b3e:	24 f0       	brlt	.+8      	; 0xb48 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     b40:	8c e0       	ldi	r24, 0x0C	; 12
     b42:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <set_color>
     b46:	81 cf       	rjmp	.-254    	; 0xa4a <kilo_start+0x14>
                else if(voltage > 648)
     b48:	89 38       	cpi	r24, 0x89	; 137
     b4a:	f2 e0       	ldi	r31, 0x02	; 2
     b4c:	9f 07       	cpc	r25, r31
     b4e:	14 f0       	brlt	.+4      	; 0xb54 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     b50:	80 e3       	ldi	r24, 0x30	; 48
     b52:	f7 cf       	rjmp	.-18     	; 0xb42 <kilo_start+0x10c>
                else if(voltage > 614)
     b54:	87 36       	cpi	r24, 0x67	; 103
     b56:	92 40       	sbci	r25, 0x02	; 2
     b58:	14 f0       	brlt	.+4      	; 0xb5e <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     b5a:	8f e0       	ldi	r24, 0x0F	; 15
     b5c:	f2 cf       	rjmp	.-28     	; 0xb42 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	f0 cf       	rjmp	.-32     	; 0xb42 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     b62:	48 99       	sbic	0x09, 0	; 9
     b64:	16 c0       	rjmp	.+44     	; 0xb92 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <set_color>
     b6c:	8f ec       	ldi	r24, 0xCF	; 207
     b6e:	97 e0       	ldi	r25, 0x07	; 7
     b70:	01 97       	sbiw	r24, 0x01	; 1
     b72:	f1 f7       	brne	.-4      	; 0xb70 <kilo_start+0x13a>
     b74:	00 c0       	rjmp	.+0      	; 0xb76 <kilo_start+0x140>
     b76:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <set_color>
     b7e:	9f ef       	ldi	r25, 0xFF	; 255
     b80:	e1 ee       	ldi	r30, 0xE1	; 225
     b82:	f4 e0       	ldi	r31, 0x04	; 4
     b84:	91 50       	subi	r25, 0x01	; 1
     b86:	e0 40       	sbci	r30, 0x00	; 0
     b88:	f0 40       	sbci	r31, 0x00	; 0
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <kilo_start+0x14e>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <kilo_start+0x158>
     b8e:	00 00       	nop
     b90:	5c cf       	rjmp	.-328    	; 0xa4a <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	d6 cf       	rjmp	.-84     	; 0xb42 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     b96:	d1 11       	cpse	r29, r1
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <kilo_start+0x168>
                    setup();
     b9a:	f8 01       	movw	r30, r16
     b9c:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b9e:	d0 92 13 01 	sts	0x0113, r13	; 0x800113 <kilo_state>
     ba2:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     ba4:	f7 01       	movw	r30, r14
     ba6:	09 95       	icall
                break;
     ba8:	50 cf       	rjmp	.-352    	; 0xa4a <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     baa:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     bae:	81 11       	cpse	r24, r1
     bb0:	07 c0       	rjmp	.+14     	; 0xbc0 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bb2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bb6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     bba:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
     bbe:	45 cf       	rjmp	.-374    	; 0xa4a <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     bc0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     bc4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <prev_motion>
     bc8:	98 17       	cp	r25, r24
     bca:	09 f4       	brne	.+2      	; 0xbce <kilo_start+0x198>
     bcc:	3e cf       	rjmp	.-388    	; 0xa4a <kilo_start+0x14>
                        prev_motion = cur_motion;
     bce:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     bd2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     bd6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	89 f4       	brne	.+34     	; 0xc00 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bde:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     be2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     be6:	8f e2       	ldi	r24, 0x2F	; 47
     be8:	95 e7       	ldi	r25, 0x75	; 117
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <kilo_start+0x1b4>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <kilo_start+0x1ba>
     bf0:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     bf2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bf6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bfa:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bfe:	25 cf       	rjmp	.-438    	; 0xa4a <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c00:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c04:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c08:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c0c:	82 30       	cpi	r24, 0x02	; 2
     c0e:	59 f4       	brne	.+22     	; 0xc26 <kilo_start+0x1f0>
     c10:	ef e2       	ldi	r30, 0x2F	; 47
     c12:	f5 e7       	ldi	r31, 0x75	; 117
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	f1 f7       	brne	.-4      	; 0xc14 <kilo_start+0x1de>
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <kilo_start+0x1e4>
     c1a:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     c1c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c20:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     c24:	10 c0       	rjmp	.+32     	; 0xc46 <kilo_start+0x210>
     c26:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c2a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c2e:	8f e2       	ldi	r24, 0x2F	; 47
     c30:	95 e7       	ldi	r25, 0x75	; 117
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <kilo_start+0x1fc>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <kilo_start+0x202>
     c38:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     c3a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <kilo_straight_right>
     c3e:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c42:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c46:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c4a:	ff ce       	rjmp	.-514    	; 0xa4a <kilo_start+0x14>

00000c4c <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     c4c:	1f 92       	push	r1
     c4e:	0f 92       	push	r0
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	0f 92       	push	r0
     c54:	11 24       	eor	r1, r1
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
    rx_timer_off();
     c5a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c5e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c62:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rx_leadingbit>
    rx_leadingbyte = 1;
     c6c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <rx_leadingbyte>
    rx_busy = 0;
     c70:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_busy>
    adc_trigger_high_gain();
     c74:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c78:	93 ea       	ldi	r25, 0xA3	; 163
     c7a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c7e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     c82:	9f 91       	pop	r25
     c84:	8f 91       	pop	r24
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     cb6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     cba:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	40 93 4c 01 	sts	0x014C, r20	; 0x80014c <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     cc4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <rx_leadingbit>
     cc8:	88 23       	and	r24, r24
     cca:	21 f1       	breq	.+72     	; 0xd14 <__vector_23+0x84>
        rx_timer_on();
     ccc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cd0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     cd4:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     cd8:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <rx_bytevalue>
        rx_leadingbit = 0;
     cdc:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <rx_leadingbit>
        if (rx_leadingbyte) {
     ce0:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_leadingbyte>
     ce4:	88 23       	and	r24, r24
     ce6:	09 f4       	brne	.+2      	; 0xcea <__vector_23+0x5a>
     ce8:	af c1       	rjmp	.+862    	; 0x1048 <__vector_23+0x3b8>
            adc_finish_conversion();
     cea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cee:	86 fd       	sbrc	r24, 6
     cf0:	fc cf       	rjmp	.-8      	; 0xcea <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     cf2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     cf6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     cfa:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <rx_dist+0x3>
     cfe:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <rx_dist+0x2>
            adc_trigger_low_gain();
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d08:	93 ea       	ldi	r25, 0xA3	; 163
     d0a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d0e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d12:	9a c1       	rjmp	.+820    	; 0x1048 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     d14:	c9 01       	movw	r24, r18
     d16:	87 58       	subi	r24, 0x87	; 135
     d18:	91 09       	sbc	r25, r1
     d1a:	84 37       	cpi	r24, 0x74	; 116
     d1c:	99 40       	sbci	r25, 0x09	; 9
     d1e:	a0 f0       	brcs	.+40     	; 0xd48 <__vector_23+0xb8>
            rx_timer_off();
     d20:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d24:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d28:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     d2c:	40 93 25 01 	sts	0x0125, r20	; 0x800125 <rx_leadingbit>
            rx_leadingbyte = 1;
     d30:	40 93 69 01 	sts	0x0169, r20	; 0x800169 <rx_leadingbyte>
            rx_busy = 0;
     d34:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_busy>
            adc_trigger_high_gain();
     d38:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d3c:	83 ea       	ldi	r24, 0xA3	; 163
     d3e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d42:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d46:	80 c1       	rjmp	.+768    	; 0x1048 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     d48:	26 58       	subi	r18, 0x86	; 134
     d4a:	31 09       	sbc	r19, r1
     d4c:	a4 ef       	ldi	r26, 0xF4	; 244
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	0e 94 07 09 	call	0x120e	; 0x120e <__umulhisi3>
     d54:	8c 01       	movw	r16, r24
     d56:	22 27       	eor	r18, r18
     d58:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     d5a:	08 30       	cpi	r16, 0x08	; 8
     d5c:	60 f4       	brcc	.+24     	; 0xd76 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <__vector_23+0xd6>
     d64:	88 0f       	add	r24, r24
     d66:	0a 95       	dec	r16
     d68:	ea f7       	brpl	.-6      	; 0xd64 <__vector_23+0xd4>
     d6a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <rx_bytevalue>
     d6e:	89 2b       	or	r24, r25
     d70:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <rx_bytevalue>
     d74:	69 c1       	rjmp	.+722    	; 0x1048 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     d76:	40 93 25 01 	sts	0x0125, r20	; 0x800125 <rx_leadingbit>
                if (rx_leadingbyte) {
     d7a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_leadingbyte>
     d7e:	88 23       	and	r24, r24
     d80:	41 f1       	breq	.+80     	; 0xdd2 <__vector_23+0x142>
                    adc_finish_conversion();
     d82:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d86:	86 fd       	sbrc	r24, 6
     d88:	fc cf       	rjmp	.-8      	; 0xd82 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     d8a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d8e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d92:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <rx_dist+0x1>
     d96:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <rx_dist>
                    adc_trigger_high_gain();
     d9a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d9e:	83 ea       	ldi	r24, 0xA3	; 163
     da0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     daa:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <rx_bytevalue>
     dae:	99 23       	and	r25, r25
     db0:	59 f0       	breq	.+22     	; 0xdc8 <__vector_23+0x138>
                        rx_timer_off();
     db2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     db6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     dba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     dbe:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <rx_leadingbyte>
                        rx_busy = 0;
     dc2:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_busy>
     dc6:	40 c1       	rjmp	.+640    	; 0x1048 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     dc8:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <rx_leadingbyte>
                        rx_byteindex = 0;
     dcc:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <rx_byteindex>
     dd0:	3b c1       	rjmp	.+630    	; 0x1048 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     dd2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <rx_byteindex>
     dd6:	e8 2f       	mov	r30, r24
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	e1 59       	subi	r30, 0x91	; 145
     ddc:	fe 4f       	sbci	r31, 0xFE	; 254
     dde:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <rx_bytevalue>
     de2:	90 83       	st	Z, r25
                    rx_byteindex++;
     de4:	8f 5f       	subi	r24, 0xFF	; 255
     de6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     dea:	8c 30       	cpi	r24, 0x0C	; 12
     dec:	09 f0       	breq	.+2      	; 0xdf0 <__vector_23+0x160>
     dee:	2c c1       	rjmp	.+600    	; 0x1048 <__vector_23+0x3b8>
                        rx_timer_off();
     df0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     df4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     df8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     dfc:	40 93 69 01 	sts	0x0169, r20	; 0x800169 <rx_leadingbyte>
                        rx_busy = 0;
     e00:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     e04:	00 91 79 01 	lds	r16, 0x0179	; 0x800179 <rx_msg+0xa>
     e08:	10 91 7a 01 	lds	r17, 0x017A	; 0x80017a <rx_msg+0xb>
     e0c:	8f e6       	ldi	r24, 0x6F	; 111
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	0e 94 37 08 	call	0x106e	; 0x106e <message_crc>
     e14:	08 17       	cp	r16, r24
     e16:	19 07       	cpc	r17, r25
     e18:	09 f0       	breq	.+2      	; 0xe1c <__vector_23+0x18c>
     e1a:	16 c1       	rjmp	.+556    	; 0x1048 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     e1c:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <rx_msg+0x9>
     e20:	e7 fd       	sbrc	r30, 7
     e22:	0a c0       	rjmp	.+20     	; 0xe38 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     e24:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     e28:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     e2c:	64 e4       	ldi	r22, 0x44	; 68
     e2e:	71 e0       	ldi	r23, 0x01	; 1
     e30:	8f e6       	ldi	r24, 0x6F	; 111
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	09 95       	icall
     e36:	08 c1       	rjmp	.+528    	; 0x1048 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     e38:	88 e7       	ldi	r24, 0x78	; 120
     e3a:	8e 0f       	add	r24, r30
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	30 f0       	brcs	.+12     	; 0xe4c <__vector_23+0x1bc>
        motors_off();
     e40:	53 98       	cbi	0x0a, 3	; 10
     e42:	23 98       	cbi	0x04, 3	; 4
     e44:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e48:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     e4c:	8e 2f       	mov	r24, r30
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	fc 01       	movw	r30, r24
     e52:	e0 58       	subi	r30, 0x80	; 128
     e54:	f1 09       	sbc	r31, r1
     e56:	eb 30       	cpi	r30, 0x0B	; 11
     e58:	f1 05       	cpc	r31, r1
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <__vector_23+0x1ce>
     e5c:	f5 c0       	rjmp	.+490    	; 0x1048 <__vector_23+0x3b8>
     e5e:	e5 5c       	subi	r30, 0xC5	; 197
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     e66:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e70:	16 bc       	out	0x26, r1	; 38
            bootload();
     e72:	e0 e0       	ldi	r30, 0x00	; 0
     e74:	f0 e7       	ldi	r31, 0x70	; 112
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     e78:	e0 e0       	ldi	r30, 0x00	; 0
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     e7e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <kilo_state>
     e82:	e2 c0       	rjmp	.+452    	; 0x1048 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	b2 c0       	rjmp	.+356    	; 0xfec <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     e88:	85 e0       	ldi	r24, 0x05	; 5
     e8a:	b0 c0       	rjmp	.+352    	; 0xfec <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	ae c0       	rjmp	.+348    	; 0xfec <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     e90:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e94:	83 30       	cpi	r24, 0x03	; 3
     e96:	09 f4       	brne	.+2      	; 0xe9a <__vector_23+0x20a>
     e98:	d7 c0       	rjmp	.+430    	; 0x1048 <__vector_23+0x3b8>
     e9a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     e9e:	84 30       	cpi	r24, 0x04	; 4
     ea0:	09 f4       	brne	.+2      	; 0xea4 <__vector_23+0x214>
     ea2:	d2 c0       	rjmp	.+420    	; 0x1048 <__vector_23+0x3b8>
                motors_on();
     ea4:	53 9a       	sbi	0x0a, 3	; 10
     ea6:	23 9a       	sbi	0x04, 3	; 4
     ea8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     eac:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	9c c0       	rjmp	.+312    	; 0xfec <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     eb4:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <rx_msg>
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	09 f4       	brne	.+2      	; 0xebe <__vector_23+0x22e>
     ebc:	4b c0       	rjmp	.+150    	; 0xf54 <__vector_23+0x2c4>
     ebe:	80 f4       	brcc	.+32     	; 0xee0 <__vector_23+0x250>
     ec0:	88 23       	and	r24, r24
     ec2:	a9 f0       	breq	.+42     	; 0xeee <__vector_23+0x25e>
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	09 f0       	breq	.+2      	; 0xeca <__vector_23+0x23a>
     ec8:	82 c0       	rjmp	.+260    	; 0xfce <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     eca:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_msg+0x1>
     ece:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <rx_msg+0x2>
     ed2:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <kilo_uid+0x1>
     ed6:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <kilo_uid>
                    cur_motion = MOVE_STOP;
     eda:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
     ede:	77 c0       	rjmp	.+238    	; 0xfce <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	09 f4       	brne	.+2      	; 0xee6 <__vector_23+0x256>
     ee4:	49 c0       	rjmp	.+146    	; 0xf78 <__vector_23+0x2e8>
     ee6:	84 30       	cpi	r24, 0x04	; 4
     ee8:	09 f4       	brne	.+2      	; 0xeec <__vector_23+0x25c>
     eea:	58 c0       	rjmp	.+176    	; 0xf9c <__vector_23+0x30c>
     eec:	70 c0       	rjmp	.+224    	; 0xfce <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     eee:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     ef2:	86 30       	cpi	r24, 0x06	; 6
     ef4:	09 f0       	breq	.+2      	; 0xef8 <__vector_23+0x268>
     ef6:	6b c0       	rjmp	.+214    	; 0xfce <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     ef8:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <kilo_uid>
     efc:	80 eb       	ldi	r24, 0xB0	; 176
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 9e 0b 	call	0x173c	; 0x173c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     f04:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <kilo_uid+0x1>
     f08:	81 eb       	ldi	r24, 0xB1	; 177
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 9e 0b 	call	0x173c	; 0x173c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     f10:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <kilo_turn_left>
     f14:	85 e0       	ldi	r24, 0x05	; 5
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 9e 0b 	call	0x173c	; 0x173c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     f1c:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <kilo_turn_right>
     f20:	89 e0       	ldi	r24, 0x09	; 9
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 9e 0b 	call	0x173c	; 0x173c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     f28:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <kilo_straight_left>
     f2c:	8c e0       	ldi	r24, 0x0C	; 12
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 9e 0b 	call	0x173c	; 0x173c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     f34:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <kilo_straight_right>
     f38:	84 e1       	ldi	r24, 0x14	; 20
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 9e 0b 	call	0x173c	; 0x173c <eeprom_write_byte>
                        motors_off();
     f40:	53 98       	cbi	0x0a, 3	; 10
     f42:	23 98       	cbi	0x04, 3	; 4
     f44:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f48:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     f52:	3d c0       	rjmp	.+122    	; 0xfce <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     f54:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f58:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <rx_msg+0x3>
     f5c:	91 30       	cpi	r25, 0x01	; 1
     f5e:	21 f4       	brne	.+8      	; 0xf68 <__vector_23+0x2d8>
     f60:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <kilo_turn_left>
     f64:	89 17       	cp	r24, r25
     f66:	99 f1       	breq	.+102    	; 0xfce <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f68:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_LEFT;
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     f72:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <kilo_turn_left>
     f76:	2b c0       	rjmp	.+86     	; 0xfce <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     f78:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cur_motion>
     f7c:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <rx_msg+0x4>
     f80:	92 30       	cpi	r25, 0x02	; 2
     f82:	21 f4       	brne	.+8      	; 0xf8c <__vector_23+0x2fc>
     f84:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <kilo_turn_right>
     f88:	89 17       	cp	r24, r25
     f8a:	09 f1       	breq	.+66     	; 0xfce <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f8c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     f96:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_turn_right>
     f9a:	19 c0       	rjmp	.+50     	; 0xfce <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     f9c:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <cur_motion>
     fa0:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <rx_msg+0x6>
     fa4:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <rx_msg+0x5>
     fa8:	23 30       	cpi	r18, 0x03	; 3
     faa:	41 f4       	brne	.+16     	; 0xfbc <__vector_23+0x32c>
     fac:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <kilo_straight_right>
     fb0:	82 13       	cpse	r24, r18
     fb2:	04 c0       	rjmp	.+8      	; 0xfbc <__vector_23+0x32c>
     fb4:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <kilo_straight_left>
     fb8:	92 17       	cp	r25, r18
     fba:	49 f0       	breq	.+18     	; 0xfce <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     fbc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     fc0:	23 e0       	ldi	r18, 0x03	; 3
     fc2:	20 93 11 01 	sts	0x0111, r18	; 0x800111 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     fc6:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     fca:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     fce:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <rx_msg>
     fd2:	88 23       	and	r24, r24
     fd4:	c9 f1       	breq	.+114    	; 0x1048 <__vector_23+0x3b8>
     fd6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     fda:	86 30       	cpi	r24, 0x06	; 6
     fdc:	a9 f1       	breq	.+106    	; 0x1048 <__vector_23+0x3b8>
                motors_on();
     fde:	53 9a       	sbi	0x0a, 3	; 10
     fe0:	23 9a       	sbi	0x04, 3	; 4
     fe2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fe6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     fea:	86 e0       	ldi	r24, 0x06	; 6
     fec:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
     ff0:	2b c0       	rjmp	.+86     	; 0x1048 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     ff2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_state>
     ff6:	86 30       	cpi	r24, 0x06	; 6
     ff8:	81 f0       	breq	.+32     	; 0x101a <__vector_23+0x38a>
                motors_on();
     ffa:	53 9a       	sbi	0x0a, 3	; 10
     ffc:	23 9a       	sbi	0x04, 3	; 4
     ffe:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1002:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    100c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
    1010:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <prev_motion>
                kilo_state = MOVING;
    1014:	86 e0       	ldi	r24, 0x06	; 6
    1016:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	00 90 6f 01 	lds	r0, 0x016F	; 0x80016f <rx_msg>
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <__vector_23+0x398>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <__vector_23+0x394>
    102c:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <kilo_uid>
    1030:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <kilo_uid+0x1>
    1034:	82 23       	and	r24, r18
    1036:	93 23       	and	r25, r19
    1038:	89 2b       	or	r24, r25
    103a:	21 f0       	breq	.+8      	; 0x1044 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <cur_motion>
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    1044:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cur_motion>
                    }
                }
            }
        }
    }
}
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    106e:	fc 01       	movw	r30, r24
    1070:	9c 01       	movw	r18, r24
    1072:	26 5f       	subi	r18, 0xF6	; 246
    1074:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    107a:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    107c:	84 27       	eor	r24, r20
    107e:	08 2e       	mov	r0, r24
    1080:	82 95       	swap	r24
    1082:	80 7f       	andi	r24, 0xF0	; 240
    1084:	80 25       	eor	r24, r0
    1086:	09 2e       	mov	r0, r25
    1088:	98 2f       	mov	r25, r24
    108a:	82 95       	swap	r24
    108c:	8f 70       	andi	r24, 0x0F	; 15
    108e:	08 26       	eor	r0, r24
    1090:	86 95       	lsr	r24
    1092:	98 27       	eor	r25, r24
    1094:	89 27       	eor	r24, r25
    1096:	88 0f       	add	r24, r24
    1098:	88 0f       	add	r24, r24
    109a:	88 0f       	add	r24, r24
    109c:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    109e:	e2 17       	cp	r30, r18
    10a0:	f3 07       	cpc	r31, r19
    10a2:	59 f7       	brne	.-42     	; 0x107a <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    10a4:	08 95       	ret

000010a6 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    10a6:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    10a8:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    10aa:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    10ac:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <tx_mask>
    or tmpreg1, ddrreg
    10b0:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    10b2:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    10b4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    10b6:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <tx_mask>
    10ba:	20 30       	cpi	r18, 0x00	; 0
    10bc:	29 f0       	breq	.+10     	; 0x10c8 <message_send+0x22>
    10be:	00 00       	nop
    10c0:	25 b1       	in	r18, 0x05	; 5
    10c2:	23 2b       	or	r18, r19
    10c4:	25 b9       	out	0x05, r18	; 5
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <message_send+0x2a>
    10c8:	00 00       	nop
    10ca:	00 00       	nop
    10cc:	00 00       	nop
    10ce:	00 c0       	rjmp	.+0      	; 0x10d0 <message_send+0x2a>
    10d0:	00 00       	nop
    10d2:	00 00       	nop
    10d4:	00 00       	nop
    10d6:	30 95       	com	r19
    10d8:	25 b1       	in	r18, 0x05	; 5
    10da:	23 23       	and	r18, r19
    10dc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    10de:	2e ea       	ldi	r18, 0xAE	; 174
    10e0:	2a 95       	dec	r18
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    10e4:	2b ee       	ldi	r18, 0xEB	; 235

000010e6 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    10e6:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    10e8:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    10ea:	0a c0       	rjmp	.+20     	; 0x1100 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    10ec:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    10ee:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <tx_mask>
    com tmpreg2
    10f2:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10f4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10f6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10f8:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10fa:	0f be       	out	0x3f, r0	; 63
    return 0
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	08 95       	ret

00001100 <nocollision>:
nocollision:
    nop
    1100:	00 00       	nop
    dec tmpreg1
    1102:	2a 95       	dec	r18
    brne checkcollision
    1104:	81 f7       	brne	.-32     	; 0x10e6 <checkcollision>

    ldi tmpreg1, 0x01
    1106:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1108:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <tx_mask>
    110c:	20 30       	cpi	r18, 0x00	; 0
    110e:	29 f0       	breq	.+10     	; 0x111a <nocollision+0x1a>
    1110:	00 00       	nop
    1112:	25 b1       	in	r18, 0x05	; 5
    1114:	23 2b       	or	r18, r19
    1116:	25 b9       	out	0x05, r18	; 5
    1118:	04 c0       	rjmp	.+8      	; 0x1122 <nocollision+0x22>
    111a:	00 00       	nop
    111c:	00 00       	nop
    111e:	00 00       	nop
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <nocollision+0x22>
    1122:	00 00       	nop
    1124:	00 00       	nop
    1126:	00 00       	nop
    1128:	30 95       	com	r19
    112a:	25 b1       	in	r18, 0x05	; 5
    112c:	23 23       	and	r18, r19
    112e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1130:	00 00       	nop
    1132:	24 e5       	ldi	r18, 0x54	; 84
    1134:	2a 95       	dec	r18
    1136:	f1 f7       	brne	.-4      	; 0x1134 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1138:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    113a:	8c e0       	ldi	r24, 0x0C	; 12

0000113c <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    113c:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    113e:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1140:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1142:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1144:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1146:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1148:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    114a:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    114c:	50 e0       	ldi	r21, 0x00	; 0

0000114e <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    114e:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1150:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1152:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1154:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1156:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <tx_mask>
    115a:	20 30       	cpi	r18, 0x00	; 0
    115c:	29 f0       	breq	.+10     	; 0x1168 <sendbit+0x1a>
    115e:	00 00       	nop
    1160:	25 b1       	in	r18, 0x05	; 5
    1162:	23 2b       	or	r18, r19
    1164:	25 b9       	out	0x05, r18	; 5
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <sendbit+0x22>
    1168:	00 00       	nop
    116a:	00 00       	nop
    116c:	00 00       	nop
    116e:	00 c0       	rjmp	.+0      	; 0x1170 <sendbit+0x22>
    1170:	00 00       	nop
    1172:	00 00       	nop
    1174:	00 00       	nop
    1176:	30 95       	com	r19
    1178:	25 b1       	in	r18, 0x05	; 5
    117a:	23 23       	and	r18, r19
    117c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    117e:	00 00       	nop
    1180:	21 e5       	ldi	r18, 0x51	; 81
    1182:	2a 95       	dec	r18
    1184:	f1 f7       	brne	.-4      	; 0x1182 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1186:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1188:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    118a:	9a 95       	dec	r25
    brne sendbit
    118c:	01 f7       	brne	.-64     	; 0x114e <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    118e:	8a 95       	dec	r24
    brne sendbyte
    1190:	a9 f6       	brne	.-86     	; 0x113c <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1192:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1194:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1196:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1198:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    119a:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <tx_mask>
    com tmpreg2
    119e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    11a0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    11a2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    11a4:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    11a6:	0f be       	out	0x3f, r0	; 63
    return 1
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	08 95       	ret

000011ac <main>:
    return &msg;
}

int main() 
{
    kilo_init();
    11ac:	0e 94 23 01 	call	0x246	; 0x246 <kilo_init>
    kilo_message_rx = message_rx;
    11b0:	82 eb       	ldi	r24, 0xB2	; 178
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_rx+0x1>
    11b8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_rx>
    kilo_message_tx = message_tx;
    11bc:	81 e7       	ldi	r24, 0x71	; 113
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx+0x1>
    11c4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx>
    kilo_start(setup, loop);
    11c8:	60 ef       	ldi	r22, 0xF0	; 240
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	82 e8       	ldi	r24, 0x82	; 130
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 1b 05 	call	0xa36	; 0xa36 <kilo_start>
    return 0;
}
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	08 95       	ret

000011da <__divmodhi4>:
    11da:	97 fb       	bst	r25, 7
    11dc:	07 2e       	mov	r0, r23
    11de:	16 f4       	brtc	.+4      	; 0x11e4 <__divmodhi4+0xa>
    11e0:	00 94       	com	r0
    11e2:	07 d0       	rcall	.+14     	; 0x11f2 <__divmodhi4_neg1>
    11e4:	77 fd       	sbrc	r23, 7
    11e6:	09 d0       	rcall	.+18     	; 0x11fa <__divmodhi4_neg2>
    11e8:	0e 94 16 09 	call	0x122c	; 0x122c <__udivmodhi4>
    11ec:	07 fc       	sbrc	r0, 7
    11ee:	05 d0       	rcall	.+10     	; 0x11fa <__divmodhi4_neg2>
    11f0:	3e f4       	brtc	.+14     	; 0x1200 <__divmodhi4_exit>

000011f2 <__divmodhi4_neg1>:
    11f2:	90 95       	com	r25
    11f4:	81 95       	neg	r24
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	08 95       	ret

000011fa <__divmodhi4_neg2>:
    11fa:	70 95       	com	r23
    11fc:	61 95       	neg	r22
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255

00001200 <__divmodhi4_exit>:
    1200:	08 95       	ret

00001202 <__tablejump2__>:
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	05 90       	lpm	r0, Z+
    1208:	f4 91       	lpm	r31, Z
    120a:	e0 2d       	mov	r30, r0
    120c:	09 94       	ijmp

0000120e <__umulhisi3>:
    120e:	a2 9f       	mul	r26, r18
    1210:	b0 01       	movw	r22, r0
    1212:	b3 9f       	mul	r27, r19
    1214:	c0 01       	movw	r24, r0
    1216:	a3 9f       	mul	r26, r19
    1218:	70 0d       	add	r23, r0
    121a:	81 1d       	adc	r24, r1
    121c:	11 24       	eor	r1, r1
    121e:	91 1d       	adc	r25, r1
    1220:	b2 9f       	mul	r27, r18
    1222:	70 0d       	add	r23, r0
    1224:	81 1d       	adc	r24, r1
    1226:	11 24       	eor	r1, r1
    1228:	91 1d       	adc	r25, r1
    122a:	08 95       	ret

0000122c <__udivmodhi4>:
    122c:	aa 1b       	sub	r26, r26
    122e:	bb 1b       	sub	r27, r27
    1230:	51 e1       	ldi	r21, 0x11	; 17
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <__udivmodhi4_ep>

00001234 <__udivmodhi4_loop>:
    1234:	aa 1f       	adc	r26, r26
    1236:	bb 1f       	adc	r27, r27
    1238:	a6 17       	cp	r26, r22
    123a:	b7 07       	cpc	r27, r23
    123c:	10 f0       	brcs	.+4      	; 0x1242 <__udivmodhi4_ep>
    123e:	a6 1b       	sub	r26, r22
    1240:	b7 0b       	sbc	r27, r23

00001242 <__udivmodhi4_ep>:
    1242:	88 1f       	adc	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	5a 95       	dec	r21
    1248:	a9 f7       	brne	.-22     	; 0x1234 <__udivmodhi4_loop>
    124a:	80 95       	com	r24
    124c:	90 95       	com	r25
    124e:	bc 01       	movw	r22, r24
    1250:	cd 01       	movw	r24, r26
    1252:	08 95       	ret

00001254 <__subsf3>:
    1254:	50 58       	subi	r21, 0x80	; 128

00001256 <__addsf3>:
    1256:	bb 27       	eor	r27, r27
    1258:	aa 27       	eor	r26, r26
    125a:	0e 94 42 09 	call	0x1284	; 0x1284 <__addsf3x>
    125e:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__fp_round>
    1262:	0e 94 85 0a 	call	0x150a	; 0x150a <__fp_pscA>
    1266:	38 f0       	brcs	.+14     	; 0x1276 <__addsf3+0x20>
    1268:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__fp_pscB>
    126c:	20 f0       	brcs	.+8      	; 0x1276 <__addsf3+0x20>
    126e:	39 f4       	brne	.+14     	; 0x127e <__addsf3+0x28>
    1270:	9f 3f       	cpi	r25, 0xFF	; 255
    1272:	19 f4       	brne	.+6      	; 0x127a <__addsf3+0x24>
    1274:	26 f4       	brtc	.+8      	; 0x127e <__addsf3+0x28>
    1276:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__fp_nan>
    127a:	0e f4       	brtc	.+2      	; 0x127e <__addsf3+0x28>
    127c:	e0 95       	com	r30
    127e:	e7 fb       	bst	r30, 7
    1280:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__fp_inf>

00001284 <__addsf3x>:
    1284:	e9 2f       	mov	r30, r25
    1286:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fp_split3>
    128a:	58 f3       	brcs	.-42     	; 0x1262 <__addsf3+0xc>
    128c:	ba 17       	cp	r27, r26
    128e:	62 07       	cpc	r22, r18
    1290:	73 07       	cpc	r23, r19
    1292:	84 07       	cpc	r24, r20
    1294:	95 07       	cpc	r25, r21
    1296:	20 f0       	brcs	.+8      	; 0x12a0 <__addsf3x+0x1c>
    1298:	79 f4       	brne	.+30     	; 0x12b8 <__addsf3x+0x34>
    129a:	a6 f5       	brtc	.+104    	; 0x1304 <__addsf3x+0x80>
    129c:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__fp_zero>
    12a0:	0e f4       	brtc	.+2      	; 0x12a4 <__addsf3x+0x20>
    12a2:	e0 95       	com	r30
    12a4:	0b 2e       	mov	r0, r27
    12a6:	ba 2f       	mov	r27, r26
    12a8:	a0 2d       	mov	r26, r0
    12aa:	0b 01       	movw	r0, r22
    12ac:	b9 01       	movw	r22, r18
    12ae:	90 01       	movw	r18, r0
    12b0:	0c 01       	movw	r0, r24
    12b2:	ca 01       	movw	r24, r20
    12b4:	a0 01       	movw	r20, r0
    12b6:	11 24       	eor	r1, r1
    12b8:	ff 27       	eor	r31, r31
    12ba:	59 1b       	sub	r21, r25
    12bc:	99 f0       	breq	.+38     	; 0x12e4 <__addsf3x+0x60>
    12be:	59 3f       	cpi	r21, 0xF9	; 249
    12c0:	50 f4       	brcc	.+20     	; 0x12d6 <__addsf3x+0x52>
    12c2:	50 3e       	cpi	r21, 0xE0	; 224
    12c4:	68 f1       	brcs	.+90     	; 0x1320 <__addsf3x+0x9c>
    12c6:	1a 16       	cp	r1, r26
    12c8:	f0 40       	sbci	r31, 0x00	; 0
    12ca:	a2 2f       	mov	r26, r18
    12cc:	23 2f       	mov	r18, r19
    12ce:	34 2f       	mov	r19, r20
    12d0:	44 27       	eor	r20, r20
    12d2:	58 5f       	subi	r21, 0xF8	; 248
    12d4:	f3 cf       	rjmp	.-26     	; 0x12bc <__addsf3x+0x38>
    12d6:	46 95       	lsr	r20
    12d8:	37 95       	ror	r19
    12da:	27 95       	ror	r18
    12dc:	a7 95       	ror	r26
    12de:	f0 40       	sbci	r31, 0x00	; 0
    12e0:	53 95       	inc	r21
    12e2:	c9 f7       	brne	.-14     	; 0x12d6 <__addsf3x+0x52>
    12e4:	7e f4       	brtc	.+30     	; 0x1304 <__addsf3x+0x80>
    12e6:	1f 16       	cp	r1, r31
    12e8:	ba 0b       	sbc	r27, r26
    12ea:	62 0b       	sbc	r22, r18
    12ec:	73 0b       	sbc	r23, r19
    12ee:	84 0b       	sbc	r24, r20
    12f0:	ba f0       	brmi	.+46     	; 0x1320 <__addsf3x+0x9c>
    12f2:	91 50       	subi	r25, 0x01	; 1
    12f4:	a1 f0       	breq	.+40     	; 0x131e <__addsf3x+0x9a>
    12f6:	ff 0f       	add	r31, r31
    12f8:	bb 1f       	adc	r27, r27
    12fa:	66 1f       	adc	r22, r22
    12fc:	77 1f       	adc	r23, r23
    12fe:	88 1f       	adc	r24, r24
    1300:	c2 f7       	brpl	.-16     	; 0x12f2 <__addsf3x+0x6e>
    1302:	0e c0       	rjmp	.+28     	; 0x1320 <__addsf3x+0x9c>
    1304:	ba 0f       	add	r27, r26
    1306:	62 1f       	adc	r22, r18
    1308:	73 1f       	adc	r23, r19
    130a:	84 1f       	adc	r24, r20
    130c:	48 f4       	brcc	.+18     	; 0x1320 <__addsf3x+0x9c>
    130e:	87 95       	ror	r24
    1310:	77 95       	ror	r23
    1312:	67 95       	ror	r22
    1314:	b7 95       	ror	r27
    1316:	f7 95       	ror	r31
    1318:	9e 3f       	cpi	r25, 0xFE	; 254
    131a:	08 f0       	brcs	.+2      	; 0x131e <__addsf3x+0x9a>
    131c:	b0 cf       	rjmp	.-160    	; 0x127e <__addsf3+0x28>
    131e:	93 95       	inc	r25
    1320:	88 0f       	add	r24, r24
    1322:	08 f0       	brcs	.+2      	; 0x1326 <__addsf3x+0xa2>
    1324:	99 27       	eor	r25, r25
    1326:	ee 0f       	add	r30, r30
    1328:	97 95       	ror	r25
    132a:	87 95       	ror	r24
    132c:	08 95       	ret

0000132e <__divsf3>:
    132e:	0e 94 ab 09 	call	0x1356	; 0x1356 <__divsf3x>
    1332:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__fp_round>
    1336:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__fp_pscB>
    133a:	58 f0       	brcs	.+22     	; 0x1352 <__divsf3+0x24>
    133c:	0e 94 85 0a 	call	0x150a	; 0x150a <__fp_pscA>
    1340:	40 f0       	brcs	.+16     	; 0x1352 <__divsf3+0x24>
    1342:	29 f4       	brne	.+10     	; 0x134e <__divsf3+0x20>
    1344:	5f 3f       	cpi	r21, 0xFF	; 255
    1346:	29 f0       	breq	.+10     	; 0x1352 <__divsf3+0x24>
    1348:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__fp_inf>
    134c:	51 11       	cpse	r21, r1
    134e:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_szero>
    1352:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__fp_nan>

00001356 <__divsf3x>:
    1356:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fp_split3>
    135a:	68 f3       	brcs	.-38     	; 0x1336 <__divsf3+0x8>

0000135c <__divsf3_pse>:
    135c:	99 23       	and	r25, r25
    135e:	b1 f3       	breq	.-20     	; 0x134c <__divsf3+0x1e>
    1360:	55 23       	and	r21, r21
    1362:	91 f3       	breq	.-28     	; 0x1348 <__divsf3+0x1a>
    1364:	95 1b       	sub	r25, r21
    1366:	55 0b       	sbc	r21, r21
    1368:	bb 27       	eor	r27, r27
    136a:	aa 27       	eor	r26, r26
    136c:	62 17       	cp	r22, r18
    136e:	73 07       	cpc	r23, r19
    1370:	84 07       	cpc	r24, r20
    1372:	38 f0       	brcs	.+14     	; 0x1382 <__divsf3_pse+0x26>
    1374:	9f 5f       	subi	r25, 0xFF	; 255
    1376:	5f 4f       	sbci	r21, 0xFF	; 255
    1378:	22 0f       	add	r18, r18
    137a:	33 1f       	adc	r19, r19
    137c:	44 1f       	adc	r20, r20
    137e:	aa 1f       	adc	r26, r26
    1380:	a9 f3       	breq	.-22     	; 0x136c <__divsf3_pse+0x10>
    1382:	35 d0       	rcall	.+106    	; 0x13ee <__divsf3_pse+0x92>
    1384:	0e 2e       	mov	r0, r30
    1386:	3a f0       	brmi	.+14     	; 0x1396 <__divsf3_pse+0x3a>
    1388:	e0 e8       	ldi	r30, 0x80	; 128
    138a:	32 d0       	rcall	.+100    	; 0x13f0 <__divsf3_pse+0x94>
    138c:	91 50       	subi	r25, 0x01	; 1
    138e:	50 40       	sbci	r21, 0x00	; 0
    1390:	e6 95       	lsr	r30
    1392:	00 1c       	adc	r0, r0
    1394:	ca f7       	brpl	.-14     	; 0x1388 <__divsf3_pse+0x2c>
    1396:	2b d0       	rcall	.+86     	; 0x13ee <__divsf3_pse+0x92>
    1398:	fe 2f       	mov	r31, r30
    139a:	29 d0       	rcall	.+82     	; 0x13ee <__divsf3_pse+0x92>
    139c:	66 0f       	add	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	88 1f       	adc	r24, r24
    13a2:	bb 1f       	adc	r27, r27
    13a4:	26 17       	cp	r18, r22
    13a6:	37 07       	cpc	r19, r23
    13a8:	48 07       	cpc	r20, r24
    13aa:	ab 07       	cpc	r26, r27
    13ac:	b0 e8       	ldi	r27, 0x80	; 128
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <__divsf3_pse+0x56>
    13b0:	bb 0b       	sbc	r27, r27
    13b2:	80 2d       	mov	r24, r0
    13b4:	bf 01       	movw	r22, r30
    13b6:	ff 27       	eor	r31, r31
    13b8:	93 58       	subi	r25, 0x83	; 131
    13ba:	5f 4f       	sbci	r21, 0xFF	; 255
    13bc:	3a f0       	brmi	.+14     	; 0x13cc <__divsf3_pse+0x70>
    13be:	9e 3f       	cpi	r25, 0xFE	; 254
    13c0:	51 05       	cpc	r21, r1
    13c2:	78 f0       	brcs	.+30     	; 0x13e2 <__divsf3_pse+0x86>
    13c4:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__fp_inf>
    13c8:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_szero>
    13cc:	5f 3f       	cpi	r21, 0xFF	; 255
    13ce:	e4 f3       	brlt	.-8      	; 0x13c8 <__divsf3_pse+0x6c>
    13d0:	98 3e       	cpi	r25, 0xE8	; 232
    13d2:	d4 f3       	brlt	.-12     	; 0x13c8 <__divsf3_pse+0x6c>
    13d4:	86 95       	lsr	r24
    13d6:	77 95       	ror	r23
    13d8:	67 95       	ror	r22
    13da:	b7 95       	ror	r27
    13dc:	f7 95       	ror	r31
    13de:	9f 5f       	subi	r25, 0xFF	; 255
    13e0:	c9 f7       	brne	.-14     	; 0x13d4 <__divsf3_pse+0x78>
    13e2:	88 0f       	add	r24, r24
    13e4:	91 1d       	adc	r25, r1
    13e6:	96 95       	lsr	r25
    13e8:	87 95       	ror	r24
    13ea:	97 f9       	bld	r25, 7
    13ec:	08 95       	ret
    13ee:	e1 e0       	ldi	r30, 0x01	; 1
    13f0:	66 0f       	add	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	88 1f       	adc	r24, r24
    13f6:	bb 1f       	adc	r27, r27
    13f8:	62 17       	cp	r22, r18
    13fa:	73 07       	cpc	r23, r19
    13fc:	84 07       	cpc	r24, r20
    13fe:	ba 07       	cpc	r27, r26
    1400:	20 f0       	brcs	.+8      	; 0x140a <__divsf3_pse+0xae>
    1402:	62 1b       	sub	r22, r18
    1404:	73 0b       	sbc	r23, r19
    1406:	84 0b       	sbc	r24, r20
    1408:	ba 0b       	sbc	r27, r26
    140a:	ee 1f       	adc	r30, r30
    140c:	88 f7       	brcc	.-30     	; 0x13f0 <__divsf3_pse+0x94>
    140e:	e0 95       	com	r30
    1410:	08 95       	ret

00001412 <__fixsfsi>:
    1412:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fixunssfsi>
    1416:	68 94       	set
    1418:	b1 11       	cpse	r27, r1
    141a:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_szero>
    141e:	08 95       	ret

00001420 <__fixunssfsi>:
    1420:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__fp_splitA>
    1424:	88 f0       	brcs	.+34     	; 0x1448 <__fixunssfsi+0x28>
    1426:	9f 57       	subi	r25, 0x7F	; 127
    1428:	98 f0       	brcs	.+38     	; 0x1450 <__fixunssfsi+0x30>
    142a:	b9 2f       	mov	r27, r25
    142c:	99 27       	eor	r25, r25
    142e:	b7 51       	subi	r27, 0x17	; 23
    1430:	b0 f0       	brcs	.+44     	; 0x145e <__fixunssfsi+0x3e>
    1432:	e1 f0       	breq	.+56     	; 0x146c <__fixunssfsi+0x4c>
    1434:	66 0f       	add	r22, r22
    1436:	77 1f       	adc	r23, r23
    1438:	88 1f       	adc	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	1a f0       	brmi	.+6      	; 0x1444 <__fixunssfsi+0x24>
    143e:	ba 95       	dec	r27
    1440:	c9 f7       	brne	.-14     	; 0x1434 <__fixunssfsi+0x14>
    1442:	14 c0       	rjmp	.+40     	; 0x146c <__fixunssfsi+0x4c>
    1444:	b1 30       	cpi	r27, 0x01	; 1
    1446:	91 f0       	breq	.+36     	; 0x146c <__fixunssfsi+0x4c>
    1448:	0e 94 c6 0a 	call	0x158c	; 0x158c <__fp_zero>
    144c:	b1 e0       	ldi	r27, 0x01	; 1
    144e:	08 95       	ret
    1450:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__fp_zero>
    1454:	67 2f       	mov	r22, r23
    1456:	78 2f       	mov	r23, r24
    1458:	88 27       	eor	r24, r24
    145a:	b8 5f       	subi	r27, 0xF8	; 248
    145c:	39 f0       	breq	.+14     	; 0x146c <__fixunssfsi+0x4c>
    145e:	b9 3f       	cpi	r27, 0xF9	; 249
    1460:	cc f3       	brlt	.-14     	; 0x1454 <__fixunssfsi+0x34>
    1462:	86 95       	lsr	r24
    1464:	77 95       	ror	r23
    1466:	67 95       	ror	r22
    1468:	b3 95       	inc	r27
    146a:	d9 f7       	brne	.-10     	; 0x1462 <__fixunssfsi+0x42>
    146c:	3e f4       	brtc	.+14     	; 0x147c <__fixunssfsi+0x5c>
    146e:	90 95       	com	r25
    1470:	80 95       	com	r24
    1472:	70 95       	com	r23
    1474:	61 95       	neg	r22
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	08 95       	ret

0000147e <__floatunsisf>:
    147e:	e8 94       	clt
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <__floatsisf+0x12>

00001482 <__floatsisf>:
    1482:	97 fb       	bst	r25, 7
    1484:	3e f4       	brtc	.+14     	; 0x1494 <__floatsisf+0x12>
    1486:	90 95       	com	r25
    1488:	80 95       	com	r24
    148a:	70 95       	com	r23
    148c:	61 95       	neg	r22
    148e:	7f 4f       	sbci	r23, 0xFF	; 255
    1490:	8f 4f       	sbci	r24, 0xFF	; 255
    1492:	9f 4f       	sbci	r25, 0xFF	; 255
    1494:	99 23       	and	r25, r25
    1496:	a9 f0       	breq	.+42     	; 0x14c2 <__floatsisf+0x40>
    1498:	f9 2f       	mov	r31, r25
    149a:	96 e9       	ldi	r25, 0x96	; 150
    149c:	bb 27       	eor	r27, r27
    149e:	93 95       	inc	r25
    14a0:	f6 95       	lsr	r31
    14a2:	87 95       	ror	r24
    14a4:	77 95       	ror	r23
    14a6:	67 95       	ror	r22
    14a8:	b7 95       	ror	r27
    14aa:	f1 11       	cpse	r31, r1
    14ac:	f8 cf       	rjmp	.-16     	; 0x149e <__floatsisf+0x1c>
    14ae:	fa f4       	brpl	.+62     	; 0x14ee <__floatsisf+0x6c>
    14b0:	bb 0f       	add	r27, r27
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <__floatsisf+0x36>
    14b4:	60 ff       	sbrs	r22, 0
    14b6:	1b c0       	rjmp	.+54     	; 0x14ee <__floatsisf+0x6c>
    14b8:	6f 5f       	subi	r22, 0xFF	; 255
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	8f 4f       	sbci	r24, 0xFF	; 255
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	16 c0       	rjmp	.+44     	; 0x14ee <__floatsisf+0x6c>
    14c2:	88 23       	and	r24, r24
    14c4:	11 f0       	breq	.+4      	; 0x14ca <__floatsisf+0x48>
    14c6:	96 e9       	ldi	r25, 0x96	; 150
    14c8:	11 c0       	rjmp	.+34     	; 0x14ec <__floatsisf+0x6a>
    14ca:	77 23       	and	r23, r23
    14cc:	21 f0       	breq	.+8      	; 0x14d6 <__floatsisf+0x54>
    14ce:	9e e8       	ldi	r25, 0x8E	; 142
    14d0:	87 2f       	mov	r24, r23
    14d2:	76 2f       	mov	r23, r22
    14d4:	05 c0       	rjmp	.+10     	; 0x14e0 <__floatsisf+0x5e>
    14d6:	66 23       	and	r22, r22
    14d8:	71 f0       	breq	.+28     	; 0x14f6 <__floatsisf+0x74>
    14da:	96 e8       	ldi	r25, 0x86	; 134
    14dc:	86 2f       	mov	r24, r22
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	2a f0       	brmi	.+10     	; 0x14ee <__floatsisf+0x6c>
    14e4:	9a 95       	dec	r25
    14e6:	66 0f       	add	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	88 1f       	adc	r24, r24
    14ec:	da f7       	brpl	.-10     	; 0x14e4 <__floatsisf+0x62>
    14ee:	88 0f       	add	r24, r24
    14f0:	96 95       	lsr	r25
    14f2:	87 95       	ror	r24
    14f4:	97 f9       	bld	r25, 7
    14f6:	08 95       	ret

000014f8 <__fp_inf>:
    14f8:	97 f9       	bld	r25, 7
    14fa:	9f 67       	ori	r25, 0x7F	; 127
    14fc:	80 e8       	ldi	r24, 0x80	; 128
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	08 95       	ret

00001504 <__fp_nan>:
    1504:	9f ef       	ldi	r25, 0xFF	; 255
    1506:	80 ec       	ldi	r24, 0xC0	; 192
    1508:	08 95       	ret

0000150a <__fp_pscA>:
    150a:	00 24       	eor	r0, r0
    150c:	0a 94       	dec	r0
    150e:	16 16       	cp	r1, r22
    1510:	17 06       	cpc	r1, r23
    1512:	18 06       	cpc	r1, r24
    1514:	09 06       	cpc	r0, r25
    1516:	08 95       	ret

00001518 <__fp_pscB>:
    1518:	00 24       	eor	r0, r0
    151a:	0a 94       	dec	r0
    151c:	12 16       	cp	r1, r18
    151e:	13 06       	cpc	r1, r19
    1520:	14 06       	cpc	r1, r20
    1522:	05 06       	cpc	r0, r21
    1524:	08 95       	ret

00001526 <__fp_round>:
    1526:	09 2e       	mov	r0, r25
    1528:	03 94       	inc	r0
    152a:	00 0c       	add	r0, r0
    152c:	11 f4       	brne	.+4      	; 0x1532 <__fp_round+0xc>
    152e:	88 23       	and	r24, r24
    1530:	52 f0       	brmi	.+20     	; 0x1546 <__fp_round+0x20>
    1532:	bb 0f       	add	r27, r27
    1534:	40 f4       	brcc	.+16     	; 0x1546 <__fp_round+0x20>
    1536:	bf 2b       	or	r27, r31
    1538:	11 f4       	brne	.+4      	; 0x153e <__fp_round+0x18>
    153a:	60 ff       	sbrs	r22, 0
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <__fp_round+0x20>
    153e:	6f 5f       	subi	r22, 0xFF	; 255
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	8f 4f       	sbci	r24, 0xFF	; 255
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	08 95       	ret

00001548 <__fp_split3>:
    1548:	57 fd       	sbrc	r21, 7
    154a:	90 58       	subi	r25, 0x80	; 128
    154c:	44 0f       	add	r20, r20
    154e:	55 1f       	adc	r21, r21
    1550:	59 f0       	breq	.+22     	; 0x1568 <__fp_splitA+0x10>
    1552:	5f 3f       	cpi	r21, 0xFF	; 255
    1554:	71 f0       	breq	.+28     	; 0x1572 <__fp_splitA+0x1a>
    1556:	47 95       	ror	r20

00001558 <__fp_splitA>:
    1558:	88 0f       	add	r24, r24
    155a:	97 fb       	bst	r25, 7
    155c:	99 1f       	adc	r25, r25
    155e:	61 f0       	breq	.+24     	; 0x1578 <__fp_splitA+0x20>
    1560:	9f 3f       	cpi	r25, 0xFF	; 255
    1562:	79 f0       	breq	.+30     	; 0x1582 <__fp_splitA+0x2a>
    1564:	87 95       	ror	r24
    1566:	08 95       	ret
    1568:	12 16       	cp	r1, r18
    156a:	13 06       	cpc	r1, r19
    156c:	14 06       	cpc	r1, r20
    156e:	55 1f       	adc	r21, r21
    1570:	f2 cf       	rjmp	.-28     	; 0x1556 <__fp_split3+0xe>
    1572:	46 95       	lsr	r20
    1574:	f1 df       	rcall	.-30     	; 0x1558 <__fp_splitA>
    1576:	08 c0       	rjmp	.+16     	; 0x1588 <__fp_splitA+0x30>
    1578:	16 16       	cp	r1, r22
    157a:	17 06       	cpc	r1, r23
    157c:	18 06       	cpc	r1, r24
    157e:	99 1f       	adc	r25, r25
    1580:	f1 cf       	rjmp	.-30     	; 0x1564 <__fp_splitA+0xc>
    1582:	86 95       	lsr	r24
    1584:	71 05       	cpc	r23, r1
    1586:	61 05       	cpc	r22, r1
    1588:	08 94       	sec
    158a:	08 95       	ret

0000158c <__fp_zero>:
    158c:	e8 94       	clt

0000158e <__fp_szero>:
    158e:	bb 27       	eor	r27, r27
    1590:	66 27       	eor	r22, r22
    1592:	77 27       	eor	r23, r23
    1594:	cb 01       	movw	r24, r22
    1596:	97 f9       	bld	r25, 7
    1598:	08 95       	ret

0000159a <__mulsf3>:
    159a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__mulsf3x>
    159e:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__fp_round>
    15a2:	0e 94 85 0a 	call	0x150a	; 0x150a <__fp_pscA>
    15a6:	38 f0       	brcs	.+14     	; 0x15b6 <__mulsf3+0x1c>
    15a8:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__fp_pscB>
    15ac:	20 f0       	brcs	.+8      	; 0x15b6 <__mulsf3+0x1c>
    15ae:	95 23       	and	r25, r21
    15b0:	11 f0       	breq	.+4      	; 0x15b6 <__mulsf3+0x1c>
    15b2:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__fp_inf>
    15b6:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__fp_nan>
    15ba:	11 24       	eor	r1, r1
    15bc:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_szero>

000015c0 <__mulsf3x>:
    15c0:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fp_split3>
    15c4:	70 f3       	brcs	.-36     	; 0x15a2 <__mulsf3+0x8>

000015c6 <__mulsf3_pse>:
    15c6:	95 9f       	mul	r25, r21
    15c8:	c1 f3       	breq	.-16     	; 0x15ba <__mulsf3+0x20>
    15ca:	95 0f       	add	r25, r21
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	55 1f       	adc	r21, r21
    15d0:	62 9f       	mul	r22, r18
    15d2:	f0 01       	movw	r30, r0
    15d4:	72 9f       	mul	r23, r18
    15d6:	bb 27       	eor	r27, r27
    15d8:	f0 0d       	add	r31, r0
    15da:	b1 1d       	adc	r27, r1
    15dc:	63 9f       	mul	r22, r19
    15de:	aa 27       	eor	r26, r26
    15e0:	f0 0d       	add	r31, r0
    15e2:	b1 1d       	adc	r27, r1
    15e4:	aa 1f       	adc	r26, r26
    15e6:	64 9f       	mul	r22, r20
    15e8:	66 27       	eor	r22, r22
    15ea:	b0 0d       	add	r27, r0
    15ec:	a1 1d       	adc	r26, r1
    15ee:	66 1f       	adc	r22, r22
    15f0:	82 9f       	mul	r24, r18
    15f2:	22 27       	eor	r18, r18
    15f4:	b0 0d       	add	r27, r0
    15f6:	a1 1d       	adc	r26, r1
    15f8:	62 1f       	adc	r22, r18
    15fa:	73 9f       	mul	r23, r19
    15fc:	b0 0d       	add	r27, r0
    15fe:	a1 1d       	adc	r26, r1
    1600:	62 1f       	adc	r22, r18
    1602:	83 9f       	mul	r24, r19
    1604:	a0 0d       	add	r26, r0
    1606:	61 1d       	adc	r22, r1
    1608:	22 1f       	adc	r18, r18
    160a:	74 9f       	mul	r23, r20
    160c:	33 27       	eor	r19, r19
    160e:	a0 0d       	add	r26, r0
    1610:	61 1d       	adc	r22, r1
    1612:	23 1f       	adc	r18, r19
    1614:	84 9f       	mul	r24, r20
    1616:	60 0d       	add	r22, r0
    1618:	21 1d       	adc	r18, r1
    161a:	82 2f       	mov	r24, r18
    161c:	76 2f       	mov	r23, r22
    161e:	6a 2f       	mov	r22, r26
    1620:	11 24       	eor	r1, r1
    1622:	9f 57       	subi	r25, 0x7F	; 127
    1624:	50 40       	sbci	r21, 0x00	; 0
    1626:	9a f0       	brmi	.+38     	; 0x164e <__mulsf3_pse+0x88>
    1628:	f1 f0       	breq	.+60     	; 0x1666 <__mulsf3_pse+0xa0>
    162a:	88 23       	and	r24, r24
    162c:	4a f0       	brmi	.+18     	; 0x1640 <__mulsf3_pse+0x7a>
    162e:	ee 0f       	add	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	bb 1f       	adc	r27, r27
    1634:	66 1f       	adc	r22, r22
    1636:	77 1f       	adc	r23, r23
    1638:	88 1f       	adc	r24, r24
    163a:	91 50       	subi	r25, 0x01	; 1
    163c:	50 40       	sbci	r21, 0x00	; 0
    163e:	a9 f7       	brne	.-22     	; 0x162a <__mulsf3_pse+0x64>
    1640:	9e 3f       	cpi	r25, 0xFE	; 254
    1642:	51 05       	cpc	r21, r1
    1644:	80 f0       	brcs	.+32     	; 0x1666 <__mulsf3_pse+0xa0>
    1646:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__fp_inf>
    164a:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_szero>
    164e:	5f 3f       	cpi	r21, 0xFF	; 255
    1650:	e4 f3       	brlt	.-8      	; 0x164a <__mulsf3_pse+0x84>
    1652:	98 3e       	cpi	r25, 0xE8	; 232
    1654:	d4 f3       	brlt	.-12     	; 0x164a <__mulsf3_pse+0x84>
    1656:	86 95       	lsr	r24
    1658:	77 95       	ror	r23
    165a:	67 95       	ror	r22
    165c:	b7 95       	ror	r27
    165e:	f7 95       	ror	r31
    1660:	e7 95       	ror	r30
    1662:	9f 5f       	subi	r25, 0xFF	; 255
    1664:	c1 f7       	brne	.-16     	; 0x1656 <__mulsf3_pse+0x90>
    1666:	fe 2b       	or	r31, r30
    1668:	88 0f       	add	r24, r24
    166a:	91 1d       	adc	r25, r1
    166c:	96 95       	lsr	r25
    166e:	87 95       	ror	r24
    1670:	97 f9       	bld	r25, 7
    1672:	08 95       	ret

00001674 <do_rand>:
    1674:	8f 92       	push	r8
    1676:	9f 92       	push	r9
    1678:	af 92       	push	r10
    167a:	bf 92       	push	r11
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	ec 01       	movw	r28, r24
    168a:	68 81       	ld	r22, Y
    168c:	79 81       	ldd	r23, Y+1	; 0x01
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	9b 81       	ldd	r25, Y+3	; 0x03
    1692:	61 15       	cp	r22, r1
    1694:	71 05       	cpc	r23, r1
    1696:	81 05       	cpc	r24, r1
    1698:	91 05       	cpc	r25, r1
    169a:	21 f4       	brne	.+8      	; 0x16a4 <do_rand+0x30>
    169c:	64 e2       	ldi	r22, 0x24	; 36
    169e:	79 ed       	ldi	r23, 0xD9	; 217
    16a0:	8b e5       	ldi	r24, 0x5B	; 91
    16a2:	97 e0       	ldi	r25, 0x07	; 7
    16a4:	2d e1       	ldi	r18, 0x1D	; 29
    16a6:	33 ef       	ldi	r19, 0xF3	; 243
    16a8:	41 e0       	ldi	r20, 0x01	; 1
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__divmodsi4>
    16b0:	49 01       	movw	r8, r18
    16b2:	5a 01       	movw	r10, r20
    16b4:	9b 01       	movw	r18, r22
    16b6:	ac 01       	movw	r20, r24
    16b8:	a7 ea       	ldi	r26, 0xA7	; 167
    16ba:	b1 e4       	ldi	r27, 0x41	; 65
    16bc:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__muluhisi3>
    16c0:	6b 01       	movw	r12, r22
    16c2:	7c 01       	movw	r14, r24
    16c4:	ac ee       	ldi	r26, 0xEC	; 236
    16c6:	b4 ef       	ldi	r27, 0xF4	; 244
    16c8:	a5 01       	movw	r20, r10
    16ca:	94 01       	movw	r18, r8
    16cc:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__mulohisi3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	8c 0d       	add	r24, r12
    16d6:	9d 1d       	adc	r25, r13
    16d8:	ae 1d       	adc	r26, r14
    16da:	bf 1d       	adc	r27, r15
    16dc:	b7 ff       	sbrs	r27, 7
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <do_rand+0x72>
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	a1 09       	sbc	r26, r1
    16e4:	b0 48       	sbci	r27, 0x80	; 128
    16e6:	88 83       	st	Y, r24
    16e8:	99 83       	std	Y+1, r25	; 0x01
    16ea:	aa 83       	std	Y+2, r26	; 0x02
    16ec:	bb 83       	std	Y+3, r27	; 0x03
    16ee:	9f 77       	andi	r25, 0x7F	; 127
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	ff 90       	pop	r15
    16f6:	ef 90       	pop	r14
    16f8:	df 90       	pop	r13
    16fa:	cf 90       	pop	r12
    16fc:	bf 90       	pop	r11
    16fe:	af 90       	pop	r10
    1700:	9f 90       	pop	r9
    1702:	8f 90       	pop	r8
    1704:	08 95       	ret

00001706 <rand_r>:
    1706:	0e 94 3a 0b 	call	0x1674	; 0x1674 <do_rand>
    170a:	08 95       	ret

0000170c <rand>:
    170c:	87 e0       	ldi	r24, 0x07	; 7
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	0e 94 3a 0b 	call	0x1674	; 0x1674 <do_rand>
    1714:	08 95       	ret

00001716 <srand>:
    1716:	a0 e0       	ldi	r26, 0x00	; 0
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    171e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    1722:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    1726:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    172a:	08 95       	ret

0000172c <eeprom_read_byte>:
    172c:	f9 99       	sbic	0x1f, 1	; 31
    172e:	fe cf       	rjmp	.-4      	; 0x172c <eeprom_read_byte>
    1730:	92 bd       	out	0x22, r25	; 34
    1732:	81 bd       	out	0x21, r24	; 33
    1734:	f8 9a       	sbi	0x1f, 0	; 31
    1736:	99 27       	eor	r25, r25
    1738:	80 b5       	in	r24, 0x20	; 32
    173a:	08 95       	ret

0000173c <eeprom_write_byte>:
    173c:	26 2f       	mov	r18, r22

0000173e <eeprom_write_r18>:
    173e:	f9 99       	sbic	0x1f, 1	; 31
    1740:	fe cf       	rjmp	.-4      	; 0x173e <eeprom_write_r18>
    1742:	1f ba       	out	0x1f, r1	; 31
    1744:	92 bd       	out	0x22, r25	; 34
    1746:	81 bd       	out	0x21, r24	; 33
    1748:	20 bd       	out	0x20, r18	; 32
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	fa 9a       	sbi	0x1f, 2	; 31
    1750:	f9 9a       	sbi	0x1f, 1	; 31
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	08 95       	ret

00001758 <__divmodsi4>:
    1758:	05 2e       	mov	r0, r21
    175a:	97 fb       	bst	r25, 7
    175c:	1e f4       	brtc	.+6      	; 0x1764 <__divmodsi4+0xc>
    175e:	00 94       	com	r0
    1760:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__negsi2>
    1764:	57 fd       	sbrc	r21, 7
    1766:	07 d0       	rcall	.+14     	; 0x1776 <__divmodsi4_neg2>
    1768:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__udivmodsi4>
    176c:	07 fc       	sbrc	r0, 7
    176e:	03 d0       	rcall	.+6      	; 0x1776 <__divmodsi4_neg2>
    1770:	4e f4       	brtc	.+18     	; 0x1784 <__divmodsi4_exit>
    1772:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__negsi2>

00001776 <__divmodsi4_neg2>:
    1776:	50 95       	com	r21
    1778:	40 95       	com	r20
    177a:	30 95       	com	r19
    177c:	21 95       	neg	r18
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	4f 4f       	sbci	r20, 0xFF	; 255
    1782:	5f 4f       	sbci	r21, 0xFF	; 255

00001784 <__divmodsi4_exit>:
    1784:	08 95       	ret

00001786 <__negsi2>:
    1786:	90 95       	com	r25
    1788:	80 95       	com	r24
    178a:	70 95       	com	r23
    178c:	61 95       	neg	r22
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	8f 4f       	sbci	r24, 0xFF	; 255
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	08 95       	ret

00001796 <__muluhisi3>:
    1796:	0e 94 07 09 	call	0x120e	; 0x120e <__umulhisi3>
    179a:	a5 9f       	mul	r26, r21
    179c:	90 0d       	add	r25, r0
    179e:	b4 9f       	mul	r27, r20
    17a0:	90 0d       	add	r25, r0
    17a2:	a4 9f       	mul	r26, r20
    17a4:	80 0d       	add	r24, r0
    17a6:	91 1d       	adc	r25, r1
    17a8:	11 24       	eor	r1, r1
    17aa:	08 95       	ret

000017ac <__mulshisi3>:
    17ac:	b7 ff       	sbrs	r27, 7
    17ae:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__muluhisi3>

000017b2 <__mulohisi3>:
    17b2:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__muluhisi3>
    17b6:	82 1b       	sub	r24, r18
    17b8:	93 0b       	sbc	r25, r19
    17ba:	08 95       	ret

000017bc <__udivmodsi4>:
    17bc:	a1 e2       	ldi	r26, 0x21	; 33
    17be:	1a 2e       	mov	r1, r26
    17c0:	aa 1b       	sub	r26, r26
    17c2:	bb 1b       	sub	r27, r27
    17c4:	fd 01       	movw	r30, r26
    17c6:	0d c0       	rjmp	.+26     	; 0x17e2 <__udivmodsi4_ep>

000017c8 <__udivmodsi4_loop>:
    17c8:	aa 1f       	adc	r26, r26
    17ca:	bb 1f       	adc	r27, r27
    17cc:	ee 1f       	adc	r30, r30
    17ce:	ff 1f       	adc	r31, r31
    17d0:	a2 17       	cp	r26, r18
    17d2:	b3 07       	cpc	r27, r19
    17d4:	e4 07       	cpc	r30, r20
    17d6:	f5 07       	cpc	r31, r21
    17d8:	20 f0       	brcs	.+8      	; 0x17e2 <__udivmodsi4_ep>
    17da:	a2 1b       	sub	r26, r18
    17dc:	b3 0b       	sbc	r27, r19
    17de:	e4 0b       	sbc	r30, r20
    17e0:	f5 0b       	sbc	r31, r21

000017e2 <__udivmodsi4_ep>:
    17e2:	66 1f       	adc	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	88 1f       	adc	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	1a 94       	dec	r1
    17ec:	69 f7       	brne	.-38     	; 0x17c8 <__udivmodsi4_loop>
    17ee:	60 95       	com	r22
    17f0:	70 95       	com	r23
    17f2:	80 95       	com	r24
    17f4:	90 95       	com	r25
    17f6:	9b 01       	movw	r18, r22
    17f8:	ac 01       	movw	r20, r24
    17fa:	bd 01       	movw	r22, r26
    17fc:	cf 01       	movw	r24, r30
    17fe:	08 95       	ret

00001800 <_exit>:
    1800:	f8 94       	cli

00001802 <__stop_program>:
    1802:	ff cf       	rjmp	.-2      	; 0x1802 <__stop_program>
