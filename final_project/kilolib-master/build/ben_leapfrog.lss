
build/ben_leapfrog.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	59 05       	cpc	r21, r9
      6a:	b0 05       	cpc	r27, r0
      6c:	c4 05       	cpc	r28, r4
      6e:	f5 05       	cpc	r31, r5
      70:	fc 05       	cpc	r31, r12
      72:	db 05       	cpc	r29, r11
      74:	ff 05       	cpc	r31, r15
      76:	5d 07       	cpc	r21, r29
      78:	4e 08       	sbc	r4, r14
      7a:	4e 08       	sbc	r4, r14
      7c:	66 07       	cpc	r22, r22
      7e:	69 07       	cpc	r22, r25
      80:	6c 07       	cpc	r22, r28
      82:	6e 07       	cpc	r22, r30
      84:	70 07       	cpc	r23, r16
      86:	72 07       	cpc	r23, r18
      88:	23 08       	sbc	r2, r3
      8a:	84 07       	cpc	r24, r20

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 e6       	ldi	r30, 0x64	; 100
      b8:	f8 e1       	ldi	r31, 0x18	; 24
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 37       	cpi	r26, 0x70	; 112
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 00 09 	call	0x1200	; 0x1200 <main>
      da:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
  mydata->transmit_msg.crc = message_crc(&mydata->transmit_msg);
}

message_t *message_tx() 
{
  return &mydata->transmit_msg;
      e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mydata>
      e6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <mydata+0x1>
}
      ea:	09 96       	adiw	r24, 0x09	; 9
      ec:	08 95       	ret

000000ee <message_rx>:
          break;
        }
}


void message_rx(message_t *m, distance_measurement_t *d) {
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
  uint8_t sender_pos = m->data[0];
      f4:	fc 01       	movw	r30, r24
      f6:	10 81       	ld	r17, Z
  
  // Only consider senders with a lower cur_pos (earlier in the chain)
  if (sender_pos < mydata->cur_pos) {
      f8:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <mydata>
      fc:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <mydata+0x1>
     100:	80 81       	ld	r24, Z
     102:	18 17       	cp	r17, r24
     104:	d0 f4       	brcc	.+52     	; 0x13a <message_rx+0x4c>
     106:	eb 01       	movw	r28, r22

      // accept the message only if:
      // - its the first one received in this round, or
      // - the sender is closer than the current one
      uint16_t new_dist = estimate_distance(d);
     108:	cb 01       	movw	r24, r22
     10a:	0e 94 32 03 	call	0x664	; 0x664 <estimate_distance>
      
      if (!mydata->new_message || new_dist < mydata->cur_distance) {
     10e:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <mydata>
     112:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <mydata+0x1>
     116:	94 81       	ldd	r25, Z+4	; 0x04
     118:	99 23       	and	r25, r25
     11a:	19 f0       	breq	.+6      	; 0x122 <message_rx+0x34>
     11c:	93 81       	ldd	r25, Z+3	; 0x03
     11e:	89 17       	cp	r24, r25
     120:	60 f4       	brcc	.+24     	; 0x13a <message_rx+0x4c>
          mydata->cur_target = sender_pos;
     122:	11 83       	std	Z+1, r17	; 0x01
          mydata->dist = *d;
     124:	48 81       	ld	r20, Y
     126:	59 81       	ldd	r21, Y+1	; 0x01
     128:	6a 81       	ldd	r22, Y+2	; 0x02
     12a:	7b 81       	ldd	r23, Y+3	; 0x03
     12c:	45 83       	std	Z+5, r20	; 0x05
     12e:	56 83       	std	Z+6, r21	; 0x06
     130:	67 83       	std	Z+7, r22	; 0x07
     132:	70 87       	std	Z+8, r23	; 0x08
          mydata->cur_distance = new_dist;
     134:	83 83       	std	Z+3, r24	; 0x03
          mydata->new_message = 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	84 83       	std	Z+4, r24	; 0x04
      }
  }
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	1f 91       	pop	r17
     140:	08 95       	ret

00000142 <set_motion.part.0>:
      set_motors(l, r);
      delay(15);
    }
#endif
  // spin-up is done, now we set the real value
  set_motors(ccw, cw);
     142:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <kilo_straight_right>
     146:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <kilo_straight_left>
     14a:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <set_motors>

0000014e <smooth_set_motors>:
     14e:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <set_motors>

00000152 <set_motion>:
}


void set_motion(motion_t new_motion)
{
  switch(new_motion) {
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	41 f0       	breq	.+16     	; 0x166 <set_motion+0x14>
     156:	28 f0       	brcs	.+10     	; 0x162 <set_motion+0x10>
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	39 f0       	breq	.+14     	; 0x16a <set_motion+0x18>
     15c:	83 30       	cpi	r24, 0x03	; 3
     15e:	49 f0       	breq	.+18     	; 0x172 <set_motion+0x20>
     160:	08 95       	ret
      set_motors(l, r);
      delay(15);
    }
#endif
  // spin-up is done, now we set the real value
  set_motors(ccw, cw);
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	08 c0       	rjmp	.+16     	; 0x176 <set_motion+0x24>
     166:	0c 94 a1 00 	jmp	0x142	; 0x142 <set_motion.part.0>
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_turn_left>
     170:	03 c0       	rjmp	.+6      	; 0x178 <set_motion+0x26>
     172:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <kilo_turn_right>
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <set_motors>

0000017c <orbit_stationary>:
  }
}


void orbit_stationary() {
  set_motion(STOP);
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	0c 94 a9 00 	jmp	0x152	; 0x152 <set_motion>

00000182 <orbit_normal>:
}
     
void orbit_normal()
{
    if (mydata->cur_distance < TOOCLOSE_DISTANCE) {
     182:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <mydata>
     186:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <mydata+0x1>
     18a:	83 81       	ldd	r24, Z+3	; 0x03
     18c:	8d 32       	cpi	r24, 0x2D	; 45
     18e:	40 f4       	brcc	.+16     	; 0x1a0 <orbit_normal+0x1e>
     190:	0e 94 a1 00 	call	0x142	; 0x142 <set_motion.part.0>
        // Actively repel
        set_motion(FORWARD); // move forward to escape
        mydata->orbit_state = ORBIT_TOOCLOSE;
     194:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <mydata>
     198:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <mydata+0x1>
     19c:	12 82       	std	Z+2, r1	; 0x02
     19e:	08 95       	ret
    } 
    else if (mydata->cur_distance > DESIRED_DISTANCE + 10) {
     1a0:	87 33       	cpi	r24, 0x37	; 55
     1a2:	10 f0       	brcs	.+4      	; 0x1a8 <orbit_normal+0x26>
        // Curve in toward the target
        set_motion(RIGHT); 
     1a4:	83 e0       	ldi	r24, 0x03	; 3
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <orbit_normal+0x28>
    } 
    else if (mydata->cur_distance < DESIRED_DISTANCE - 10) {
        // Curve outward to increase distance
        set_motion(LEFT); 
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	0c 94 a9 00 	jmp	0x152	; 0x152 <set_motion>

000001ae <orbit_tooclose>:
    }
}


void orbit_tooclose() {
  if (mydata->cur_distance >= DESIRED_DISTANCE) {
     1ae:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <mydata>
     1b2:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <mydata+0x1>
     1b6:	83 81       	ldd	r24, Z+3	; 0x03
     1b8:	81 34       	cpi	r24, 0x41	; 65
     1ba:	18 f0       	brcs	.+6      	; 0x1c2 <orbit_tooclose+0x14>
      mydata->orbit_state = ORBIT_NORMAL;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	82 83       	std	Z+2, r24	; 0x02
     1c0:	08 95       	ret
     1c2:	0c 94 a1 00 	jmp	0x142	; 0x142 <set_motion.part.0>

000001c6 <orbit>:



void orbit() {
  // Orbit state machines
  switch(mydata->orbit_state) {
     1c6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <mydata>
     1ca:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <mydata+0x1>
     1ce:	82 81       	ldd	r24, Z+2	; 0x02
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	21 f0       	breq	.+8      	; 0x1dc <orbit+0x16>
     1d4:	28 f0       	brcs	.+10     	; 0x1e0 <orbit+0x1a>
     1d6:	82 30       	cpi	r24, 0x02	; 2
     1d8:	29 f0       	breq	.+10     	; 0x1e4 <orbit+0x1e>
     1da:	08 95       	ret
      case ORBIT_NORMAL:
          orbit_normal();
     1dc:	0c 94 c1 00 	jmp	0x182	; 0x182 <orbit_normal>
          break;
      case ORBIT_TOOCLOSE:
          orbit_tooclose();
     1e0:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <orbit_tooclose>
          break;
      case STATIONARY:
          orbit_stationary();
     1e4:	0c 94 be 00 	jmp	0x17c	; 0x17c <orbit_stationary>

000001e8 <loop>:
message_t *message_tx() 
{
  return &mydata->transmit_msg;
}

void loop() {
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
  // Update distance estimate with every message
  if (mydata->new_message) 
     1ec:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <mydata>
     1f0:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <mydata+0x1>
     1f4:	8c 81       	ldd	r24, Y+4	; 0x04
     1f6:	88 23       	and	r24, r24
     1f8:	31 f0       	breq	.+12     	; 0x206 <loop+0x1e>
  {
    mydata->new_message = 0;
     1fa:	1c 82       	std	Y+4, r1	; 0x04
    mydata->cur_distance = estimate_distance(&mydata->dist);
     1fc:	ce 01       	movw	r24, r28
     1fe:	05 96       	adiw	r24, 0x05	; 5
     200:	0e 94 32 03 	call	0x664	; 0x664 <estimate_distance>
     204:	8b 83       	std	Y+3, r24	; 0x03
  } 

  if (mydata->cur_pos < NUM_ROBOTS - 1)
     206:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <mydata>
     20a:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <mydata+0x1>
     20e:	80 81       	ld	r24, Z
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	05 97       	sbiw	r24, 0x05	; 5
     214:	24 f0       	brlt	.+8      	; 0x21e <loop+0x36>
      return;

  orbit();
  
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
  } 

  if (mydata->cur_pos < NUM_ROBOTS - 1)
      return;

  orbit();
     21a:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <orbit>
  
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <setup_message>:
  }
}


void setup_message(void)
{
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
  mydata->transmit_msg.type = NORMAL;
     228:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <mydata>
     22c:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <mydata+0x1>
     230:	1a 8a       	std	Y+18, r1	; 0x12
  mydata->transmit_msg.data[0] = mydata->cur_pos; // position
     232:	88 81       	ld	r24, Y
     234:	89 87       	std	Y+9, r24	; 0x09
  mydata->transmit_msg.data[1] = mydata->cur_target; // current node being targeted
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	8a 87       	std	Y+10, r24	; 0x0a
  mydata->transmit_msg.data[2] = mydata->orbit_state; // current state
     23a:	8a 81       	ldd	r24, Y+2	; 0x02
     23c:	8b 87       	std	Y+11, r24	; 0x0b
  

  //finally, calculate a message check sum
  mydata->transmit_msg.crc = message_crc(&mydata->transmit_msg);
     23e:	ce 01       	movw	r24, r28
     240:	09 96       	adiw	r24, 0x09	; 9
     242:	0e 94 61 08 	call	0x10c2	; 0x10c2 <message_crc>
     246:	9c 8b       	std	Y+20, r25	; 0x14
     248:	8b 8b       	std	Y+19, r24	; 0x13
}
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <setup>:
  
}

void setup()
{
  mydata->cur_pos = kilo_uid & 0xff; // lower byte of kilo id
     250:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <mydata>
     254:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <mydata+0x1>
     258:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <kilo_uid>
     25c:	80 83       	st	Z, r24
  if (mydata->cur_pos > 0 )
     25e:	88 23       	and	r24, r24
     260:	11 f0       	breq	.+4      	; 0x266 <setup+0x16>
  mydata->cur_target = mydata->cur_pos - 1;
     262:	81 50       	subi	r24, 0x01	; 1
     264:	01 c0       	rjmp	.+2      	; 0x268 <setup+0x18>
  else
  mydata->cur_target = mydata->cur_pos - 1;
     266:	8f ef       	ldi	r24, 0xFF	; 255
     268:	81 83       	std	Z+1, r24	; 0x01
  mydata->orbit_state = ORBIT_NORMAL;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	82 83       	std	Z+2, r24	; 0x02
  mydata->cur_distance = 0;
     26e:	13 82       	std	Z+3, r1	; 0x03
  mydata->new_message = 0;
     270:	14 82       	std	Z+4, r1	; 0x04

  setup_message();
     272:	0e 94 12 01 	call	0x224	; 0x224 <setup_message>

  if (mydata->cur_pos < NUM_ROBOTS - 1)
     276:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <mydata>
     27a:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <mydata+0x1>
     27e:	80 81       	ld	r24, Z
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	05 97       	sbiw	r24, 0x05	; 5
     284:	14 f4       	brge	.+4      	; 0x28a <setup+0x3a>
    set_color(RGB(0,0,0)); // color of the stationary bot
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	01 c0       	rjmp	.+2      	; 0x28c <setup+0x3c>
  else
    set_color(RGB(3,0,0)); // color of the moving bot
     28a:	83 e0       	ldi	r24, 0x03	; 3
     28c:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <set_color>

00000290 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     290:	08 95       	ret

00000292 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	08 95       	ret

00000298 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     298:	08 95       	ret

0000029a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     29a:	df 92       	push	r13
     29c:	ef 92       	push	r14
     29e:	ff 92       	push	r15
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
    cli();
     2a8:	f8 94       	cli

    ports_off();
     2aa:	14 b8       	out	0x04, r1	; 4
     2ac:	17 b8       	out	0x07, r1	; 7
     2ae:	1a b8       	out	0x0a, r1	; 10
     2b0:	15 b8       	out	0x05, r1	; 5
     2b2:	18 b8       	out	0x08, r1	; 8
     2b4:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     2b6:	52 9a       	sbi	0x0a, 2	; 10
     2b8:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     2ba:	14 bc       	out	0x24, r1	; 36
     2bc:	85 e0       	ldi	r24, 0x05	; 5
     2be:	85 bd       	out	0x25, r24	; 37
     2c0:	8f ef       	ldi	r24, 0xFF	; 255
     2c2:	87 bd       	out	0x27, r24	; 39
     2c4:	82 e0       	ldi	r24, 0x02	; 2
     2c6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     2ca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     2ce:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     2d2:	2f e8       	ldi	r18, 0x8F	; 143
     2d4:	3b e0       	ldi	r19, 0x0B	; 11
     2d6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     2da:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     2de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     2e2:	53 98       	cbi	0x0a, 3	; 10
     2e4:	23 98       	cbi	0x04, 3	; 4
     2e6:	91 ea       	ldi	r25, 0xA1	; 161
     2e8:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     2ec:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     2f0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     2f4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     2f8:	8b e0       	ldi	r24, 0x0B	; 11
     2fa:	80 bf       	out	0x30, r24	; 48
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     302:	86 e0       	ldi	r24, 0x06	; 6
     304:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     308:	83 e8       	ldi	r24, 0x83	; 131
     30a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     30e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     312:	80 64       	ori	r24, 0x40	; 64
     314:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     318:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     31c:	86 fd       	sbrc	r24, 6
     31e:	fc cf       	rjmp	.-8      	; 0x318 <kilo_init+0x7e>
    adc_trigger_high_gain();
     320:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     324:	83 ea       	ldi	r24, 0xA3	; 163
     326:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
    if (osccal != 0xFF)
     338:	8f 3f       	cpi	r24, 0xFF	; 255
     33a:	11 f0       	breq	.+4      	; 0x340 <kilo_init+0xa6>
        OSCCAL = osccal;
     33c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     340:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
    rx_leadingbit = 1;
     344:	c1 e0       	ldi	r28, 0x01	; 1
     346:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <rx_leadingbit>
    rx_leadingbyte = 1;
     34a:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <rx_leadingbyte>
    rx_byteindex = 0;
     34e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_byteindex>
    rx_bytevalue = 0;
     352:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     356:	80 e9       	ldi	r24, 0x90	; 144
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
     35e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     362:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <tx_mask>
     366:	88 73       	andi	r24, 0x38	; 56
     368:	11 f0       	breq	.+4      	; 0x36e <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     36a:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <tx_mask>
    tx_clock = 0;
     36e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tx_clock+0x1>
     372:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_clock>
    tx_increment = 255;
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_increment+0x1>
     37e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_increment>
    kilo_ticks = 0;
     382:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <kilo_ticks>
     386:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <kilo_ticks+0x1>
     38a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <kilo_ticks+0x2>
     38e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <kilo_ticks+0x3>
    kilo_state = IDLE;
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    kilo_tx_period = 3906;
     398:	82 e4       	ldi	r24, 0x42	; 66
     39a:	9f e0       	ldi	r25, 0x0F	; 15
     39c:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <kilo_tx_period+0x1>
     3a0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     3a4:	80 eb       	ldi	r24, 0xB0	; 176
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
     3ac:	c8 2f       	mov	r28, r24
     3ae:	81 eb       	ldi	r24, 0xB1	; 177
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
     3b6:	2c 2f       	mov	r18, r28
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	38 2b       	or	r19, r24
     3bc:	30 93 6c 01 	sts	0x016C, r19	; 0x80016c <kilo_uid+0x1>
     3c0:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     3c4:	85 e0       	ldi	r24, 0x05	; 5
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
     3cc:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     3d0:	89 e0       	ldi	r24, 0x09	; 9
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
     3d8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     3dc:	8c e0       	ldi	r24, 0x0C	; 12
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
     3e4:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     3e8:	84 e1       	ldi	r24, 0x14	; 20
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
     3f0:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_straight_right>
     3f4:	0a e3       	ldi	r16, 0x3A	; 58
     3f6:	11 e0       	ldi	r17, 0x01	; 1
     3f8:	53 e1       	ldi	r21, 0x13	; 19
     3fa:	e5 2e       	mov	r14, r21
     3fc:	51 e0       	ldi	r21, 0x01	; 1
     3fe:	f5 2e       	mov	r15, r21
     400:	c0 e2       	ldi	r28, 0x20	; 32
     402:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     404:	ce 01       	movw	r24, r28
     406:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
     40a:	d8 2e       	mov	r13, r24
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
     414:	2d 2d       	mov	r18, r13
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	32 2f       	mov	r19, r18
     41a:	22 27       	eor	r18, r18
     41c:	28 2b       	or	r18, r24
     41e:	f8 01       	movw	r30, r16
     420:	21 93       	st	Z+, r18
     422:	31 93       	st	Z+, r19
     424:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     426:	ce 01       	movw	r24, r28
     428:	c0 96       	adiw	r24, 0x30	; 48
     42a:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
     42e:	d8 2e       	mov	r13, r24
     430:	ce 01       	movw	r24, r28
     432:	c1 96       	adiw	r24, 0x31	; 49
     434:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_read_byte>
     438:	2d 2d       	mov	r18, r13
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	32 2f       	mov	r19, r18
     43e:	22 27       	eor	r18, r18
     440:	28 2b       	or	r18, r24
     442:	f7 01       	movw	r30, r14
     444:	21 93       	st	Z+, r18
     446:	31 93       	st	Z+, r19
     448:	7f 01       	movw	r14, r30
     44a:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     44c:	cc 33       	cpi	r28, 0x3C	; 60
     44e:	d1 05       	cpc	r29, r1
     450:	c9 f6       	brne	.-78     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     452:	78 94       	sei
}
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	ef 90       	pop	r14
     460:	df 90       	pop	r13
     462:	08 95       	ret

00000464 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     464:	1f 92       	push	r1
     466:	0f 92       	push	r0
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	0f 92       	push	r0
     46c:	11 24       	eor	r1, r1
     46e:	8f 93       	push	r24
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	a8 95       	wdr
     476:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     47a:	88 61       	ori	r24, 0x18	; 24
     47c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     480:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     484:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     486:	8f 91       	pop	r24
     488:	0f 90       	pop	r0
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	0f 90       	pop	r0
     48e:	1f 90       	pop	r1
     490:	18 95       	reti

00000492 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     492:	00 97       	sbiw	r24, 0x00	; 0
     494:	41 f0       	breq	.+16     	; 0x4a6 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     496:	ef ec       	ldi	r30, 0xCF	; 207
     498:	f7 e0       	ldi	r31, 0x07	; 7
     49a:	31 97       	sbiw	r30, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <delay+0x8>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <delay+0xe>
     4a0:	00 00       	nop
        _delay_ms(1);
        ms--;
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f6 cf       	rjmp	.-20     	; 0x492 <delay>
    }
}
     4a6:	08 95       	ret

000004a8 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4a8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     4ac:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     4b0:	08 95       	ret

000004b2 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     4b8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     4bc:	8f e0       	ldi	r24, 0x0F	; 15
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0c 94 49 02 	jmp	0x492	; 0x492 <delay>

000004c4 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     4c4:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     4c8:	81 11       	cpse	r24, r1
     4ca:	1e c0       	rjmp	.+60     	; 0x508 <get_ambientlight+0x44>
        cli();
     4cc:	f8 94       	cli
        adc_setup_conversion(7);
     4ce:	87 e0       	ldi	r24, 0x07	; 7
     4d0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4d4:	83 e8       	ldi	r24, 0x83	; 131
     4d6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     4da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4de:	80 64       	ori	r24, 0x40	; 64
     4e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     4e4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4e8:	86 fd       	sbrc	r24, 6
     4ea:	fc cf       	rjmp	.-8      	; 0x4e4 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     4ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4f0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     4f4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4f8:	23 ea       	ldi	r18, 0xA3	; 163
     4fa:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4fe:	21 e0       	ldi	r18, 0x01	; 1
     500:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     504:	78 94       	sei
     506:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     50c:	08 95       	ret

0000050e <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     50e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     512:	81 11       	cpse	r24, r1
     514:	1e c0       	rjmp	.+60     	; 0x552 <get_temperature+0x44>
        cli();
     516:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     518:	88 ec       	ldi	r24, 0xC8	; 200
     51a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     51e:	87 e8       	ldi	r24, 0x87	; 135
     520:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     524:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     528:	80 64       	ori	r24, 0x40	; 64
     52a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     52e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     532:	86 fd       	sbrc	r24, 6
     534:	fc cf       	rjmp	.-8      	; 0x52e <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     536:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     53a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     53e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     542:	23 ea       	ldi	r18, 0xA3	; 163
     544:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     54e:	78 94       	sei
     550:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     556:	08 95       	ret

00000558 <rand_hard>:

uint8_t rand_hard() {
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     560:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     562:	e3 ea       	ldi	r30, 0xA3	; 163
     564:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     566:	c6 e0       	ldi	r28, 0x06	; 6
     568:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     56a:	a1 e0       	ldi	r26, 0x01	; 1
     56c:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     56e:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     570:	f8 94       	cli
            adc_setup_conversion(6);
     572:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     576:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     57a:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     57e:	40 64       	ori	r20, 0x40	; 64
     580:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     584:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     588:	46 fd       	sbrc	r20, 6
     58a:	fc cf       	rjmp	.-8      	; 0x584 <rand_hard+0x2c>
            a = ADCW&0x1;
     58c:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     590:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     594:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     596:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     59a:	50 64       	ori	r21, 0x40	; 64
     59c:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     5a0:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5a4:	56 fd       	sbrc	r21, 6
     5a6:	fc cf       	rjmp	.-8      	; 0x5a0 <rand_hard+0x48>
            b = ADCW&0x1;
     5a8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5ac:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     5b0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5b4:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5b8:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     5bc:	78 94       	sei
            tries++;
     5be:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     5c0:	61 70       	andi	r22, 0x01	; 1
     5c2:	46 17       	cp	r20, r22
     5c4:	51 f0       	breq	.+20     	; 0x5da <rand_hard+0x82>
        if (a)
     5c6:	44 23       	and	r20, r20
     5c8:	59 f0       	breq	.+22     	; 0x5e0 <rand_hard+0x88>
            num |= (1<<i);
     5ca:	ad 01       	movw	r20, r26
     5cc:	02 2e       	mov	r0, r18
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <rand_hard+0x7a>
     5d0:	44 0f       	add	r20, r20
     5d2:	0a 94       	dec	r0
     5d4:	ea f7       	brpl	.-6      	; 0x5d0 <rand_hard+0x78>
     5d6:	84 2b       	or	r24, r20
     5d8:	03 c0       	rjmp	.+6      	; 0x5e0 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     5da:	90 38       	cpi	r25, 0x80	; 128
     5dc:	49 f6       	brne	.-110    	; 0x570 <rand_hard+0x18>
     5de:	f3 cf       	rjmp	.-26     	; 0x5c6 <rand_hard+0x6e>
     5e0:	2f 5f       	subi	r18, 0xFF	; 255
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     5e4:	28 30       	cpi	r18, 0x08	; 8
     5e6:	31 05       	cpc	r19, r1
     5e8:	09 f0       	breq	.+2      	; 0x5ec <rand_hard+0x94>
     5ea:	c1 cf       	rjmp	.-126    	; 0x56e <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     5f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5f6:	98 e0       	ldi	r25, 0x08	; 8
     5f8:	89 9f       	mul	r24, r25
     5fa:	90 01       	movw	r18, r0
     5fc:	11 24       	eor	r1, r1
     5fe:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     600:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	89 0f       	add	r24, r25
     608:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     60c:	82 2f       	mov	r24, r18
     60e:	82 95       	swap	r24
     610:	86 95       	lsr	r24
     612:	87 70       	andi	r24, 0x07	; 7
     614:	28 27       	eor	r18, r24
     616:	96 95       	lsr	r25
     618:	96 95       	lsr	r25
     61a:	82 2f       	mov	r24, r18
     61c:	89 27       	eor	r24, r25
     61e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     622:	08 95       	ret

00000624 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     624:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     628:	08 95       	ret

0000062a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     62a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     62e:	81 11       	cpse	r24, r1
     630:	16 c0       	rjmp	.+44     	; 0x65e <get_voltage+0x34>
        cli();                                    // disable interrupts
     632:	f8 94       	cli
        adc_setup_conversion(6);
     634:	86 e0       	ldi	r24, 0x06	; 6
     636:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     63a:	83 e8       	ldi	r24, 0x83	; 131
     63c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     640:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     644:	80 64       	ori	r24, 0x40	; 64
     646:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     64a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     64e:	86 fd       	sbrc	r24, 6
     650:	fc cf       	rjmp	.-8      	; 0x64a <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     652:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     656:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     65a:	78 94       	sei
     65c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     65e:	8f ef       	ldi	r24, 0xFF	; 255
     660:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     662:	08 95       	ret

00000664 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     664:	2f 92       	push	r2
     666:	3f 92       	push	r3
     668:	4f 92       	push	r4
     66a:	5f 92       	push	r5
     66c:	6f 92       	push	r6
     66e:	7f 92       	push	r7
     670:	8f 92       	push	r8
     672:	9f 92       	push	r9
     674:	af 92       	push	r10
     676:	bf 92       	push	r11
     678:	cf 92       	push	r12
     67a:	df 92       	push	r13
     67c:	ef 92       	push	r14
     67e:	ff 92       	push	r15
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     68a:	fc 01       	movw	r30, r24
     68c:	c2 81       	ldd	r28, Z+2	; 0x02
     68e:	d3 81       	ldd	r29, Z+3	; 0x03
     690:	c4 38       	cpi	r28, 0x84	; 132
     692:	f3 e0       	ldi	r31, 0x03	; 3
     694:	df 07       	cpc	r29, r31
     696:	0c f0       	brlt	.+2      	; 0x69a <estimate_distance+0x36>
     698:	7e c0       	rjmp	.+252    	; 0x796 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     69a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_irhigh>
     69e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <kilo_irhigh+0x1>
     6a2:	8c 17       	cp	r24, r28
     6a4:	9d 07       	cpc	r25, r29
     6a6:	08 f4       	brcc	.+2      	; 0x6aa <estimate_distance+0x46>
     6a8:	6f c0       	rjmp	.+222    	; 0x788 <estimate_distance+0x124>
     6aa:	e5 e1       	ldi	r30, 0x15	; 21
     6ac:	f1 e0       	ldi	r31, 0x01	; 1
     6ae:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     6b0:	81 91       	ld	r24, Z+
     6b2:	91 91       	ld	r25, Z+
     6b4:	8c 17       	cp	r24, r28
     6b6:	9d 07       	cpc	r25, r29
     6b8:	20 f0       	brcs	.+8      	; 0x6c2 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     6ba:	1f 5f       	subi	r17, 0xFF	; 255
     6bc:	1e 30       	cpi	r17, 0x0E	; 14
     6be:	c1 f7       	brne	.-16     	; 0x6b0 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     6c0:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     6c2:	81 2f       	mov	r24, r17
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	fc 01       	movw	r30, r24
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	ed 5e       	subi	r30, 0xED	; 237
     6ce:	fe 4f       	sbci	r31, 0xFE	; 254
     6d0:	e0 80       	ld	r14, Z
     6d2:	f1 80       	ldd	r15, Z+1	; 0x01
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	fc 01       	movw	r30, r24
     6da:	ef 5e       	subi	r30, 0xEF	; 239
     6dc:	fe 4f       	sbci	r31, 0xFE	; 254
     6de:	80 81       	ld	r24, Z
     6e0:	91 81       	ldd	r25, Z+1	; 0x01
     6e2:	b7 01       	movw	r22, r14
     6e4:	68 1b       	sub	r22, r24
     6e6:	79 0b       	sbc	r23, r25
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	0e 94 6f 0a 	call	0x14de	; 0x14de <__floatunsisf>
     6f0:	9b 01       	movw	r18, r22
     6f2:	ac 01       	movw	r20, r24
     6f4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__addsf3>
     6f8:	4b 01       	movw	r8, r22
     6fa:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     6fc:	be 01       	movw	r22, r28
     6fe:	0d 2e       	mov	r0, r29
     700:	00 0c       	add	r0, r0
     702:	88 0b       	sbc	r24, r24
     704:	99 0b       	sbc	r25, r25
     706:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__floatsisf>
     70a:	2b 01       	movw	r4, r22
     70c:	3c 01       	movw	r6, r24
     70e:	b7 01       	movw	r22, r14
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 6f 0a 	call	0x14de	; 0x14de <__floatunsisf>
     718:	6b 01       	movw	r12, r22
     71a:	7c 01       	movw	r14, r24
     71c:	61 2f       	mov	r22, r17
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 6f 0a 	call	0x14de	; 0x14de <__floatunsisf>
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	5f e3       	ldi	r21, 0x3F	; 63
     730:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__mulsf3>
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	a9 01       	movw	r20, r18
     73a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__addsf3>
     73e:	a5 01       	movw	r20, r10
     740:	94 01       	movw	r18, r8
     742:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__mulsf3>
     746:	9b 01       	movw	r18, r22
     748:	ac 01       	movw	r20, r24
     74a:	c7 01       	movw	r24, r14
     74c:	b6 01       	movw	r22, r12
     74e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__subsf3>
     752:	9b 01       	movw	r18, r22
     754:	ac 01       	movw	r20, r24
     756:	c3 01       	movw	r24, r6
     758:	b2 01       	movw	r22, r4
     75a:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e2       	ldi	r20, 0x20	; 32
     764:	51 e4       	ldi	r21, 0x41	; 65
     766:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__mulsf3>
     76a:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fixsfsi>
     76e:	7b 01       	movw	r14, r22
     770:	c5 01       	movw	r24, r10
     772:	b4 01       	movw	r22, r8
     774:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fixsfsi>
     778:	ab 01       	movw	r20, r22
     77a:	bc 01       	movw	r22, r24
     77c:	c7 01       	movw	r24, r14
     77e:	ba 01       	movw	r22, r20
     780:	0e 94 1d 09 	call	0x123a	; 0x123a <__divmodhi4>
     784:	16 2f       	mov	r17, r22
     786:	01 c0       	rjmp	.+2      	; 0x78a <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     788:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     78a:	cd 3b       	cpi	r28, 0xBD	; 189
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	d8 07       	cpc	r29, r24
     790:	0c f4       	brge	.+2      	; 0x794 <estimate_distance+0x130>
     792:	ca c0       	rjmp	.+404    	; 0x928 <__stack+0x29>
     794:	01 c0       	rjmp	.+2      	; 0x798 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     796:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     798:	f1 01       	movw	r30, r2
     79a:	c0 80       	ld	r12, Z
     79c:	d1 80       	ldd	r13, Z+1	; 0x01
     79e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <kilo_irlow>
     7a2:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <kilo_irlow+0x1>
     7a6:	8c 15       	cp	r24, r12
     7a8:	9d 05       	cpc	r25, r13
     7aa:	88 f0       	brcs	.+34     	; 0x7ce <estimate_distance+0x16a>
     7ac:	ec e3       	ldi	r30, 0x3C	; 60
     7ae:	f1 e0       	ldi	r31, 0x01	; 1
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     7b6:	e1 90       	ld	r14, Z+
     7b8:	f1 90       	ld	r15, Z+
     7ba:	ec 14       	cp	r14, r12
     7bc:	fd 04       	cpc	r15, r13
     7be:	08 f4       	brcc	.+2      	; 0x7c2 <estimate_distance+0x15e>
     7c0:	58 c0       	rjmp	.+176    	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     7c2:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     7c4:	8e 30       	cpi	r24, 0x0E	; 14
     7c6:	91 05       	cpc	r25, r1
     7c8:	a9 f7       	brne	.-22     	; 0x7b4 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     7ca:	0a e5       	ldi	r16, 0x5A	; 90
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     7ce:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     7d0:	1f 3f       	cpi	r17, 0xFF	; 255
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <estimate_distance+0x172>
     7d4:	4b c0       	rjmp	.+150    	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     7d6:	be 01       	movw	r22, r28
     7d8:	dd 0f       	add	r29, r29
     7da:	88 0b       	sbc	r24, r24
     7dc:	99 0b       	sbc	r25, r25
     7de:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__floatsisf>
     7e2:	6b 01       	movw	r12, r22
     7e4:	7c 01       	movw	r14, r24
     7e6:	61 2f       	mov	r22, r17
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 6f 0a 	call	0x14de	; 0x14de <__floatunsisf>
     7f2:	4b 01       	movw	r8, r22
     7f4:	5c 01       	movw	r10, r24
     7f6:	a7 01       	movw	r20, r14
     7f8:	96 01       	movw	r18, r12
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	81 e6       	ldi	r24, 0x61	; 97
     800:	94 e4       	ldi	r25, 0x44	; 68
     802:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__subsf3>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	c5 01       	movw	r24, r10
     80c:	b4 01       	movw	r22, r8
     80e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__mulsf3>
     812:	4b 01       	movw	r8, r22
     814:	5c 01       	movw	r10, r24
     816:	60 2f       	mov	r22, r16
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 6f 0a 	call	0x14de	; 0x14de <__floatunsisf>
     822:	2b 01       	movw	r4, r22
     824:	3c 01       	movw	r6, r24
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	4f e2       	ldi	r20, 0x2F	; 47
     82c:	54 e4       	ldi	r21, 0x44	; 68
     82e:	c7 01       	movw	r24, r14
     830:	b6 01       	movw	r22, r12
     832:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__subsf3>
     836:	9b 01       	movw	r18, r22
     838:	ac 01       	movw	r20, r24
     83a:	c3 01       	movw	r24, r6
     83c:	b2 01       	movw	r22, r4
     83e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__mulsf3>
     842:	9b 01       	movw	r18, r22
     844:	ac 01       	movw	r20, r24
     846:	c5 01       	movw	r24, r10
     848:	b4 01       	movw	r22, r8
     84a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__addsf3>
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	48 e4       	ldi	r20, 0x48	; 72
     854:	53 e4       	ldi	r21, 0x43	; 67
     856:	0e 94 c7 09 	call	0x138e	; 0x138e <__divsf3>
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	44 e0       	ldi	r20, 0x04	; 4
     860:	52 e4       	ldi	r21, 0x42	; 66
     862:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__addsf3>
     866:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
     86a:	60 c0       	rjmp	.+192    	; 0x92c <__stack+0x2d>
        } else {
            return 33 + dist_low;
     86c:	61 e2       	ldi	r22, 0x21	; 33
     86e:	60 0f       	add	r22, r16
     870:	5d c0       	rjmp	.+186    	; 0x92c <__stack+0x2d>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     872:	88 0f       	add	r24, r24
     874:	99 1f       	adc	r25, r25
     876:	fc 01       	movw	r30, r24
     878:	e8 5c       	subi	r30, 0xC8	; 200
     87a:	fe 4f       	sbci	r31, 0xFE	; 254
     87c:	80 81       	ld	r24, Z
     87e:	91 81       	ldd	r25, Z+1	; 0x01
     880:	b7 01       	movw	r22, r14
     882:	68 1b       	sub	r22, r24
     884:	79 0b       	sbc	r23, r25
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 6f 0a 	call	0x14de	; 0x14de <__floatunsisf>
     88e:	9b 01       	movw	r18, r22
     890:	ac 01       	movw	r20, r24
     892:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__addsf3>
     896:	4b 01       	movw	r8, r22
     898:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     89a:	b6 01       	movw	r22, r12
     89c:	dd 0c       	add	r13, r13
     89e:	88 0b       	sbc	r24, r24
     8a0:	99 0b       	sbc	r25, r25
     8a2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__floatsisf>
     8a6:	2b 01       	movw	r4, r22
     8a8:	3c 01       	movw	r6, r24
     8aa:	b7 01       	movw	r22, r14
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 6f 0a 	call	0x14de	; 0x14de <__floatunsisf>
     8b4:	6b 01       	movw	r12, r22
     8b6:	7c 01       	movw	r14, r24
     8b8:	63 2d       	mov	r22, r3
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 6f 0a 	call	0x14de	; 0x14de <__floatunsisf>
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	5f e3       	ldi	r21, 0x3F	; 63
     8cc:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__mulsf3>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	a9 01       	movw	r20, r18
     8d6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__addsf3>
     8da:	a5 01       	movw	r20, r10
     8dc:	94 01       	movw	r18, r8
     8de:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__mulsf3>
     8e2:	9b 01       	movw	r18, r22
     8e4:	ac 01       	movw	r20, r24
     8e6:	c7 01       	movw	r24, r14
     8e8:	b6 01       	movw	r22, r12
     8ea:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__subsf3>
     8ee:	9b 01       	movw	r18, r22
     8f0:	ac 01       	movw	r20, r24
     8f2:	c3 01       	movw	r24, r6
     8f4:	b2 01       	movw	r22, r4
     8f6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	40 e2       	ldi	r20, 0x20	; 32
     900:	51 e4       	ldi	r21, 0x41	; 65
     902:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__mulsf3>
     906:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fixsfsi>
     90a:	7b 01       	movw	r14, r22
     90c:	c5 01       	movw	r24, r10
     90e:	b4 01       	movw	r22, r8
     910:	0e 94 39 0a 	call	0x1472	; 0x1472 <__fixsfsi>
     914:	ab 01       	movw	r20, r22
     916:	bc 01       	movw	r22, r24
     918:	c7 01       	movw	r24, r14
     91a:	ba 01       	movw	r22, r20
     91c:	0e 94 1d 09 	call	0x123a	; 0x123a <__divmodhi4>
     920:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     922:	6f 3f       	cpi	r22, 0xFF	; 255
     924:	09 f0       	breq	.+2      	; 0x928 <__stack+0x29>
     926:	54 cf       	rjmp	.-344    	; 0x7d0 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     928:	61 e2       	ldi	r22, 0x21	; 33
     92a:	61 0f       	add	r22, r17
    }
}
     92c:	86 2f       	mov	r24, r22
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	df 90       	pop	r13
     93c:	cf 90       	pop	r12
     93e:	bf 90       	pop	r11
     940:	af 90       	pop	r10
     942:	9f 90       	pop	r9
     944:	8f 90       	pop	r8
     946:	7f 90       	pop	r7
     948:	6f 90       	pop	r6
     94a:	5f 90       	pop	r5
     94c:	4f 90       	pop	r4
     94e:	3f 90       	pop	r3
     950:	2f 90       	pop	r2
     952:	08 95       	ret

00000954 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
    tx_clock += tx_increment;
     976:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <tx_clock>
     97a:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <tx_clock+0x1>
     97e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <tx_increment>
     982:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <tx_increment+0x1>
     986:	82 0f       	add	r24, r18
     988:	93 1f       	adc	r25, r19
     98a:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tx_clock+0x1>
     98e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tx_clock>
    tx_increment = 0xFF;
     992:	8f ef       	ldi	r24, 0xFF	; 255
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_increment+0x1>
     99a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_increment>
    OCR0A = tx_increment;
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     9a2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <kilo_ticks>
     9a6:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <kilo_ticks+0x1>
     9aa:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <kilo_ticks+0x2>
     9ae:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <kilo_ticks+0x3>
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	a1 1d       	adc	r26, r1
     9b6:	b1 1d       	adc	r27, r1
     9b8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <kilo_ticks>
     9bc:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <kilo_ticks+0x1>
     9c0:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <kilo_ticks+0x2>
     9c4:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     9c8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     9cc:	81 11       	cpse	r24, r1
     9ce:	2d c0       	rjmp	.+90     	; 0xa2a <__vector_14+0xd6>
     9d0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <kilo_tx_period>
     9d4:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <kilo_tx_period+0x1>
     9d8:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <tx_clock>
     9dc:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <tx_clock+0x1>
     9e0:	82 17       	cp	r24, r18
     9e2:	93 07       	cpc	r25, r19
     9e4:	10 f5       	brcc	.+68     	; 0xa2a <__vector_14+0xd6>
     9e6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     9ea:	84 30       	cpi	r24, 0x04	; 4
     9ec:	f1 f4       	brne	.+60     	; 0xa2a <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     9ee:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     9f2:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     9f6:	09 95       	icall
        if (msg) {
     9f8:	00 97       	sbiw	r24, 0x00	; 0
     9fa:	b9 f0       	breq	.+46     	; 0xa2a <__vector_14+0xd6>
            if (message_send(msg)) {
     9fc:	0e 94 7d 08 	call	0x10fa	; 0x10fa <message_send>
     a00:	88 23       	and	r24, r24
     a02:	51 f0       	breq	.+20     	; 0xa18 <__vector_14+0xc4>
                kilo_message_tx_success();
     a04:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     a08:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     a0c:	09 95       	icall
                tx_clock = 0;
     a0e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tx_clock+0x1>
     a12:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_clock>
     a16:	09 c0       	rjmp	.+18     	; 0xa2a <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     a18:	0e 94 b6 0b 	call	0x176c	; 0x176c <rand>
     a1c:	9c 01       	movw	r18, r24
     a1e:	33 27       	eor	r19, r19
     a20:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <tx_increment+0x1>
     a24:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <tx_increment>
                OCR0A = tx_increment;
     a28:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     a2a:	ff 91       	pop	r31
     a2c:	ef 91       	pop	r30
     a2e:	bf 91       	pop	r27
     a30:	af 91       	pop	r26
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	7f 91       	pop	r23
     a38:	6f 91       	pop	r22
     a3a:	5f 91       	pop	r21
     a3c:	4f 91       	pop	r20
     a3e:	3f 91       	pop	r19
     a40:	2f 91       	pop	r18
     a42:	0f 90       	pop	r0
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	0f 90       	pop	r0
     a48:	1f 90       	pop	r1
     a4a:	18 95       	reti

00000a4c <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     a4c:	80 ff       	sbrs	r24, 0
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <set_color+0x8>
        DDRD |= (1<<5);
     a50:	55 9a       	sbi	0x0a, 5	; 10
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     a54:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     a56:	81 ff       	sbrs	r24, 1
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <set_color+0x12>
        DDRD |= (1<<4);
     a5a:	54 9a       	sbi	0x0a, 4	; 10
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     a5e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     a60:	82 ff       	sbrs	r24, 2
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <set_color+0x1c>
        DDRC |= (1<<3);
     a64:	3b 9a       	sbi	0x07, 3	; 7
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     a68:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     a6a:	83 ff       	sbrs	r24, 3
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <set_color+0x26>
        DDRC |= (1<<2);
     a6e:	3a 9a       	sbi	0x07, 2	; 7
     a70:	01 c0       	rjmp	.+2      	; 0xa74 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     a72:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     a74:	84 ff       	sbrs	r24, 4
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <set_color+0x30>
        DDRC |= (1<<5);
     a78:	3d 9a       	sbi	0x07, 5	; 7
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     a7c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     a7e:	85 ff       	sbrs	r24, 5
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <set_color+0x3a>
        DDRC |= (1<<4);
     a82:	3c 9a       	sbi	0x07, 4	; 7
     a84:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     a86:	3c 98       	cbi	0x07, 4	; 7
     a88:	08 95       	ret

00000a8a <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     a8a:	8c 01       	movw	r16, r24
     a8c:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     a8e:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     a90:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     a96:	98 e1       	ldi	r25, 0x18	; 24
     a98:	c9 2e       	mov	r12, r25
     a9a:	29 e2       	ldi	r18, 0x29	; 41
     a9c:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     a9e:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <kilo_state>
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	e7 30       	cpi	r30, 0x07	; 7
     aa6:	f1 05       	cpc	r31, r1
     aa8:	d0 f7       	brcc	.-12     	; 0xa9e <kilo_start+0x14>
     aaa:	ec 5c       	subi	r30, 0xCC	; 204
     aac:	ff 4f       	sbci	r31, 0xFF	; 255
     aae:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__tablejump2__>
            case SLEEPING:
                cli();
     ab2:	f8 94       	cli
                acomp_off();
     ab4:	80 b7       	in	r24, 0x30	; 48
     ab6:	87 7f       	andi	r24, 0xF7	; 247
     ab8:	80 bf       	out	0x30, r24	; 48
                adc_off();
     aba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     abe:	8f 77       	andi	r24, 0x7F	; 127
     ac0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     ac4:	14 b8       	out	0x04, r1	; 4
     ac6:	17 b8       	out	0x07, r1	; 7
     ac8:	1a b8       	out	0x0a, r1	; 10
     aca:	15 b8       	out	0x05, r1	; 5
     acc:	18 b8       	out	0x08, r1	; 8
     ace:	1b b8       	out	0x0b, r1	; 11
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	a8 95       	wdr
     ad6:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     ae0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     ae4:	80 64       	ori	r24, 0x40	; 64
     ae6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     aea:	83 b7       	in	r24, 0x33	; 51
     aec:	81 7f       	andi	r24, 0xF1	; 241
     aee:	84 60       	ori	r24, 0x04	; 4
     af0:	83 bf       	out	0x33, r24	; 51
                cli();
     af2:	f8 94       	cli
                sleep_enable();
     af4:	83 b7       	in	r24, 0x33	; 51
     af6:	81 60       	ori	r24, 0x01	; 1
     af8:	83 bf       	out	0x33, r24	; 51
                sei();
     afa:	78 94       	sei
                sleep_cpu();
     afc:	88 95       	sleep
                sleep_disable();
     afe:	83 b7       	in	r24, 0x33	; 51
     b00:	8e 7f       	andi	r24, 0xFE	; 254
     b02:	83 bf       	out	0x33, r24	; 51
                sei();
     b04:	78 94       	sei
                rx_busy = 0;
     b06:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
                ports_on();
     b0a:	52 9a       	sbi	0x0a, 2	; 10
     b0c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     b0e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b12:	80 68       	ori	r24, 0x80	; 128
     b14:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b18:	87 e5       	ldi	r24, 0x57	; 87
     b1a:	92 e0       	ldi	r25, 0x02	; 2
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <kilo_start+0x92>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <kilo_start+0x98>
     b22:	00 00       	nop
                _delay_us(300);
                acomp_on();
     b24:	80 b7       	in	r24, 0x30	; 48
     b26:	88 61       	ori	r24, 0x18	; 24
     b28:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     b2a:	8f e3       	ldi	r24, 0x3F	; 63
     b2c:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b30:	ef e1       	ldi	r30, 0x1F	; 31
     b32:	fe e4       	ldi	r31, 0x4E	; 78
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	f1 f7       	brne	.-4      	; 0xb34 <kilo_start+0xaa>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <kilo_start+0xb0>
     b3a:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     b3c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     b40:	88 23       	and	r24, r24
     b42:	09 f4       	brne	.+2      	; 0xb46 <kilo_start+0xbc>
     b44:	50 c0       	rjmp	.+160    	; 0xbe6 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     b46:	83 e0       	ldi	r24, 0x03	; 3
     b48:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_color>
     b4c:	ff ef       	ldi	r31, 0xFF	; 255
     b4e:	20 e7       	ldi	r18, 0x70	; 112
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	f1 50       	subi	r31, 0x01	; 1
     b54:	20 40       	sbci	r18, 0x00	; 0
     b56:	80 40       	sbci	r24, 0x00	; 0
     b58:	e1 f7       	brne	.-8      	; 0xb52 <kilo_start+0xc8>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <kilo_start+0xd2>
     b5c:	00 00       	nop
     b5e:	43 c0       	rjmp	.+134    	; 0xbe6 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     b60:	8c e0       	ldi	r24, 0x0C	; 12
     b62:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_color>
     b66:	ef ec       	ldi	r30, 0xCF	; 207
     b68:	f7 e0       	ldi	r31, 0x07	; 7
     b6a:	31 97       	sbiw	r30, 0x01	; 1
     b6c:	f1 f7       	brne	.-4      	; 0xb6a <kilo_start+0xe0>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <kilo_start+0xe6>
     b70:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_color>
     b78:	ff ef       	ldi	r31, 0xFF	; 255
     b7a:	21 ee       	ldi	r18, 0xE1	; 225
     b7c:	84 e0       	ldi	r24, 0x04	; 4
     b7e:	f1 50       	subi	r31, 0x01	; 1
     b80:	20 40       	sbci	r18, 0x00	; 0
     b82:	80 40       	sbci	r24, 0x00	; 0
     b84:	e1 f7       	brne	.-8      	; 0xb7e <kilo_start+0xf4>
     b86:	2c c0       	rjmp	.+88     	; 0xbe0 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     b88:	0e 94 15 03 	call	0x62a	; 0x62a <get_voltage>
                if(voltage > 682)
     b8c:	8b 3a       	cpi	r24, 0xAB	; 171
     b8e:	e2 e0       	ldi	r30, 0x02	; 2
     b90:	9e 07       	cpc	r25, r30
     b92:	24 f0       	brlt	.+8      	; 0xb9c <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     b94:	8c e0       	ldi	r24, 0x0C	; 12
     b96:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_color>
     b9a:	81 cf       	rjmp	.-254    	; 0xa9e <kilo_start+0x14>
                else if(voltage > 648)
     b9c:	89 38       	cpi	r24, 0x89	; 137
     b9e:	f2 e0       	ldi	r31, 0x02	; 2
     ba0:	9f 07       	cpc	r25, r31
     ba2:	14 f0       	brlt	.+4      	; 0xba8 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     ba4:	80 e3       	ldi	r24, 0x30	; 48
     ba6:	f7 cf       	rjmp	.-18     	; 0xb96 <kilo_start+0x10c>
                else if(voltage > 614)
     ba8:	87 36       	cpi	r24, 0x67	; 103
     baa:	92 40       	sbci	r25, 0x02	; 2
     bac:	14 f0       	brlt	.+4      	; 0xbb2 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     bae:	8f e0       	ldi	r24, 0x0F	; 15
     bb0:	f2 cf       	rjmp	.-28     	; 0xb96 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	f0 cf       	rjmp	.-32     	; 0xb96 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     bb6:	48 99       	sbic	0x09, 0	; 9
     bb8:	16 c0       	rjmp	.+44     	; 0xbe6 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_color>
     bc0:	8f ec       	ldi	r24, 0xCF	; 207
     bc2:	97 e0       	ldi	r25, 0x07	; 7
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <kilo_start+0x13a>
     bc8:	00 c0       	rjmp	.+0      	; 0xbca <kilo_start+0x140>
     bca:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_color>
     bd2:	9f ef       	ldi	r25, 0xFF	; 255
     bd4:	e1 ee       	ldi	r30, 0xE1	; 225
     bd6:	f4 e0       	ldi	r31, 0x04	; 4
     bd8:	91 50       	subi	r25, 0x01	; 1
     bda:	e0 40       	sbci	r30, 0x00	; 0
     bdc:	f0 40       	sbci	r31, 0x00	; 0
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <kilo_start+0x14e>
     be0:	00 c0       	rjmp	.+0      	; 0xbe2 <kilo_start+0x158>
     be2:	00 00       	nop
     be4:	5c cf       	rjmp	.-328    	; 0xa9e <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	d6 cf       	rjmp	.-84     	; 0xb96 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     bea:	d1 11       	cpse	r29, r1
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <kilo_start+0x168>
                    setup();
     bee:	f8 01       	movw	r30, r16
     bf0:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     bf2:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <kilo_state>
     bf6:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     bf8:	f7 01       	movw	r30, r14
     bfa:	09 95       	icall
                break;
     bfc:	50 cf       	rjmp	.-352    	; 0xa9e <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     bfe:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     c02:	81 11       	cpse	r24, r1
     c04:	07 c0       	rjmp	.+14     	; 0xc14 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c06:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c0a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     c0e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
     c12:	45 cf       	rjmp	.-374    	; 0xa9e <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     c14:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     c18:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <prev_motion>
     c1c:	98 17       	cp	r25, r24
     c1e:	09 f4       	brne	.+2      	; 0xc22 <kilo_start+0x198>
     c20:	3e cf       	rjmp	.-388    	; 0xa9e <kilo_start+0x14>
                        prev_motion = cur_motion;
     c22:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     c26:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     c2a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	89 f4       	brne	.+34     	; 0xc54 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c32:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c36:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c3a:	8f e2       	ldi	r24, 0x2F	; 47
     c3c:	95 e7       	ldi	r25, 0x75	; 117
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <kilo_start+0x1b4>
     c42:	00 c0       	rjmp	.+0      	; 0xc44 <kilo_start+0x1ba>
     c44:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     c46:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c4a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c4e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c52:	25 cf       	rjmp	.-438    	; 0xa9e <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c54:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c58:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c5c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c60:	82 30       	cpi	r24, 0x02	; 2
     c62:	59 f4       	brne	.+22     	; 0xc7a <kilo_start+0x1f0>
     c64:	ef e2       	ldi	r30, 0x2F	; 47
     c66:	f5 e7       	ldi	r31, 0x75	; 117
     c68:	31 97       	sbiw	r30, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <kilo_start+0x1de>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <kilo_start+0x1e4>
     c6e:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     c70:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c74:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     c78:	10 c0       	rjmp	.+32     	; 0xc9a <kilo_start+0x210>
     c7a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c7e:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c82:	8f e2       	ldi	r24, 0x2F	; 47
     c84:	95 e7       	ldi	r25, 0x75	; 117
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <kilo_start+0x1fc>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <kilo_start+0x202>
     c8c:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     c8e:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <kilo_straight_right>
     c92:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c96:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c9a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c9e:	ff ce       	rjmp	.-514    	; 0xa9e <kilo_start+0x14>

00000ca0 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     ca0:	1f 92       	push	r1
     ca2:	0f 92       	push	r0
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	0f 92       	push	r0
     ca8:	11 24       	eor	r1, r1
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
    rx_timer_off();
     cae:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cb2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cb6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rx_leadingbit>
    rx_leadingbyte = 1;
     cc0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_leadingbyte>
    rx_busy = 0;
     cc4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
    adc_trigger_high_gain();
     cc8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ccc:	93 ea       	ldi	r25, 0xA3	; 163
     cce:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cd2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	2f 93       	push	r18
     cf4:	3f 93       	push	r19
     cf6:	4f 93       	push	r20
     cf8:	5f 93       	push	r21
     cfa:	6f 93       	push	r22
     cfc:	7f 93       	push	r23
     cfe:	8f 93       	push	r24
     d00:	9f 93       	push	r25
     d02:	af 93       	push	r26
     d04:	bf 93       	push	r27
     d06:	ef 93       	push	r30
     d08:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     d0a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d0e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     d18:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx_leadingbit>
     d1c:	88 23       	and	r24, r24
     d1e:	21 f1       	breq	.+72     	; 0xd68 <__vector_23+0x84>
        rx_timer_on();
     d20:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d24:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d28:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     d2c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <rx_bytevalue>
        rx_leadingbit = 0;
     d30:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rx_leadingbit>
        if (rx_leadingbyte) {
     d34:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_leadingbyte>
     d38:	88 23       	and	r24, r24
     d3a:	09 f4       	brne	.+2      	; 0xd3e <__vector_23+0x5a>
     d3c:	af c1       	rjmp	.+862    	; 0x109c <__vector_23+0x3b8>
            adc_finish_conversion();
     d3e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d42:	86 fd       	sbrc	r24, 6
     d44:	fc cf       	rjmp	.-8      	; 0xd3e <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     d46:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d4a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d4e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <rx_dist+0x3>
     d52:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <rx_dist+0x2>
            adc_trigger_low_gain();
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d5c:	93 ea       	ldi	r25, 0xA3	; 163
     d5e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d62:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d66:	9a c1       	rjmp	.+820    	; 0x109c <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     d68:	c9 01       	movw	r24, r18
     d6a:	87 58       	subi	r24, 0x87	; 135
     d6c:	91 09       	sbc	r25, r1
     d6e:	84 37       	cpi	r24, 0x74	; 116
     d70:	99 40       	sbci	r25, 0x09	; 9
     d72:	a0 f0       	brcs	.+40     	; 0xd9c <__vector_23+0xb8>
            rx_timer_off();
     d74:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d78:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d7c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     d80:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <rx_leadingbit>
            rx_leadingbyte = 1;
     d84:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <rx_leadingbyte>
            rx_busy = 0;
     d88:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
            adc_trigger_high_gain();
     d8c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d90:	83 ea       	ldi	r24, 0xA3	; 163
     d92:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d96:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d9a:	80 c1       	rjmp	.+768    	; 0x109c <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     d9c:	26 58       	subi	r18, 0x86	; 134
     d9e:	31 09       	sbc	r19, r1
     da0:	a4 ef       	ldi	r26, 0xF4	; 244
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	0e 94 37 09 	call	0x126e	; 0x126e <__umulhisi3>
     da8:	8c 01       	movw	r16, r24
     daa:	22 27       	eor	r18, r18
     dac:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     dae:	08 30       	cpi	r16, 0x08	; 8
     db0:	60 f4       	brcc	.+24     	; 0xdca <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	01 c0       	rjmp	.+2      	; 0xdba <__vector_23+0xd6>
     db8:	88 0f       	add	r24, r24
     dba:	0a 95       	dec	r16
     dbc:	ea f7       	brpl	.-6      	; 0xdb8 <__vector_23+0xd4>
     dbe:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     dc2:	89 2b       	or	r24, r25
     dc4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <rx_bytevalue>
     dc8:	69 c1       	rjmp	.+722    	; 0x109c <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     dca:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <rx_leadingbit>
                if (rx_leadingbyte) {
     dce:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_leadingbyte>
     dd2:	88 23       	and	r24, r24
     dd4:	41 f1       	breq	.+80     	; 0xe26 <__vector_23+0x142>
                    adc_finish_conversion();
     dd6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dda:	86 fd       	sbrc	r24, 6
     ddc:	fc cf       	rjmp	.-8      	; 0xdd6 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     dde:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     de2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     de6:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <rx_dist+0x1>
     dea:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <rx_dist>
                    adc_trigger_high_gain();
     dee:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     df2:	83 ea       	ldi	r24, 0xA3	; 163
     df4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     dfe:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     e02:	99 23       	and	r25, r25
     e04:	59 f0       	breq	.+22     	; 0xe1c <__vector_23+0x138>
                        rx_timer_off();
     e06:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e0a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e0e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     e12:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_leadingbyte>
                        rx_busy = 0;
     e16:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
     e1a:	40 c1       	rjmp	.+640    	; 0x109c <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     e1c:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_leadingbyte>
                        rx_byteindex = 0;
     e20:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_byteindex>
     e24:	3b c1       	rjmp	.+630    	; 0x109c <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     e26:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_byteindex>
     e2a:	e8 2f       	mov	r30, r24
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	e4 5a       	subi	r30, 0xA4	; 164
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     e36:	90 83       	st	Z, r25
                    rx_byteindex++;
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     e3e:	8c 30       	cpi	r24, 0x0C	; 12
     e40:	09 f0       	breq	.+2      	; 0xe44 <__vector_23+0x160>
     e42:	2c c1       	rjmp	.+600    	; 0x109c <__vector_23+0x3b8>
                        rx_timer_off();
     e44:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e48:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e4c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     e50:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <rx_leadingbyte>
                        rx_busy = 0;
     e54:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     e58:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <rx_msg+0xa>
     e5c:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <rx_msg+0xb>
     e60:	8c e5       	ldi	r24, 0x5C	; 92
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	0e 94 61 08 	call	0x10c2	; 0x10c2 <message_crc>
     e68:	08 17       	cp	r16, r24
     e6a:	19 07       	cpc	r17, r25
     e6c:	09 f0       	breq	.+2      	; 0xe70 <__vector_23+0x18c>
     e6e:	16 c1       	rjmp	.+556    	; 0x109c <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     e70:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <rx_msg+0x9>
     e74:	e7 fd       	sbrc	r30, 7
     e76:	0a c0       	rjmp	.+20     	; 0xe8c <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     e78:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     e7c:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     e80:	61 e3       	ldi	r22, 0x31	; 49
     e82:	71 e0       	ldi	r23, 0x01	; 1
     e84:	8c e5       	ldi	r24, 0x5C	; 92
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	09 95       	icall
     e8a:	08 c1       	rjmp	.+528    	; 0x109c <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     e8c:	88 e7       	ldi	r24, 0x78	; 120
     e8e:	8e 0f       	add	r24, r30
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	30 f0       	brcs	.+12     	; 0xea0 <__vector_23+0x1bc>
        motors_off();
     e94:	53 98       	cbi	0x0a, 3	; 10
     e96:	23 98       	cbi	0x04, 3	; 4
     e98:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e9c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     ea0:	8e 2f       	mov	r24, r30
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	fc 01       	movw	r30, r24
     ea6:	e0 58       	subi	r30, 0x80	; 128
     ea8:	f1 09       	sbc	r31, r1
     eaa:	eb 30       	cpi	r30, 0x0B	; 11
     eac:	f1 05       	cpc	r31, r1
     eae:	08 f0       	brcs	.+2      	; 0xeb2 <__vector_23+0x1ce>
     eb0:	f5 c0       	rjmp	.+490    	; 0x109c <__vector_23+0x3b8>
     eb2:	e5 5c       	subi	r30, 0xC5	; 197
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     eba:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     ebe:	8d 7f       	andi	r24, 0xFD	; 253
     ec0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     ec4:	16 bc       	out	0x26, r1	; 38
            bootload();
     ec6:	e0 e0       	ldi	r30, 0x00	; 0
     ec8:	f0 e7       	ldi	r31, 0x70	; 112
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     ecc:	e0 e0       	ldi	r30, 0x00	; 0
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     ed2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <kilo_state>
     ed6:	e2 c0       	rjmp	.+452    	; 0x109c <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	b2 c0       	rjmp	.+356    	; 0x1040 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     edc:	85 e0       	ldi	r24, 0x05	; 5
     ede:	b0 c0       	rjmp	.+352    	; 0x1040 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	ae c0       	rjmp	.+348    	; 0x1040 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     ee4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	09 f4       	brne	.+2      	; 0xeee <__vector_23+0x20a>
     eec:	d7 c0       	rjmp	.+430    	; 0x109c <__vector_23+0x3b8>
     eee:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     ef2:	84 30       	cpi	r24, 0x04	; 4
     ef4:	09 f4       	brne	.+2      	; 0xef8 <__vector_23+0x214>
     ef6:	d2 c0       	rjmp	.+420    	; 0x109c <__vector_23+0x3b8>
                motors_on();
     ef8:	53 9a       	sbi	0x0a, 3	; 10
     efa:	23 9a       	sbi	0x04, 3	; 4
     efc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f00:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     f04:	83 e0       	ldi	r24, 0x03	; 3
     f06:	9c c0       	rjmp	.+312    	; 0x1040 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     f08:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_msg>
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	09 f4       	brne	.+2      	; 0xf12 <__vector_23+0x22e>
     f10:	4b c0       	rjmp	.+150    	; 0xfa8 <__vector_23+0x2c4>
     f12:	80 f4       	brcc	.+32     	; 0xf34 <__vector_23+0x250>
     f14:	88 23       	and	r24, r24
     f16:	a9 f0       	breq	.+42     	; 0xf42 <__vector_23+0x25e>
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	09 f0       	breq	.+2      	; 0xf1e <__vector_23+0x23a>
     f1c:	82 c0       	rjmp	.+260    	; 0x1022 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     f1e:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_msg+0x1>
     f22:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <rx_msg+0x2>
     f26:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <kilo_uid+0x1>
     f2a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_uid>
                    cur_motion = MOVE_STOP;
     f2e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
     f32:	77 c0       	rjmp	.+238    	; 0x1022 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     f34:	83 30       	cpi	r24, 0x03	; 3
     f36:	09 f4       	brne	.+2      	; 0xf3a <__vector_23+0x256>
     f38:	49 c0       	rjmp	.+146    	; 0xfcc <__vector_23+0x2e8>
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	09 f4       	brne	.+2      	; 0xf40 <__vector_23+0x25c>
     f3e:	58 c0       	rjmp	.+176    	; 0xff0 <__vector_23+0x30c>
     f40:	70 c0       	rjmp	.+224    	; 0x1022 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     f42:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     f46:	86 30       	cpi	r24, 0x06	; 6
     f48:	09 f0       	breq	.+2      	; 0xf4c <__vector_23+0x268>
     f4a:	6b c0       	rjmp	.+214    	; 0x1022 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     f4c:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_uid>
     f50:	80 eb       	ldi	r24, 0xB0	; 176
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 ce 0b 	call	0x179c	; 0x179c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     f58:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <kilo_uid+0x1>
     f5c:	81 eb       	ldi	r24, 0xB1	; 177
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 ce 0b 	call	0x179c	; 0x179c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     f64:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <kilo_turn_left>
     f68:	85 e0       	ldi	r24, 0x05	; 5
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 ce 0b 	call	0x179c	; 0x179c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     f70:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <kilo_turn_right>
     f74:	89 e0       	ldi	r24, 0x09	; 9
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 ce 0b 	call	0x179c	; 0x179c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     f7c:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <kilo_straight_left>
     f80:	8c e0       	ldi	r24, 0x0C	; 12
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 ce 0b 	call	0x179c	; 0x179c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     f88:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <kilo_straight_right>
     f8c:	84 e1       	ldi	r24, 0x14	; 20
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 ce 0b 	call	0x179c	; 0x179c <eeprom_write_byte>
                        motors_off();
     f94:	53 98       	cbi	0x0a, 3	; 10
     f96:	23 98       	cbi	0x04, 3	; 4
     f98:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f9c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
     fa6:	3d c0       	rjmp	.+122    	; 0x1022 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     fa8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     fac:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_msg+0x3>
     fb0:	91 30       	cpi	r25, 0x01	; 1
     fb2:	21 f4       	brne	.+8      	; 0xfbc <__vector_23+0x2d8>
     fb4:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <kilo_turn_left>
     fb8:	89 17       	cp	r24, r25
     fba:	99 f1       	breq	.+102    	; 0x1022 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     fbc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_LEFT;
     fc0:	91 e0       	ldi	r25, 0x01	; 1
     fc2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     fc6:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_turn_left>
     fca:	2b c0       	rjmp	.+86     	; 0x1022 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     fcc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     fd0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rx_msg+0x4>
     fd4:	92 30       	cpi	r25, 0x02	; 2
     fd6:	21 f4       	brne	.+8      	; 0xfe0 <__vector_23+0x2fc>
     fd8:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <kilo_turn_right>
     fdc:	89 17       	cp	r24, r25
     fde:	09 f1       	breq	.+66     	; 0x1022 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     fe0:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_RIGHT;
     fe4:	92 e0       	ldi	r25, 0x02	; 2
     fe6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     fea:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <kilo_turn_right>
     fee:	19 c0       	rjmp	.+50     	; 0x1022 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     ff0:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <cur_motion>
     ff4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_msg+0x6>
     ff8:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <rx_msg+0x5>
     ffc:	23 30       	cpi	r18, 0x03	; 3
     ffe:	41 f4       	brne	.+16     	; 0x1010 <__vector_23+0x32c>
    1000:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <kilo_straight_right>
    1004:	82 13       	cpse	r24, r18
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <__vector_23+0x32c>
    1008:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <kilo_straight_left>
    100c:	92 17       	cp	r25, r18
    100e:	49 f0       	breq	.+18     	; 0x1022 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1010:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    1014:	23 e0       	ldi	r18, 0x03	; 3
    1016:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    101a:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    101e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1022:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_msg>
    1026:	88 23       	and	r24, r24
    1028:	c9 f1       	breq	.+114    	; 0x109c <__vector_23+0x3b8>
    102a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
    102e:	86 30       	cpi	r24, 0x06	; 6
    1030:	a9 f1       	breq	.+106    	; 0x109c <__vector_23+0x3b8>
                motors_on();
    1032:	53 9a       	sbi	0x0a, 3	; 10
    1034:	23 9a       	sbi	0x04, 3	; 4
    1036:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    103a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    103e:	86 e0       	ldi	r24, 0x06	; 6
    1040:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    1044:	2b c0       	rjmp	.+86     	; 0x109c <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1046:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
    104a:	86 30       	cpi	r24, 0x06	; 6
    104c:	81 f0       	breq	.+32     	; 0x106e <__vector_23+0x38a>
                motors_on();
    104e:	53 9a       	sbi	0x0a, 3	; 10
    1050:	23 9a       	sbi	0x04, 3	; 4
    1052:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1056:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	0e 94 26 05 	call	0xa4c	; 0xa4c <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    1060:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
    1064:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                kilo_state = MOVING;
    1068:	86 e0       	ldi	r24, 0x06	; 6
    106a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <rx_msg>
    1076:	02 c0       	rjmp	.+4      	; 0x107c <__vector_23+0x398>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <__vector_23+0x394>
    1080:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <kilo_uid>
    1084:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <kilo_uid+0x1>
    1088:	82 23       	and	r24, r18
    108a:	93 23       	and	r25, r19
    108c:	89 2b       	or	r24, r25
    108e:	21 f0       	breq	.+8      	; 0x1098 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cur_motion>
    1096:	02 c0       	rjmp	.+4      	; 0x109c <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    1098:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
                    }
                }
            }
        }
    }
}
    109c:	ff 91       	pop	r31
    109e:	ef 91       	pop	r30
    10a0:	bf 91       	pop	r27
    10a2:	af 91       	pop	r26
    10a4:	9f 91       	pop	r25
    10a6:	8f 91       	pop	r24
    10a8:	7f 91       	pop	r23
    10aa:	6f 91       	pop	r22
    10ac:	5f 91       	pop	r21
    10ae:	4f 91       	pop	r20
    10b0:	3f 91       	pop	r19
    10b2:	2f 91       	pop	r18
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	0f 90       	pop	r0
    10be:	1f 90       	pop	r1
    10c0:	18 95       	reti

000010c2 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    10c2:	fc 01       	movw	r30, r24
    10c4:	9c 01       	movw	r18, r24
    10c6:	26 5f       	subi	r18, 0xF6	; 246
    10c8:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    10ca:	8f ef       	ldi	r24, 0xFF	; 255
    10cc:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    10ce:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    10d0:	84 27       	eor	r24, r20
    10d2:	08 2e       	mov	r0, r24
    10d4:	82 95       	swap	r24
    10d6:	80 7f       	andi	r24, 0xF0	; 240
    10d8:	80 25       	eor	r24, r0
    10da:	09 2e       	mov	r0, r25
    10dc:	98 2f       	mov	r25, r24
    10de:	82 95       	swap	r24
    10e0:	8f 70       	andi	r24, 0x0F	; 15
    10e2:	08 26       	eor	r0, r24
    10e4:	86 95       	lsr	r24
    10e6:	98 27       	eor	r25, r24
    10e8:	89 27       	eor	r24, r25
    10ea:	88 0f       	add	r24, r24
    10ec:	88 0f       	add	r24, r24
    10ee:	88 0f       	add	r24, r24
    10f0:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    10f2:	e2 17       	cp	r30, r18
    10f4:	f3 07       	cpc	r31, r19
    10f6:	59 f7       	brne	.-42     	; 0x10ce <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    10f8:	08 95       	ret

000010fa <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    10fa:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    10fc:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    10fe:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1100:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <tx_mask>
    or tmpreg1, ddrreg
    1104:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1106:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1108:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    110a:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    110e:	20 30       	cpi	r18, 0x00	; 0
    1110:	29 f0       	breq	.+10     	; 0x111c <message_send+0x22>
    1112:	00 00       	nop
    1114:	25 b1       	in	r18, 0x05	; 5
    1116:	23 2b       	or	r18, r19
    1118:	25 b9       	out	0x05, r18	; 5
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <message_send+0x2a>
    111c:	00 00       	nop
    111e:	00 00       	nop
    1120:	00 00       	nop
    1122:	00 c0       	rjmp	.+0      	; 0x1124 <message_send+0x2a>
    1124:	00 00       	nop
    1126:	00 00       	nop
    1128:	00 00       	nop
    112a:	30 95       	com	r19
    112c:	25 b1       	in	r18, 0x05	; 5
    112e:	23 23       	and	r18, r19
    1130:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1132:	2e ea       	ldi	r18, 0xAE	; 174
    1134:	2a 95       	dec	r18
    1136:	f1 f7       	brne	.-4      	; 0x1134 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1138:	2b ee       	ldi	r18, 0xEB	; 235

0000113a <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    113a:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    113c:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    113e:	0a c0       	rjmp	.+20     	; 0x1154 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1140:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1142:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    com tmpreg2
    1146:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1148:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    114a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    114c:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    114e:	0f be       	out	0x3f, r0	; 63
    return 0
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret

00001154 <nocollision>:
nocollision:
    nop
    1154:	00 00       	nop
    dec tmpreg1
    1156:	2a 95       	dec	r18
    brne checkcollision
    1158:	81 f7       	brne	.-32     	; 0x113a <checkcollision>

    ldi tmpreg1, 0x01
    115a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    115c:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    1160:	20 30       	cpi	r18, 0x00	; 0
    1162:	29 f0       	breq	.+10     	; 0x116e <nocollision+0x1a>
    1164:	00 00       	nop
    1166:	25 b1       	in	r18, 0x05	; 5
    1168:	23 2b       	or	r18, r19
    116a:	25 b9       	out	0x05, r18	; 5
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <nocollision+0x22>
    116e:	00 00       	nop
    1170:	00 00       	nop
    1172:	00 00       	nop
    1174:	00 c0       	rjmp	.+0      	; 0x1176 <nocollision+0x22>
    1176:	00 00       	nop
    1178:	00 00       	nop
    117a:	00 00       	nop
    117c:	30 95       	com	r19
    117e:	25 b1       	in	r18, 0x05	; 5
    1180:	23 23       	and	r18, r19
    1182:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1184:	00 00       	nop
    1186:	24 e5       	ldi	r18, 0x54	; 84
    1188:	2a 95       	dec	r18
    118a:	f1 f7       	brne	.-4      	; 0x1188 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    118c:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    118e:	8c e0       	ldi	r24, 0x0C	; 12

00001190 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1190:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1192:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1194:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1196:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1198:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    119a:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    119c:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    119e:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    11a0:	50 e0       	ldi	r21, 0x00	; 0

000011a2 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    11a2:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    11a4:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    11a6:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    11a8:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    11aa:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    11ae:	20 30       	cpi	r18, 0x00	; 0
    11b0:	29 f0       	breq	.+10     	; 0x11bc <sendbit+0x1a>
    11b2:	00 00       	nop
    11b4:	25 b1       	in	r18, 0x05	; 5
    11b6:	23 2b       	or	r18, r19
    11b8:	25 b9       	out	0x05, r18	; 5
    11ba:	04 c0       	rjmp	.+8      	; 0x11c4 <sendbit+0x22>
    11bc:	00 00       	nop
    11be:	00 00       	nop
    11c0:	00 00       	nop
    11c2:	00 c0       	rjmp	.+0      	; 0x11c4 <sendbit+0x22>
    11c4:	00 00       	nop
    11c6:	00 00       	nop
    11c8:	00 00       	nop
    11ca:	30 95       	com	r19
    11cc:	25 b1       	in	r18, 0x05	; 5
    11ce:	23 23       	and	r18, r19
    11d0:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    11d2:	00 00       	nop
    11d4:	21 e5       	ldi	r18, 0x51	; 81
    11d6:	2a 95       	dec	r18
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    11da:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    11dc:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    11de:	9a 95       	dec	r25
    brne sendbit
    11e0:	01 f7       	brne	.-64     	; 0x11a2 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    11e2:	8a 95       	dec	r24
    brne sendbyte
    11e4:	a9 f6       	brne	.-86     	; 0x1190 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    11e6:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    11e8:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    11ea:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    11ec:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    11ee:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    com tmpreg2
    11f2:	30 95       	com	r19
    in tmpreg1, IR_PORT
    11f4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    11f6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    11f8:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    11fa:	0f be       	out	0x3f, r0	; 63
    return 1
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	08 95       	ret

00001200 <main>:




int main() {
    kilo_init();
    1200:	0e 94 4d 01 	call	0x29a	; 0x29a <kilo_init>
    kilo_message_rx = message_rx;
    1204:	87 e7       	ldi	r24, 0x77	; 119
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_rx+0x1>
    120c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_rx>

    // SET_CALLBACK(botinfo, cb_botinfo);
    
 
    if (kilo_uid < NUM_ROBOTS - 1)
    1210:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <kilo_uid>
    1214:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <kilo_uid+0x1>
    1218:	05 97       	sbiw	r24, 0x05	; 5
    121a:	30 f4       	brcc	.+12     	; 0x1228 <main+0x28>
    kilo_message_tx = message_tx;
    121c:	81 e7       	ldi	r24, 0x71	; 113
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx+0x1>
    1224:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx>
    
    kilo_start(setup, loop);
    1228:	64 ef       	ldi	r22, 0xF4	; 244
    122a:	70 e0       	ldi	r23, 0x00	; 0
    122c:	88 e2       	ldi	r24, 0x28	; 40
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	0e 94 45 05 	call	0xa8a	; 0xa8a <kilo_start>

    return 0;
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	08 95       	ret

0000123a <__divmodhi4>:
    123a:	97 fb       	bst	r25, 7
    123c:	07 2e       	mov	r0, r23
    123e:	16 f4       	brtc	.+4      	; 0x1244 <__divmodhi4+0xa>
    1240:	00 94       	com	r0
    1242:	07 d0       	rcall	.+14     	; 0x1252 <__divmodhi4_neg1>
    1244:	77 fd       	sbrc	r23, 7
    1246:	09 d0       	rcall	.+18     	; 0x125a <__divmodhi4_neg2>
    1248:	0e 94 46 09 	call	0x128c	; 0x128c <__udivmodhi4>
    124c:	07 fc       	sbrc	r0, 7
    124e:	05 d0       	rcall	.+10     	; 0x125a <__divmodhi4_neg2>
    1250:	3e f4       	brtc	.+14     	; 0x1260 <__divmodhi4_exit>

00001252 <__divmodhi4_neg1>:
    1252:	90 95       	com	r25
    1254:	81 95       	neg	r24
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	08 95       	ret

0000125a <__divmodhi4_neg2>:
    125a:	70 95       	com	r23
    125c:	61 95       	neg	r22
    125e:	7f 4f       	sbci	r23, 0xFF	; 255

00001260 <__divmodhi4_exit>:
    1260:	08 95       	ret

00001262 <__tablejump2__>:
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	05 90       	lpm	r0, Z+
    1268:	f4 91       	lpm	r31, Z
    126a:	e0 2d       	mov	r30, r0
    126c:	09 94       	ijmp

0000126e <__umulhisi3>:
    126e:	a2 9f       	mul	r26, r18
    1270:	b0 01       	movw	r22, r0
    1272:	b3 9f       	mul	r27, r19
    1274:	c0 01       	movw	r24, r0
    1276:	a3 9f       	mul	r26, r19
    1278:	70 0d       	add	r23, r0
    127a:	81 1d       	adc	r24, r1
    127c:	11 24       	eor	r1, r1
    127e:	91 1d       	adc	r25, r1
    1280:	b2 9f       	mul	r27, r18
    1282:	70 0d       	add	r23, r0
    1284:	81 1d       	adc	r24, r1
    1286:	11 24       	eor	r1, r1
    1288:	91 1d       	adc	r25, r1
    128a:	08 95       	ret

0000128c <__udivmodhi4>:
    128c:	aa 1b       	sub	r26, r26
    128e:	bb 1b       	sub	r27, r27
    1290:	51 e1       	ldi	r21, 0x11	; 17
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <__udivmodhi4_ep>

00001294 <__udivmodhi4_loop>:
    1294:	aa 1f       	adc	r26, r26
    1296:	bb 1f       	adc	r27, r27
    1298:	a6 17       	cp	r26, r22
    129a:	b7 07       	cpc	r27, r23
    129c:	10 f0       	brcs	.+4      	; 0x12a2 <__udivmodhi4_ep>
    129e:	a6 1b       	sub	r26, r22
    12a0:	b7 0b       	sbc	r27, r23

000012a2 <__udivmodhi4_ep>:
    12a2:	88 1f       	adc	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	5a 95       	dec	r21
    12a8:	a9 f7       	brne	.-22     	; 0x1294 <__udivmodhi4_loop>
    12aa:	80 95       	com	r24
    12ac:	90 95       	com	r25
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	08 95       	ret

000012b4 <__subsf3>:
    12b4:	50 58       	subi	r21, 0x80	; 128

000012b6 <__addsf3>:
    12b6:	bb 27       	eor	r27, r27
    12b8:	aa 27       	eor	r26, r26
    12ba:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__addsf3x>
    12be:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__fp_round>
    12c2:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_pscA>
    12c6:	38 f0       	brcs	.+14     	; 0x12d6 <__addsf3+0x20>
    12c8:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__fp_pscB>
    12cc:	20 f0       	brcs	.+8      	; 0x12d6 <__addsf3+0x20>
    12ce:	39 f4       	brne	.+14     	; 0x12de <__addsf3+0x28>
    12d0:	9f 3f       	cpi	r25, 0xFF	; 255
    12d2:	19 f4       	brne	.+6      	; 0x12da <__addsf3+0x24>
    12d4:	26 f4       	brtc	.+8      	; 0x12de <__addsf3+0x28>
    12d6:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__fp_nan>
    12da:	0e f4       	brtc	.+2      	; 0x12de <__addsf3+0x28>
    12dc:	e0 95       	com	r30
    12de:	e7 fb       	bst	r30, 7
    12e0:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_inf>

000012e4 <__addsf3x>:
    12e4:	e9 2f       	mov	r30, r25
    12e6:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_split3>
    12ea:	58 f3       	brcs	.-42     	; 0x12c2 <__addsf3+0xc>
    12ec:	ba 17       	cp	r27, r26
    12ee:	62 07       	cpc	r22, r18
    12f0:	73 07       	cpc	r23, r19
    12f2:	84 07       	cpc	r24, r20
    12f4:	95 07       	cpc	r25, r21
    12f6:	20 f0       	brcs	.+8      	; 0x1300 <__addsf3x+0x1c>
    12f8:	79 f4       	brne	.+30     	; 0x1318 <__addsf3x+0x34>
    12fa:	a6 f5       	brtc	.+104    	; 0x1364 <__addsf3x+0x80>
    12fc:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__fp_zero>
    1300:	0e f4       	brtc	.+2      	; 0x1304 <__addsf3x+0x20>
    1302:	e0 95       	com	r30
    1304:	0b 2e       	mov	r0, r27
    1306:	ba 2f       	mov	r27, r26
    1308:	a0 2d       	mov	r26, r0
    130a:	0b 01       	movw	r0, r22
    130c:	b9 01       	movw	r22, r18
    130e:	90 01       	movw	r18, r0
    1310:	0c 01       	movw	r0, r24
    1312:	ca 01       	movw	r24, r20
    1314:	a0 01       	movw	r20, r0
    1316:	11 24       	eor	r1, r1
    1318:	ff 27       	eor	r31, r31
    131a:	59 1b       	sub	r21, r25
    131c:	99 f0       	breq	.+38     	; 0x1344 <__addsf3x+0x60>
    131e:	59 3f       	cpi	r21, 0xF9	; 249
    1320:	50 f4       	brcc	.+20     	; 0x1336 <__addsf3x+0x52>
    1322:	50 3e       	cpi	r21, 0xE0	; 224
    1324:	68 f1       	brcs	.+90     	; 0x1380 <__addsf3x+0x9c>
    1326:	1a 16       	cp	r1, r26
    1328:	f0 40       	sbci	r31, 0x00	; 0
    132a:	a2 2f       	mov	r26, r18
    132c:	23 2f       	mov	r18, r19
    132e:	34 2f       	mov	r19, r20
    1330:	44 27       	eor	r20, r20
    1332:	58 5f       	subi	r21, 0xF8	; 248
    1334:	f3 cf       	rjmp	.-26     	; 0x131c <__addsf3x+0x38>
    1336:	46 95       	lsr	r20
    1338:	37 95       	ror	r19
    133a:	27 95       	ror	r18
    133c:	a7 95       	ror	r26
    133e:	f0 40       	sbci	r31, 0x00	; 0
    1340:	53 95       	inc	r21
    1342:	c9 f7       	brne	.-14     	; 0x1336 <__addsf3x+0x52>
    1344:	7e f4       	brtc	.+30     	; 0x1364 <__addsf3x+0x80>
    1346:	1f 16       	cp	r1, r31
    1348:	ba 0b       	sbc	r27, r26
    134a:	62 0b       	sbc	r22, r18
    134c:	73 0b       	sbc	r23, r19
    134e:	84 0b       	sbc	r24, r20
    1350:	ba f0       	brmi	.+46     	; 0x1380 <__addsf3x+0x9c>
    1352:	91 50       	subi	r25, 0x01	; 1
    1354:	a1 f0       	breq	.+40     	; 0x137e <__addsf3x+0x9a>
    1356:	ff 0f       	add	r31, r31
    1358:	bb 1f       	adc	r27, r27
    135a:	66 1f       	adc	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	88 1f       	adc	r24, r24
    1360:	c2 f7       	brpl	.-16     	; 0x1352 <__addsf3x+0x6e>
    1362:	0e c0       	rjmp	.+28     	; 0x1380 <__addsf3x+0x9c>
    1364:	ba 0f       	add	r27, r26
    1366:	62 1f       	adc	r22, r18
    1368:	73 1f       	adc	r23, r19
    136a:	84 1f       	adc	r24, r20
    136c:	48 f4       	brcc	.+18     	; 0x1380 <__addsf3x+0x9c>
    136e:	87 95       	ror	r24
    1370:	77 95       	ror	r23
    1372:	67 95       	ror	r22
    1374:	b7 95       	ror	r27
    1376:	f7 95       	ror	r31
    1378:	9e 3f       	cpi	r25, 0xFE	; 254
    137a:	08 f0       	brcs	.+2      	; 0x137e <__addsf3x+0x9a>
    137c:	b0 cf       	rjmp	.-160    	; 0x12de <__addsf3+0x28>
    137e:	93 95       	inc	r25
    1380:	88 0f       	add	r24, r24
    1382:	08 f0       	brcs	.+2      	; 0x1386 <__addsf3x+0xa2>
    1384:	99 27       	eor	r25, r25
    1386:	ee 0f       	add	r30, r30
    1388:	97 95       	ror	r25
    138a:	87 95       	ror	r24
    138c:	08 95       	ret

0000138e <__divsf3>:
    138e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__divsf3x>
    1392:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__fp_round>
    1396:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__fp_pscB>
    139a:	58 f0       	brcs	.+22     	; 0x13b2 <__divsf3+0x24>
    139c:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_pscA>
    13a0:	40 f0       	brcs	.+16     	; 0x13b2 <__divsf3+0x24>
    13a2:	29 f4       	brne	.+10     	; 0x13ae <__divsf3+0x20>
    13a4:	5f 3f       	cpi	r21, 0xFF	; 255
    13a6:	29 f0       	breq	.+10     	; 0x13b2 <__divsf3+0x24>
    13a8:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_inf>
    13ac:	51 11       	cpse	r21, r1
    13ae:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_szero>
    13b2:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__fp_nan>

000013b6 <__divsf3x>:
    13b6:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_split3>
    13ba:	68 f3       	brcs	.-38     	; 0x1396 <__divsf3+0x8>

000013bc <__divsf3_pse>:
    13bc:	99 23       	and	r25, r25
    13be:	b1 f3       	breq	.-20     	; 0x13ac <__divsf3+0x1e>
    13c0:	55 23       	and	r21, r21
    13c2:	91 f3       	breq	.-28     	; 0x13a8 <__divsf3+0x1a>
    13c4:	95 1b       	sub	r25, r21
    13c6:	55 0b       	sbc	r21, r21
    13c8:	bb 27       	eor	r27, r27
    13ca:	aa 27       	eor	r26, r26
    13cc:	62 17       	cp	r22, r18
    13ce:	73 07       	cpc	r23, r19
    13d0:	84 07       	cpc	r24, r20
    13d2:	38 f0       	brcs	.+14     	; 0x13e2 <__divsf3_pse+0x26>
    13d4:	9f 5f       	subi	r25, 0xFF	; 255
    13d6:	5f 4f       	sbci	r21, 0xFF	; 255
    13d8:	22 0f       	add	r18, r18
    13da:	33 1f       	adc	r19, r19
    13dc:	44 1f       	adc	r20, r20
    13de:	aa 1f       	adc	r26, r26
    13e0:	a9 f3       	breq	.-22     	; 0x13cc <__divsf3_pse+0x10>
    13e2:	35 d0       	rcall	.+106    	; 0x144e <__divsf3_pse+0x92>
    13e4:	0e 2e       	mov	r0, r30
    13e6:	3a f0       	brmi	.+14     	; 0x13f6 <__divsf3_pse+0x3a>
    13e8:	e0 e8       	ldi	r30, 0x80	; 128
    13ea:	32 d0       	rcall	.+100    	; 0x1450 <__divsf3_pse+0x94>
    13ec:	91 50       	subi	r25, 0x01	; 1
    13ee:	50 40       	sbci	r21, 0x00	; 0
    13f0:	e6 95       	lsr	r30
    13f2:	00 1c       	adc	r0, r0
    13f4:	ca f7       	brpl	.-14     	; 0x13e8 <__divsf3_pse+0x2c>
    13f6:	2b d0       	rcall	.+86     	; 0x144e <__divsf3_pse+0x92>
    13f8:	fe 2f       	mov	r31, r30
    13fa:	29 d0       	rcall	.+82     	; 0x144e <__divsf3_pse+0x92>
    13fc:	66 0f       	add	r22, r22
    13fe:	77 1f       	adc	r23, r23
    1400:	88 1f       	adc	r24, r24
    1402:	bb 1f       	adc	r27, r27
    1404:	26 17       	cp	r18, r22
    1406:	37 07       	cpc	r19, r23
    1408:	48 07       	cpc	r20, r24
    140a:	ab 07       	cpc	r26, r27
    140c:	b0 e8       	ldi	r27, 0x80	; 128
    140e:	09 f0       	breq	.+2      	; 0x1412 <__divsf3_pse+0x56>
    1410:	bb 0b       	sbc	r27, r27
    1412:	80 2d       	mov	r24, r0
    1414:	bf 01       	movw	r22, r30
    1416:	ff 27       	eor	r31, r31
    1418:	93 58       	subi	r25, 0x83	; 131
    141a:	5f 4f       	sbci	r21, 0xFF	; 255
    141c:	3a f0       	brmi	.+14     	; 0x142c <__divsf3_pse+0x70>
    141e:	9e 3f       	cpi	r25, 0xFE	; 254
    1420:	51 05       	cpc	r21, r1
    1422:	78 f0       	brcs	.+30     	; 0x1442 <__divsf3_pse+0x86>
    1424:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_inf>
    1428:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_szero>
    142c:	5f 3f       	cpi	r21, 0xFF	; 255
    142e:	e4 f3       	brlt	.-8      	; 0x1428 <__divsf3_pse+0x6c>
    1430:	98 3e       	cpi	r25, 0xE8	; 232
    1432:	d4 f3       	brlt	.-12     	; 0x1428 <__divsf3_pse+0x6c>
    1434:	86 95       	lsr	r24
    1436:	77 95       	ror	r23
    1438:	67 95       	ror	r22
    143a:	b7 95       	ror	r27
    143c:	f7 95       	ror	r31
    143e:	9f 5f       	subi	r25, 0xFF	; 255
    1440:	c9 f7       	brne	.-14     	; 0x1434 <__divsf3_pse+0x78>
    1442:	88 0f       	add	r24, r24
    1444:	91 1d       	adc	r25, r1
    1446:	96 95       	lsr	r25
    1448:	87 95       	ror	r24
    144a:	97 f9       	bld	r25, 7
    144c:	08 95       	ret
    144e:	e1 e0       	ldi	r30, 0x01	; 1
    1450:	66 0f       	add	r22, r22
    1452:	77 1f       	adc	r23, r23
    1454:	88 1f       	adc	r24, r24
    1456:	bb 1f       	adc	r27, r27
    1458:	62 17       	cp	r22, r18
    145a:	73 07       	cpc	r23, r19
    145c:	84 07       	cpc	r24, r20
    145e:	ba 07       	cpc	r27, r26
    1460:	20 f0       	brcs	.+8      	; 0x146a <__divsf3_pse+0xae>
    1462:	62 1b       	sub	r22, r18
    1464:	73 0b       	sbc	r23, r19
    1466:	84 0b       	sbc	r24, r20
    1468:	ba 0b       	sbc	r27, r26
    146a:	ee 1f       	adc	r30, r30
    146c:	88 f7       	brcc	.-30     	; 0x1450 <__divsf3_pse+0x94>
    146e:	e0 95       	com	r30
    1470:	08 95       	ret

00001472 <__fixsfsi>:
    1472:	0e 94 40 0a 	call	0x1480	; 0x1480 <__fixunssfsi>
    1476:	68 94       	set
    1478:	b1 11       	cpse	r27, r1
    147a:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_szero>
    147e:	08 95       	ret

00001480 <__fixunssfsi>:
    1480:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__fp_splitA>
    1484:	88 f0       	brcs	.+34     	; 0x14a8 <__fixunssfsi+0x28>
    1486:	9f 57       	subi	r25, 0x7F	; 127
    1488:	98 f0       	brcs	.+38     	; 0x14b0 <__fixunssfsi+0x30>
    148a:	b9 2f       	mov	r27, r25
    148c:	99 27       	eor	r25, r25
    148e:	b7 51       	subi	r27, 0x17	; 23
    1490:	b0 f0       	brcs	.+44     	; 0x14be <__fixunssfsi+0x3e>
    1492:	e1 f0       	breq	.+56     	; 0x14cc <__fixunssfsi+0x4c>
    1494:	66 0f       	add	r22, r22
    1496:	77 1f       	adc	r23, r23
    1498:	88 1f       	adc	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	1a f0       	brmi	.+6      	; 0x14a4 <__fixunssfsi+0x24>
    149e:	ba 95       	dec	r27
    14a0:	c9 f7       	brne	.-14     	; 0x1494 <__fixunssfsi+0x14>
    14a2:	14 c0       	rjmp	.+40     	; 0x14cc <__fixunssfsi+0x4c>
    14a4:	b1 30       	cpi	r27, 0x01	; 1
    14a6:	91 f0       	breq	.+36     	; 0x14cc <__fixunssfsi+0x4c>
    14a8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_zero>
    14ac:	b1 e0       	ldi	r27, 0x01	; 1
    14ae:	08 95       	ret
    14b0:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__fp_zero>
    14b4:	67 2f       	mov	r22, r23
    14b6:	78 2f       	mov	r23, r24
    14b8:	88 27       	eor	r24, r24
    14ba:	b8 5f       	subi	r27, 0xF8	; 248
    14bc:	39 f0       	breq	.+14     	; 0x14cc <__fixunssfsi+0x4c>
    14be:	b9 3f       	cpi	r27, 0xF9	; 249
    14c0:	cc f3       	brlt	.-14     	; 0x14b4 <__fixunssfsi+0x34>
    14c2:	86 95       	lsr	r24
    14c4:	77 95       	ror	r23
    14c6:	67 95       	ror	r22
    14c8:	b3 95       	inc	r27
    14ca:	d9 f7       	brne	.-10     	; 0x14c2 <__fixunssfsi+0x42>
    14cc:	3e f4       	brtc	.+14     	; 0x14dc <__fixunssfsi+0x5c>
    14ce:	90 95       	com	r25
    14d0:	80 95       	com	r24
    14d2:	70 95       	com	r23
    14d4:	61 95       	neg	r22
    14d6:	7f 4f       	sbci	r23, 0xFF	; 255
    14d8:	8f 4f       	sbci	r24, 0xFF	; 255
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	08 95       	ret

000014de <__floatunsisf>:
    14de:	e8 94       	clt
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <__floatsisf+0x12>

000014e2 <__floatsisf>:
    14e2:	97 fb       	bst	r25, 7
    14e4:	3e f4       	brtc	.+14     	; 0x14f4 <__floatsisf+0x12>
    14e6:	90 95       	com	r25
    14e8:	80 95       	com	r24
    14ea:	70 95       	com	r23
    14ec:	61 95       	neg	r22
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	8f 4f       	sbci	r24, 0xFF	; 255
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	99 23       	and	r25, r25
    14f6:	a9 f0       	breq	.+42     	; 0x1522 <__floatsisf+0x40>
    14f8:	f9 2f       	mov	r31, r25
    14fa:	96 e9       	ldi	r25, 0x96	; 150
    14fc:	bb 27       	eor	r27, r27
    14fe:	93 95       	inc	r25
    1500:	f6 95       	lsr	r31
    1502:	87 95       	ror	r24
    1504:	77 95       	ror	r23
    1506:	67 95       	ror	r22
    1508:	b7 95       	ror	r27
    150a:	f1 11       	cpse	r31, r1
    150c:	f8 cf       	rjmp	.-16     	; 0x14fe <__floatsisf+0x1c>
    150e:	fa f4       	brpl	.+62     	; 0x154e <__floatsisf+0x6c>
    1510:	bb 0f       	add	r27, r27
    1512:	11 f4       	brne	.+4      	; 0x1518 <__floatsisf+0x36>
    1514:	60 ff       	sbrs	r22, 0
    1516:	1b c0       	rjmp	.+54     	; 0x154e <__floatsisf+0x6c>
    1518:	6f 5f       	subi	r22, 0xFF	; 255
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	8f 4f       	sbci	r24, 0xFF	; 255
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	16 c0       	rjmp	.+44     	; 0x154e <__floatsisf+0x6c>
    1522:	88 23       	and	r24, r24
    1524:	11 f0       	breq	.+4      	; 0x152a <__floatsisf+0x48>
    1526:	96 e9       	ldi	r25, 0x96	; 150
    1528:	11 c0       	rjmp	.+34     	; 0x154c <__floatsisf+0x6a>
    152a:	77 23       	and	r23, r23
    152c:	21 f0       	breq	.+8      	; 0x1536 <__floatsisf+0x54>
    152e:	9e e8       	ldi	r25, 0x8E	; 142
    1530:	87 2f       	mov	r24, r23
    1532:	76 2f       	mov	r23, r22
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <__floatsisf+0x5e>
    1536:	66 23       	and	r22, r22
    1538:	71 f0       	breq	.+28     	; 0x1556 <__floatsisf+0x74>
    153a:	96 e8       	ldi	r25, 0x86	; 134
    153c:	86 2f       	mov	r24, r22
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	2a f0       	brmi	.+10     	; 0x154e <__floatsisf+0x6c>
    1544:	9a 95       	dec	r25
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	da f7       	brpl	.-10     	; 0x1544 <__floatsisf+0x62>
    154e:	88 0f       	add	r24, r24
    1550:	96 95       	lsr	r25
    1552:	87 95       	ror	r24
    1554:	97 f9       	bld	r25, 7
    1556:	08 95       	ret

00001558 <__fp_inf>:
    1558:	97 f9       	bld	r25, 7
    155a:	9f 67       	ori	r25, 0x7F	; 127
    155c:	80 e8       	ldi	r24, 0x80	; 128
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	08 95       	ret

00001564 <__fp_nan>:
    1564:	9f ef       	ldi	r25, 0xFF	; 255
    1566:	80 ec       	ldi	r24, 0xC0	; 192
    1568:	08 95       	ret

0000156a <__fp_pscA>:
    156a:	00 24       	eor	r0, r0
    156c:	0a 94       	dec	r0
    156e:	16 16       	cp	r1, r22
    1570:	17 06       	cpc	r1, r23
    1572:	18 06       	cpc	r1, r24
    1574:	09 06       	cpc	r0, r25
    1576:	08 95       	ret

00001578 <__fp_pscB>:
    1578:	00 24       	eor	r0, r0
    157a:	0a 94       	dec	r0
    157c:	12 16       	cp	r1, r18
    157e:	13 06       	cpc	r1, r19
    1580:	14 06       	cpc	r1, r20
    1582:	05 06       	cpc	r0, r21
    1584:	08 95       	ret

00001586 <__fp_round>:
    1586:	09 2e       	mov	r0, r25
    1588:	03 94       	inc	r0
    158a:	00 0c       	add	r0, r0
    158c:	11 f4       	brne	.+4      	; 0x1592 <__fp_round+0xc>
    158e:	88 23       	and	r24, r24
    1590:	52 f0       	brmi	.+20     	; 0x15a6 <__fp_round+0x20>
    1592:	bb 0f       	add	r27, r27
    1594:	40 f4       	brcc	.+16     	; 0x15a6 <__fp_round+0x20>
    1596:	bf 2b       	or	r27, r31
    1598:	11 f4       	brne	.+4      	; 0x159e <__fp_round+0x18>
    159a:	60 ff       	sbrs	r22, 0
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <__fp_round+0x20>
    159e:	6f 5f       	subi	r22, 0xFF	; 255
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	8f 4f       	sbci	r24, 0xFF	; 255
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	08 95       	ret

000015a8 <__fp_split3>:
    15a8:	57 fd       	sbrc	r21, 7
    15aa:	90 58       	subi	r25, 0x80	; 128
    15ac:	44 0f       	add	r20, r20
    15ae:	55 1f       	adc	r21, r21
    15b0:	59 f0       	breq	.+22     	; 0x15c8 <__fp_splitA+0x10>
    15b2:	5f 3f       	cpi	r21, 0xFF	; 255
    15b4:	71 f0       	breq	.+28     	; 0x15d2 <__fp_splitA+0x1a>
    15b6:	47 95       	ror	r20

000015b8 <__fp_splitA>:
    15b8:	88 0f       	add	r24, r24
    15ba:	97 fb       	bst	r25, 7
    15bc:	99 1f       	adc	r25, r25
    15be:	61 f0       	breq	.+24     	; 0x15d8 <__fp_splitA+0x20>
    15c0:	9f 3f       	cpi	r25, 0xFF	; 255
    15c2:	79 f0       	breq	.+30     	; 0x15e2 <__fp_splitA+0x2a>
    15c4:	87 95       	ror	r24
    15c6:	08 95       	ret
    15c8:	12 16       	cp	r1, r18
    15ca:	13 06       	cpc	r1, r19
    15cc:	14 06       	cpc	r1, r20
    15ce:	55 1f       	adc	r21, r21
    15d0:	f2 cf       	rjmp	.-28     	; 0x15b6 <__fp_split3+0xe>
    15d2:	46 95       	lsr	r20
    15d4:	f1 df       	rcall	.-30     	; 0x15b8 <__fp_splitA>
    15d6:	08 c0       	rjmp	.+16     	; 0x15e8 <__fp_splitA+0x30>
    15d8:	16 16       	cp	r1, r22
    15da:	17 06       	cpc	r1, r23
    15dc:	18 06       	cpc	r1, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	f1 cf       	rjmp	.-30     	; 0x15c4 <__fp_splitA+0xc>
    15e2:	86 95       	lsr	r24
    15e4:	71 05       	cpc	r23, r1
    15e6:	61 05       	cpc	r22, r1
    15e8:	08 94       	sec
    15ea:	08 95       	ret

000015ec <__fp_zero>:
    15ec:	e8 94       	clt

000015ee <__fp_szero>:
    15ee:	bb 27       	eor	r27, r27
    15f0:	66 27       	eor	r22, r22
    15f2:	77 27       	eor	r23, r23
    15f4:	cb 01       	movw	r24, r22
    15f6:	97 f9       	bld	r25, 7
    15f8:	08 95       	ret

000015fa <__mulsf3>:
    15fa:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulsf3x>
    15fe:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__fp_round>
    1602:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_pscA>
    1606:	38 f0       	brcs	.+14     	; 0x1616 <__mulsf3+0x1c>
    1608:	0e 94 bc 0a 	call	0x1578	; 0x1578 <__fp_pscB>
    160c:	20 f0       	brcs	.+8      	; 0x1616 <__mulsf3+0x1c>
    160e:	95 23       	and	r25, r21
    1610:	11 f0       	breq	.+4      	; 0x1616 <__mulsf3+0x1c>
    1612:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_inf>
    1616:	0c 94 b2 0a 	jmp	0x1564	; 0x1564 <__fp_nan>
    161a:	11 24       	eor	r1, r1
    161c:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_szero>

00001620 <__mulsf3x>:
    1620:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_split3>
    1624:	70 f3       	brcs	.-36     	; 0x1602 <__mulsf3+0x8>

00001626 <__mulsf3_pse>:
    1626:	95 9f       	mul	r25, r21
    1628:	c1 f3       	breq	.-16     	; 0x161a <__mulsf3+0x20>
    162a:	95 0f       	add	r25, r21
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	55 1f       	adc	r21, r21
    1630:	62 9f       	mul	r22, r18
    1632:	f0 01       	movw	r30, r0
    1634:	72 9f       	mul	r23, r18
    1636:	bb 27       	eor	r27, r27
    1638:	f0 0d       	add	r31, r0
    163a:	b1 1d       	adc	r27, r1
    163c:	63 9f       	mul	r22, r19
    163e:	aa 27       	eor	r26, r26
    1640:	f0 0d       	add	r31, r0
    1642:	b1 1d       	adc	r27, r1
    1644:	aa 1f       	adc	r26, r26
    1646:	64 9f       	mul	r22, r20
    1648:	66 27       	eor	r22, r22
    164a:	b0 0d       	add	r27, r0
    164c:	a1 1d       	adc	r26, r1
    164e:	66 1f       	adc	r22, r22
    1650:	82 9f       	mul	r24, r18
    1652:	22 27       	eor	r18, r18
    1654:	b0 0d       	add	r27, r0
    1656:	a1 1d       	adc	r26, r1
    1658:	62 1f       	adc	r22, r18
    165a:	73 9f       	mul	r23, r19
    165c:	b0 0d       	add	r27, r0
    165e:	a1 1d       	adc	r26, r1
    1660:	62 1f       	adc	r22, r18
    1662:	83 9f       	mul	r24, r19
    1664:	a0 0d       	add	r26, r0
    1666:	61 1d       	adc	r22, r1
    1668:	22 1f       	adc	r18, r18
    166a:	74 9f       	mul	r23, r20
    166c:	33 27       	eor	r19, r19
    166e:	a0 0d       	add	r26, r0
    1670:	61 1d       	adc	r22, r1
    1672:	23 1f       	adc	r18, r19
    1674:	84 9f       	mul	r24, r20
    1676:	60 0d       	add	r22, r0
    1678:	21 1d       	adc	r18, r1
    167a:	82 2f       	mov	r24, r18
    167c:	76 2f       	mov	r23, r22
    167e:	6a 2f       	mov	r22, r26
    1680:	11 24       	eor	r1, r1
    1682:	9f 57       	subi	r25, 0x7F	; 127
    1684:	50 40       	sbci	r21, 0x00	; 0
    1686:	9a f0       	brmi	.+38     	; 0x16ae <__mulsf3_pse+0x88>
    1688:	f1 f0       	breq	.+60     	; 0x16c6 <__mulsf3_pse+0xa0>
    168a:	88 23       	and	r24, r24
    168c:	4a f0       	brmi	.+18     	; 0x16a0 <__mulsf3_pse+0x7a>
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	bb 1f       	adc	r27, r27
    1694:	66 1f       	adc	r22, r22
    1696:	77 1f       	adc	r23, r23
    1698:	88 1f       	adc	r24, r24
    169a:	91 50       	subi	r25, 0x01	; 1
    169c:	50 40       	sbci	r21, 0x00	; 0
    169e:	a9 f7       	brne	.-22     	; 0x168a <__mulsf3_pse+0x64>
    16a0:	9e 3f       	cpi	r25, 0xFE	; 254
    16a2:	51 05       	cpc	r21, r1
    16a4:	80 f0       	brcs	.+32     	; 0x16c6 <__mulsf3_pse+0xa0>
    16a6:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_inf>
    16aa:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_szero>
    16ae:	5f 3f       	cpi	r21, 0xFF	; 255
    16b0:	e4 f3       	brlt	.-8      	; 0x16aa <__mulsf3_pse+0x84>
    16b2:	98 3e       	cpi	r25, 0xE8	; 232
    16b4:	d4 f3       	brlt	.-12     	; 0x16aa <__mulsf3_pse+0x84>
    16b6:	86 95       	lsr	r24
    16b8:	77 95       	ror	r23
    16ba:	67 95       	ror	r22
    16bc:	b7 95       	ror	r27
    16be:	f7 95       	ror	r31
    16c0:	e7 95       	ror	r30
    16c2:	9f 5f       	subi	r25, 0xFF	; 255
    16c4:	c1 f7       	brne	.-16     	; 0x16b6 <__mulsf3_pse+0x90>
    16c6:	fe 2b       	or	r31, r30
    16c8:	88 0f       	add	r24, r24
    16ca:	91 1d       	adc	r25, r1
    16cc:	96 95       	lsr	r25
    16ce:	87 95       	ror	r24
    16d0:	97 f9       	bld	r25, 7
    16d2:	08 95       	ret

000016d4 <do_rand>:
    16d4:	8f 92       	push	r8
    16d6:	9f 92       	push	r9
    16d8:	af 92       	push	r10
    16da:	bf 92       	push	r11
    16dc:	cf 92       	push	r12
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	ec 01       	movw	r28, r24
    16ea:	68 81       	ld	r22, Y
    16ec:	79 81       	ldd	r23, Y+1	; 0x01
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	9b 81       	ldd	r25, Y+3	; 0x03
    16f2:	61 15       	cp	r22, r1
    16f4:	71 05       	cpc	r23, r1
    16f6:	81 05       	cpc	r24, r1
    16f8:	91 05       	cpc	r25, r1
    16fa:	21 f4       	brne	.+8      	; 0x1704 <do_rand+0x30>
    16fc:	64 e2       	ldi	r22, 0x24	; 36
    16fe:	79 ed       	ldi	r23, 0xD9	; 217
    1700:	8b e5       	ldi	r24, 0x5B	; 91
    1702:	97 e0       	ldi	r25, 0x07	; 7
    1704:	2d e1       	ldi	r18, 0x1D	; 29
    1706:	33 ef       	ldi	r19, 0xF3	; 243
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__divmodsi4>
    1710:	49 01       	movw	r8, r18
    1712:	5a 01       	movw	r10, r20
    1714:	9b 01       	movw	r18, r22
    1716:	ac 01       	movw	r20, r24
    1718:	a7 ea       	ldi	r26, 0xA7	; 167
    171a:	b1 e4       	ldi	r27, 0x41	; 65
    171c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__muluhisi3>
    1720:	6b 01       	movw	r12, r22
    1722:	7c 01       	movw	r14, r24
    1724:	ac ee       	ldi	r26, 0xEC	; 236
    1726:	b4 ef       	ldi	r27, 0xF4	; 244
    1728:	a5 01       	movw	r20, r10
    172a:	94 01       	movw	r18, r8
    172c:	0e 94 09 0c 	call	0x1812	; 0x1812 <__mulohisi3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	8c 0d       	add	r24, r12
    1736:	9d 1d       	adc	r25, r13
    1738:	ae 1d       	adc	r26, r14
    173a:	bf 1d       	adc	r27, r15
    173c:	b7 ff       	sbrs	r27, 7
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <do_rand+0x72>
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	a1 09       	sbc	r26, r1
    1744:	b0 48       	sbci	r27, 0x80	; 128
    1746:	88 83       	st	Y, r24
    1748:	99 83       	std	Y+1, r25	; 0x01
    174a:	aa 83       	std	Y+2, r26	; 0x02
    174c:	bb 83       	std	Y+3, r27	; 0x03
    174e:	9f 77       	andi	r25, 0x7F	; 127
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	ff 90       	pop	r15
    1756:	ef 90       	pop	r14
    1758:	df 90       	pop	r13
    175a:	cf 90       	pop	r12
    175c:	bf 90       	pop	r11
    175e:	af 90       	pop	r10
    1760:	9f 90       	pop	r9
    1762:	8f 90       	pop	r8
    1764:	08 95       	ret

00001766 <rand_r>:
    1766:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <do_rand>
    176a:	08 95       	ret

0000176c <rand>:
    176c:	87 e0       	ldi	r24, 0x07	; 7
    176e:	91 e0       	ldi	r25, 0x01	; 1
    1770:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <do_rand>
    1774:	08 95       	ret

00001776 <srand>:
    1776:	a0 e0       	ldi	r26, 0x00	; 0
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    177e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    1782:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    1786:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    178a:	08 95       	ret

0000178c <eeprom_read_byte>:
    178c:	f9 99       	sbic	0x1f, 1	; 31
    178e:	fe cf       	rjmp	.-4      	; 0x178c <eeprom_read_byte>
    1790:	92 bd       	out	0x22, r25	; 34
    1792:	81 bd       	out	0x21, r24	; 33
    1794:	f8 9a       	sbi	0x1f, 0	; 31
    1796:	99 27       	eor	r25, r25
    1798:	80 b5       	in	r24, 0x20	; 32
    179a:	08 95       	ret

0000179c <eeprom_write_byte>:
    179c:	26 2f       	mov	r18, r22

0000179e <eeprom_write_r18>:
    179e:	f9 99       	sbic	0x1f, 1	; 31
    17a0:	fe cf       	rjmp	.-4      	; 0x179e <eeprom_write_r18>
    17a2:	1f ba       	out	0x1f, r1	; 31
    17a4:	92 bd       	out	0x22, r25	; 34
    17a6:	81 bd       	out	0x21, r24	; 33
    17a8:	20 bd       	out	0x20, r18	; 32
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	fa 9a       	sbi	0x1f, 2	; 31
    17b0:	f9 9a       	sbi	0x1f, 1	; 31
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	08 95       	ret

000017b8 <__divmodsi4>:
    17b8:	05 2e       	mov	r0, r21
    17ba:	97 fb       	bst	r25, 7
    17bc:	1e f4       	brtc	.+6      	; 0x17c4 <__divmodsi4+0xc>
    17be:	00 94       	com	r0
    17c0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__negsi2>
    17c4:	57 fd       	sbrc	r21, 7
    17c6:	07 d0       	rcall	.+14     	; 0x17d6 <__divmodsi4_neg2>
    17c8:	0e 94 0e 0c 	call	0x181c	; 0x181c <__udivmodsi4>
    17cc:	07 fc       	sbrc	r0, 7
    17ce:	03 d0       	rcall	.+6      	; 0x17d6 <__divmodsi4_neg2>
    17d0:	4e f4       	brtc	.+18     	; 0x17e4 <__divmodsi4_exit>
    17d2:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__negsi2>

000017d6 <__divmodsi4_neg2>:
    17d6:	50 95       	com	r21
    17d8:	40 95       	com	r20
    17da:	30 95       	com	r19
    17dc:	21 95       	neg	r18
    17de:	3f 4f       	sbci	r19, 0xFF	; 255
    17e0:	4f 4f       	sbci	r20, 0xFF	; 255
    17e2:	5f 4f       	sbci	r21, 0xFF	; 255

000017e4 <__divmodsi4_exit>:
    17e4:	08 95       	ret

000017e6 <__negsi2>:
    17e6:	90 95       	com	r25
    17e8:	80 95       	com	r24
    17ea:	70 95       	com	r23
    17ec:	61 95       	neg	r22
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	8f 4f       	sbci	r24, 0xFF	; 255
    17f2:	9f 4f       	sbci	r25, 0xFF	; 255
    17f4:	08 95       	ret

000017f6 <__muluhisi3>:
    17f6:	0e 94 37 09 	call	0x126e	; 0x126e <__umulhisi3>
    17fa:	a5 9f       	mul	r26, r21
    17fc:	90 0d       	add	r25, r0
    17fe:	b4 9f       	mul	r27, r20
    1800:	90 0d       	add	r25, r0
    1802:	a4 9f       	mul	r26, r20
    1804:	80 0d       	add	r24, r0
    1806:	91 1d       	adc	r25, r1
    1808:	11 24       	eor	r1, r1
    180a:	08 95       	ret

0000180c <__mulshisi3>:
    180c:	b7 ff       	sbrs	r27, 7
    180e:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__muluhisi3>

00001812 <__mulohisi3>:
    1812:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__muluhisi3>
    1816:	82 1b       	sub	r24, r18
    1818:	93 0b       	sbc	r25, r19
    181a:	08 95       	ret

0000181c <__udivmodsi4>:
    181c:	a1 e2       	ldi	r26, 0x21	; 33
    181e:	1a 2e       	mov	r1, r26
    1820:	aa 1b       	sub	r26, r26
    1822:	bb 1b       	sub	r27, r27
    1824:	fd 01       	movw	r30, r26
    1826:	0d c0       	rjmp	.+26     	; 0x1842 <__udivmodsi4_ep>

00001828 <__udivmodsi4_loop>:
    1828:	aa 1f       	adc	r26, r26
    182a:	bb 1f       	adc	r27, r27
    182c:	ee 1f       	adc	r30, r30
    182e:	ff 1f       	adc	r31, r31
    1830:	a2 17       	cp	r26, r18
    1832:	b3 07       	cpc	r27, r19
    1834:	e4 07       	cpc	r30, r20
    1836:	f5 07       	cpc	r31, r21
    1838:	20 f0       	brcs	.+8      	; 0x1842 <__udivmodsi4_ep>
    183a:	a2 1b       	sub	r26, r18
    183c:	b3 0b       	sbc	r27, r19
    183e:	e4 0b       	sbc	r30, r20
    1840:	f5 0b       	sbc	r31, r21

00001842 <__udivmodsi4_ep>:
    1842:	66 1f       	adc	r22, r22
    1844:	77 1f       	adc	r23, r23
    1846:	88 1f       	adc	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	1a 94       	dec	r1
    184c:	69 f7       	brne	.-38     	; 0x1828 <__udivmodsi4_loop>
    184e:	60 95       	com	r22
    1850:	70 95       	com	r23
    1852:	80 95       	com	r24
    1854:	90 95       	com	r25
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	bd 01       	movw	r22, r26
    185c:	cf 01       	movw	r24, r30
    185e:	08 95       	ret

00001860 <_exit>:
    1860:	f8 94       	cli

00001862 <__stop_program>:
    1862:	ff cf       	rjmp	.-2      	; 0x1862 <__stop_program>
