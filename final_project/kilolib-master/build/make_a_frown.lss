
build/make_a_frown.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	30 06       	cpc	r3, r16
      6a:	87 06       	cpc	r8, r23
      6c:	9b 06       	cpc	r9, r27
      6e:	cc 06       	cpc	r12, r28
      70:	d3 06       	cpc	r13, r19
      72:	b2 06       	cpc	r11, r18
      74:	d6 06       	cpc	r13, r22
      76:	34 08       	sbc	r3, r4
      78:	25 09       	sbc	r18, r5
      7a:	25 09       	sbc	r18, r5
      7c:	3d 08       	sbc	r3, r13
      7e:	40 08       	sbc	r4, r0
      80:	43 08       	sbc	r4, r3
      82:	45 08       	sbc	r4, r5
      84:	47 08       	sbc	r4, r7
      86:	49 08       	sbc	r4, r9
      88:	fa 08       	sbc	r15, r10
      8a:	5b 08       	sbc	r5, r11

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e6 e0       	ldi	r30, 0x06	; 6
      b8:	fa e1       	ldi	r31, 0x1A	; 26
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 39       	cpi	r26, 0x9E	; 158
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <main>
      da:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx>:
    }
    new_message = 1;
}

message_t *message_tx() 
{
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
    // Transmit my ID number
    msg.type = NORMAL;
      e6:	cb e2       	ldi	r28, 0x2B	; 43
      e8:	d1 e0       	ldi	r29, 0x01	; 1
      ea:	19 86       	std	Y+9, r1	; 0x09
    msg.data[0] = (uint8_t) kilo_uid; // just incase
      ec:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <kilo_uid>
      f0:	88 83       	st	Y, r24
    msg.data[1] = (uint8_t) kilo_made_it; // message indicating that this kilobot has made it to their target
      f2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <kilo_made_it>
      f6:	89 83       	std	Y+1, r24	; 0x01
    
    msg.crc = message_crc(&msg);
      f8:	ce 01       	movw	r24, r28
      fa:	0e 94 38 09 	call	0x1270	; 0x1270 <message_crc>
      fe:	9b 87       	std	Y+11, r25	; 0x0b
     100:	8a 87       	std	Y+10, r24	; 0x0a

    return &msg;
}
     102:	ce 01       	movw	r24, r28
     104:	df 91       	pop	r29
     106:	cf 91       	pop	r28
     108:	08 95       	ret

0000010a <setup>:
    }
}

void setup() 
{ 
    msg.type = NORMAL;
     10a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <msg+0x9>
    msg.data[0] = kilo_uid;
     10e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <kilo_uid>
     112:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <msg>
    msg.data[1] = 0;
     116:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <msg+0x1>
    msg.data[2] = 0;
     11a:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <msg+0x2>
    msg.data[3] = 0;
     11e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <msg+0x3>
    msg.data[4] = 0;
     122:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <msg+0x4>
    msg.data[5] = 0;
     126:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <msg+0x5>
    msg.data[6] = 0;
     12a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <msg+0x6>
    msg.data[7] = 0;
     12e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <msg+0x7>
    msg.crc = message_crc(&msg);
     132:	8b e2       	ldi	r24, 0x2B	; 43
     134:	91 e0       	ldi	r25, 0x01	; 1
     136:	0e 94 38 09 	call	0x1270	; 0x1270 <message_crc>
     13a:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <msg+0xb>
     13e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <msg+0xa>
    if(kilo_uid == 0)
     142:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <kilo_uid>
     146:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <kilo_uid+0x1>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	11 f4       	brne	.+4      	; 0x152 <setup+0x48>
    {
        set_color(RGB(1,0,0));
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	17 c0       	rjmp	.+46     	; 0x180 <setup+0x76>
    }
    else if(kilo_uid == 1)
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	91 05       	cpc	r25, r1
     156:	11 f4       	brne	.+4      	; 0x15c <setup+0x52>
    {
        set_color(RGB(0,1,0));
     158:	84 e0       	ldi	r24, 0x04	; 4
     15a:	12 c0       	rjmp	.+36     	; 0x180 <setup+0x76>
    }
    else if(kilo_uid == 2)
     15c:	82 30       	cpi	r24, 0x02	; 2
     15e:	91 05       	cpc	r25, r1
     160:	11 f4       	brne	.+4      	; 0x166 <setup+0x5c>
    {
        set_color(RGB(0,0,1));
     162:	80 e1       	ldi	r24, 0x10	; 16
     164:	0d c0       	rjmp	.+26     	; 0x180 <setup+0x76>
    }
    else if(kilo_uid == 3)
     166:	83 30       	cpi	r24, 0x03	; 3
     168:	91 05       	cpc	r25, r1
     16a:	11 f4       	brne	.+4      	; 0x170 <setup+0x66>
    {
        set_color(RGB(1,1,0));
     16c:	85 e0       	ldi	r24, 0x05	; 5
     16e:	08 c0       	rjmp	.+16     	; 0x180 <setup+0x76>
    }
    else if(kilo_uid == 4)
     170:	84 30       	cpi	r24, 0x04	; 4
     172:	91 05       	cpc	r25, r1
     174:	11 f4       	brne	.+4      	; 0x17a <setup+0x70>
    {
        set_color(RGB(1,0,1));
     176:	81 e1       	ldi	r24, 0x11	; 17
     178:	03 c0       	rjmp	.+6      	; 0x180 <setup+0x76>
    }
    else if(kilo_uid == 5)
     17a:	05 97       	sbiw	r24, 0x05	; 5
     17c:	19 f4       	brne	.+6      	; 0x184 <setup+0x7a>
    {
        set_color(RGB(0,1,1));
     17e:	84 e1       	ldi	r24, 0x14	; 20
     180:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <set_color>
     184:	08 95       	ret

00000186 <message_rx>:
    }
}

// read message, and get the distance
void message_rx(message_t *m, distance_measurement_t *d) 
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	ec 01       	movw	r28, r24
     18c:	cb 01       	movw	r24, r22
    // When I've recieved a message, figure out who it's from
    friend_uid = m->data[0];
     18e:	28 81       	ld	r18, Y
     190:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <friend_uid>
    if(friend_uid == 0)
     194:	21 11       	cpse	r18, r1
     196:	0e c0       	rjmp	.+28     	; 0x1b4 <message_rx+0x2e>
    {
        kilo_dist_0 = estimate_distance(d);
     198:	0e 94 09 04 	call	0x812	; 0x812 <estimate_distance>
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <kilo_dist_0+0x1>
     1a2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <kilo_dist_0>
        kilo_made_it_0 = m->data[1];
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <kilo_made_it_0+0x1>
     1ae:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <kilo_made_it_0>
     1b2:	4f c0       	rjmp	.+158    	; 0x252 <message_rx+0xcc>
    }
    else if(friend_uid == 1)
     1b4:	21 30       	cpi	r18, 0x01	; 1
     1b6:	71 f4       	brne	.+28     	; 0x1d4 <message_rx+0x4e>
    {
        kilo_dist_1 = estimate_distance(d);
     1b8:	0e 94 09 04 	call	0x812	; 0x812 <estimate_distance>
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <kilo_dist_1+0x1>
     1c2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <kilo_dist_1>
        kilo_made_it_1 = m->data[1];
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <kilo_made_it_1+0x1>
     1ce:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <kilo_made_it_1>
     1d2:	3f c0       	rjmp	.+126    	; 0x252 <message_rx+0xcc>

    }
    else if(friend_uid == 2)
     1d4:	22 30       	cpi	r18, 0x02	; 2
     1d6:	71 f4       	brne	.+28     	; 0x1f4 <message_rx+0x6e>
    {
        kilo_dist_2 = estimate_distance(d);
     1d8:	0e 94 09 04 	call	0x812	; 0x812 <estimate_distance>
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <kilo_dist_2+0x1>
     1e2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <kilo_dist_2>
        kilo_made_it_2 = m->data[1];
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <kilo_made_it_2+0x1>
     1ee:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_made_it_2>
     1f2:	2f c0       	rjmp	.+94     	; 0x252 <message_rx+0xcc>

    }
    else if(friend_uid == 3)
     1f4:	23 30       	cpi	r18, 0x03	; 3
     1f6:	71 f4       	brne	.+28     	; 0x214 <message_rx+0x8e>
    {
        kilo_dist_3 = estimate_distance(d);
     1f8:	0e 94 09 04 	call	0x812	; 0x812 <estimate_distance>
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <kilo_dist_3+0x1>
     202:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <kilo_dist_3>
        kilo_made_it_3 = m->data[1];
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <kilo_made_it_3+0x1>
     20e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <kilo_made_it_3>
     212:	1f c0       	rjmp	.+62     	; 0x252 <message_rx+0xcc>

    }
    else if(friend_uid == 4)
     214:	24 30       	cpi	r18, 0x04	; 4
     216:	71 f4       	brne	.+28     	; 0x234 <message_rx+0xae>
    {
        kilo_dist_4 = estimate_distance(d);
     218:	0e 94 09 04 	call	0x812	; 0x812 <estimate_distance>
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <kilo_dist_4+0x1>
     222:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <kilo_dist_4>
        kilo_made_it_4 = m->data[1];
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <kilo_made_it_4+0x1>
     22e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <kilo_made_it_4>
     232:	0f c0       	rjmp	.+30     	; 0x252 <message_rx+0xcc>

    }
    else if(friend_uid == 5)
     234:	25 30       	cpi	r18, 0x05	; 5
     236:	69 f4       	brne	.+26     	; 0x252 <message_rx+0xcc>
    {
        kilo_dist_5 = estimate_distance(d);
     238:	0e 94 09 04 	call	0x812	; 0x812 <estimate_distance>
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <kilo_dist_5+0x1>
     242:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <kilo_dist_5>
        kilo_made_it_5 = m->data[1];
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <kilo_made_it_5+0x1>
     24e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <kilo_made_it_5>
    }
    new_message = 1;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <new_message>
}
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <set_motion>:
distance_measurement_t dist_measure;

void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
     25e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <current_motion>
     262:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <current_motion+0x1>
     266:	28 17       	cp	r18, r24
     268:	39 07       	cpc	r19, r25
     26a:	21 f1       	breq	.+72     	; 0x2b4 <set_motion+0x56>
    {
        current_motion = new_motion;
     26c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <current_motion+0x1>
     270:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <current_motion>
        
        if (current_motion == STOP)
     274:	00 97       	sbiw	r24, 0x00	; 0
     276:	11 f4       	brne	.+4      	; 0x27c <set_motion+0x1e>
        {
            set_motors(0, 0);
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	19 c0       	rjmp	.+50     	; 0x2ae <set_motion+0x50>
        }
        else if (current_motion == FORWARD)
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	91 05       	cpc	r25, r1
     280:	39 f4       	brne	.+14     	; 0x290 <set_motion+0x32>
        {
            spinup_motors();
     282:	0e 94 30 03 	call	0x660	; 0x660 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     286:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <kilo_straight_right>
     28a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <kilo_straight_left>
     28e:	10 c0       	rjmp	.+32     	; 0x2b0 <set_motion+0x52>
        }
        else if (current_motion == LEFT)
     290:	82 30       	cpi	r24, 0x02	; 2
     292:	91 05       	cpc	r25, r1
     294:	31 f4       	brne	.+12     	; 0x2a2 <set_motion+0x44>
        {
            spinup_motors();
     296:	0e 94 30 03 	call	0x660	; 0x660 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <kilo_turn_left>
     2a0:	07 c0       	rjmp	.+14     	; 0x2b0 <set_motion+0x52>
        }
        else if (current_motion == RIGHT)
     2a2:	03 97       	sbiw	r24, 0x03	; 3
     2a4:	39 f4       	brne	.+14     	; 0x2b4 <set_motion+0x56>
        {
            spinup_motors();
     2a6:	0e 94 30 03 	call	0x660	; 0x660 <spinup_motors>
            set_motors(0, kilo_turn_right);
     2aa:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <kilo_turn_right>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	0c 94 2b 03 	jmp	0x656	; 0x656 <set_motors>
     2b4:	08 95       	ret

000002b6 <loop>:

}


void loop() 
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
    // FROM TOP - BOTTOM:
    // 0 1 2 3 4 5
    if(new_message == 1)
     2ba:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <new_message>
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	09 f0       	breq	.+2      	; 0x2c4 <loop+0xe>
     2c2:	ba c0       	rjmp	.+372    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
    {
        new_message = 0;
     2c4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <new_message>
        if(kilo_made_it_2 == 0)
     2c8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <kilo_made_it_2>
     2cc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <kilo_made_it_2+0x1>
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	e9 f4       	brne	.+58     	; 0x30e <loop+0x58>
        {
            if(kilo_uid == 2)
     2d4:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <kilo_uid>
     2d8:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <kilo_uid+0x1>
     2dc:	02 97       	sbiw	r24, 0x02	; 2
     2de:	09 f0       	breq	.+2      	; 0x2e2 <loop+0x2c>
     2e0:	ab c0       	rjmp	.+342    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
            {

                if(kilo_dist_1 < 85)
     2e2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <kilo_dist_1>
     2e6:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <kilo_dist_1+0x1>
     2ea:	85 35       	cpi	r24, 0x55	; 85
     2ec:	91 05       	cpc	r25, r1
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <loop+0x3c>
     2f0:	9d c0       	rjmp	.+314    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
                {
                    set_motion(FORWARD);
                }
                else{
                    set_motion(STOP);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 2f 01 	call	0x25e	; 0x25e <set_motion>
                    set_color(RGB(1,1,1));
     2fa:	85 e1       	ldi	r24, 0x15	; 21
     2fc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_color>
                    kilo_made_it_2 = 1;
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <kilo_made_it_2+0x1>
     308:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <kilo_made_it_2>
     30c:	2e c0       	rjmp	.+92     	; 0x36a <loop+0xb4>
                    count = 0;
                }
            }
        }
        else if(kilo_made_it_4 == 0 && kilo_made_it_2 == 1)
     30e:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <kilo_made_it_4>
     312:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <kilo_made_it_4+0x1>
     316:	20 97       	sbiw	r28, 0x00	; 0
     318:	69 f5       	brne	.+90     	; 0x374 <loop+0xbe>
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	59 f5       	brne	.+86     	; 0x374 <loop+0xbe>
        {
            if(kilo_uid == 4)
     31e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <kilo_uid>
     322:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <kilo_uid+0x1>
     326:	04 97       	sbiw	r24, 0x04	; 4
     328:	09 f0       	breq	.+2      	; 0x32c <loop+0x76>
     32a:	86 c0       	rjmp	.+268    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
            {
                if(kilo_dist_2 < 80)
     32c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <kilo_dist_2>
     330:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <kilo_dist_2+0x1>
     334:	80 35       	cpi	r24, 0x50	; 80
     336:	91 05       	cpc	r25, r1
     338:	5c f4       	brge	.+22     	; 0x350 <loop+0x9a>
                {
                    set_motion(LEFT);
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 2f 01 	call	0x25e	; 0x25e <set_motion>
                    set_motion(FORWARD);
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 2f 01 	call	0x25e	; 0x25e <set_motion>
                    set_motion(LEFT);
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	70 c0       	rjmp	.+224    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>

                }
                else{
                    set_motion(STOP);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 2f 01 	call	0x25e	; 0x25e <set_motion>
                    set_color(RGB(1,1,1));
     358:	85 e1       	ldi	r24, 0x15	; 21
     35a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_color>
                    kilo_made_it_4 = 1;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <kilo_made_it_4+0x1>
     366:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <kilo_made_it_4>
                    count = 0;
     36a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <count+0x1>
     36e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <count>
     372:	62 c0       	rjmp	.+196    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
                }
            }
        }
        else if(kilo_made_it_5 == 0 && kilo_made_it_4 == 1 && kilo_made_it_3 == 1 && kilo_made_it_1 == 1)
     374:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <kilo_made_it_5>
     378:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <kilo_made_it_5+0x1>
     37c:	00 97       	sbiw	r24, 0x00	; 0
     37e:	71 f5       	brne	.+92     	; 0x3dc <loop+0x126>
     380:	c1 30       	cpi	r28, 0x01	; 1
     382:	d1 05       	cpc	r29, r1
     384:	59 f5       	brne	.+86     	; 0x3dc <loop+0x126>
     386:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <kilo_made_it_3>
     38a:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <kilo_made_it_3+0x1>
     38e:	21 30       	cpi	r18, 0x01	; 1
     390:	31 05       	cpc	r19, r1
     392:	21 f5       	brne	.+72     	; 0x3dc <loop+0x126>
     394:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <kilo_made_it_1>
     398:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <kilo_made_it_1+0x1>
     39c:	21 30       	cpi	r18, 0x01	; 1
     39e:	31 05       	cpc	r19, r1
     3a0:	e9 f4       	brne	.+58     	; 0x3dc <loop+0x126>
        {
            if(kilo_uid == 5)
     3a2:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <kilo_uid>
     3a6:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <kilo_uid+0x1>
     3aa:	05 97       	sbiw	r24, 0x05	; 5
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <loop+0xfa>
     3ae:	44 c0       	rjmp	.+136    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
            {
                if(kilo_dist_2 < 75)
     3b0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <kilo_dist_2>
     3b4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <kilo_dist_2+0x1>
     3b8:	8b 34       	cpi	r24, 0x4B	; 75
     3ba:	91 05       	cpc	r25, r1
     3bc:	1c f4       	brge	.+6      	; 0x3c4 <loop+0x10e>
                {
                    set_motion(LEFT);
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	32 c0       	rjmp	.+100    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
                    set_motion(FORWARD);

                }
                else{
                    set_motion(STOP);
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 2f 01 	call	0x25e	; 0x25e <set_motion>
                    set_color(RGB(1,1,1));
     3cc:	85 e1       	ldi	r24, 0x15	; 21
     3ce:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_color>
                    kilo_made_it_5 = 1;
     3d2:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <kilo_made_it_5+0x1>
     3d6:	c0 93 0e 01 	sts	0x010E, r28	; 0x80010e <kilo_made_it_5>
     3da:	c7 cf       	rjmp	.-114    	; 0x36a <loop+0xb4>
                    count = 0;
                }
            }
        }
        else if(kilo_made_it_0 == 0 && kilo_made_it_5 == 1 && kilo_made_it_4 == 1 && kilo_made_it_3 == 1 && kilo_made_it_1 == 1)
     3dc:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <kilo_made_it_0>
     3e0:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <kilo_made_it_0+0x1>
     3e4:	23 2b       	or	r18, r19
     3e6:	41 f5       	brne	.+80     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	31 f5       	brne	.+76     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     3ec:	21 97       	sbiw	r28, 0x01	; 1
     3ee:	21 f5       	brne	.+72     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     3f0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <kilo_made_it_3>
     3f4:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <kilo_made_it_3+0x1>
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f4       	brne	.+60     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     3fc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <kilo_made_it_1>
     400:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <kilo_made_it_1+0x1>
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	c1 f4       	brne	.+48     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
        {
            if(kilo_uid == 0)
     408:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <kilo_uid>
     40c:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <kilo_uid+0x1>
     410:	89 2b       	or	r24, r25
     412:	91 f4       	brne	.+36     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
            {
                if(kilo_dist_2 < 75)
     414:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <kilo_dist_2>
     418:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <kilo_dist_2+0x1>
     41c:	8b 34       	cpi	r24, 0x4B	; 75
     41e:	91 05       	cpc	r25, r1
     420:	0c f0       	brlt	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     422:	96 cf       	rjmp	.-212    	; 0x350 <loop+0x9a>
                {
                    set_motion(RIGHT);
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 2f 01 	call	0x25e	; 0x25e <set_motion>
                    set_motion(FORWARD);
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
                    count = 0;
                }
            }
        }
    }
}
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
            if(kilo_uid == 0)
            {
                if(kilo_dist_2 < 75)
                {
                    set_motion(RIGHT);
                    set_motion(FORWARD);
     434:	0c 94 2f 01 	jmp	0x25e	; 0x25e <set_motion>
                    count = 0;
                }
            }
        }
    }
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     43e:	08 95       	ret

00000440 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	08 95       	ret

00000446 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     446:	08 95       	ret

00000448 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     448:	df 92       	push	r13
     44a:	ef 92       	push	r14
     44c:	ff 92       	push	r15
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
    cli();
     456:	f8 94       	cli

    ports_off();
     458:	14 b8       	out	0x04, r1	; 4
     45a:	17 b8       	out	0x07, r1	; 7
     45c:	1a b8       	out	0x0a, r1	; 10
     45e:	15 b8       	out	0x05, r1	; 5
     460:	18 b8       	out	0x08, r1	; 8
     462:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     464:	52 9a       	sbi	0x0a, 2	; 10
     466:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     468:	14 bc       	out	0x24, r1	; 36
     46a:	85 e0       	ldi	r24, 0x05	; 5
     46c:	85 bd       	out	0x25, r24	; 37
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	87 bd       	out	0x27, r24	; 39
     472:	82 e0       	ldi	r24, 0x02	; 2
     474:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     478:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     47c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     480:	2f e8       	ldi	r18, 0x8F	; 143
     482:	3b e0       	ldi	r19, 0x0B	; 11
     484:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     488:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     48c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     490:	53 98       	cbi	0x0a, 3	; 10
     492:	23 98       	cbi	0x04, 3	; 4
     494:	91 ea       	ldi	r25, 0xA1	; 161
     496:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     49a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     49e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     4a2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     4a6:	8b e0       	ldi	r24, 0x0B	; 11
     4a8:	80 bf       	out	0x30, r24	; 48
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     4b0:	86 e0       	ldi	r24, 0x06	; 6
     4b2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4b6:	83 e8       	ldi	r24, 0x83	; 131
     4b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4c0:	80 64       	ori	r24, 0x40	; 64
     4c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4ca:	86 fd       	sbrc	r24, 6
     4cc:	fc cf       	rjmp	.-8      	; 0x4c6 <kilo_init+0x7e>
    adc_trigger_high_gain();
     4ce:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4d2:	83 ea       	ldi	r24, 0xA3	; 163
     4d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
    if (osccal != 0xFF)
     4e6:	8f 3f       	cpi	r24, 0xFF	; 255
     4e8:	11 f0       	breq	.+4      	; 0x4ee <kilo_init+0xa6>
        OSCCAL = osccal;
     4ea:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     4ee:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <rx_busy>
    rx_leadingbit = 1;
     4f2:	c1 e0       	ldi	r28, 0x01	; 1
     4f4:	c0 93 40 01 	sts	0x0140, r28	; 0x800140 <rx_leadingbit>
    rx_leadingbyte = 1;
     4f8:	c0 93 84 01 	sts	0x0184, r28	; 0x800184 <rx_leadingbyte>
    rx_byteindex = 0;
     4fc:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rx_byteindex>
    rx_bytevalue = 0;
     500:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     504:	80 e9       	ldi	r24, 0x90	; 144
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
     50c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     510:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <tx_mask>
     514:	88 73       	andi	r24, 0x38	; 56
     516:	11 f0       	breq	.+4      	; 0x51c <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     518:	c0 93 5d 01 	sts	0x015D, r28	; 0x80015d <tx_mask>
    tx_clock = 0;
     51c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <tx_clock+0x1>
     520:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <tx_clock>
    tx_increment = 255;
     524:	8f ef       	ldi	r24, 0xFF	; 255
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <tx_increment+0x1>
     52c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <tx_increment>
    kilo_ticks = 0;
     530:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <kilo_ticks>
     534:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <kilo_ticks+0x1>
     538:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <kilo_ticks+0x2>
     53c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <kilo_ticks+0x3>
    kilo_state = IDLE;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
    kilo_tx_period = 3906;
     546:	82 e4       	ldi	r24, 0x42	; 66
     548:	9f e0       	ldi	r25, 0x0F	; 15
     54a:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <kilo_tx_period+0x1>
     54e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     552:	80 eb       	ldi	r24, 0xB0	; 176
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
     55a:	c8 2f       	mov	r28, r24
     55c:	81 eb       	ldi	r24, 0xB1	; 177
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
     564:	2c 2f       	mov	r18, r28
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	38 2b       	or	r19, r24
     56a:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <kilo_uid+0x1>
     56e:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     572:	85 e0       	ldi	r24, 0x05	; 5
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
     57a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     57e:	89 e0       	ldi	r24, 0x09	; 9
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
     586:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     58a:	8c e0       	ldi	r24, 0x0C	; 12
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
     592:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     596:	84 e1       	ldi	r24, 0x14	; 20
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
     59e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <kilo_straight_right>
     5a2:	08 e6       	ldi	r16, 0x68	; 104
     5a4:	11 e0       	ldi	r17, 0x01	; 1
     5a6:	51 e4       	ldi	r21, 0x41	; 65
     5a8:	e5 2e       	mov	r14, r21
     5aa:	51 e0       	ldi	r21, 0x01	; 1
     5ac:	f5 2e       	mov	r15, r21
     5ae:	c0 e2       	ldi	r28, 0x20	; 32
     5b0:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     5b2:	ce 01       	movw	r24, r28
     5b4:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
     5b8:	d8 2e       	mov	r13, r24
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
     5c2:	2d 2d       	mov	r18, r13
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	32 2f       	mov	r19, r18
     5c8:	22 27       	eor	r18, r18
     5ca:	28 2b       	or	r18, r24
     5cc:	f8 01       	movw	r30, r16
     5ce:	21 93       	st	Z+, r18
     5d0:	31 93       	st	Z+, r19
     5d2:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     5d4:	ce 01       	movw	r24, r28
     5d6:	c0 96       	adiw	r24, 0x30	; 48
     5d8:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
     5dc:	d8 2e       	mov	r13, r24
     5de:	ce 01       	movw	r24, r28
     5e0:	c1 96       	adiw	r24, 0x31	; 49
     5e2:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_read_byte>
     5e6:	2d 2d       	mov	r18, r13
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	32 2f       	mov	r19, r18
     5ec:	22 27       	eor	r18, r18
     5ee:	28 2b       	or	r18, r24
     5f0:	f7 01       	movw	r30, r14
     5f2:	21 93       	st	Z+, r18
     5f4:	31 93       	st	Z+, r19
     5f6:	7f 01       	movw	r14, r30
     5f8:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     5fa:	cc 33       	cpi	r28, 0x3C	; 60
     5fc:	d1 05       	cpc	r29, r1
     5fe:	c9 f6       	brne	.-78     	; 0x5b2 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     600:	78 94       	sei
}
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	08 95       	ret

00000612 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	8f 93       	push	r24
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	a8 95       	wdr
     624:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     628:	88 61       	ori	r24, 0x18	; 24
     62a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     62e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     632:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     634:	8f 91       	pop	r24
     636:	0f 90       	pop	r0
     638:	0f be       	out	0x3f, r0	; 63
     63a:	0f 90       	pop	r0
     63c:	1f 90       	pop	r1
     63e:	18 95       	reti

00000640 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     640:	00 97       	sbiw	r24, 0x00	; 0
     642:	41 f0       	breq	.+16     	; 0x654 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     644:	ef ec       	ldi	r30, 0xCF	; 207
     646:	f7 e0       	ldi	r31, 0x07	; 7
     648:	31 97       	sbiw	r30, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <delay+0x8>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <delay+0xe>
     64e:	00 00       	nop
        _delay_ms(1);
        ms--;
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	f6 cf       	rjmp	.-20     	; 0x640 <delay>
    }
}
     654:	08 95       	ret

00000656 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     656:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     65a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     65e:	08 95       	ret

00000660 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     666:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     66a:	8f e0       	ldi	r24, 0x0F	; 15
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0c 94 20 03 	jmp	0x640	; 0x640 <delay>

00000672 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     672:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <rx_busy>
     676:	81 11       	cpse	r24, r1
     678:	1e c0       	rjmp	.+60     	; 0x6b6 <get_ambientlight+0x44>
        cli();
     67a:	f8 94       	cli
        adc_setup_conversion(7);
     67c:	87 e0       	ldi	r24, 0x07	; 7
     67e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     682:	83 e8       	ldi	r24, 0x83	; 131
     684:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     688:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     68c:	80 64       	ori	r24, 0x40	; 64
     68e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     692:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     696:	86 fd       	sbrc	r24, 6
     698:	fc cf       	rjmp	.-8      	; 0x692 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     69a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     69e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6a2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6a6:	23 ea       	ldi	r18, 0xA3	; 163
     6a8:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     6b2:	78 94       	sei
     6b4:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     6ba:	08 95       	ret

000006bc <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     6bc:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <rx_busy>
     6c0:	81 11       	cpse	r24, r1
     6c2:	1e c0       	rjmp	.+60     	; 0x700 <get_temperature+0x44>
        cli();
     6c4:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     6c6:	88 ec       	ldi	r24, 0xC8	; 200
     6c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     6cc:	87 e8       	ldi	r24, 0x87	; 135
     6ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     6d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6d6:	80 64       	ori	r24, 0x40	; 64
     6d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     6dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6e0:	86 fd       	sbrc	r24, 6
     6e2:	fc cf       	rjmp	.-8      	; 0x6dc <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     6e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     6ec:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6f0:	23 ea       	ldi	r18, 0xA3	; 163
     6f2:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6f6:	21 e0       	ldi	r18, 0x01	; 1
     6f8:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     6fc:	78 94       	sei
     6fe:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     700:	8f ef       	ldi	r24, 0xFF	; 255
     702:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     704:	08 95       	ret

00000706 <rand_hard>:

uint8_t rand_hard() {
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     70e:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     710:	e3 ea       	ldi	r30, 0xA3	; 163
     712:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     714:	c6 e0       	ldi	r28, 0x06	; 6
     716:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     718:	a1 e0       	ldi	r26, 0x01	; 1
     71a:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     71c:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     71e:	f8 94       	cli
            adc_setup_conversion(6);
     720:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     724:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     728:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     72c:	40 64       	ori	r20, 0x40	; 64
     72e:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     732:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     736:	46 fd       	sbrc	r20, 6
     738:	fc cf       	rjmp	.-8      	; 0x732 <rand_hard+0x2c>
            a = ADCW&0x1;
     73a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     73e:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     742:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     744:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     748:	50 64       	ori	r21, 0x40	; 64
     74a:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     74e:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     752:	56 fd       	sbrc	r21, 6
     754:	fc cf       	rjmp	.-8      	; 0x74e <rand_hard+0x48>
            b = ADCW&0x1;
     756:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     75a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     75e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     762:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     766:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     76a:	78 94       	sei
            tries++;
     76c:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     76e:	61 70       	andi	r22, 0x01	; 1
     770:	46 17       	cp	r20, r22
     772:	51 f0       	breq	.+20     	; 0x788 <rand_hard+0x82>
        if (a)
     774:	44 23       	and	r20, r20
     776:	59 f0       	breq	.+22     	; 0x78e <rand_hard+0x88>
            num |= (1<<i);
     778:	ad 01       	movw	r20, r26
     77a:	02 2e       	mov	r0, r18
     77c:	01 c0       	rjmp	.+2      	; 0x780 <rand_hard+0x7a>
     77e:	44 0f       	add	r20, r20
     780:	0a 94       	dec	r0
     782:	ea f7       	brpl	.-6      	; 0x77e <rand_hard+0x78>
     784:	84 2b       	or	r24, r20
     786:	03 c0       	rjmp	.+6      	; 0x78e <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     788:	90 38       	cpi	r25, 0x80	; 128
     78a:	49 f6       	brne	.-110    	; 0x71e <rand_hard+0x18>
     78c:	f3 cf       	rjmp	.-26     	; 0x774 <rand_hard+0x6e>
     78e:	2f 5f       	subi	r18, 0xFF	; 255
     790:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     792:	28 30       	cpi	r18, 0x08	; 8
     794:	31 05       	cpc	r19, r1
     796:	09 f0       	breq	.+2      	; 0x79a <rand_hard+0x94>
     798:	c1 cf       	rjmp	.-126    	; 0x71c <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     7a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7a4:	98 e0       	ldi	r25, 0x08	; 8
     7a6:	89 9f       	mul	r24, r25
     7a8:	90 01       	movw	r18, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     7ae:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <accumulator>
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	89 0f       	add	r24, r25
     7b6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <accumulator>
     7ba:	82 2f       	mov	r24, r18
     7bc:	82 95       	swap	r24
     7be:	86 95       	lsr	r24
     7c0:	87 70       	andi	r24, 0x07	; 7
     7c2:	28 27       	eor	r18, r24
     7c4:	96 95       	lsr	r25
     7c6:	96 95       	lsr	r25
     7c8:	82 2f       	mov	r24, r18
     7ca:	89 27       	eor	r24, r25
     7cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     7d0:	08 95       	ret

000007d2 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     7d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     7d6:	08 95       	ret

000007d8 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     7d8:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <rx_busy>
     7dc:	81 11       	cpse	r24, r1
     7de:	16 c0       	rjmp	.+44     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
        cli();                                    // disable interrupts
     7e0:	f8 94       	cli
        adc_setup_conversion(6);
     7e2:	86 e0       	ldi	r24, 0x06	; 6
     7e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     7e8:	83 e8       	ldi	r24, 0x83	; 131
     7ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     7ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     7f2:	80 64       	ori	r24, 0x40	; 64
     7f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     7f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     7fc:	86 fd       	sbrc	r24, 6
     7fe:	fc cf       	rjmp	.-8      	; 0x7f8 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     800:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     804:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     808:	78 94       	sei
     80a:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     810:	08 95       	ret

00000812 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     812:	2f 92       	push	r2
     814:	3f 92       	push	r3
     816:	4f 92       	push	r4
     818:	5f 92       	push	r5
     81a:	6f 92       	push	r6
     81c:	7f 92       	push	r7
     81e:	8f 92       	push	r8
     820:	9f 92       	push	r9
     822:	af 92       	push	r10
     824:	bf 92       	push	r11
     826:	cf 92       	push	r12
     828:	df 92       	push	r13
     82a:	ef 92       	push	r14
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     838:	fc 01       	movw	r30, r24
     83a:	c2 81       	ldd	r28, Z+2	; 0x02
     83c:	d3 81       	ldd	r29, Z+3	; 0x03
     83e:	c4 38       	cpi	r28, 0x84	; 132
     840:	f3 e0       	ldi	r31, 0x03	; 3
     842:	df 07       	cpc	r29, r31
     844:	0c f0       	brlt	.+2      	; 0x848 <estimate_distance+0x36>
     846:	7e c0       	rjmp	.+252    	; 0x944 <__stack+0x45>
        if (dist->high_gain > kilo_irhigh[0]) {
     848:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <kilo_irhigh>
     84c:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <kilo_irhigh+0x1>
     850:	8c 17       	cp	r24, r28
     852:	9d 07       	cpc	r25, r29
     854:	08 f4       	brcc	.+2      	; 0x858 <estimate_distance+0x46>
     856:	6f c0       	rjmp	.+222    	; 0x936 <__stack+0x37>
     858:	e3 e4       	ldi	r30, 0x43	; 67
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     85e:	81 91       	ld	r24, Z+
     860:	91 91       	ld	r25, Z+
     862:	8c 17       	cp	r24, r28
     864:	9d 07       	cpc	r25, r29
     866:	20 f0       	brcs	.+8      	; 0x870 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     868:	1f 5f       	subi	r17, 0xFF	; 255
     86a:	1e 30       	cpi	r17, 0x0E	; 14
     86c:	c1 f7       	brne	.-16     	; 0x85e <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     86e:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     870:	81 2f       	mov	r24, r17
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	fc 01       	movw	r30, r24
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	ef 5b       	subi	r30, 0xBF	; 191
     87c:	fe 4f       	sbci	r31, 0xFE	; 254
     87e:	e0 80       	ld	r14, Z
     880:	f1 80       	ldd	r15, Z+1	; 0x01
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	fc 01       	movw	r30, r24
     888:	e1 5c       	subi	r30, 0xC1	; 193
     88a:	fe 4f       	sbci	r31, 0xFE	; 254
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	b7 01       	movw	r22, r14
     892:	68 1b       	sub	r22, r24
     894:	79 0b       	sbc	r23, r25
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 40 0b 	call	0x1680	; 0x1680 <__floatunsisf>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
     8a2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__addsf3>
     8a6:	4b 01       	movw	r8, r22
     8a8:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     8aa:	be 01       	movw	r22, r28
     8ac:	0d 2e       	mov	r0, r29
     8ae:	00 0c       	add	r0, r0
     8b0:	88 0b       	sbc	r24, r24
     8b2:	99 0b       	sbc	r25, r25
     8b4:	0e 94 42 0b 	call	0x1684	; 0x1684 <__floatsisf>
     8b8:	2b 01       	movw	r4, r22
     8ba:	3c 01       	movw	r6, r24
     8bc:	b7 01       	movw	r22, r14
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 40 0b 	call	0x1680	; 0x1680 <__floatunsisf>
     8c6:	6b 01       	movw	r12, r22
     8c8:	7c 01       	movw	r14, r24
     8ca:	61 2f       	mov	r22, r17
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 40 0b 	call	0x1680	; 0x1680 <__floatunsisf>
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	40 e0       	ldi	r20, 0x00	; 0
     8dc:	5f e3       	ldi	r21, 0x3F	; 63
     8de:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	a9 01       	movw	r20, r18
     8e8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__addsf3>
     8ec:	a5 01       	movw	r20, r10
     8ee:	94 01       	movw	r18, r8
     8f0:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     8f4:	9b 01       	movw	r18, r22
     8f6:	ac 01       	movw	r20, r24
     8f8:	c7 01       	movw	r24, r14
     8fa:	b6 01       	movw	r22, r12
     8fc:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__subsf3>
     900:	9b 01       	movw	r18, r22
     902:	ac 01       	movw	r20, r24
     904:	c3 01       	movw	r24, r6
     906:	b2 01       	movw	r22, r4
     908:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e2       	ldi	r20, 0x20	; 32
     912:	51 e4       	ldi	r21, 0x41	; 65
     914:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     918:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fixsfsi>
     91c:	7b 01       	movw	r14, r22
     91e:	c5 01       	movw	r24, r10
     920:	b4 01       	movw	r22, r8
     922:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fixsfsi>
     926:	ab 01       	movw	r20, r22
     928:	bc 01       	movw	r22, r24
     92a:	c7 01       	movw	r24, r14
     92c:	ba 01       	movw	r22, r20
     92e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divmodhi4>
     932:	16 2f       	mov	r17, r22
     934:	01 c0       	rjmp	.+2      	; 0x938 <__stack+0x39>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     936:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     938:	cd 3b       	cpi	r28, 0xBD	; 189
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	d8 07       	cpc	r29, r24
     93e:	0c f4       	brge	.+2      	; 0x942 <__stack+0x43>
     940:	ca c0       	rjmp	.+404    	; 0xad6 <__stack+0x1d7>
     942:	01 c0       	rjmp	.+2      	; 0x946 <__stack+0x47>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     944:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     946:	f1 01       	movw	r30, r2
     948:	c0 80       	ld	r12, Z
     94a:	d1 80       	ldd	r13, Z+1	; 0x01
     94c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <kilo_irlow>
     950:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <kilo_irlow+0x1>
     954:	8c 15       	cp	r24, r12
     956:	9d 05       	cpc	r25, r13
     958:	88 f0       	brcs	.+34     	; 0x97c <__stack+0x7d>
     95a:	ea e6       	ldi	r30, 0x6A	; 106
     95c:	f1 e0       	ldi	r31, 0x01	; 1
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     964:	e1 90       	ld	r14, Z+
     966:	f1 90       	ld	r15, Z+
     968:	ec 14       	cp	r14, r12
     96a:	fd 04       	cpc	r15, r13
     96c:	08 f4       	brcc	.+2      	; 0x970 <__stack+0x71>
     96e:	58 c0       	rjmp	.+176    	; 0xa20 <__stack+0x121>
     970:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     972:	8e 30       	cpi	r24, 0x0E	; 14
     974:	91 05       	cpc	r25, r1
     976:	a9 f7       	brne	.-22     	; 0x962 <__stack+0x63>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     978:	0a e5       	ldi	r16, 0x5A	; 90
     97a:	01 c0       	rjmp	.+2      	; 0x97e <__stack+0x7f>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     97c:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     97e:	1f 3f       	cpi	r17, 0xFF	; 255
     980:	09 f4       	brne	.+2      	; 0x984 <__stack+0x85>
     982:	4b c0       	rjmp	.+150    	; 0xa1a <__stack+0x11b>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     984:	be 01       	movw	r22, r28
     986:	dd 0f       	add	r29, r29
     988:	88 0b       	sbc	r24, r24
     98a:	99 0b       	sbc	r25, r25
     98c:	0e 94 42 0b 	call	0x1684	; 0x1684 <__floatsisf>
     990:	6b 01       	movw	r12, r22
     992:	7c 01       	movw	r14, r24
     994:	61 2f       	mov	r22, r17
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 40 0b 	call	0x1680	; 0x1680 <__floatunsisf>
     9a0:	4b 01       	movw	r8, r22
     9a2:	5c 01       	movw	r10, r24
     9a4:	a7 01       	movw	r20, r14
     9a6:	96 01       	movw	r18, r12
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e6       	ldi	r24, 0x61	; 97
     9ae:	94 e4       	ldi	r25, 0x44	; 68
     9b0:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__subsf3>
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
     9b8:	c5 01       	movw	r24, r10
     9ba:	b4 01       	movw	r22, r8
     9bc:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     9c0:	4b 01       	movw	r8, r22
     9c2:	5c 01       	movw	r10, r24
     9c4:	60 2f       	mov	r22, r16
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 40 0b 	call	0x1680	; 0x1680 <__floatunsisf>
     9d0:	2b 01       	movw	r4, r22
     9d2:	3c 01       	movw	r6, r24
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	4f e2       	ldi	r20, 0x2F	; 47
     9da:	54 e4       	ldi	r21, 0x44	; 68
     9dc:	c7 01       	movw	r24, r14
     9de:	b6 01       	movw	r22, r12
     9e0:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__subsf3>
     9e4:	9b 01       	movw	r18, r22
     9e6:	ac 01       	movw	r20, r24
     9e8:	c3 01       	movw	r24, r6
     9ea:	b2 01       	movw	r22, r4
     9ec:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	c5 01       	movw	r24, r10
     9f6:	b4 01       	movw	r22, r8
     9f8:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__addsf3>
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	48 e4       	ldi	r20, 0x48	; 72
     a02:	53 e4       	ldi	r21, 0x43	; 67
     a04:	0e 94 98 0a 	call	0x1530	; 0x1530 <__divsf3>
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	44 e0       	ldi	r20, 0x04	; 4
     a0e:	52 e4       	ldi	r21, 0x42	; 66
     a10:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__addsf3>
     a14:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixunssfsi>
     a18:	60 c0       	rjmp	.+192    	; 0xada <__stack+0x1db>
        } else {
            return 33 + dist_low;
     a1a:	61 e2       	ldi	r22, 0x21	; 33
     a1c:	60 0f       	add	r22, r16
     a1e:	5d c0       	rjmp	.+186    	; 0xada <__stack+0x1db>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     a20:	88 0f       	add	r24, r24
     a22:	99 1f       	adc	r25, r25
     a24:	fc 01       	movw	r30, r24
     a26:	ea 59       	subi	r30, 0x9A	; 154
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	b7 01       	movw	r22, r14
     a30:	68 1b       	sub	r22, r24
     a32:	79 0b       	sbc	r23, r25
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 40 0b 	call	0x1680	; 0x1680 <__floatunsisf>
     a3c:	9b 01       	movw	r18, r22
     a3e:	ac 01       	movw	r20, r24
     a40:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__addsf3>
     a44:	4b 01       	movw	r8, r22
     a46:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     a48:	b6 01       	movw	r22, r12
     a4a:	dd 0c       	add	r13, r13
     a4c:	88 0b       	sbc	r24, r24
     a4e:	99 0b       	sbc	r25, r25
     a50:	0e 94 42 0b 	call	0x1684	; 0x1684 <__floatsisf>
     a54:	2b 01       	movw	r4, r22
     a56:	3c 01       	movw	r6, r24
     a58:	b7 01       	movw	r22, r14
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 40 0b 	call	0x1680	; 0x1680 <__floatunsisf>
     a62:	6b 01       	movw	r12, r22
     a64:	7c 01       	movw	r14, r24
     a66:	63 2d       	mov	r22, r3
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 40 0b 	call	0x1680	; 0x1680 <__floatunsisf>
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	5f e3       	ldi	r21, 0x3F	; 63
     a7a:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	a9 01       	movw	r20, r18
     a84:	0e 94 2c 0a 	call	0x1458	; 0x1458 <__addsf3>
     a88:	a5 01       	movw	r20, r10
     a8a:	94 01       	movw	r18, r8
     a8c:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     a90:	9b 01       	movw	r18, r22
     a92:	ac 01       	movw	r20, r24
     a94:	c7 01       	movw	r24, r14
     a96:	b6 01       	movw	r22, r12
     a98:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__subsf3>
     a9c:	9b 01       	movw	r18, r22
     a9e:	ac 01       	movw	r20, r24
     aa0:	c3 01       	movw	r24, r6
     aa2:	b2 01       	movw	r22, r4
     aa4:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e2       	ldi	r20, 0x20	; 32
     aae:	51 e4       	ldi	r21, 0x41	; 65
     ab0:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     ab4:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fixsfsi>
     ab8:	7b 01       	movw	r14, r22
     aba:	c5 01       	movw	r24, r10
     abc:	b4 01       	movw	r22, r8
     abe:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__fixsfsi>
     ac2:	ab 01       	movw	r20, r22
     ac4:	bc 01       	movw	r22, r24
     ac6:	c7 01       	movw	r24, r14
     ac8:	ba 01       	movw	r22, r20
     aca:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__divmodhi4>
     ace:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     ad0:	6f 3f       	cpi	r22, 0xFF	; 255
     ad2:	09 f0       	breq	.+2      	; 0xad6 <__stack+0x1d7>
     ad4:	54 cf       	rjmp	.-344    	; 0x97e <__stack+0x7f>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     ad6:	61 e2       	ldi	r22, 0x21	; 33
     ad8:	61 0f       	add	r22, r17
    }
}
     ada:	86 2f       	mov	r24, r22
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	af 90       	pop	r10
     af0:	9f 90       	pop	r9
     af2:	8f 90       	pop	r8
     af4:	7f 90       	pop	r7
     af6:	6f 90       	pop	r6
     af8:	5f 90       	pop	r5
     afa:	4f 90       	pop	r4
     afc:	3f 90       	pop	r3
     afe:	2f 90       	pop	r2
     b00:	08 95       	ret

00000b02 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	2f 93       	push	r18
     b0e:	3f 93       	push	r19
     b10:	4f 93       	push	r20
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	ef 93       	push	r30
     b22:	ff 93       	push	r31
    tx_clock += tx_increment;
     b24:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <tx_clock>
     b28:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <tx_clock+0x1>
     b2c:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <tx_increment>
     b30:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <tx_increment+0x1>
     b34:	82 0f       	add	r24, r18
     b36:	93 1f       	adc	r25, r19
     b38:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <tx_clock+0x1>
     b3c:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <tx_clock>
    tx_increment = 0xFF;
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <tx_increment+0x1>
     b48:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <tx_increment>
    OCR0A = tx_increment;
     b4c:	8f ef       	ldi	r24, 0xFF	; 255
     b4e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     b50:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <kilo_ticks>
     b54:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <kilo_ticks+0x1>
     b58:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <kilo_ticks+0x2>
     b5c:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <kilo_ticks+0x3>
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	a1 1d       	adc	r26, r1
     b64:	b1 1d       	adc	r27, r1
     b66:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <kilo_ticks>
     b6a:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <kilo_ticks+0x1>
     b6e:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <kilo_ticks+0x2>
     b72:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     b76:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <rx_busy>
     b7a:	81 11       	cpse	r24, r1
     b7c:	2d c0       	rjmp	.+90     	; 0xbd8 <__vector_14+0xd6>
     b7e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <kilo_tx_period>
     b82:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <kilo_tx_period+0x1>
     b86:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <tx_clock>
     b8a:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <tx_clock+0x1>
     b8e:	82 17       	cp	r24, r18
     b90:	93 07       	cpc	r25, r19
     b92:	10 f5       	brcc	.+68     	; 0xbd8 <__vector_14+0xd6>
     b94:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
     b98:	84 30       	cpi	r24, 0x04	; 4
     b9a:	f1 f4       	brne	.+60     	; 0xbd8 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     b9c:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     ba0:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     ba4:	09 95       	icall
        if (msg) {
     ba6:	00 97       	sbiw	r24, 0x00	; 0
     ba8:	b9 f0       	breq	.+46     	; 0xbd8 <__vector_14+0xd6>
            if (message_send(msg)) {
     baa:	0e 94 54 09 	call	0x12a8	; 0x12a8 <message_send>
     bae:	88 23       	and	r24, r24
     bb0:	51 f0       	breq	.+20     	; 0xbc6 <__vector_14+0xc4>
                kilo_message_tx_success();
     bb2:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     bb6:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     bba:	09 95       	icall
                tx_clock = 0;
     bbc:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <tx_clock+0x1>
     bc0:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <tx_clock>
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     bc6:	0e 94 87 0c 	call	0x190e	; 0x190e <rand>
     bca:	9c 01       	movw	r18, r24
     bcc:	33 27       	eor	r19, r19
     bce:	30 93 86 01 	sts	0x0186, r19	; 0x800186 <tx_increment+0x1>
     bd2:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <tx_increment>
                OCR0A = tx_increment;
     bd6:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     bd8:	ff 91       	pop	r31
     bda:	ef 91       	pop	r30
     bdc:	bf 91       	pop	r27
     bde:	af 91       	pop	r26
     be0:	9f 91       	pop	r25
     be2:	8f 91       	pop	r24
     be4:	7f 91       	pop	r23
     be6:	6f 91       	pop	r22
     be8:	5f 91       	pop	r21
     bea:	4f 91       	pop	r20
     bec:	3f 91       	pop	r19
     bee:	2f 91       	pop	r18
     bf0:	0f 90       	pop	r0
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	0f 90       	pop	r0
     bf6:	1f 90       	pop	r1
     bf8:	18 95       	reti

00000bfa <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     bfa:	80 ff       	sbrs	r24, 0
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <set_color+0x8>
        DDRD |= (1<<5);
     bfe:	55 9a       	sbi	0x0a, 5	; 10
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     c02:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     c04:	81 ff       	sbrs	r24, 1
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <set_color+0x12>
        DDRD |= (1<<4);
     c08:	54 9a       	sbi	0x0a, 4	; 10
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     c0c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     c0e:	82 ff       	sbrs	r24, 2
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <set_color+0x1c>
        DDRC |= (1<<3);
     c12:	3b 9a       	sbi	0x07, 3	; 7
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     c16:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     c18:	83 ff       	sbrs	r24, 3
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <set_color+0x26>
        DDRC |= (1<<2);
     c1c:	3a 9a       	sbi	0x07, 2	; 7
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     c20:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     c22:	84 ff       	sbrs	r24, 4
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <set_color+0x30>
        DDRC |= (1<<5);
     c26:	3d 9a       	sbi	0x07, 5	; 7
     c28:	01 c0       	rjmp	.+2      	; 0xc2c <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     c2a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     c2c:	85 ff       	sbrs	r24, 5
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <set_color+0x3a>
        DDRC |= (1<<4);
     c30:	3c 9a       	sbi	0x07, 4	; 7
     c32:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     c34:	3c 98       	cbi	0x07, 4	; 7
     c36:	08 95       	ret

00000c38 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     c38:	8c 01       	movw	r16, r24
     c3a:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     c3c:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     c3e:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     c40:	84 e0       	ldi	r24, 0x04	; 4
     c42:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     c44:	98 e1       	ldi	r25, 0x18	; 24
     c46:	c9 2e       	mov	r12, r25
     c48:	29 e2       	ldi	r18, 0x29	; 41
     c4a:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     c4c:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <kilo_state>
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	e7 30       	cpi	r30, 0x07	; 7
     c54:	f1 05       	cpc	r31, r1
     c56:	d0 f7       	brcc	.-12     	; 0xc4c <kilo_start+0x14>
     c58:	ec 5c       	subi	r30, 0xCC	; 204
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__tablejump2__>
            case SLEEPING:
                cli();
     c60:	f8 94       	cli
                acomp_off();
     c62:	80 b7       	in	r24, 0x30	; 48
     c64:	87 7f       	andi	r24, 0xF7	; 247
     c66:	80 bf       	out	0x30, r24	; 48
                adc_off();
     c68:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     c72:	14 b8       	out	0x04, r1	; 4
     c74:	17 b8       	out	0x07, r1	; 7
     c76:	1a b8       	out	0x0a, r1	; 10
     c78:	15 b8       	out	0x05, r1	; 5
     c7a:	18 b8       	out	0x08, r1	; 8
     c7c:	1b b8       	out	0x0b, r1	; 11
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	a8 95       	wdr
     c84:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     c8e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     c92:	80 64       	ori	r24, 0x40	; 64
     c94:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     c98:	83 b7       	in	r24, 0x33	; 51
     c9a:	81 7f       	andi	r24, 0xF1	; 241
     c9c:	84 60       	ori	r24, 0x04	; 4
     c9e:	83 bf       	out	0x33, r24	; 51
                cli();
     ca0:	f8 94       	cli
                sleep_enable();
     ca2:	83 b7       	in	r24, 0x33	; 51
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	83 bf       	out	0x33, r24	; 51
                sei();
     ca8:	78 94       	sei
                sleep_cpu();
     caa:	88 95       	sleep
                sleep_disable();
     cac:	83 b7       	in	r24, 0x33	; 51
     cae:	8e 7f       	andi	r24, 0xFE	; 254
     cb0:	83 bf       	out	0x33, r24	; 51
                sei();
     cb2:	78 94       	sei
                rx_busy = 0;
     cb4:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <rx_busy>
                ports_on();
     cb8:	52 9a       	sbi	0x0a, 2	; 10
     cba:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     cbc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cc0:	80 68       	ori	r24, 0x80	; 128
     cc2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc6:	87 e5       	ldi	r24, 0x57	; 87
     cc8:	92 e0       	ldi	r25, 0x02	; 2
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <kilo_start+0x92>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <kilo_start+0x98>
     cd0:	00 00       	nop
                _delay_us(300);
                acomp_on();
     cd2:	80 b7       	in	r24, 0x30	; 48
     cd4:	88 61       	ori	r24, 0x18	; 24
     cd6:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     cd8:	8f e3       	ldi	r24, 0x3F	; 63
     cda:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cde:	ef e1       	ldi	r30, 0x1F	; 31
     ce0:	fe e4       	ldi	r31, 0x4E	; 78
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <kilo_start+0xaa>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <kilo_start+0xb0>
     ce8:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     cea:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <rx_busy>
     cee:	88 23       	and	r24, r24
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <kilo_start+0xbc>
     cf2:	50 c0       	rjmp	.+160    	; 0xd94 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_color>
     cfa:	ff ef       	ldi	r31, 0xFF	; 255
     cfc:	20 e7       	ldi	r18, 0x70	; 112
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	f1 50       	subi	r31, 0x01	; 1
     d02:	20 40       	sbci	r18, 0x00	; 0
     d04:	80 40       	sbci	r24, 0x00	; 0
     d06:	e1 f7       	brne	.-8      	; 0xd00 <kilo_start+0xc8>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <kilo_start+0xd2>
     d0a:	00 00       	nop
     d0c:	43 c0       	rjmp	.+134    	; 0xd94 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     d0e:	8c e0       	ldi	r24, 0x0C	; 12
     d10:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_color>
     d14:	ef ec       	ldi	r30, 0xCF	; 207
     d16:	f7 e0       	ldi	r31, 0x07	; 7
     d18:	31 97       	sbiw	r30, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <kilo_start+0xe0>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <kilo_start+0xe6>
     d1e:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_color>
     d26:	ff ef       	ldi	r31, 0xFF	; 255
     d28:	21 ee       	ldi	r18, 0xE1	; 225
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	f1 50       	subi	r31, 0x01	; 1
     d2e:	20 40       	sbci	r18, 0x00	; 0
     d30:	80 40       	sbci	r24, 0x00	; 0
     d32:	e1 f7       	brne	.-8      	; 0xd2c <kilo_start+0xf4>
     d34:	2c c0       	rjmp	.+88     	; 0xd8e <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     d36:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <get_voltage>
                if(voltage > 682)
     d3a:	8b 3a       	cpi	r24, 0xAB	; 171
     d3c:	e2 e0       	ldi	r30, 0x02	; 2
     d3e:	9e 07       	cpc	r25, r30
     d40:	24 f0       	brlt	.+8      	; 0xd4a <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     d42:	8c e0       	ldi	r24, 0x0C	; 12
     d44:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_color>
     d48:	81 cf       	rjmp	.-254    	; 0xc4c <kilo_start+0x14>
                else if(voltage > 648)
     d4a:	89 38       	cpi	r24, 0x89	; 137
     d4c:	f2 e0       	ldi	r31, 0x02	; 2
     d4e:	9f 07       	cpc	r25, r31
     d50:	14 f0       	brlt	.+4      	; 0xd56 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     d52:	80 e3       	ldi	r24, 0x30	; 48
     d54:	f7 cf       	rjmp	.-18     	; 0xd44 <kilo_start+0x10c>
                else if(voltage > 614)
     d56:	87 36       	cpi	r24, 0x67	; 103
     d58:	92 40       	sbci	r25, 0x02	; 2
     d5a:	14 f0       	brlt	.+4      	; 0xd60 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     d5c:	8f e0       	ldi	r24, 0x0F	; 15
     d5e:	f2 cf       	rjmp	.-28     	; 0xd44 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     d60:	83 e0       	ldi	r24, 0x03	; 3
     d62:	f0 cf       	rjmp	.-32     	; 0xd44 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     d64:	48 99       	sbic	0x09, 0	; 9
     d66:	16 c0       	rjmp	.+44     	; 0xd94 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_color>
     d6e:	8f ec       	ldi	r24, 0xCF	; 207
     d70:	97 e0       	ldi	r25, 0x07	; 7
     d72:	01 97       	sbiw	r24, 0x01	; 1
     d74:	f1 f7       	brne	.-4      	; 0xd72 <kilo_start+0x13a>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <kilo_start+0x140>
     d78:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_color>
     d80:	9f ef       	ldi	r25, 0xFF	; 255
     d82:	e1 ee       	ldi	r30, 0xE1	; 225
     d84:	f4 e0       	ldi	r31, 0x04	; 4
     d86:	91 50       	subi	r25, 0x01	; 1
     d88:	e0 40       	sbci	r30, 0x00	; 0
     d8a:	f0 40       	sbci	r31, 0x00	; 0
     d8c:	e1 f7       	brne	.-8      	; 0xd86 <kilo_start+0x14e>
     d8e:	00 c0       	rjmp	.+0      	; 0xd90 <kilo_start+0x158>
     d90:	00 00       	nop
     d92:	5c cf       	rjmp	.-328    	; 0xc4c <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	d6 cf       	rjmp	.-84     	; 0xd44 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     d98:	d1 11       	cpse	r29, r1
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <kilo_start+0x168>
                    setup();
     d9c:	f8 01       	movw	r30, r16
     d9e:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     da0:	d0 92 22 01 	sts	0x0122, r13	; 0x800122 <kilo_state>
     da4:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     da6:	f7 01       	movw	r30, r14
     da8:	09 95       	icall
                break;
     daa:	50 cf       	rjmp	.-352    	; 0xc4c <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     dac:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cur_motion>
     db0:	81 11       	cpse	r24, r1
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     db4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     db8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     dbc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <prev_motion>
     dc0:	45 cf       	rjmp	.-374    	; 0xc4c <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     dc2:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <cur_motion>
     dc6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <prev_motion>
     dca:	98 17       	cp	r25, r24
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <kilo_start+0x198>
     dce:	3e cf       	rjmp	.-388    	; 0xc4c <kilo_start+0x14>
                        prev_motion = cur_motion;
     dd0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cur_motion>
     dd4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     dd8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cur_motion>
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	89 f4       	brne	.+34     	; 0xe02 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     de0:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     de4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     de8:	8f e2       	ldi	r24, 0x2F	; 47
     dea:	95 e7       	ldi	r25, 0x75	; 117
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <kilo_start+0x1b4>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <kilo_start+0x1ba>
     df2:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     df4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     df8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     dfc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e00:	25 cf       	rjmp	.-438    	; 0xc4c <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     e02:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     e06:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     e0a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	59 f4       	brne	.+22     	; 0xe28 <kilo_start+0x1f0>
     e12:	ef e2       	ldi	r30, 0x2F	; 47
     e14:	f5 e7       	ldi	r31, 0x75	; 117
     e16:	31 97       	sbiw	r30, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <kilo_start+0x1de>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <kilo_start+0x1e4>
     e1c:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     e1e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     e22:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     e26:	10 c0       	rjmp	.+32     	; 0xe48 <kilo_start+0x210>
     e28:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     e2c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e30:	8f e2       	ldi	r24, 0x2F	; 47
     e32:	95 e7       	ldi	r25, 0x75	; 117
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <kilo_start+0x1fc>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <kilo_start+0x202>
     e3a:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     e3c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <kilo_straight_right>
     e40:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     e44:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     e48:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e4c:	ff ce       	rjmp	.-514    	; 0xc4c <kilo_start+0x14>

00000e4e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	8f 93       	push	r24
     e5a:	9f 93       	push	r25
    rx_timer_off();
     e5c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e60:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e64:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <rx_leadingbit>
    rx_leadingbyte = 1;
     e6e:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <rx_leadingbyte>
    rx_busy = 0;
     e72:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <rx_busy>
    adc_trigger_high_gain();
     e76:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e7a:	93 ea       	ldi	r25, 0xA3	; 163
     e7c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e80:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     e84:	9f 91       	pop	r25
     e86:	8f 91       	pop	r24
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	0f 90       	pop	r0
     e8e:	1f 90       	pop	r1
     e90:	18 95       	reti

00000e92 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	ef 93       	push	r30
     eb6:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     eb8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     ebc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     ec0:	41 e0       	ldi	r20, 0x01	; 1
     ec2:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     ec6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <rx_leadingbit>
     eca:	88 23       	and	r24, r24
     ecc:	21 f1       	breq	.+72     	; 0xf16 <__vector_23+0x84>
        rx_timer_on();
     ece:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     ed2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     ed6:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     eda:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <rx_bytevalue>
        rx_leadingbit = 0;
     ede:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_leadingbit>
        if (rx_leadingbyte) {
     ee2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <rx_leadingbyte>
     ee6:	88 23       	and	r24, r24
     ee8:	09 f4       	brne	.+2      	; 0xeec <__vector_23+0x5a>
     eea:	af c1       	rjmp	.+862    	; 0x124a <__vector_23+0x3b8>
            adc_finish_conversion();
     eec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ef0:	86 fd       	sbrc	r24, 6
     ef2:	fc cf       	rjmp	.-8      	; 0xeec <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     ef4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     ef8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     efc:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <rx_dist+0x3>
     f00:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <rx_dist+0x2>
            adc_trigger_low_gain();
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f0a:	93 ea       	ldi	r25, 0xA3	; 163
     f0c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f10:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     f14:	9a c1       	rjmp	.+820    	; 0x124a <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f16:	c9 01       	movw	r24, r18
     f18:	87 58       	subi	r24, 0x87	; 135
     f1a:	91 09       	sbc	r25, r1
     f1c:	84 37       	cpi	r24, 0x74	; 116
     f1e:	99 40       	sbci	r25, 0x09	; 9
     f20:	a0 f0       	brcs	.+40     	; 0xf4a <__vector_23+0xb8>
            rx_timer_off();
     f22:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     f26:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     f2a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     f2e:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <rx_leadingbit>
            rx_leadingbyte = 1;
     f32:	40 93 84 01 	sts	0x0184, r20	; 0x800184 <rx_leadingbyte>
            rx_busy = 0;
     f36:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <rx_busy>
            adc_trigger_high_gain();
     f3a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     f3e:	83 ea       	ldi	r24, 0xA3	; 163
     f40:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f44:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     f48:	80 c1       	rjmp	.+768    	; 0x124a <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f4a:	26 58       	subi	r18, 0x86	; 134
     f4c:	31 09       	sbc	r19, r1
     f4e:	a4 ef       	ldi	r26, 0xF4	; 244
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	0e 94 08 0a 	call	0x1410	; 0x1410 <__umulhisi3>
     f56:	8c 01       	movw	r16, r24
     f58:	22 27       	eor	r18, r18
     f5a:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     f5c:	08 30       	cpi	r16, 0x08	; 8
     f5e:	60 f4       	brcc	.+24     	; 0xf78 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <__vector_23+0xd6>
     f66:	88 0f       	add	r24, r24
     f68:	0a 95       	dec	r16
     f6a:	ea f7       	brpl	.-6      	; 0xf66 <__vector_23+0xd4>
     f6c:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <rx_bytevalue>
     f70:	89 2b       	or	r24, r25
     f72:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <rx_bytevalue>
     f76:	69 c1       	rjmp	.+722    	; 0x124a <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     f78:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <rx_leadingbit>
                if (rx_leadingbyte) {
     f7c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <rx_leadingbyte>
     f80:	88 23       	and	r24, r24
     f82:	41 f1       	breq	.+80     	; 0xfd4 <__vector_23+0x142>
                    adc_finish_conversion();
     f84:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     f88:	86 fd       	sbrc	r24, 6
     f8a:	fc cf       	rjmp	.-8      	; 0xf84 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     f8c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     f90:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     f94:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <rx_dist+0x1>
     f98:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <rx_dist>
                    adc_trigger_high_gain();
     f9c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     fa0:	83 ea       	ldi	r24, 0xA3	; 163
     fa2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     fac:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <rx_bytevalue>
     fb0:	99 23       	and	r25, r25
     fb2:	59 f0       	breq	.+22     	; 0xfca <__vector_23+0x138>
                        rx_timer_off();
     fb4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     fb8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     fbc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     fc0:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <rx_leadingbyte>
                        rx_busy = 0;
     fc4:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <rx_busy>
     fc8:	40 c1       	rjmp	.+640    	; 0x124a <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     fca:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <rx_leadingbyte>
                        rx_byteindex = 0;
     fce:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rx_byteindex>
     fd2:	3b c1       	rjmp	.+630    	; 0x124a <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     fd4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_byteindex>
     fd8:	e8 2f       	mov	r30, r24
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	e6 57       	subi	r30, 0x76	; 118
     fde:	fe 4f       	sbci	r31, 0xFE	; 254
     fe0:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <rx_bytevalue>
     fe4:	90 83       	st	Z, r25
                    rx_byteindex++;
     fe6:	8f 5f       	subi	r24, 0xFF	; 255
     fe8:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     fec:	8c 30       	cpi	r24, 0x0C	; 12
     fee:	09 f0       	breq	.+2      	; 0xff2 <__vector_23+0x160>
     ff0:	2c c1       	rjmp	.+600    	; 0x124a <__vector_23+0x3b8>
                        rx_timer_off();
     ff2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ff6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     ffa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     ffe:	40 93 84 01 	sts	0x0184, r20	; 0x800184 <rx_leadingbyte>
                        rx_busy = 0;
    1002:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
    1006:	00 91 94 01 	lds	r16, 0x0194	; 0x800194 <rx_msg+0xa>
    100a:	10 91 95 01 	lds	r17, 0x0195	; 0x800195 <rx_msg+0xb>
    100e:	8a e8       	ldi	r24, 0x8A	; 138
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	0e 94 38 09 	call	0x1270	; 0x1270 <message_crc>
    1016:	08 17       	cp	r16, r24
    1018:	19 07       	cpc	r17, r25
    101a:	09 f0       	breq	.+2      	; 0x101e <__vector_23+0x18c>
    101c:	16 c1       	rjmp	.+556    	; 0x124a <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    101e:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <rx_msg+0x9>
    1022:	e7 fd       	sbrc	r30, 7
    1024:	0a c0       	rjmp	.+20     	; 0x103a <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
    1026:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
    102a:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
    102e:	6f e5       	ldi	r22, 0x5F	; 95
    1030:	71 e0       	ldi	r23, 0x01	; 1
    1032:	8a e8       	ldi	r24, 0x8A	; 138
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	09 95       	icall
    1038:	08 c1       	rjmp	.+528    	; 0x124a <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    103a:	88 e7       	ldi	r24, 0x78	; 120
    103c:	8e 0f       	add	r24, r30
    103e:	83 30       	cpi	r24, 0x03	; 3
    1040:	30 f0       	brcs	.+12     	; 0x104e <__vector_23+0x1bc>
        motors_off();
    1042:	53 98       	cbi	0x0a, 3	; 10
    1044:	23 98       	cbi	0x04, 3	; 4
    1046:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    104a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
    104e:	8e 2f       	mov	r24, r30
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	fc 01       	movw	r30, r24
    1054:	e0 58       	subi	r30, 0x80	; 128
    1056:	f1 09       	sbc	r31, r1
    1058:	eb 30       	cpi	r30, 0x0B	; 11
    105a:	f1 05       	cpc	r31, r1
    105c:	08 f0       	brcs	.+2      	; 0x1060 <__vector_23+0x1ce>
    105e:	f5 c0       	rjmp	.+490    	; 0x124a <__vector_23+0x3b8>
    1060:	e5 5c       	subi	r30, 0xC5	; 197
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__tablejump2__>
        case BOOT:
            tx_timer_off();
    1068:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    106c:	8d 7f       	andi	r24, 0xFD	; 253
    106e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1072:	16 bc       	out	0x26, r1	; 38
            bootload();
    1074:	e0 e0       	ldi	r30, 0x00	; 0
    1076:	f0 e7       	ldi	r31, 0x70	; 112
    1078:	02 c0       	rjmp	.+4      	; 0x107e <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
    107a:	e0 e0       	ldi	r30, 0x00	; 0
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1080:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <kilo_state>
    1084:	e2 c0       	rjmp	.+452    	; 0x124a <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	b2 c0       	rjmp	.+356    	; 0x11ee <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
    108a:	85 e0       	ldi	r24, 0x05	; 5
    108c:	b0 c0       	rjmp	.+352    	; 0x11ee <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	ae c0       	rjmp	.+348    	; 0x11ee <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1092:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	09 f4       	brne	.+2      	; 0x109c <__vector_23+0x20a>
    109a:	d7 c0       	rjmp	.+430    	; 0x124a <__vector_23+0x3b8>
    109c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
    10a0:	84 30       	cpi	r24, 0x04	; 4
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <__vector_23+0x214>
    10a4:	d2 c0       	rjmp	.+420    	; 0x124a <__vector_23+0x3b8>
                motors_on();
    10a6:	53 9a       	sbi	0x0a, 3	; 10
    10a8:	23 9a       	sbi	0x04, 3	; 4
    10aa:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10ae:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
    10b2:	83 e0       	ldi	r24, 0x03	; 3
    10b4:	9c c0       	rjmp	.+312    	; 0x11ee <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10b6:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <rx_msg>
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <__vector_23+0x22e>
    10be:	4b c0       	rjmp	.+150    	; 0x1156 <__vector_23+0x2c4>
    10c0:	80 f4       	brcc	.+32     	; 0x10e2 <__vector_23+0x250>
    10c2:	88 23       	and	r24, r24
    10c4:	a9 f0       	breq	.+42     	; 0x10f0 <__vector_23+0x25e>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	09 f0       	breq	.+2      	; 0x10cc <__vector_23+0x23a>
    10ca:	82 c0       	rjmp	.+260    	; 0x11d0 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    10cc:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <rx_msg+0x1>
    10d0:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <rx_msg+0x2>
    10d4:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <kilo_uid+0x1>
    10d8:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <kilo_uid>
                    cur_motion = MOVE_STOP;
    10dc:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cur_motion>
    10e0:	77 c0       	rjmp	.+238    	; 0x11d0 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <__vector_23+0x256>
    10e6:	49 c0       	rjmp	.+146    	; 0x117a <__vector_23+0x2e8>
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	09 f4       	brne	.+2      	; 0x10ee <__vector_23+0x25c>
    10ec:	58 c0       	rjmp	.+176    	; 0x119e <__vector_23+0x30c>
    10ee:	70 c0       	rjmp	.+224    	; 0x11d0 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    10f0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
    10f4:	86 30       	cpi	r24, 0x06	; 6
    10f6:	09 f0       	breq	.+2      	; 0x10fa <__vector_23+0x268>
    10f8:	6b c0       	rjmp	.+214    	; 0x11d0 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    10fa:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <kilo_uid>
    10fe:	80 eb       	ldi	r24, 0xB0	; 176
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 9f 0c 	call	0x193e	; 0x193e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1106:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <kilo_uid+0x1>
    110a:	81 eb       	ldi	r24, 0xB1	; 177
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 9f 0c 	call	0x193e	; 0x193e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1112:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <kilo_turn_left>
    1116:	85 e0       	ldi	r24, 0x05	; 5
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 9f 0c 	call	0x193e	; 0x193e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    111e:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <kilo_turn_right>
    1122:	89 e0       	ldi	r24, 0x09	; 9
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 9f 0c 	call	0x193e	; 0x193e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    112a:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <kilo_straight_left>
    112e:	8c e0       	ldi	r24, 0x0C	; 12
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 9f 0c 	call	0x193e	; 0x193e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1136:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <kilo_straight_right>
    113a:	84 e1       	ldi	r24, 0x14	; 20
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 9f 0c 	call	0x193e	; 0x193e <eeprom_write_byte>
                        motors_off();
    1142:	53 98       	cbi	0x0a, 3	; 10
    1144:	23 98       	cbi	0x04, 3	; 4
    1146:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    114a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
    1154:	3d c0       	rjmp	.+122    	; 0x11d0 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1156:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <cur_motion>
    115a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <rx_msg+0x3>
    115e:	91 30       	cpi	r25, 0x01	; 1
    1160:	21 f4       	brne	.+8      	; 0x116a <__vector_23+0x2d8>
    1162:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <kilo_turn_left>
    1166:	89 17       	cp	r24, r25
    1168:	99 f1       	breq	.+102    	; 0x11d0 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    116a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <prev_motion>
                        cur_motion = MOVE_LEFT;
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    1174:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <kilo_turn_left>
    1178:	2b c0       	rjmp	.+86     	; 0x11d0 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    117a:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <cur_motion>
    117e:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <rx_msg+0x4>
    1182:	92 30       	cpi	r25, 0x02	; 2
    1184:	21 f4       	brne	.+8      	; 0x118e <__vector_23+0x2fc>
    1186:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <kilo_turn_right>
    118a:	89 17       	cp	r24, r25
    118c:	09 f1       	breq	.+66     	; 0x11d0 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    118e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    1192:	92 e0       	ldi	r25, 0x02	; 2
    1194:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    1198:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <kilo_turn_right>
    119c:	19 c0       	rjmp	.+50     	; 0x11d0 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    119e:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <cur_motion>
    11a2:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <rx_msg+0x6>
    11a6:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <rx_msg+0x5>
    11aa:	23 30       	cpi	r18, 0x03	; 3
    11ac:	41 f4       	brne	.+16     	; 0x11be <__vector_23+0x32c>
    11ae:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <kilo_straight_right>
    11b2:	82 13       	cpse	r24, r18
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <__vector_23+0x32c>
    11b6:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <kilo_straight_left>
    11ba:	92 17       	cp	r25, r18
    11bc:	49 f0       	breq	.+18     	; 0x11d0 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    11be:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    11c2:	23 e0       	ldi	r18, 0x03	; 3
    11c4:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    11c8:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    11cc:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    11d0:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <rx_msg>
    11d4:	88 23       	and	r24, r24
    11d6:	c9 f1       	breq	.+114    	; 0x124a <__vector_23+0x3b8>
    11d8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
    11dc:	86 30       	cpi	r24, 0x06	; 6
    11de:	a9 f1       	breq	.+106    	; 0x124a <__vector_23+0x3b8>
                motors_on();
    11e0:	53 9a       	sbi	0x0a, 3	; 10
    11e2:	23 9a       	sbi	0x04, 3	; 4
    11e4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    11e8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    11ec:	86 e0       	ldi	r24, 0x06	; 6
    11ee:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
    11f2:	2b c0       	rjmp	.+86     	; 0x124a <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    11f4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <kilo_state>
    11f8:	86 30       	cpi	r24, 0x06	; 6
    11fa:	81 f0       	breq	.+32     	; 0x121c <__vector_23+0x38a>
                motors_on();
    11fc:	53 9a       	sbi	0x0a, 3	; 10
    11fe:	23 9a       	sbi	0x04, 3	; 4
    1200:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1204:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    120e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cur_motion>
    1212:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <prev_motion>
                kilo_state = MOVING;
    1216:	86 e0       	ldi	r24, 0x06	; 6
    1218:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	00 90 8a 01 	lds	r0, 0x018A	; 0x80018a <rx_msg>
    1224:	02 c0       	rjmp	.+4      	; 0x122a <__vector_23+0x398>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <__vector_23+0x394>
    122e:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <kilo_uid>
    1232:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <kilo_uid+0x1>
    1236:	82 23       	and	r24, r18
    1238:	93 23       	and	r25, r19
    123a:	89 2b       	or	r24, r25
    123c:	21 f0       	breq	.+8      	; 0x1246 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <cur_motion>
    1244:	02 c0       	rjmp	.+4      	; 0x124a <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    1246:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cur_motion>
                    }
                }
            }
        }
    }
}
    124a:	ff 91       	pop	r31
    124c:	ef 91       	pop	r30
    124e:	bf 91       	pop	r27
    1250:	af 91       	pop	r26
    1252:	9f 91       	pop	r25
    1254:	8f 91       	pop	r24
    1256:	7f 91       	pop	r23
    1258:	6f 91       	pop	r22
    125a:	5f 91       	pop	r21
    125c:	4f 91       	pop	r20
    125e:	3f 91       	pop	r19
    1260:	2f 91       	pop	r18
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	0f 90       	pop	r0
    1268:	0f be       	out	0x3f, r0	; 63
    126a:	0f 90       	pop	r0
    126c:	1f 90       	pop	r1
    126e:	18 95       	reti

00001270 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1270:	fc 01       	movw	r30, r24
    1272:	9c 01       	movw	r18, r24
    1274:	26 5f       	subi	r18, 0xF6	; 246
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    127c:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    127e:	84 27       	eor	r24, r20
    1280:	08 2e       	mov	r0, r24
    1282:	82 95       	swap	r24
    1284:	80 7f       	andi	r24, 0xF0	; 240
    1286:	80 25       	eor	r24, r0
    1288:	09 2e       	mov	r0, r25
    128a:	98 2f       	mov	r25, r24
    128c:	82 95       	swap	r24
    128e:	8f 70       	andi	r24, 0x0F	; 15
    1290:	08 26       	eor	r0, r24
    1292:	86 95       	lsr	r24
    1294:	98 27       	eor	r25, r24
    1296:	89 27       	eor	r24, r25
    1298:	88 0f       	add	r24, r24
    129a:	88 0f       	add	r24, r24
    129c:	88 0f       	add	r24, r24
    129e:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    12a0:	e2 17       	cp	r30, r18
    12a2:	f3 07       	cpc	r31, r19
    12a4:	59 f7       	brne	.-42     	; 0x127c <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    12a6:	08 95       	ret

000012a8 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    12a8:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    12aa:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    12ac:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    12ae:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <tx_mask>
    or tmpreg1, ddrreg
    12b2:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    12b4:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    12b8:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <tx_mask>
    12bc:	20 30       	cpi	r18, 0x00	; 0
    12be:	29 f0       	breq	.+10     	; 0x12ca <message_send+0x22>
    12c0:	00 00       	nop
    12c2:	25 b1       	in	r18, 0x05	; 5
    12c4:	23 2b       	or	r18, r19
    12c6:	25 b9       	out	0x05, r18	; 5
    12c8:	04 c0       	rjmp	.+8      	; 0x12d2 <message_send+0x2a>
    12ca:	00 00       	nop
    12cc:	00 00       	nop
    12ce:	00 00       	nop
    12d0:	00 c0       	rjmp	.+0      	; 0x12d2 <message_send+0x2a>
    12d2:	00 00       	nop
    12d4:	00 00       	nop
    12d6:	00 00       	nop
    12d8:	30 95       	com	r19
    12da:	25 b1       	in	r18, 0x05	; 5
    12dc:	23 23       	and	r18, r19
    12de:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    12e0:	2e ea       	ldi	r18, 0xAE	; 174
    12e2:	2a 95       	dec	r18
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    12e6:	2b ee       	ldi	r18, 0xEB	; 235

000012e8 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    12e8:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    12ea:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    12ec:	0a c0       	rjmp	.+20     	; 0x1302 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    12ee:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    12f0:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <tx_mask>
    com tmpreg2
    12f4:	30 95       	com	r19
    in tmpreg1, IR_PORT
    12f6:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    12f8:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    12fa:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    12fc:	0f be       	out	0x3f, r0	; 63
    return 0
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret

00001302 <nocollision>:
nocollision:
    nop
    1302:	00 00       	nop
    dec tmpreg1
    1304:	2a 95       	dec	r18
    brne checkcollision
    1306:	81 f7       	brne	.-32     	; 0x12e8 <checkcollision>

    ldi tmpreg1, 0x01
    1308:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    130a:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <tx_mask>
    130e:	20 30       	cpi	r18, 0x00	; 0
    1310:	29 f0       	breq	.+10     	; 0x131c <nocollision+0x1a>
    1312:	00 00       	nop
    1314:	25 b1       	in	r18, 0x05	; 5
    1316:	23 2b       	or	r18, r19
    1318:	25 b9       	out	0x05, r18	; 5
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <nocollision+0x22>
    131c:	00 00       	nop
    131e:	00 00       	nop
    1320:	00 00       	nop
    1322:	00 c0       	rjmp	.+0      	; 0x1324 <nocollision+0x22>
    1324:	00 00       	nop
    1326:	00 00       	nop
    1328:	00 00       	nop
    132a:	30 95       	com	r19
    132c:	25 b1       	in	r18, 0x05	; 5
    132e:	23 23       	and	r18, r19
    1330:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1332:	00 00       	nop
    1334:	24 e5       	ldi	r18, 0x54	; 84
    1336:	2a 95       	dec	r18
    1338:	f1 f7       	brne	.-4      	; 0x1336 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    133a:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    133c:	8c e0       	ldi	r24, 0x0C	; 12

0000133e <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    133e:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1340:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1342:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1344:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1346:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1348:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    134a:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    134c:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    134e:	50 e0       	ldi	r21, 0x00	; 0

00001350 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1350:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1352:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1354:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1356:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1358:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <tx_mask>
    135c:	20 30       	cpi	r18, 0x00	; 0
    135e:	29 f0       	breq	.+10     	; 0x136a <sendbit+0x1a>
    1360:	00 00       	nop
    1362:	25 b1       	in	r18, 0x05	; 5
    1364:	23 2b       	or	r18, r19
    1366:	25 b9       	out	0x05, r18	; 5
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <sendbit+0x22>
    136a:	00 00       	nop
    136c:	00 00       	nop
    136e:	00 00       	nop
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <sendbit+0x22>
    1372:	00 00       	nop
    1374:	00 00       	nop
    1376:	00 00       	nop
    1378:	30 95       	com	r19
    137a:	25 b1       	in	r18, 0x05	; 5
    137c:	23 23       	and	r18, r19
    137e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1380:	00 00       	nop
    1382:	21 e5       	ldi	r18, 0x51	; 81
    1384:	2a 95       	dec	r18
    1386:	f1 f7       	brne	.-4      	; 0x1384 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1388:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    138a:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    138c:	9a 95       	dec	r25
    brne sendbit
    138e:	01 f7       	brne	.-64     	; 0x1350 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1390:	8a 95       	dec	r24
    brne sendbyte
    1392:	a9 f6       	brne	.-86     	; 0x133e <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1394:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1396:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1398:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    139a:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    139c:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <tx_mask>
    com tmpreg2
    13a0:	30 95       	com	r19
    in tmpreg1, IR_PORT
    13a2:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    13a4:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    13a6:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    13a8:	0f be       	out	0x3f, r0	; 63
    return 1
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	08 95       	ret

000013ae <main>:
    return &msg;
}

int main() 
{
    kilo_init();
    13ae:	0e 94 24 02 	call	0x448	; 0x448 <kilo_init>
    kilo_message_rx = message_rx;
    13b2:	83 ec       	ldi	r24, 0xC3	; 195
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_rx+0x1>
    13ba:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_rx>
    kilo_message_tx = message_tx;
    13be:	81 e7       	ldi	r24, 0x71	; 113
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx+0x1>
    13c6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx>
    kilo_start(setup, loop);
    13ca:	6b e5       	ldi	r22, 0x5B	; 91
    13cc:	71 e0       	ldi	r23, 0x01	; 1
    13ce:	85 e8       	ldi	r24, 0x85	; 133
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 1c 06 	call	0xc38	; 0xc38 <kilo_start>
    return 0;
}
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	08 95       	ret

000013dc <__divmodhi4>:
    13dc:	97 fb       	bst	r25, 7
    13de:	07 2e       	mov	r0, r23
    13e0:	16 f4       	brtc	.+4      	; 0x13e6 <__divmodhi4+0xa>
    13e2:	00 94       	com	r0
    13e4:	07 d0       	rcall	.+14     	; 0x13f4 <__divmodhi4_neg1>
    13e6:	77 fd       	sbrc	r23, 7
    13e8:	09 d0       	rcall	.+18     	; 0x13fc <__divmodhi4_neg2>
    13ea:	0e 94 17 0a 	call	0x142e	; 0x142e <__udivmodhi4>
    13ee:	07 fc       	sbrc	r0, 7
    13f0:	05 d0       	rcall	.+10     	; 0x13fc <__divmodhi4_neg2>
    13f2:	3e f4       	brtc	.+14     	; 0x1402 <__divmodhi4_exit>

000013f4 <__divmodhi4_neg1>:
    13f4:	90 95       	com	r25
    13f6:	81 95       	neg	r24
    13f8:	9f 4f       	sbci	r25, 0xFF	; 255
    13fa:	08 95       	ret

000013fc <__divmodhi4_neg2>:
    13fc:	70 95       	com	r23
    13fe:	61 95       	neg	r22
    1400:	7f 4f       	sbci	r23, 0xFF	; 255

00001402 <__divmodhi4_exit>:
    1402:	08 95       	ret

00001404 <__tablejump2__>:
    1404:	ee 0f       	add	r30, r30
    1406:	ff 1f       	adc	r31, r31
    1408:	05 90       	lpm	r0, Z+
    140a:	f4 91       	lpm	r31, Z
    140c:	e0 2d       	mov	r30, r0
    140e:	09 94       	ijmp

00001410 <__umulhisi3>:
    1410:	a2 9f       	mul	r26, r18
    1412:	b0 01       	movw	r22, r0
    1414:	b3 9f       	mul	r27, r19
    1416:	c0 01       	movw	r24, r0
    1418:	a3 9f       	mul	r26, r19
    141a:	70 0d       	add	r23, r0
    141c:	81 1d       	adc	r24, r1
    141e:	11 24       	eor	r1, r1
    1420:	91 1d       	adc	r25, r1
    1422:	b2 9f       	mul	r27, r18
    1424:	70 0d       	add	r23, r0
    1426:	81 1d       	adc	r24, r1
    1428:	11 24       	eor	r1, r1
    142a:	91 1d       	adc	r25, r1
    142c:	08 95       	ret

0000142e <__udivmodhi4>:
    142e:	aa 1b       	sub	r26, r26
    1430:	bb 1b       	sub	r27, r27
    1432:	51 e1       	ldi	r21, 0x11	; 17
    1434:	07 c0       	rjmp	.+14     	; 0x1444 <__udivmodhi4_ep>

00001436 <__udivmodhi4_loop>:
    1436:	aa 1f       	adc	r26, r26
    1438:	bb 1f       	adc	r27, r27
    143a:	a6 17       	cp	r26, r22
    143c:	b7 07       	cpc	r27, r23
    143e:	10 f0       	brcs	.+4      	; 0x1444 <__udivmodhi4_ep>
    1440:	a6 1b       	sub	r26, r22
    1442:	b7 0b       	sbc	r27, r23

00001444 <__udivmodhi4_ep>:
    1444:	88 1f       	adc	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	5a 95       	dec	r21
    144a:	a9 f7       	brne	.-22     	; 0x1436 <__udivmodhi4_loop>
    144c:	80 95       	com	r24
    144e:	90 95       	com	r25
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	08 95       	ret

00001456 <__subsf3>:
    1456:	50 58       	subi	r21, 0x80	; 128

00001458 <__addsf3>:
    1458:	bb 27       	eor	r27, r27
    145a:	aa 27       	eor	r26, r26
    145c:	0e 94 43 0a 	call	0x1486	; 0x1486 <__addsf3x>
    1460:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__fp_round>
    1464:	0e 94 86 0b 	call	0x170c	; 0x170c <__fp_pscA>
    1468:	38 f0       	brcs	.+14     	; 0x1478 <__addsf3+0x20>
    146a:	0e 94 8d 0b 	call	0x171a	; 0x171a <__fp_pscB>
    146e:	20 f0       	brcs	.+8      	; 0x1478 <__addsf3+0x20>
    1470:	39 f4       	brne	.+14     	; 0x1480 <__addsf3+0x28>
    1472:	9f 3f       	cpi	r25, 0xFF	; 255
    1474:	19 f4       	brne	.+6      	; 0x147c <__addsf3+0x24>
    1476:	26 f4       	brtc	.+8      	; 0x1480 <__addsf3+0x28>
    1478:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__fp_nan>
    147c:	0e f4       	brtc	.+2      	; 0x1480 <__addsf3+0x28>
    147e:	e0 95       	com	r30
    1480:	e7 fb       	bst	r30, 7
    1482:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__fp_inf>

00001486 <__addsf3x>:
    1486:	e9 2f       	mov	r30, r25
    1488:	0e 94 a5 0b 	call	0x174a	; 0x174a <__fp_split3>
    148c:	58 f3       	brcs	.-42     	; 0x1464 <__addsf3+0xc>
    148e:	ba 17       	cp	r27, r26
    1490:	62 07       	cpc	r22, r18
    1492:	73 07       	cpc	r23, r19
    1494:	84 07       	cpc	r24, r20
    1496:	95 07       	cpc	r25, r21
    1498:	20 f0       	brcs	.+8      	; 0x14a2 <__addsf3x+0x1c>
    149a:	79 f4       	brne	.+30     	; 0x14ba <__addsf3x+0x34>
    149c:	a6 f5       	brtc	.+104    	; 0x1506 <__addsf3x+0x80>
    149e:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_zero>
    14a2:	0e f4       	brtc	.+2      	; 0x14a6 <__addsf3x+0x20>
    14a4:	e0 95       	com	r30
    14a6:	0b 2e       	mov	r0, r27
    14a8:	ba 2f       	mov	r27, r26
    14aa:	a0 2d       	mov	r26, r0
    14ac:	0b 01       	movw	r0, r22
    14ae:	b9 01       	movw	r22, r18
    14b0:	90 01       	movw	r18, r0
    14b2:	0c 01       	movw	r0, r24
    14b4:	ca 01       	movw	r24, r20
    14b6:	a0 01       	movw	r20, r0
    14b8:	11 24       	eor	r1, r1
    14ba:	ff 27       	eor	r31, r31
    14bc:	59 1b       	sub	r21, r25
    14be:	99 f0       	breq	.+38     	; 0x14e6 <__addsf3x+0x60>
    14c0:	59 3f       	cpi	r21, 0xF9	; 249
    14c2:	50 f4       	brcc	.+20     	; 0x14d8 <__addsf3x+0x52>
    14c4:	50 3e       	cpi	r21, 0xE0	; 224
    14c6:	68 f1       	brcs	.+90     	; 0x1522 <__addsf3x+0x9c>
    14c8:	1a 16       	cp	r1, r26
    14ca:	f0 40       	sbci	r31, 0x00	; 0
    14cc:	a2 2f       	mov	r26, r18
    14ce:	23 2f       	mov	r18, r19
    14d0:	34 2f       	mov	r19, r20
    14d2:	44 27       	eor	r20, r20
    14d4:	58 5f       	subi	r21, 0xF8	; 248
    14d6:	f3 cf       	rjmp	.-26     	; 0x14be <__addsf3x+0x38>
    14d8:	46 95       	lsr	r20
    14da:	37 95       	ror	r19
    14dc:	27 95       	ror	r18
    14de:	a7 95       	ror	r26
    14e0:	f0 40       	sbci	r31, 0x00	; 0
    14e2:	53 95       	inc	r21
    14e4:	c9 f7       	brne	.-14     	; 0x14d8 <__addsf3x+0x52>
    14e6:	7e f4       	brtc	.+30     	; 0x1506 <__addsf3x+0x80>
    14e8:	1f 16       	cp	r1, r31
    14ea:	ba 0b       	sbc	r27, r26
    14ec:	62 0b       	sbc	r22, r18
    14ee:	73 0b       	sbc	r23, r19
    14f0:	84 0b       	sbc	r24, r20
    14f2:	ba f0       	brmi	.+46     	; 0x1522 <__addsf3x+0x9c>
    14f4:	91 50       	subi	r25, 0x01	; 1
    14f6:	a1 f0       	breq	.+40     	; 0x1520 <__addsf3x+0x9a>
    14f8:	ff 0f       	add	r31, r31
    14fa:	bb 1f       	adc	r27, r27
    14fc:	66 1f       	adc	r22, r22
    14fe:	77 1f       	adc	r23, r23
    1500:	88 1f       	adc	r24, r24
    1502:	c2 f7       	brpl	.-16     	; 0x14f4 <__addsf3x+0x6e>
    1504:	0e c0       	rjmp	.+28     	; 0x1522 <__addsf3x+0x9c>
    1506:	ba 0f       	add	r27, r26
    1508:	62 1f       	adc	r22, r18
    150a:	73 1f       	adc	r23, r19
    150c:	84 1f       	adc	r24, r20
    150e:	48 f4       	brcc	.+18     	; 0x1522 <__addsf3x+0x9c>
    1510:	87 95       	ror	r24
    1512:	77 95       	ror	r23
    1514:	67 95       	ror	r22
    1516:	b7 95       	ror	r27
    1518:	f7 95       	ror	r31
    151a:	9e 3f       	cpi	r25, 0xFE	; 254
    151c:	08 f0       	brcs	.+2      	; 0x1520 <__addsf3x+0x9a>
    151e:	b0 cf       	rjmp	.-160    	; 0x1480 <__addsf3+0x28>
    1520:	93 95       	inc	r25
    1522:	88 0f       	add	r24, r24
    1524:	08 f0       	brcs	.+2      	; 0x1528 <__addsf3x+0xa2>
    1526:	99 27       	eor	r25, r25
    1528:	ee 0f       	add	r30, r30
    152a:	97 95       	ror	r25
    152c:	87 95       	ror	r24
    152e:	08 95       	ret

00001530 <__divsf3>:
    1530:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__divsf3x>
    1534:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__fp_round>
    1538:	0e 94 8d 0b 	call	0x171a	; 0x171a <__fp_pscB>
    153c:	58 f0       	brcs	.+22     	; 0x1554 <__divsf3+0x24>
    153e:	0e 94 86 0b 	call	0x170c	; 0x170c <__fp_pscA>
    1542:	40 f0       	brcs	.+16     	; 0x1554 <__divsf3+0x24>
    1544:	29 f4       	brne	.+10     	; 0x1550 <__divsf3+0x20>
    1546:	5f 3f       	cpi	r21, 0xFF	; 255
    1548:	29 f0       	breq	.+10     	; 0x1554 <__divsf3+0x24>
    154a:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__fp_inf>
    154e:	51 11       	cpse	r21, r1
    1550:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_szero>
    1554:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__fp_nan>

00001558 <__divsf3x>:
    1558:	0e 94 a5 0b 	call	0x174a	; 0x174a <__fp_split3>
    155c:	68 f3       	brcs	.-38     	; 0x1538 <__divsf3+0x8>

0000155e <__divsf3_pse>:
    155e:	99 23       	and	r25, r25
    1560:	b1 f3       	breq	.-20     	; 0x154e <__divsf3+0x1e>
    1562:	55 23       	and	r21, r21
    1564:	91 f3       	breq	.-28     	; 0x154a <__divsf3+0x1a>
    1566:	95 1b       	sub	r25, r21
    1568:	55 0b       	sbc	r21, r21
    156a:	bb 27       	eor	r27, r27
    156c:	aa 27       	eor	r26, r26
    156e:	62 17       	cp	r22, r18
    1570:	73 07       	cpc	r23, r19
    1572:	84 07       	cpc	r24, r20
    1574:	38 f0       	brcs	.+14     	; 0x1584 <__divsf3_pse+0x26>
    1576:	9f 5f       	subi	r25, 0xFF	; 255
    1578:	5f 4f       	sbci	r21, 0xFF	; 255
    157a:	22 0f       	add	r18, r18
    157c:	33 1f       	adc	r19, r19
    157e:	44 1f       	adc	r20, r20
    1580:	aa 1f       	adc	r26, r26
    1582:	a9 f3       	breq	.-22     	; 0x156e <__divsf3_pse+0x10>
    1584:	35 d0       	rcall	.+106    	; 0x15f0 <__divsf3_pse+0x92>
    1586:	0e 2e       	mov	r0, r30
    1588:	3a f0       	brmi	.+14     	; 0x1598 <__divsf3_pse+0x3a>
    158a:	e0 e8       	ldi	r30, 0x80	; 128
    158c:	32 d0       	rcall	.+100    	; 0x15f2 <__divsf3_pse+0x94>
    158e:	91 50       	subi	r25, 0x01	; 1
    1590:	50 40       	sbci	r21, 0x00	; 0
    1592:	e6 95       	lsr	r30
    1594:	00 1c       	adc	r0, r0
    1596:	ca f7       	brpl	.-14     	; 0x158a <__divsf3_pse+0x2c>
    1598:	2b d0       	rcall	.+86     	; 0x15f0 <__divsf3_pse+0x92>
    159a:	fe 2f       	mov	r31, r30
    159c:	29 d0       	rcall	.+82     	; 0x15f0 <__divsf3_pse+0x92>
    159e:	66 0f       	add	r22, r22
    15a0:	77 1f       	adc	r23, r23
    15a2:	88 1f       	adc	r24, r24
    15a4:	bb 1f       	adc	r27, r27
    15a6:	26 17       	cp	r18, r22
    15a8:	37 07       	cpc	r19, r23
    15aa:	48 07       	cpc	r20, r24
    15ac:	ab 07       	cpc	r26, r27
    15ae:	b0 e8       	ldi	r27, 0x80	; 128
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <__divsf3_pse+0x56>
    15b2:	bb 0b       	sbc	r27, r27
    15b4:	80 2d       	mov	r24, r0
    15b6:	bf 01       	movw	r22, r30
    15b8:	ff 27       	eor	r31, r31
    15ba:	93 58       	subi	r25, 0x83	; 131
    15bc:	5f 4f       	sbci	r21, 0xFF	; 255
    15be:	3a f0       	brmi	.+14     	; 0x15ce <__divsf3_pse+0x70>
    15c0:	9e 3f       	cpi	r25, 0xFE	; 254
    15c2:	51 05       	cpc	r21, r1
    15c4:	78 f0       	brcs	.+30     	; 0x15e4 <__divsf3_pse+0x86>
    15c6:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__fp_inf>
    15ca:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_szero>
    15ce:	5f 3f       	cpi	r21, 0xFF	; 255
    15d0:	e4 f3       	brlt	.-8      	; 0x15ca <__divsf3_pse+0x6c>
    15d2:	98 3e       	cpi	r25, 0xE8	; 232
    15d4:	d4 f3       	brlt	.-12     	; 0x15ca <__divsf3_pse+0x6c>
    15d6:	86 95       	lsr	r24
    15d8:	77 95       	ror	r23
    15da:	67 95       	ror	r22
    15dc:	b7 95       	ror	r27
    15de:	f7 95       	ror	r31
    15e0:	9f 5f       	subi	r25, 0xFF	; 255
    15e2:	c9 f7       	brne	.-14     	; 0x15d6 <__divsf3_pse+0x78>
    15e4:	88 0f       	add	r24, r24
    15e6:	91 1d       	adc	r25, r1
    15e8:	96 95       	lsr	r25
    15ea:	87 95       	ror	r24
    15ec:	97 f9       	bld	r25, 7
    15ee:	08 95       	ret
    15f0:	e1 e0       	ldi	r30, 0x01	; 1
    15f2:	66 0f       	add	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	88 1f       	adc	r24, r24
    15f8:	bb 1f       	adc	r27, r27
    15fa:	62 17       	cp	r22, r18
    15fc:	73 07       	cpc	r23, r19
    15fe:	84 07       	cpc	r24, r20
    1600:	ba 07       	cpc	r27, r26
    1602:	20 f0       	brcs	.+8      	; 0x160c <__divsf3_pse+0xae>
    1604:	62 1b       	sub	r22, r18
    1606:	73 0b       	sbc	r23, r19
    1608:	84 0b       	sbc	r24, r20
    160a:	ba 0b       	sbc	r27, r26
    160c:	ee 1f       	adc	r30, r30
    160e:	88 f7       	brcc	.-30     	; 0x15f2 <__divsf3_pse+0x94>
    1610:	e0 95       	com	r30
    1612:	08 95       	ret

00001614 <__fixsfsi>:
    1614:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fixunssfsi>
    1618:	68 94       	set
    161a:	b1 11       	cpse	r27, r1
    161c:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_szero>
    1620:	08 95       	ret

00001622 <__fixunssfsi>:
    1622:	0e 94 ad 0b 	call	0x175a	; 0x175a <__fp_splitA>
    1626:	88 f0       	brcs	.+34     	; 0x164a <__fixunssfsi+0x28>
    1628:	9f 57       	subi	r25, 0x7F	; 127
    162a:	98 f0       	brcs	.+38     	; 0x1652 <__fixunssfsi+0x30>
    162c:	b9 2f       	mov	r27, r25
    162e:	99 27       	eor	r25, r25
    1630:	b7 51       	subi	r27, 0x17	; 23
    1632:	b0 f0       	brcs	.+44     	; 0x1660 <__fixunssfsi+0x3e>
    1634:	e1 f0       	breq	.+56     	; 0x166e <__fixunssfsi+0x4c>
    1636:	66 0f       	add	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	88 1f       	adc	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	1a f0       	brmi	.+6      	; 0x1646 <__fixunssfsi+0x24>
    1640:	ba 95       	dec	r27
    1642:	c9 f7       	brne	.-14     	; 0x1636 <__fixunssfsi+0x14>
    1644:	14 c0       	rjmp	.+40     	; 0x166e <__fixunssfsi+0x4c>
    1646:	b1 30       	cpi	r27, 0x01	; 1
    1648:	91 f0       	breq	.+36     	; 0x166e <__fixunssfsi+0x4c>
    164a:	0e 94 c7 0b 	call	0x178e	; 0x178e <__fp_zero>
    164e:	b1 e0       	ldi	r27, 0x01	; 1
    1650:	08 95       	ret
    1652:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__fp_zero>
    1656:	67 2f       	mov	r22, r23
    1658:	78 2f       	mov	r23, r24
    165a:	88 27       	eor	r24, r24
    165c:	b8 5f       	subi	r27, 0xF8	; 248
    165e:	39 f0       	breq	.+14     	; 0x166e <__fixunssfsi+0x4c>
    1660:	b9 3f       	cpi	r27, 0xF9	; 249
    1662:	cc f3       	brlt	.-14     	; 0x1656 <__fixunssfsi+0x34>
    1664:	86 95       	lsr	r24
    1666:	77 95       	ror	r23
    1668:	67 95       	ror	r22
    166a:	b3 95       	inc	r27
    166c:	d9 f7       	brne	.-10     	; 0x1664 <__fixunssfsi+0x42>
    166e:	3e f4       	brtc	.+14     	; 0x167e <__fixunssfsi+0x5c>
    1670:	90 95       	com	r25
    1672:	80 95       	com	r24
    1674:	70 95       	com	r23
    1676:	61 95       	neg	r22
    1678:	7f 4f       	sbci	r23, 0xFF	; 255
    167a:	8f 4f       	sbci	r24, 0xFF	; 255
    167c:	9f 4f       	sbci	r25, 0xFF	; 255
    167e:	08 95       	ret

00001680 <__floatunsisf>:
    1680:	e8 94       	clt
    1682:	09 c0       	rjmp	.+18     	; 0x1696 <__floatsisf+0x12>

00001684 <__floatsisf>:
    1684:	97 fb       	bst	r25, 7
    1686:	3e f4       	brtc	.+14     	; 0x1696 <__floatsisf+0x12>
    1688:	90 95       	com	r25
    168a:	80 95       	com	r24
    168c:	70 95       	com	r23
    168e:	61 95       	neg	r22
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	8f 4f       	sbci	r24, 0xFF	; 255
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	99 23       	and	r25, r25
    1698:	a9 f0       	breq	.+42     	; 0x16c4 <__floatsisf+0x40>
    169a:	f9 2f       	mov	r31, r25
    169c:	96 e9       	ldi	r25, 0x96	; 150
    169e:	bb 27       	eor	r27, r27
    16a0:	93 95       	inc	r25
    16a2:	f6 95       	lsr	r31
    16a4:	87 95       	ror	r24
    16a6:	77 95       	ror	r23
    16a8:	67 95       	ror	r22
    16aa:	b7 95       	ror	r27
    16ac:	f1 11       	cpse	r31, r1
    16ae:	f8 cf       	rjmp	.-16     	; 0x16a0 <__floatsisf+0x1c>
    16b0:	fa f4       	brpl	.+62     	; 0x16f0 <__floatsisf+0x6c>
    16b2:	bb 0f       	add	r27, r27
    16b4:	11 f4       	brne	.+4      	; 0x16ba <__floatsisf+0x36>
    16b6:	60 ff       	sbrs	r22, 0
    16b8:	1b c0       	rjmp	.+54     	; 0x16f0 <__floatsisf+0x6c>
    16ba:	6f 5f       	subi	r22, 0xFF	; 255
    16bc:	7f 4f       	sbci	r23, 0xFF	; 255
    16be:	8f 4f       	sbci	r24, 0xFF	; 255
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	16 c0       	rjmp	.+44     	; 0x16f0 <__floatsisf+0x6c>
    16c4:	88 23       	and	r24, r24
    16c6:	11 f0       	breq	.+4      	; 0x16cc <__floatsisf+0x48>
    16c8:	96 e9       	ldi	r25, 0x96	; 150
    16ca:	11 c0       	rjmp	.+34     	; 0x16ee <__floatsisf+0x6a>
    16cc:	77 23       	and	r23, r23
    16ce:	21 f0       	breq	.+8      	; 0x16d8 <__floatsisf+0x54>
    16d0:	9e e8       	ldi	r25, 0x8E	; 142
    16d2:	87 2f       	mov	r24, r23
    16d4:	76 2f       	mov	r23, r22
    16d6:	05 c0       	rjmp	.+10     	; 0x16e2 <__floatsisf+0x5e>
    16d8:	66 23       	and	r22, r22
    16da:	71 f0       	breq	.+28     	; 0x16f8 <__floatsisf+0x74>
    16dc:	96 e8       	ldi	r25, 0x86	; 134
    16de:	86 2f       	mov	r24, r22
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	2a f0       	brmi	.+10     	; 0x16f0 <__floatsisf+0x6c>
    16e6:	9a 95       	dec	r25
    16e8:	66 0f       	add	r22, r22
    16ea:	77 1f       	adc	r23, r23
    16ec:	88 1f       	adc	r24, r24
    16ee:	da f7       	brpl	.-10     	; 0x16e6 <__floatsisf+0x62>
    16f0:	88 0f       	add	r24, r24
    16f2:	96 95       	lsr	r25
    16f4:	87 95       	ror	r24
    16f6:	97 f9       	bld	r25, 7
    16f8:	08 95       	ret

000016fa <__fp_inf>:
    16fa:	97 f9       	bld	r25, 7
    16fc:	9f 67       	ori	r25, 0x7F	; 127
    16fe:	80 e8       	ldi	r24, 0x80	; 128
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	08 95       	ret

00001706 <__fp_nan>:
    1706:	9f ef       	ldi	r25, 0xFF	; 255
    1708:	80 ec       	ldi	r24, 0xC0	; 192
    170a:	08 95       	ret

0000170c <__fp_pscA>:
    170c:	00 24       	eor	r0, r0
    170e:	0a 94       	dec	r0
    1710:	16 16       	cp	r1, r22
    1712:	17 06       	cpc	r1, r23
    1714:	18 06       	cpc	r1, r24
    1716:	09 06       	cpc	r0, r25
    1718:	08 95       	ret

0000171a <__fp_pscB>:
    171a:	00 24       	eor	r0, r0
    171c:	0a 94       	dec	r0
    171e:	12 16       	cp	r1, r18
    1720:	13 06       	cpc	r1, r19
    1722:	14 06       	cpc	r1, r20
    1724:	05 06       	cpc	r0, r21
    1726:	08 95       	ret

00001728 <__fp_round>:
    1728:	09 2e       	mov	r0, r25
    172a:	03 94       	inc	r0
    172c:	00 0c       	add	r0, r0
    172e:	11 f4       	brne	.+4      	; 0x1734 <__fp_round+0xc>
    1730:	88 23       	and	r24, r24
    1732:	52 f0       	brmi	.+20     	; 0x1748 <__fp_round+0x20>
    1734:	bb 0f       	add	r27, r27
    1736:	40 f4       	brcc	.+16     	; 0x1748 <__fp_round+0x20>
    1738:	bf 2b       	or	r27, r31
    173a:	11 f4       	brne	.+4      	; 0x1740 <__fp_round+0x18>
    173c:	60 ff       	sbrs	r22, 0
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <__fp_round+0x20>
    1740:	6f 5f       	subi	r22, 0xFF	; 255
    1742:	7f 4f       	sbci	r23, 0xFF	; 255
    1744:	8f 4f       	sbci	r24, 0xFF	; 255
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	08 95       	ret

0000174a <__fp_split3>:
    174a:	57 fd       	sbrc	r21, 7
    174c:	90 58       	subi	r25, 0x80	; 128
    174e:	44 0f       	add	r20, r20
    1750:	55 1f       	adc	r21, r21
    1752:	59 f0       	breq	.+22     	; 0x176a <__fp_splitA+0x10>
    1754:	5f 3f       	cpi	r21, 0xFF	; 255
    1756:	71 f0       	breq	.+28     	; 0x1774 <__fp_splitA+0x1a>
    1758:	47 95       	ror	r20

0000175a <__fp_splitA>:
    175a:	88 0f       	add	r24, r24
    175c:	97 fb       	bst	r25, 7
    175e:	99 1f       	adc	r25, r25
    1760:	61 f0       	breq	.+24     	; 0x177a <__fp_splitA+0x20>
    1762:	9f 3f       	cpi	r25, 0xFF	; 255
    1764:	79 f0       	breq	.+30     	; 0x1784 <__fp_splitA+0x2a>
    1766:	87 95       	ror	r24
    1768:	08 95       	ret
    176a:	12 16       	cp	r1, r18
    176c:	13 06       	cpc	r1, r19
    176e:	14 06       	cpc	r1, r20
    1770:	55 1f       	adc	r21, r21
    1772:	f2 cf       	rjmp	.-28     	; 0x1758 <__fp_split3+0xe>
    1774:	46 95       	lsr	r20
    1776:	f1 df       	rcall	.-30     	; 0x175a <__fp_splitA>
    1778:	08 c0       	rjmp	.+16     	; 0x178a <__fp_splitA+0x30>
    177a:	16 16       	cp	r1, r22
    177c:	17 06       	cpc	r1, r23
    177e:	18 06       	cpc	r1, r24
    1780:	99 1f       	adc	r25, r25
    1782:	f1 cf       	rjmp	.-30     	; 0x1766 <__fp_splitA+0xc>
    1784:	86 95       	lsr	r24
    1786:	71 05       	cpc	r23, r1
    1788:	61 05       	cpc	r22, r1
    178a:	08 94       	sec
    178c:	08 95       	ret

0000178e <__fp_zero>:
    178e:	e8 94       	clt

00001790 <__fp_szero>:
    1790:	bb 27       	eor	r27, r27
    1792:	66 27       	eor	r22, r22
    1794:	77 27       	eor	r23, r23
    1796:	cb 01       	movw	r24, r22
    1798:	97 f9       	bld	r25, 7
    179a:	08 95       	ret

0000179c <__mulsf3>:
    179c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3x>
    17a0:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__fp_round>
    17a4:	0e 94 86 0b 	call	0x170c	; 0x170c <__fp_pscA>
    17a8:	38 f0       	brcs	.+14     	; 0x17b8 <__mulsf3+0x1c>
    17aa:	0e 94 8d 0b 	call	0x171a	; 0x171a <__fp_pscB>
    17ae:	20 f0       	brcs	.+8      	; 0x17b8 <__mulsf3+0x1c>
    17b0:	95 23       	and	r25, r21
    17b2:	11 f0       	breq	.+4      	; 0x17b8 <__mulsf3+0x1c>
    17b4:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__fp_inf>
    17b8:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__fp_nan>
    17bc:	11 24       	eor	r1, r1
    17be:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_szero>

000017c2 <__mulsf3x>:
    17c2:	0e 94 a5 0b 	call	0x174a	; 0x174a <__fp_split3>
    17c6:	70 f3       	brcs	.-36     	; 0x17a4 <__mulsf3+0x8>

000017c8 <__mulsf3_pse>:
    17c8:	95 9f       	mul	r25, r21
    17ca:	c1 f3       	breq	.-16     	; 0x17bc <__mulsf3+0x20>
    17cc:	95 0f       	add	r25, r21
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	55 1f       	adc	r21, r21
    17d2:	62 9f       	mul	r22, r18
    17d4:	f0 01       	movw	r30, r0
    17d6:	72 9f       	mul	r23, r18
    17d8:	bb 27       	eor	r27, r27
    17da:	f0 0d       	add	r31, r0
    17dc:	b1 1d       	adc	r27, r1
    17de:	63 9f       	mul	r22, r19
    17e0:	aa 27       	eor	r26, r26
    17e2:	f0 0d       	add	r31, r0
    17e4:	b1 1d       	adc	r27, r1
    17e6:	aa 1f       	adc	r26, r26
    17e8:	64 9f       	mul	r22, r20
    17ea:	66 27       	eor	r22, r22
    17ec:	b0 0d       	add	r27, r0
    17ee:	a1 1d       	adc	r26, r1
    17f0:	66 1f       	adc	r22, r22
    17f2:	82 9f       	mul	r24, r18
    17f4:	22 27       	eor	r18, r18
    17f6:	b0 0d       	add	r27, r0
    17f8:	a1 1d       	adc	r26, r1
    17fa:	62 1f       	adc	r22, r18
    17fc:	73 9f       	mul	r23, r19
    17fe:	b0 0d       	add	r27, r0
    1800:	a1 1d       	adc	r26, r1
    1802:	62 1f       	adc	r22, r18
    1804:	83 9f       	mul	r24, r19
    1806:	a0 0d       	add	r26, r0
    1808:	61 1d       	adc	r22, r1
    180a:	22 1f       	adc	r18, r18
    180c:	74 9f       	mul	r23, r20
    180e:	33 27       	eor	r19, r19
    1810:	a0 0d       	add	r26, r0
    1812:	61 1d       	adc	r22, r1
    1814:	23 1f       	adc	r18, r19
    1816:	84 9f       	mul	r24, r20
    1818:	60 0d       	add	r22, r0
    181a:	21 1d       	adc	r18, r1
    181c:	82 2f       	mov	r24, r18
    181e:	76 2f       	mov	r23, r22
    1820:	6a 2f       	mov	r22, r26
    1822:	11 24       	eor	r1, r1
    1824:	9f 57       	subi	r25, 0x7F	; 127
    1826:	50 40       	sbci	r21, 0x00	; 0
    1828:	9a f0       	brmi	.+38     	; 0x1850 <__mulsf3_pse+0x88>
    182a:	f1 f0       	breq	.+60     	; 0x1868 <__mulsf3_pse+0xa0>
    182c:	88 23       	and	r24, r24
    182e:	4a f0       	brmi	.+18     	; 0x1842 <__mulsf3_pse+0x7a>
    1830:	ee 0f       	add	r30, r30
    1832:	ff 1f       	adc	r31, r31
    1834:	bb 1f       	adc	r27, r27
    1836:	66 1f       	adc	r22, r22
    1838:	77 1f       	adc	r23, r23
    183a:	88 1f       	adc	r24, r24
    183c:	91 50       	subi	r25, 0x01	; 1
    183e:	50 40       	sbci	r21, 0x00	; 0
    1840:	a9 f7       	brne	.-22     	; 0x182c <__mulsf3_pse+0x64>
    1842:	9e 3f       	cpi	r25, 0xFE	; 254
    1844:	51 05       	cpc	r21, r1
    1846:	80 f0       	brcs	.+32     	; 0x1868 <__mulsf3_pse+0xa0>
    1848:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__fp_inf>
    184c:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__fp_szero>
    1850:	5f 3f       	cpi	r21, 0xFF	; 255
    1852:	e4 f3       	brlt	.-8      	; 0x184c <__mulsf3_pse+0x84>
    1854:	98 3e       	cpi	r25, 0xE8	; 232
    1856:	d4 f3       	brlt	.-12     	; 0x184c <__mulsf3_pse+0x84>
    1858:	86 95       	lsr	r24
    185a:	77 95       	ror	r23
    185c:	67 95       	ror	r22
    185e:	b7 95       	ror	r27
    1860:	f7 95       	ror	r31
    1862:	e7 95       	ror	r30
    1864:	9f 5f       	subi	r25, 0xFF	; 255
    1866:	c1 f7       	brne	.-16     	; 0x1858 <__mulsf3_pse+0x90>
    1868:	fe 2b       	or	r31, r30
    186a:	88 0f       	add	r24, r24
    186c:	91 1d       	adc	r25, r1
    186e:	96 95       	lsr	r25
    1870:	87 95       	ror	r24
    1872:	97 f9       	bld	r25, 7
    1874:	08 95       	ret

00001876 <do_rand>:
    1876:	8f 92       	push	r8
    1878:	9f 92       	push	r9
    187a:	af 92       	push	r10
    187c:	bf 92       	push	r11
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	ec 01       	movw	r28, r24
    188c:	68 81       	ld	r22, Y
    188e:	79 81       	ldd	r23, Y+1	; 0x01
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	9b 81       	ldd	r25, Y+3	; 0x03
    1894:	61 15       	cp	r22, r1
    1896:	71 05       	cpc	r23, r1
    1898:	81 05       	cpc	r24, r1
    189a:	91 05       	cpc	r25, r1
    189c:	21 f4       	brne	.+8      	; 0x18a6 <do_rand+0x30>
    189e:	64 e2       	ldi	r22, 0x24	; 36
    18a0:	79 ed       	ldi	r23, 0xD9	; 217
    18a2:	8b e5       	ldi	r24, 0x5B	; 91
    18a4:	97 e0       	ldi	r25, 0x07	; 7
    18a6:	2d e1       	ldi	r18, 0x1D	; 29
    18a8:	33 ef       	ldi	r19, 0xF3	; 243
    18aa:	41 e0       	ldi	r20, 0x01	; 1
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	0e 94 ad 0c 	call	0x195a	; 0x195a <__divmodsi4>
    18b2:	49 01       	movw	r8, r18
    18b4:	5a 01       	movw	r10, r20
    18b6:	9b 01       	movw	r18, r22
    18b8:	ac 01       	movw	r20, r24
    18ba:	a7 ea       	ldi	r26, 0xA7	; 167
    18bc:	b1 e4       	ldi	r27, 0x41	; 65
    18be:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__muluhisi3>
    18c2:	6b 01       	movw	r12, r22
    18c4:	7c 01       	movw	r14, r24
    18c6:	ac ee       	ldi	r26, 0xEC	; 236
    18c8:	b4 ef       	ldi	r27, 0xF4	; 244
    18ca:	a5 01       	movw	r20, r10
    18cc:	94 01       	movw	r18, r8
    18ce:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__mulohisi3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8c 0d       	add	r24, r12
    18d8:	9d 1d       	adc	r25, r13
    18da:	ae 1d       	adc	r26, r14
    18dc:	bf 1d       	adc	r27, r15
    18de:	b7 ff       	sbrs	r27, 7
    18e0:	03 c0       	rjmp	.+6      	; 0x18e8 <do_rand+0x72>
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	a1 09       	sbc	r26, r1
    18e6:	b0 48       	sbci	r27, 0x80	; 128
    18e8:	88 83       	st	Y, r24
    18ea:	99 83       	std	Y+1, r25	; 0x01
    18ec:	aa 83       	std	Y+2, r26	; 0x02
    18ee:	bb 83       	std	Y+3, r27	; 0x03
    18f0:	9f 77       	andi	r25, 0x7F	; 127
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	bf 90       	pop	r11
    1900:	af 90       	pop	r10
    1902:	9f 90       	pop	r9
    1904:	8f 90       	pop	r8
    1906:	08 95       	ret

00001908 <rand_r>:
    1908:	0e 94 3b 0c 	call	0x1876	; 0x1876 <do_rand>
    190c:	08 95       	ret

0000190e <rand>:
    190e:	87 e0       	ldi	r24, 0x07	; 7
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 3b 0c 	call	0x1876	; 0x1876 <do_rand>
    1916:	08 95       	ret

00001918 <srand>:
    1918:	a0 e0       	ldi	r26, 0x00	; 0
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    1920:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    1924:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    1928:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    192c:	08 95       	ret

0000192e <eeprom_read_byte>:
    192e:	f9 99       	sbic	0x1f, 1	; 31
    1930:	fe cf       	rjmp	.-4      	; 0x192e <eeprom_read_byte>
    1932:	92 bd       	out	0x22, r25	; 34
    1934:	81 bd       	out	0x21, r24	; 33
    1936:	f8 9a       	sbi	0x1f, 0	; 31
    1938:	99 27       	eor	r25, r25
    193a:	80 b5       	in	r24, 0x20	; 32
    193c:	08 95       	ret

0000193e <eeprom_write_byte>:
    193e:	26 2f       	mov	r18, r22

00001940 <eeprom_write_r18>:
    1940:	f9 99       	sbic	0x1f, 1	; 31
    1942:	fe cf       	rjmp	.-4      	; 0x1940 <eeprom_write_r18>
    1944:	1f ba       	out	0x1f, r1	; 31
    1946:	92 bd       	out	0x22, r25	; 34
    1948:	81 bd       	out	0x21, r24	; 33
    194a:	20 bd       	out	0x20, r18	; 32
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	fa 9a       	sbi	0x1f, 2	; 31
    1952:	f9 9a       	sbi	0x1f, 1	; 31
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	08 95       	ret

0000195a <__divmodsi4>:
    195a:	05 2e       	mov	r0, r21
    195c:	97 fb       	bst	r25, 7
    195e:	1e f4       	brtc	.+6      	; 0x1966 <__divmodsi4+0xc>
    1960:	00 94       	com	r0
    1962:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__negsi2>
    1966:	57 fd       	sbrc	r21, 7
    1968:	07 d0       	rcall	.+14     	; 0x1978 <__divmodsi4_neg2>
    196a:	0e 94 df 0c 	call	0x19be	; 0x19be <__udivmodsi4>
    196e:	07 fc       	sbrc	r0, 7
    1970:	03 d0       	rcall	.+6      	; 0x1978 <__divmodsi4_neg2>
    1972:	4e f4       	brtc	.+18     	; 0x1986 <__divmodsi4_exit>
    1974:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__negsi2>

00001978 <__divmodsi4_neg2>:
    1978:	50 95       	com	r21
    197a:	40 95       	com	r20
    197c:	30 95       	com	r19
    197e:	21 95       	neg	r18
    1980:	3f 4f       	sbci	r19, 0xFF	; 255
    1982:	4f 4f       	sbci	r20, 0xFF	; 255
    1984:	5f 4f       	sbci	r21, 0xFF	; 255

00001986 <__divmodsi4_exit>:
    1986:	08 95       	ret

00001988 <__negsi2>:
    1988:	90 95       	com	r25
    198a:	80 95       	com	r24
    198c:	70 95       	com	r23
    198e:	61 95       	neg	r22
    1990:	7f 4f       	sbci	r23, 0xFF	; 255
    1992:	8f 4f       	sbci	r24, 0xFF	; 255
    1994:	9f 4f       	sbci	r25, 0xFF	; 255
    1996:	08 95       	ret

00001998 <__muluhisi3>:
    1998:	0e 94 08 0a 	call	0x1410	; 0x1410 <__umulhisi3>
    199c:	a5 9f       	mul	r26, r21
    199e:	90 0d       	add	r25, r0
    19a0:	b4 9f       	mul	r27, r20
    19a2:	90 0d       	add	r25, r0
    19a4:	a4 9f       	mul	r26, r20
    19a6:	80 0d       	add	r24, r0
    19a8:	91 1d       	adc	r25, r1
    19aa:	11 24       	eor	r1, r1
    19ac:	08 95       	ret

000019ae <__mulshisi3>:
    19ae:	b7 ff       	sbrs	r27, 7
    19b0:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__muluhisi3>

000019b4 <__mulohisi3>:
    19b4:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__muluhisi3>
    19b8:	82 1b       	sub	r24, r18
    19ba:	93 0b       	sbc	r25, r19
    19bc:	08 95       	ret

000019be <__udivmodsi4>:
    19be:	a1 e2       	ldi	r26, 0x21	; 33
    19c0:	1a 2e       	mov	r1, r26
    19c2:	aa 1b       	sub	r26, r26
    19c4:	bb 1b       	sub	r27, r27
    19c6:	fd 01       	movw	r30, r26
    19c8:	0d c0       	rjmp	.+26     	; 0x19e4 <__udivmodsi4_ep>

000019ca <__udivmodsi4_loop>:
    19ca:	aa 1f       	adc	r26, r26
    19cc:	bb 1f       	adc	r27, r27
    19ce:	ee 1f       	adc	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	a2 17       	cp	r26, r18
    19d4:	b3 07       	cpc	r27, r19
    19d6:	e4 07       	cpc	r30, r20
    19d8:	f5 07       	cpc	r31, r21
    19da:	20 f0       	brcs	.+8      	; 0x19e4 <__udivmodsi4_ep>
    19dc:	a2 1b       	sub	r26, r18
    19de:	b3 0b       	sbc	r27, r19
    19e0:	e4 0b       	sbc	r30, r20
    19e2:	f5 0b       	sbc	r31, r21

000019e4 <__udivmodsi4_ep>:
    19e4:	66 1f       	adc	r22, r22
    19e6:	77 1f       	adc	r23, r23
    19e8:	88 1f       	adc	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	1a 94       	dec	r1
    19ee:	69 f7       	brne	.-38     	; 0x19ca <__udivmodsi4_loop>
    19f0:	60 95       	com	r22
    19f2:	70 95       	com	r23
    19f4:	80 95       	com	r24
    19f6:	90 95       	com	r25
    19f8:	9b 01       	movw	r18, r22
    19fa:	ac 01       	movw	r20, r24
    19fc:	bd 01       	movw	r22, r26
    19fe:	cf 01       	movw	r24, r30
    1a00:	08 95       	ret

00001a02 <_exit>:
    1a02:	f8 94       	cli

00001a04 <__stop_program>:
    1a04:	ff cf       	rjmp	.-2      	; 0x1a04 <__stop_program>
