
build/final_proj_part1_redux.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
       4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      18:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__vector_6>
      1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      2c:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__vector_11>
      30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      38:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__vector_14>
      3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      5c:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__vector_23>
      60:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      68:	dd 01       	movw	r26, r26
      6a:	df 01       	movw	r26, r30
      6c:	e1 01       	movw	r28, r2
      6e:	e3 01       	movw	r28, r6
      70:	e5 01       	movw	r28, r10
      72:	ec 01       	movw	r28, r24
      74:	e7 01       	movw	r28, r14
      76:	dd 06       	cpc	r13, r29
      78:	34 07       	cpc	r19, r20
      7a:	48 07       	cpc	r20, r24
      7c:	79 07       	cpc	r23, r25
      7e:	80 07       	cpc	r24, r16
      80:	5f 07       	cpc	r21, r31
      82:	83 07       	cpc	r24, r19
      84:	e1 08       	sbc	r14, r1
      86:	d2 09       	sbc	r29, r2
      88:	d2 09       	sbc	r29, r2
      8a:	ea 08       	sbc	r14, r10
      8c:	ed 08       	sbc	r14, r13
      8e:	f0 08       	sbc	r15, r0
      90:	f2 08       	sbc	r15, r2
      92:	f4 08       	sbc	r15, r4
      94:	f6 08       	sbc	r15, r6
      96:	a7 09       	sbc	r26, r7
      98:	08 09       	sbc	r16, r8

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d8 e0       	ldi	r29, 0x08	; 8
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      a6:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      a8:	0f b6       	in	r0, 0x3f	; 63
      aa:	f8 94       	cli
      ac:	a8 95       	wdr
      ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      b2:	88 61       	ori	r24, 0x18	; 24
      b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      bc:	0f be       	out	0x3f, r0	; 63

000000be <__do_copy_data>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	e0 e6       	ldi	r30, 0x60	; 96
      c6:	fb e1       	ldi	r31, 0x1B	; 27
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
      ca:	05 90       	lpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	ac 30       	cpi	r26, 0x0C	; 12
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
      d4:	21 e0       	ldi	r18, 0x01	; 1
      d6:	ac e0       	ldi	r26, 0x0C	; 12
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	a6 3f       	cpi	r26, 0xF6	; 246
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
      e4:	0e 94 84 0a 	call	0x1508	; 0x1508 <main>
      e8:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <_exit>

000000ec <__bad_interrupt>:
      ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <setup>:
    }
}

// setup schtuff
void setup() 
{   
      f0:	e7 e5       	ldi	r30, 0x57	; 87
      f2:	f1 e0       	ldi	r31, 0x01	; 1
      f4:	a7 e7       	ldi	r26, 0x77	; 119
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	87 e7       	ldi	r24, 0x77	; 119
      fa:	91 e0       	ldi	r25, 0x01	; 1
    // fill our arrays with zero
    for(uint8_t i=0;i<16;i+=1)
    {
        local_network[i] = 0;
      fc:	11 92       	st	Z+, r1
      fe:	11 92       	st	Z+, r1
        heartbeat_check[i] = 0;
     100:	1d 92       	st	X+, r1
     102:	1d 92       	st	X+, r1

// setup schtuff
void setup() 
{   
    // fill our arrays with zero
    for(uint8_t i=0;i<16;i+=1)
     104:	8e 17       	cp	r24, r30
     106:	9f 07       	cpc	r25, r31
     108:	c9 f7       	brne	.-14     	; 0xfc <setup+0xc>
        local_network[i] = 0;
        heartbeat_check[i] = 0;
    }
    for(uint8_t i=0;i<5;i+=1)
    {
        neighbor_network_binaries[i] = 0;
     10a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <neighbor_network_binaries>
     10e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <neighbor_network_binaries+0x1>
     112:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <neighbor_network_binaries+0x2>
     116:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <neighbor_network_binaries+0x3>
     11a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <neighbor_network_binaries+0x4>
     11e:	eb e3       	ldi	r30, 0x3B	; 59
     120:	f1 e0       	ldi	r31, 0x01	; 1
    }
    for(uint8_t i=0;i<8;i+=1)
    {
        local_network_binary[i] = 0;
     122:	11 92       	st	Z+, r1
    }
    for(uint8_t i=0;i<5;i+=1)
    {
        neighbor_network_binaries[i] = 0;
    }
    for(uint8_t i=0;i<8;i+=1)
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	e3 34       	cpi	r30, 0x43	; 67
     128:	f8 07       	cpc	r31, r24
     12a:	d9 f7       	brne	.-10     	; 0x122 <setup+0x32>
    {
        local_network_binary[i] = 0;
    }
    
    // set up message
    msg.type = NORMAL;
     12c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <msg+0x9>
    msg.data[0] = kilo_uid;
     130:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <kilo_uid>
     134:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <msg>
    msg.data[1] = 0;
     138:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <msg+0x1>
    msg.data[2] = 0;
     13c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <msg+0x2>
    msg.data[3] = 0;
     140:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <msg+0x3>
    msg.data[4] = 0;
     144:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <msg+0x4>
    msg.data[5] = 0;
     148:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <msg+0x5>
    msg.data[6] = 0;
     14c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <msg+0x6>
    msg.data[7] = 0;
     150:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <msg+0x7>
    msg.crc = message_crc(&msg);
     154:	87 e2       	ldi	r24, 0x27	; 39
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	0e 94 e5 09 	call	0x13ca	; 0x13ca <message_crc>
     15c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <msg+0xb>
     160:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <msg+0xa>
    
    start_time = kilo_ticks;
     164:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <kilo_ticks>
     168:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <kilo_ticks+0x1>
     16c:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <kilo_ticks+0x2>
     170:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <kilo_ticks+0x3>
     174:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <start_time>
     178:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <start_time+0x1>
     17c:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <start_time+0x2>
     180:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <start_time+0x3>
     184:	08 95       	ret

00000186 <message_tx>:
                                                                                                                                                                                                               
}

message_t *message_tx() 
{
    msg.type = NORMAL;
     186:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <msg+0x9>
    // Transmit our kilo_uid
    msg.data[0] = (uint8_t) kilo_uid;
     18a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <kilo_uid>
     18e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <msg>
     192:	ee e1       	ldi	r30, 0x1E	; 30
     194:	f1 e0       	ldi	r31, 0x01	; 1
     196:	a8 e2       	ldi	r26, 0x28	; 40
     198:	b1 e0       	ldi	r27, 0x01	; 1
    for(uint8_t i=0;i<5;i+=1)
    {
        msg.data[i+1] = neighbor_network_binaries[i]; // share all of the neighbor network binary numbers
     19a:	81 91       	ld	r24, Z+
     19c:	8d 93       	st	X+, r24
message_t *message_tx() 
{
    msg.type = NORMAL;
    // Transmit our kilo_uid
    msg.data[0] = (uint8_t) kilo_uid;
    for(uint8_t i=0;i<5;i+=1)
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	e3 32       	cpi	r30, 0x23	; 35
     1a2:	f8 07       	cpc	r31, r24
     1a4:	d1 f7       	brne	.-12     	; 0x19a <message_tx+0x14>
    {
        msg.data[i+1] = neighbor_network_binaries[i]; // share all of the neighbor network binary numbers
    }
    // Do this thing
    msg.crc = message_crc(&msg);
     1a6:	87 e2       	ldi	r24, 0x27	; 39
     1a8:	91 e0       	ldi	r25, 0x01	; 1
     1aa:	0e 94 e5 09 	call	0x13ca	; 0x13ca <message_crc>
     1ae:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <msg+0xb>
     1b2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <msg+0xa>

    return &msg;
}
     1b6:	87 e2       	ldi	r24, 0x27	; 39
     1b8:	91 e0       	ldi	r25, 0x01	; 1
     1ba:	08 95       	ret

000001bc <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d) {
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	ec 01       	movw	r28, r24
    new_message = 1;
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <new_message>
    
    // get the distance just in case
    dist = *d;
     1c8:	fb 01       	movw	r30, r22
     1ca:	80 81       	ld	r24, Z
     1cc:	91 81       	ldd	r25, Z+1	; 0x01
     1ce:	a2 81       	ldd	r26, Z+2	; 0x02
     1d0:	b3 81       	ldd	r27, Z+3	; 0x03
     1d2:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <dist>
     1d6:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <dist+0x1>
     1da:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <dist+0x2>
     1de:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <dist+0x3>
    cur_distance = estimate_distance(&dist);
     1e2:	83 e3       	ldi	r24, 0x33	; 51
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	0e 94 b6 04 	call	0x96c	; 0x96c <estimate_distance>
     1ea:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cur_distance>

    rx_kilo_id = m->data[0]+1; // always add 1 so that no kilo_uid should be less than 1 (i.e. 0 - which we dont want because I'm using it as an empty value place holder for my large ass arrays
     1ee:	88 81       	ld	r24, Y
     1f0:	8f 5f       	subi	r24, 0xFF	; 255
     1f2:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <rx_kilo_id>

    for(uint8_t i=0;i<5;i+=1)
    {
        if(i != kilo_uid)
     1f6:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <kilo_uid>
     1fa:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <kilo_uid+0x1>
     1fe:	fe 01       	movw	r30, r28
     200:	ae e1       	ldi	r26, 0x1E	; 30
     202:	b1 e0       	ldi	r27, 0x01	; 1
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	42 17       	cp	r20, r18
     20a:	53 07       	cpc	r21, r19
     20c:	11 f0       	breq	.+4      	; 0x212 <message_rx+0x56>
        {   
            neighbor_network_binaries[i] = m->data[i+1]; // read in everyone's local network (except our own just incase)
     20e:	91 81       	ldd	r25, Z+1	; 0x01
     210:	9c 93       	st	X, r25
     212:	2f 5f       	subi	r18, 0xFF	; 255
     214:	3f 4f       	sbci	r19, 0xFF	; 255
     216:	31 96       	adiw	r30, 0x01	; 1
     218:	11 96       	adiw	r26, 0x01	; 1
    dist = *d;
    cur_distance = estimate_distance(&dist);

    rx_kilo_id = m->data[0]+1; // always add 1 so that no kilo_uid should be less than 1 (i.e. 0 - which we dont want because I'm using it as an empty value place holder for my large ass arrays

    for(uint8_t i=0;i<5;i+=1)
     21a:	25 30       	cpi	r18, 0x05	; 5
     21c:	31 05       	cpc	r19, r1
     21e:	a1 f7       	brne	.-24     	; 0x208 <message_rx+0x4c>
            neighbor_network_binaries[i] = m->data[i+1]; // read in everyone's local network (except our own just incase)
        }
    }

    // if we have no neighbors, do some initial setup
    if(num_neighbors == 0)
     220:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <num_neighbors>
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	ee 23       	and	r30, r30
     228:	39 f0       	breq	.+14     	; 0x238 <message_rx+0x7c>
     22a:	a7 e5       	ldi	r26, 0x57	; 87
     22c:	b1 e0       	ldi	r27, 0x01	; 1
     22e:	ed 01       	movw	r28, r26
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	20 e0       	ldi	r18, 0x00	; 0
     236:	0b c0       	rjmp	.+22     	; 0x24e <message_rx+0x92>
    {
        num_neighbors = 1; // increment our number of neighbors
     238:	21 e0       	ldi	r18, 0x01	; 1
     23a:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <num_neighbors>
        local_network[0] = rx_kilo_id; // save our neighbor's id in the local network
     23e:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <local_network+0x1>
     242:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <local_network>
     246:	56 c0       	rjmp	.+172    	; 0x2f4 <message_rx+0x138>
    {
        uint8_t check_for_id = 0; // flag to check if we've already contacted this kilobot
        uint8_t index = 0; // index of the kilobot in our local_network array

        // First, check our array and see if the received kilobot_id is in the local_network array
        for(uint8_t i=0;i<num_neighbors;i+=1)
     248:	3f 5f       	subi	r19, 0xFF	; 255
     24a:	e3 17       	cp	r30, r19
     24c:	41 f0       	breq	.+16     	; 0x25e <message_rx+0xa2>
        {
            if(rx_kilo_id == local_network[i]) // check to see if our current received kilo_id is in the local stored network
     24e:	69 91       	ld	r22, Y+
     250:	79 91       	ld	r23, Y+
     252:	86 17       	cp	r24, r22
     254:	97 07       	cpc	r25, r23
     256:	c1 f7       	brne	.-16     	; 0x248 <message_rx+0x8c>
            {
                check_for_id += 1; // if it is, flip a flag
     258:	2f 5f       	subi	r18, 0xFF	; 255
     25a:	43 2f       	mov	r20, r19
     25c:	f5 cf       	rjmp	.-22     	; 0x248 <message_rx+0x8c>
                index = i; // save the location that it's in for use lator
            } 
        }

        // If we received a message from an already contacted neighbor
        if(check_for_id == 1) // if we flipped the flag
     25e:	21 30       	cpi	r18, 0x01	; 1
     260:	49 f4       	brne	.+18     	; 0x274 <message_rx+0xb8>
        {
            heartbeat_check[index] = 0; // set our heartbeat to 0 as we've received a heartbeat
     262:	e4 2f       	mov	r30, r20
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	ee 0f       	add	r30, r30
     268:	ff 1f       	adc	r31, r31
     26a:	e9 58       	subi	r30, 0x89	; 137
     26c:	fe 4f       	sbci	r31, 0xFE	; 254
     26e:	11 82       	std	Z+1, r1	; 0x01
     270:	10 82       	st	Z, r1
     272:	30 c0       	rjmp	.+96     	; 0x2d4 <message_rx+0x118>
        }
        // If we received a message from a new neighbor, add it to the local_network
        else if(check_for_id == 0) // if the kilo_id is NOT in the local_network, add it to our network
     274:	21 11       	cpse	r18, r1
     276:	0b c0       	rjmp	.+22     	; 0x28e <message_rx+0xd2>
        {
            num_neighbors += 1; // increment the number of registered neighbors
     278:	ef 5f       	subi	r30, 0xFF	; 255
     27a:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <num_neighbors>
            local_network[num_neighbors-1] = rx_kilo_id; // add the new kilo_uid to the end of the list
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	eb 5a       	subi	r30, 0xAB	; 171
     286:	fe 4f       	sbci	r31, 0xFE	; 254
     288:	91 83       	std	Z+1, r25	; 0x01
     28a:	80 83       	st	Z, r24
     28c:	23 c0       	rjmp	.+70     	; 0x2d4 <message_rx+0x118>
        }
        else if(check_for_id == 2) // if for some reason we found it twice, squash one of them
     28e:	22 30       	cpi	r18, 0x02	; 2
     290:	09 f5       	brne	.+66     	; 0x2d4 <message_rx+0x118>
        {
            for(uint8_t i=index;i<num_neighbors;i+=1)
     292:	4e 17       	cp	r20, r30
     294:	f8 f4       	brcc	.+62     	; 0x2d4 <message_rx+0x118>
            {
                local_network[i] = local_network[i+1]; // shift everything left, squash the current kilobot
     296:	84 2f       	mov	r24, r20
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	9c 01       	movw	r18, r24
     29c:	2f 5f       	subi	r18, 0xFF	; 255
     29e:	3f 4f       	sbci	r19, 0xFF	; 255
     2a0:	22 0f       	add	r18, r18
     2a2:	33 1f       	adc	r19, r19
     2a4:	e9 01       	movw	r28, r18
     2a6:	c9 5a       	subi	r28, 0xA9	; 169
     2a8:	de 4f       	sbci	r29, 0xFE	; 254
     2aa:	68 81       	ld	r22, Y
     2ac:	79 81       	ldd	r23, Y+1	; 0x01
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	ec 01       	movw	r28, r24
     2b4:	c9 5a       	subi	r28, 0xA9	; 169
     2b6:	de 4f       	sbci	r29, 0xFE	; 254
     2b8:	79 83       	std	Y+1, r23	; 0x01
     2ba:	68 83       	st	Y, r22
                heartbeat_check[i] = heartbeat_check[i+1]; // shift everything left, squash the current kilobot's heartbeat
     2bc:	e9 01       	movw	r28, r18
     2be:	c9 58       	subi	r28, 0x89	; 137
     2c0:	de 4f       	sbci	r29, 0xFE	; 254
     2c2:	28 81       	ld	r18, Y
     2c4:	39 81       	ldd	r19, Y+1	; 0x01
     2c6:	ec 01       	movw	r28, r24
     2c8:	c9 58       	subi	r28, 0x89	; 137
     2ca:	de 4f       	sbci	r29, 0xFE	; 254
     2cc:	39 83       	std	Y+1, r19	; 0x01
     2ce:	28 83       	st	Y, r18
            num_neighbors += 1; // increment the number of registered neighbors
            local_network[num_neighbors-1] = rx_kilo_id; // add the new kilo_uid to the end of the list
        }
        else if(check_for_id == 2) // if for some reason we found it twice, squash one of them
        {
            for(uint8_t i=index;i<num_neighbors;i+=1)
     2d0:	4f 5f       	subi	r20, 0xFF	; 255
     2d2:	df cf       	rjmp	.-66     	; 0x292 <message_rx+0xd6>
     2d4:	27 e7       	ldi	r18, 0x77	; 119
     2d6:	31 e0       	ldi	r19, 0x01	; 1
                local_network[i] = local_network[i+1]; // shift everything left, squash the current kilobot
                heartbeat_check[i] = heartbeat_check[i+1]; // shift everything left, squash the current kilobot's heartbeat
            }
        }

        uint8_t num_neighbors_check = 0;
     2d8:	80 e0       	ldi	r24, 0x00	; 0
        for(uint8_t i=0;i<16;i+=1)
        {
            if(local_network[i] != 0)
     2da:	4d 91       	ld	r20, X+
     2dc:	5d 91       	ld	r21, X+
     2de:	45 2b       	or	r20, r21
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <message_rx+0x128>
            {
                num_neighbors_check+=1;
     2e2:	8f 5f       	subi	r24, 0xFF	; 255
                heartbeat_check[i] = heartbeat_check[i+1]; // shift everything left, squash the current kilobot's heartbeat
            }
        }

        uint8_t num_neighbors_check = 0;
        for(uint8_t i=0;i<16;i+=1)
     2e4:	2a 17       	cp	r18, r26
     2e6:	3b 07       	cpc	r19, r27
     2e8:	c1 f7       	brne	.-16     	; 0x2da <message_rx+0x11e>
            if(local_network[i] != 0)
            {
                num_neighbors_check+=1;
            }
        }
        if(num_neighbors != num_neighbors_check)
     2ea:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <num_neighbors>
     2ee:	89 13       	cpse	r24, r25
        {
            num_neighbors = num_neighbors_check;
     2f0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <num_neighbors>
        }
    }
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <check_heartbeats>:
uint32_t motion_timer;
uint32_t global_timer;
uint32_t global_number = 0;

void check_heartbeats()
{
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
    // Check to see if we've lost contact with a kilobot
    uint8_t counter = 0; // counter to keep track of our location
    do // while our counter is less than the number of neighbors we know of
    {
        // This should remove all values in the heartbeat_check that are greater than our threshold value
        if(heartbeat_check[counter] >= IN_CONTACT_THRESHOLD) // if the current neighobrs heartbeat value is greater than the preset threshold, we've lost contact with it
     302:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <num_neighbors>
uint32_t global_number = 0;

void check_heartbeats()
{
    // Check to see if we've lost contact with a kilobot
    uint8_t counter = 0; // counter to keep track of our location
     30c:	20 e0       	ldi	r18, 0x00	; 0
    do // while our counter is less than the number of neighbors we know of
    {
        // This should remove all values in the heartbeat_check that are greater than our threshold value
        if(heartbeat_check[counter] >= IN_CONTACT_THRESHOLD) // if the current neighobrs heartbeat value is greater than the preset threshold, we've lost contact with it
     30e:	82 2f       	mov	r24, r18
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	fc 01       	movw	r30, r24
     314:	ee 0f       	add	r30, r30
     316:	ff 1f       	adc	r31, r31
     318:	df 01       	movw	r26, r30
     31a:	a9 58       	subi	r26, 0x89	; 137
     31c:	be 4f       	sbci	r27, 0xFE	; 254
     31e:	6d 91       	ld	r22, X+
     320:	7c 91       	ld	r23, X
     322:	11 97       	sbiw	r26, 0x01	; 1
     324:	64 17       	cp	r22, r20
     326:	75 07       	cpc	r23, r21
     328:	70 f1       	brcs	.+92     	; 0x386 <check_heartbeats+0x8c>
        {
            neighbor_network_binaries[local_network[counter]-1] = 0;
     32a:	e9 5a       	subi	r30, 0xA9	; 169
     32c:	fe 4f       	sbci	r31, 0xFE	; 254
     32e:	c0 81       	ld	r28, Z
     330:	d1 81       	ldd	r29, Z+1	; 0x01
     332:	c3 5e       	subi	r28, 0xE3	; 227
     334:	de 4f       	sbci	r29, 0xFE	; 254
     336:	18 82       	st	Y, r1
            // if the counter is currently at the very end of the local_network, just set our lost neighbor's values to 0
            if(counter == (num_neighbors-1)) // case for where we're at the very end of the array
     338:	63 2f       	mov	r22, r19
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	61 50       	subi	r22, 0x01	; 1
     33e:	71 09       	sbc	r23, r1
     340:	86 17       	cp	r24, r22
     342:	97 07       	cpc	r25, r23
     344:	51 f0       	breq	.+20     	; 0x35a <check_heartbeats+0x60>
            else // if it's not at the very end, squash it's values with the neighbor to the right of it in the local_network array, effectively getting rid of it
            {
                for(uint8_t i=counter;i<num_neighbors;i+=1)
                {
                    // This algorithm is not very efficient, since it will repeat n+1 times, where n is the number of kilobots we've lost contact with
                    local_network[counter] = local_network[counter+1]; // shift everything left, squash the current kilobot
     346:	01 96       	adiw	r24, 0x01	; 1
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	ec 01       	movw	r28, r24
     34e:	c9 5a       	subi	r28, 0xA9	; 169
     350:	de 4f       	sbci	r29, 0xFE	; 254
     352:	8f 01       	movw	r16, r30
                    heartbeat_check[counter] = heartbeat_check[counter+1]; // shift everything left, squash the current kilobot's heartbeat
     354:	89 58       	subi	r24, 0x89	; 137
     356:	9e 4f       	sbci	r25, 0xFE	; 254
     358:	05 c0       	rjmp	.+10     	; 0x364 <check_heartbeats+0x6a>
            neighbor_network_binaries[local_network[counter]-1] = 0;
            // if the counter is currently at the very end of the local_network, just set our lost neighbor's values to 0
            if(counter == (num_neighbors-1)) // case for where we're at the very end of the array
            {
                // instead of squashing them, set them to 0
                local_network[counter] = 0; 
     35a:	11 82       	std	Z+1, r1	; 0x01
     35c:	10 82       	st	Z, r1
                heartbeat_check[counter] = 0;
     35e:	1d 92       	st	X+, r1
     360:	1c 92       	st	X, r1
     362:	0f c0       	rjmp	.+30     	; 0x382 <check_heartbeats+0x88>
            }
            else // if it's not at the very end, squash it's values with the neighbor to the right of it in the local_network array, effectively getting rid of it
            {
                for(uint8_t i=counter;i<num_neighbors;i+=1)
     364:	23 17       	cp	r18, r19
     366:	68 f4       	brcc	.+26     	; 0x382 <check_heartbeats+0x88>
                {
                    // This algorithm is not very efficient, since it will repeat n+1 times, where n is the number of kilobots we've lost contact with
                    local_network[counter] = local_network[counter+1]; // shift everything left, squash the current kilobot
     368:	68 81       	ld	r22, Y
     36a:	79 81       	ldd	r23, Y+1	; 0x01
     36c:	f8 01       	movw	r30, r16
     36e:	71 83       	std	Z+1, r23	; 0x01
     370:	60 83       	st	Z, r22
                    heartbeat_check[counter] = heartbeat_check[counter+1]; // shift everything left, squash the current kilobot's heartbeat
     372:	fc 01       	movw	r30, r24
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	11 96       	adiw	r26, 0x01	; 1
     37a:	7c 93       	st	X, r23
     37c:	6e 93       	st	-X, r22
                local_network[counter] = 0; 
                heartbeat_check[counter] = 0;
            }
            else // if it's not at the very end, squash it's values with the neighbor to the right of it in the local_network array, effectively getting rid of it
            {
                for(uint8_t i=counter;i<num_neighbors;i+=1)
     37e:	2f 5f       	subi	r18, 0xFF	; 255
     380:	f1 cf       	rjmp	.-30     	; 0x364 <check_heartbeats+0x6a>
                    local_network[counter] = local_network[counter+1]; // shift everything left, squash the current kilobot
                    heartbeat_check[counter] = heartbeat_check[counter+1]; // shift everything left, squash the current kilobot's heartbeat
                }
            }
            counter = -1; // reset back to the beginning to check through the array ()
            num_neighbors -= 1; // decrement the number of neighbors
     382:	31 50       	subi	r19, 0x01	; 1
                    // This algorithm is not very efficient, since it will repeat n+1 times, where n is the number of kilobots we've lost contact with
                    local_network[counter] = local_network[counter+1]; // shift everything left, squash the current kilobot
                    heartbeat_check[counter] = heartbeat_check[counter+1]; // shift everything left, squash the current kilobot's heartbeat
                }
            }
            counter = -1; // reset back to the beginning to check through the array ()
     384:	2f ef       	ldi	r18, 0xFF	; 255
            num_neighbors -= 1; // decrement the number of neighbors
        }
        counter += 1;
     386:	2f 5f       	subi	r18, 0xFF	; 255
    }
    while (counter < num_neighbors);
     388:	23 17       	cp	r18, r19
     38a:	08 f2       	brcs	.-126    	; 0x30e <check_heartbeats+0x14>
     38c:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <num_neighbors>
}
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	08 95       	ret

0000039a <get_kilo_color>:

void get_kilo_color()
{
    switch(global_number)
     39a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     39e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     3a2:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_end+0x2>
     3a6:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_end+0x3>
     3aa:	87 30       	cpi	r24, 0x07	; 7
     3ac:	91 05       	cpc	r25, r1
     3ae:	88 f4       	brcc	.+34     	; 0x3d2 <get_kilo_color+0x38>
     3b0:	fc 01       	movw	r30, r24
     3b2:	ec 5c       	subi	r30, 0xCC	; 204
     3b4:	ff 4f       	sbci	r31, 0xFF	; 255
     3b6:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__tablejump2__>
    {
        case 0:
            set_color(RGB(1,1,1)); // WHITE
     3ba:	85 e1       	ldi	r24, 0x15	; 21
     3bc:	0b c0       	rjmp	.+22     	; 0x3d4 <get_kilo_color+0x3a>
            break;
        case 1:
            set_color(RGB(1,0,0)); // RED
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <get_kilo_color+0x3a>
            break;
        case 2:
            set_color(RGB(1,1,0)); // YELLOW
     3c2:	85 e0       	ldi	r24, 0x05	; 5
     3c4:	07 c0       	rjmp	.+14     	; 0x3d4 <get_kilo_color+0x3a>
            break;

        case 3:
            set_color(RGB(0,1,0)); // GREEN
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	05 c0       	rjmp	.+10     	; 0x3d4 <get_kilo_color+0x3a>
            break;

        case 4:
            set_color(RGB(0,0,1)); // BLUE
     3ca:	80 e1       	ldi	r24, 0x10	; 16
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <get_kilo_color+0x3a>
        case 5:
            break;
            set_color(RGB(0,1,1)); // TEAL

        case 6:
            set_color(RGB(1,0,1)); // PURPLE
     3ce:	81 e1       	ldi	r24, 0x11	; 17
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <get_kilo_color+0x3a>
            break;

        default: // any other case, I guess just turn off the LED
            set_color(RGB(0,0,0));
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <set_color>
     3d8:	08 95       	ret

000003da <loop>:
    
    start_time = kilo_ticks;
}

// now loop
void loop() {
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29

    if(new_message == 1)
     3e6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <new_message>
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	11 f4       	brne	.+4      	; 0x3f2 <loop+0x18>
    {
        new_message = 0;
     3ee:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <new_message>
    }

    if((kilo_ticks-start_time) >= 32) // update our heartbeat every half-second (roughly)
     3f2:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <kilo_ticks>
     3f6:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <kilo_ticks+0x1>
     3fa:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <kilo_ticks+0x2>
     3fe:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <kilo_ticks+0x3>
     402:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <start_time>
     406:	50 91 44 01 	lds	r21, 0x0144	; 0x800144 <start_time+0x1>
     40a:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <start_time+0x2>
     40e:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <start_time+0x3>
     412:	84 1b       	sub	r24, r20
     414:	95 0b       	sbc	r25, r21
     416:	a6 0b       	sbc	r26, r22
     418:	b7 0b       	sbc	r27, r23
     41a:	80 97       	sbiw	r24, 0x20	; 32
     41c:	a1 05       	cpc	r26, r1
     41e:	b1 05       	cpc	r27, r1
     420:	f8 f0       	brcs	.+62     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
    {
        for(uint8_t i=0;i<num_neighbors;i+=1)
     422:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <num_neighbors>
     426:	e7 e7       	ldi	r30, 0x77	; 119
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	89 17       	cp	r24, r25
     42e:	41 f0       	breq	.+16     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
        {
            heartbeat_check[i] += 1;
     430:	20 81       	ld	r18, Z
     432:	31 81       	ldd	r19, Z+1	; 0x01
     434:	2f 5f       	subi	r18, 0xFF	; 255
     436:	3f 4f       	sbci	r19, 0xFF	; 255
     438:	21 93       	st	Z+, r18
     43a:	31 93       	st	Z+, r19
        new_message = 0;
    }

    if((kilo_ticks-start_time) >= 32) // update our heartbeat every half-second (roughly)
    {
        for(uint8_t i=0;i<num_neighbors;i+=1)
     43c:	8f 5f       	subi	r24, 0xFF	; 255
     43e:	f6 cf       	rjmp	.-20     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
        {
            heartbeat_check[i] += 1;
            
        }
        start_time = kilo_ticks;
     440:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <kilo_ticks>
     444:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <kilo_ticks+0x1>
     448:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <kilo_ticks+0x2>
     44c:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <kilo_ticks+0x3>
     450:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <start_time>
     454:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <start_time+0x1>
     458:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <start_time+0x2>
     45c:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <start_time+0x3>
    }    

    // regardless of if we got a message, check the heartbeats
    check_heartbeats();
     460:	0e 94 7d 01 	call	0x2fa	; 0x2fa <check_heartbeats>
     464:	eb e3       	ldi	r30, 0x3B	; 59
     466:	f1 e0       	ldi	r31, 0x01	; 1
     468:	df 01       	movw	r26, r30

    // create local_network_binary
    for(uint8_t i=0;i<8;i+=1)
    {
        local_network_binary[i] = 0; // fill with 0s
     46a:	1d 92       	st	X+, r1

    // regardless of if we got a message, check the heartbeats
    check_heartbeats();

    // create local_network_binary
    for(uint8_t i=0;i<8;i+=1)
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	a3 34       	cpi	r26, 0x43	; 67
     470:	b4 07       	cpc	r27, r20
     472:	d9 f7       	brne	.-10     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
    {
        local_network_binary[i] = 0; // fill with 0s
    }
    for(uint8_t i=0;i<num_neighbors;i+=1)
     474:	10 91 12 01 	lds	r17, 0x0112	; 0x800112 <num_neighbors>
     478:	a7 e5       	ldi	r26, 0x57	; 87
     47a:	b1 e0       	ldi	r27, 0x01	; 1
     47c:	20 e0       	ldi	r18, 0x00	; 0
    {
        if(local_network[i] != 0)
        {
            local_network_binary[local_network[i]-1] = 1; // get the correct location
     47e:	31 e0       	ldi	r19, 0x01	; 1
    // create local_network_binary
    for(uint8_t i=0;i<8;i+=1)
    {
        local_network_binary[i] = 0; // fill with 0s
    }
    for(uint8_t i=0;i<num_neighbors;i+=1)
     480:	21 17       	cp	r18, r17
     482:	51 f0       	breq	.+20     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
    {
        if(local_network[i] != 0)
     484:	8d 91       	ld	r24, X+
     486:	9d 91       	ld	r25, X+
     488:	00 97       	sbiw	r24, 0x00	; 0
     48a:	21 f0       	breq	.+8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
        {
            local_network_binary[local_network[i]-1] = 1; // get the correct location
     48c:	ec 01       	movw	r28, r24
     48e:	c6 5c       	subi	r28, 0xC6	; 198
     490:	de 4f       	sbci	r29, 0xFE	; 254
     492:	38 83       	st	Y, r19
    // create local_network_binary
    for(uint8_t i=0;i<8;i+=1)
    {
        local_network_binary[i] = 0; // fill with 0s
    }
    for(uint8_t i=0;i<num_neighbors;i+=1)
     494:	2f 5f       	subi	r18, 0xFF	; 255
     496:	f4 cf       	rjmp	.-24     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
            local_network_binary[local_network[i]-1] = 1; // get the correct location
        }
    }

    // update our binary 
    local_network_binary[kilo_uid] = 1; // always say that our local network binary is 1
     498:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <kilo_uid>
     49c:	30 91 f2 01 	lds	r19, 0x01F2	; 0x8001f2 <kilo_uid+0x1>
     4a0:	d9 01       	movw	r26, r18
     4a2:	a5 5c       	subi	r26, 0xC5	; 197
     4a4:	be 4f       	sbci	r27, 0xFE	; 254
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	8c 93       	st	X, r24
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	40 e0       	ldi	r20, 0x00	; 0
    send_local_network_binary = 0;
    for(uint8_t i=0; i<8; i+=1) 
    {
        send_local_network_binary |= (local_network_binary[i] << i); // store in LSB format
     4b0:	81 91       	ld	r24, Z+
     4b2:	06 2e       	mov	r0, r22
     4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4b6:	88 0f       	add	r24, r24
     4b8:	0a 94       	dec	r0
     4ba:	ea f7       	brpl	.-6      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4bc:	48 2b       	or	r20, r24
     4be:	6f 5f       	subi	r22, 0xFF	; 255
     4c0:	7f 4f       	sbci	r23, 0xFF	; 255
    }

    // update our binary 
    local_network_binary[kilo_uid] = 1; // always say that our local network binary is 1
    send_local_network_binary = 0;
    for(uint8_t i=0; i<8; i+=1) 
     4c2:	68 30       	cpi	r22, 0x08	; 8
     4c4:	71 05       	cpc	r23, r1
     4c6:	a1 f7       	brne	.-24     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4c8:	40 93 13 01 	sts	0x0113, r20	; 0x800113 <send_local_network_binary>
    {
        send_local_network_binary |= (local_network_binary[i] << i); // store in LSB format
    }
    neighbor_network_binaries[kilo_uid] = send_local_network_binary; // update and send my local network
     4cc:	f9 01       	movw	r30, r18
     4ce:	e2 5e       	subi	r30, 0xE2	; 226
     4d0:	fe 4f       	sbci	r31, 0xFE	; 254
     4d2:	40 83       	st	Z, r20
     
    global_number = 0;
    for(uint8_t neighborN=0;neighborN<num_neighbors;neighborN+=1) // go through each neighbor and check their local network
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	dc 01       	movw	r26, r24
        uint8_t mask = 1 << bit_position;

        // Extract the bit using AND and right shift
        unsigned int extracted_bit = (neighbor_check & mask) >> bit_position;

        if(extracted_bit == 1)
     4de:	c1 e0       	ldi	r28, 0x01	; 1
     4e0:	d0 e0       	ldi	r29, 0x00	; 0
     4e2:	06 2f       	mov	r16, r22
        send_local_network_binary |= (local_network_binary[i] << i); // store in LSB format
    }
    neighbor_network_binaries[kilo_uid] = send_local_network_binary; // update and send my local network
     
    global_number = 0;
    for(uint8_t neighborN=0;neighborN<num_neighbors;neighborN+=1) // go through each neighbor and check their local network
     4e4:	61 17       	cp	r22, r17
     4e6:	78 f5       	brcc	.+94     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	20 e0       	ldi	r18, 0x00	; 0
        uint8_t neighbor_check = 0; // value to store OR'd bit in
        for(uint8_t i=0;i<5;i+=1)
        {
            if(i != neighborN) // only do operations on every network other than the current one we're looking at
            {
                neighbor_check |= neighbor_network_binaries[local_network[neighborN] - 1]; // OR all of the local networks together
     4ec:	fb 01       	movw	r30, r22
     4ee:	ff 27       	eor	r31, r31
     4f0:	ee 0f       	add	r30, r30
     4f2:	ff 1f       	adc	r31, r31
     4f4:	af 01       	movw	r20, r30
     4f6:	49 5a       	subi	r20, 0xA9	; 169
     4f8:	5e 4f       	sbci	r21, 0xFE	; 254
     4fa:	7a 01       	movw	r14, r20
    for(uint8_t neighborN=0;neighborN<num_neighbors;neighborN+=1) // go through each neighbor and check their local network
    {
        uint8_t neighbor_check = 0; // value to store OR'd bit in
        for(uint8_t i=0;i<5;i+=1)
        {
            if(i != neighborN) // only do operations on every network other than the current one we're looking at
     4fc:	03 17       	cp	r16, r19
     4fe:	41 f0       	breq	.+16     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
            {
                neighbor_check |= neighbor_network_binaries[local_network[neighborN] - 1]; // OR all of the local networks together
     500:	f7 01       	movw	r30, r14
     502:	40 81       	ld	r20, Z
     504:	51 81       	ldd	r21, Z+1	; 0x01
     506:	43 5e       	subi	r20, 0xE3	; 227
     508:	5e 4f       	sbci	r21, 0xFE	; 254
     50a:	fa 01       	movw	r30, r20
     50c:	40 81       	ld	r20, Z
     50e:	24 2b       	or	r18, r20
     
    global_number = 0;
    for(uint8_t neighborN=0;neighborN<num_neighbors;neighborN+=1) // go through each neighbor and check their local network
    {
        uint8_t neighbor_check = 0; // value to store OR'd bit in
        for(uint8_t i=0;i<5;i+=1)
     510:	3f 5f       	subi	r19, 0xFF	; 255
     512:	35 30       	cpi	r19, 0x05	; 5
     514:	99 f7       	brne	.-26     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
        uint8_t mask = 1 << bit_position;

        // Extract the bit using AND and right shift
        unsigned int extracted_bit = (neighbor_check & mask) >> bit_position;

        if(extracted_bit == 1)
     516:	ae 01       	movw	r20, r28
     518:	06 2e       	mov	r0, r22
     51a:	01 c0       	rjmp	.+2      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
     51c:	44 0f       	add	r20, r20
     51e:	0a 94       	dec	r0
     520:	ea f7       	brpl	.-6      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
     522:	42 23       	and	r20, r18
     524:	24 2f       	mov	r18, r20
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	06 2e       	mov	r0, r22
     52a:	02 c0       	rjmp	.+4      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     52c:	35 95       	asr	r19
     52e:	27 95       	ror	r18
     530:	0a 94       	dec	r0
     532:	e2 f7       	brpl	.-8      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
     534:	21 30       	cpi	r18, 0x01	; 1
     536:	31 05       	cpc	r19, r1
     538:	19 f4       	brne	.+6      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
        {
            global_number += 1;
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	a1 1d       	adc	r26, r1
     53e:	b1 1d       	adc	r27, r1
     540:	6f 5f       	subi	r22, 0xFF	; 255
     542:	7f 4f       	sbci	r23, 0xFF	; 255
     544:	ce cf       	rjmp	.-100    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
     546:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     54a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     54e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
     552:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
        }
    }
    // Finally, condition our global number:
    if(global_number != 0)
     556:	00 97       	sbiw	r24, 0x00	; 0
     558:	a1 05       	cpc	r26, r1
     55a:	b1 05       	cpc	r27, r1
     55c:	59 f0       	breq	.+22     	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
    {
        global_number -= 1; // subtract 1
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	a1 09       	sbc	r26, r1
     562:	b1 09       	sbc	r27, r1
     564:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     568:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     56c:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
     570:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
    }

    // check if we have no neighbors, and if so, we're at 0
    if(num_neighbors == 0)
     574:	11 11       	cpse	r17, r1
     576:	08 c0       	rjmp	.+16     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
    {
        global_number = 0;
     578:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
     57c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
     580:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end+0x2>
     584:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x3>
    }

    // get the color
    get_kilo_color();
                                                                                                                                                                                                               
}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	1f 91       	pop	r17
     58e:	0f 91       	pop	r16
     590:	ff 90       	pop	r15
     592:	ef 90       	pop	r14
    {
        global_number = 0;
    }

    // get the color
    get_kilo_color();
     594:	0c 94 cd 01 	jmp	0x39a	; 0x39a <get_kilo_color>

00000598 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     598:	08 95       	ret

0000059a <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	08 95       	ret

000005a0 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     5a0:	08 95       	ret

000005a2 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
    cli();
     5b0:	f8 94       	cli

    ports_off();
     5b2:	14 b8       	out	0x04, r1	; 4
     5b4:	17 b8       	out	0x07, r1	; 7
     5b6:	1a b8       	out	0x0a, r1	; 10
     5b8:	15 b8       	out	0x05, r1	; 5
     5ba:	18 b8       	out	0x08, r1	; 8
     5bc:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     5be:	52 9a       	sbi	0x0a, 2	; 10
     5c0:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     5c2:	14 bc       	out	0x24, r1	; 36
     5c4:	85 e0       	ldi	r24, 0x05	; 5
     5c6:	85 bd       	out	0x25, r24	; 37
     5c8:	8f ef       	ldi	r24, 0xFF	; 255
     5ca:	87 bd       	out	0x27, r24	; 39
     5cc:	82 e0       	ldi	r24, 0x02	; 2
     5ce:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     5d2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     5d6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     5da:	2f e8       	ldi	r18, 0x8F	; 143
     5dc:	3b e0       	ldi	r19, 0x0B	; 11
     5de:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     5e2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     5e6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     5ea:	53 98       	cbi	0x0a, 3	; 10
     5ec:	23 98       	cbi	0x04, 3	; 4
     5ee:	91 ea       	ldi	r25, 0xA1	; 161
     5f0:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     5f4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     5f8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     5fc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     600:	8b e0       	ldi	r24, 0x0B	; 11
     602:	80 bf       	out	0x30, r24	; 48
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     60a:	86 e0       	ldi	r24, 0x06	; 6
     60c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     610:	83 e8       	ldi	r24, 0x83	; 131
     612:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     616:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     61a:	80 64       	ori	r24, 0x40	; 64
     61c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     620:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     624:	86 fd       	sbrc	r24, 6
     626:	fc cf       	rjmp	.-8      	; 0x620 <kilo_init+0x7e>
    adc_trigger_high_gain();
     628:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     62c:	83 ea       	ldi	r24, 0xA3	; 163
     62e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
    if (osccal != 0xFF)
     640:	8f 3f       	cpi	r24, 0xFF	; 255
     642:	11 f0       	breq	.+4      	; 0x648 <kilo_init+0xa6>
        OSCCAL = osccal;
     644:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     648:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>
    rx_leadingbit = 1;
     64c:	c1 e0       	ldi	r28, 0x01	; 1
     64e:	c0 93 98 01 	sts	0x0198, r28	; 0x800198 <rx_leadingbit>
    rx_leadingbyte = 1;
     652:	c0 93 dc 01 	sts	0x01DC, r28	; 0x8001dc <rx_leadingbyte>
    rx_byteindex = 0;
     656:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <rx_byteindex>
    rx_bytevalue = 0;
     65a:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     65e:	80 e9       	ldi	r24, 0x90	; 144
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
     666:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     66a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <tx_mask>
     66e:	88 73       	andi	r24, 0x38	; 56
     670:	11 f0       	breq	.+4      	; 0x676 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     672:	c0 93 b5 01 	sts	0x01B5, r28	; 0x8001b5 <tx_mask>
    tx_clock = 0;
     676:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <tx_clock+0x1>
     67a:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <tx_clock>
    tx_increment = 255;
     67e:	8f ef       	ldi	r24, 0xFF	; 255
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <tx_increment+0x1>
     686:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <tx_increment>
    kilo_ticks = 0;
     68a:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <kilo_ticks>
     68e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <kilo_ticks+0x1>
     692:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <kilo_ticks+0x2>
     696:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <kilo_ticks+0x3>
    kilo_state = IDLE;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <kilo_state>
    kilo_tx_period = 3906;
     6a0:	82 e4       	ldi	r24, 0x42	; 66
     6a2:	9f e0       	ldi	r25, 0x0F	; 15
     6a4:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <kilo_tx_period+0x1>
     6a8:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     6ac:	80 eb       	ldi	r24, 0xB0	; 176
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
     6b4:	c8 2f       	mov	r28, r24
     6b6:	81 eb       	ldi	r24, 0xB1	; 177
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
     6be:	2c 2f       	mov	r18, r28
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	38 2b       	or	r19, r24
     6c4:	30 93 f2 01 	sts	0x01F2, r19	; 0x8001f2 <kilo_uid+0x1>
     6c8:	20 93 f1 01 	sts	0x01F1, r18	; 0x8001f1 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     6cc:	85 e0       	ldi	r24, 0x05	; 5
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
     6d4:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     6d8:	89 e0       	ldi	r24, 0x09	; 9
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
     6e0:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     6e4:	8c e0       	ldi	r24, 0x0C	; 12
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
     6ec:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     6f0:	84 e1       	ldi	r24, 0x14	; 20
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
     6f8:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <kilo_straight_right>
     6fc:	00 ec       	ldi	r16, 0xC0	; 192
     6fe:	11 e0       	ldi	r17, 0x01	; 1
     700:	59 e9       	ldi	r21, 0x99	; 153
     702:	e5 2e       	mov	r14, r21
     704:	51 e0       	ldi	r21, 0x01	; 1
     706:	f5 2e       	mov	r15, r21
     708:	c0 e2       	ldi	r28, 0x20	; 32
     70a:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     70c:	ce 01       	movw	r24, r28
     70e:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
     712:	d8 2e       	mov	r13, r24
     714:	ce 01       	movw	r24, r28
     716:	01 96       	adiw	r24, 0x01	; 1
     718:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
     71c:	2d 2d       	mov	r18, r13
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	32 2f       	mov	r19, r18
     722:	22 27       	eor	r18, r18
     724:	28 2b       	or	r18, r24
     726:	f8 01       	movw	r30, r16
     728:	21 93       	st	Z+, r18
     72a:	31 93       	st	Z+, r19
     72c:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     72e:	ce 01       	movw	r24, r28
     730:	c0 96       	adiw	r24, 0x30	; 48
     732:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
     736:	d8 2e       	mov	r13, r24
     738:	ce 01       	movw	r24, r28
     73a:	c1 96       	adiw	r24, 0x31	; 49
     73c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <eeprom_read_byte>
     740:	2d 2d       	mov	r18, r13
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	32 2f       	mov	r19, r18
     746:	22 27       	eor	r18, r18
     748:	28 2b       	or	r18, r24
     74a:	f7 01       	movw	r30, r14
     74c:	21 93       	st	Z+, r18
     74e:	31 93       	st	Z+, r19
     750:	7f 01       	movw	r14, r30
     752:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     754:	cc 33       	cpi	r28, 0x3C	; 60
     756:	d1 05       	cpc	r29, r1
     758:	c9 f6       	brne	.-78     	; 0x70c <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     75a:	78 94       	sei
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	08 95       	ret

0000076c <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     76c:	1f 92       	push	r1
     76e:	0f 92       	push	r0
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	0f 92       	push	r0
     774:	11 24       	eor	r1, r1
     776:	8f 93       	push	r24
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	a8 95       	wdr
     77e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     782:	88 61       	ori	r24, 0x18	; 24
     784:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     788:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     78c:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     78e:	8f 91       	pop	r24
     790:	0f 90       	pop	r0
     792:	0f be       	out	0x3f, r0	; 63
     794:	0f 90       	pop	r0
     796:	1f 90       	pop	r1
     798:	18 95       	reti

0000079a <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     79a:	00 97       	sbiw	r24, 0x00	; 0
     79c:	41 f0       	breq	.+16     	; 0x7ae <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     79e:	ef ec       	ldi	r30, 0xCF	; 207
     7a0:	f7 e0       	ldi	r31, 0x07	; 7
     7a2:	31 97       	sbiw	r30, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <delay+0x8>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <delay+0xe>
     7a8:	00 00       	nop
        _delay_ms(1);
        ms--;
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f6 cf       	rjmp	.-20     	; 0x79a <delay>
    }
}
     7ae:	08 95       	ret

000007b0 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7b0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     7b4:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     7b8:	08 95       	ret

000007ba <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     7ba:	8f ef       	ldi	r24, 0xFF	; 255
     7bc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     7c0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     7c4:	8f e0       	ldi	r24, 0x0F	; 15
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0c 94 cd 03 	jmp	0x79a	; 0x79a <delay>

000007cc <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     7cc:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <rx_busy>
     7d0:	81 11       	cpse	r24, r1
     7d2:	1e c0       	rjmp	.+60     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
        cli();
     7d4:	f8 94       	cli
        adc_setup_conversion(7);
     7d6:	87 e0       	ldi	r24, 0x07	; 7
     7d8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     7dc:	83 e8       	ldi	r24, 0x83	; 131
     7de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     7e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     7e6:	80 64       	ori	r24, 0x40	; 64
     7e8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     7ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     7f0:	86 fd       	sbrc	r24, 6
     7f2:	fc cf       	rjmp	.-8      	; 0x7ec <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     7f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     7f8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     7fc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     800:	23 ea       	ldi	r18, 0xA3	; 163
     802:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     80c:	78 94       	sei
     80e:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     814:	08 95       	ret

00000816 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     816:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <rx_busy>
     81a:	81 11       	cpse	r24, r1
     81c:	1e c0       	rjmp	.+60     	; 0x85a <get_temperature+0x44>
        cli();
     81e:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     820:	88 ec       	ldi	r24, 0xC8	; 200
     822:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     826:	87 e8       	ldi	r24, 0x87	; 135
     828:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     82c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     830:	80 64       	ori	r24, 0x40	; 64
     832:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     836:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     83a:	86 fd       	sbrc	r24, 6
     83c:	fc cf       	rjmp	.-8      	; 0x836 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     83e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     842:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     846:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     84a:	23 ea       	ldi	r18, 0xA3	; 163
     84c:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     856:	78 94       	sei
     858:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     85e:	08 95       	ret

00000860 <rand_hard>:

uint8_t rand_hard() {
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     868:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     86a:	e3 ea       	ldi	r30, 0xA3	; 163
     86c:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     86e:	c6 e0       	ldi	r28, 0x06	; 6
     870:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     872:	a1 e0       	ldi	r26, 0x01	; 1
     874:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     876:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     878:	f8 94       	cli
            adc_setup_conversion(6);
     87a:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     87e:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     882:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     886:	40 64       	ori	r20, 0x40	; 64
     888:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     88c:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     890:	46 fd       	sbrc	r20, 6
     892:	fc cf       	rjmp	.-8      	; 0x88c <rand_hard+0x2c>
            a = ADCW&0x1;
     894:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     898:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     89c:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     89e:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8a2:	50 64       	ori	r21, 0x40	; 64
     8a4:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     8a8:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8ac:	56 fd       	sbrc	r21, 6
     8ae:	fc cf       	rjmp	.-8      	; 0x8a8 <rand_hard+0x48>
            b = ADCW&0x1;
     8b0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     8b4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     8b8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     8bc:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8c0:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     8c4:	78 94       	sei
            tries++;
     8c6:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     8c8:	61 70       	andi	r22, 0x01	; 1
     8ca:	46 17       	cp	r20, r22
     8cc:	51 f0       	breq	.+20     	; 0x8e2 <rand_hard+0x82>
        if (a)
     8ce:	44 23       	and	r20, r20
     8d0:	59 f0       	breq	.+22     	; 0x8e8 <rand_hard+0x88>
            num |= (1<<i);
     8d2:	ad 01       	movw	r20, r26
     8d4:	02 2e       	mov	r0, r18
     8d6:	01 c0       	rjmp	.+2      	; 0x8da <rand_hard+0x7a>
     8d8:	44 0f       	add	r20, r20
     8da:	0a 94       	dec	r0
     8dc:	ea f7       	brpl	.-6      	; 0x8d8 <rand_hard+0x78>
     8de:	84 2b       	or	r24, r20
     8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     8e2:	90 38       	cpi	r25, 0x80	; 128
     8e4:	49 f6       	brne	.-110    	; 0x878 <rand_hard+0x18>
     8e6:	f3 cf       	rjmp	.-26     	; 0x8ce <rand_hard+0x6e>
     8e8:	2f 5f       	subi	r18, 0xFF	; 255
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     8ec:	28 30       	cpi	r18, 0x08	; 8
     8ee:	31 05       	cpc	r19, r1
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <rand_hard+0x94>
     8f2:	c1 cf       	rjmp	.-126    	; 0x876 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	08 95       	ret

000008fa <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     8fa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <seed>
     8fe:	98 e0       	ldi	r25, 0x08	; 8
     900:	89 9f       	mul	r24, r25
     902:	90 01       	movw	r18, r0
     904:	11 24       	eor	r1, r1
     906:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     908:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <accumulator>
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	89 0f       	add	r24, r25
     910:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <accumulator>
     914:	82 2f       	mov	r24, r18
     916:	82 95       	swap	r24
     918:	86 95       	lsr	r24
     91a:	87 70       	andi	r24, 0x07	; 7
     91c:	28 27       	eor	r18, r24
     91e:	96 95       	lsr	r25
     920:	96 95       	lsr	r25
     922:	82 2f       	mov	r24, r18
     924:	89 27       	eor	r24, r25
     926:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <seed>
    return seed;
}
     92a:	08 95       	ret

0000092c <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     92c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <seed>
     930:	08 95       	ret

00000932 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     932:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <rx_busy>
     936:	81 11       	cpse	r24, r1
     938:	16 c0       	rjmp	.+44     	; 0x966 <get_voltage+0x34>
        cli();                                    // disable interrupts
     93a:	f8 94       	cli
        adc_setup_conversion(6);
     93c:	86 e0       	ldi	r24, 0x06	; 6
     93e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     942:	83 e8       	ldi	r24, 0x83	; 131
     944:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     948:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     94c:	80 64       	ori	r24, 0x40	; 64
     94e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     952:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     956:	86 fd       	sbrc	r24, 6
     958:	fc cf       	rjmp	.-8      	; 0x952 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     95a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     95e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     962:	78 94       	sei
     964:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     96a:	08 95       	ret

0000096c <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     96c:	2f 92       	push	r2
     96e:	3f 92       	push	r3
     970:	4f 92       	push	r4
     972:	5f 92       	push	r5
     974:	6f 92       	push	r6
     976:	7f 92       	push	r7
     978:	8f 92       	push	r8
     97a:	9f 92       	push	r9
     97c:	af 92       	push	r10
     97e:	bf 92       	push	r11
     980:	cf 92       	push	r12
     982:	df 92       	push	r13
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     992:	fc 01       	movw	r30, r24
     994:	c2 81       	ldd	r28, Z+2	; 0x02
     996:	d3 81       	ldd	r29, Z+3	; 0x03
     998:	c4 38       	cpi	r28, 0x84	; 132
     99a:	f3 e0       	ldi	r31, 0x03	; 3
     99c:	df 07       	cpc	r29, r31
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <estimate_distance+0x36>
     9a0:	7e c0       	rjmp	.+252    	; 0xa9e <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     9a2:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <kilo_irhigh>
     9a6:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <kilo_irhigh+0x1>
     9aa:	8c 17       	cp	r24, r28
     9ac:	9d 07       	cpc	r25, r29
     9ae:	08 f4       	brcc	.+2      	; 0x9b2 <estimate_distance+0x46>
     9b0:	6f c0       	rjmp	.+222    	; 0xa90 <estimate_distance+0x124>
     9b2:	eb e9       	ldi	r30, 0x9B	; 155
     9b4:	f1 e0       	ldi	r31, 0x01	; 1
     9b6:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     9b8:	81 91       	ld	r24, Z+
     9ba:	91 91       	ld	r25, Z+
     9bc:	8c 17       	cp	r24, r28
     9be:	9d 07       	cpc	r25, r29
     9c0:	20 f0       	brcs	.+8      	; 0x9ca <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     9c2:	1f 5f       	subi	r17, 0xFF	; 255
     9c4:	1e 30       	cpi	r17, 0x0E	; 14
     9c6:	c1 f7       	brne	.-16     	; 0x9b8 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     9c8:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     9ca:	81 2f       	mov	r24, r17
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	fc 01       	movw	r30, r24
     9d0:	ee 0f       	add	r30, r30
     9d2:	ff 1f       	adc	r31, r31
     9d4:	e7 56       	subi	r30, 0x67	; 103
     9d6:	fe 4f       	sbci	r31, 0xFE	; 254
     9d8:	e0 80       	ld	r14, Z
     9da:	f1 80       	ldd	r15, Z+1	; 0x01
     9dc:	88 0f       	add	r24, r24
     9de:	99 1f       	adc	r25, r25
     9e0:	fc 01       	movw	r30, r24
     9e2:	e9 56       	subi	r30, 0x69	; 105
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	80 81       	ld	r24, Z
     9e8:	91 81       	ldd	r25, Z+1	; 0x01
     9ea:	b7 01       	movw	r22, r14
     9ec:	68 1b       	sub	r22, r24
     9ee:	79 0b       	sbc	r23, r25
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	0e 94 ed 0b 	call	0x17da	; 0x17da <__floatunsisf>
     9f8:	9b 01       	movw	r18, r22
     9fa:	ac 01       	movw	r20, r24
     9fc:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__addsf3>
     a00:	4b 01       	movw	r8, r22
     a02:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     a04:	be 01       	movw	r22, r28
     a06:	0d 2e       	mov	r0, r29
     a08:	00 0c       	add	r0, r0
     a0a:	88 0b       	sbc	r24, r24
     a0c:	99 0b       	sbc	r25, r25
     a0e:	0e 94 ef 0b 	call	0x17de	; 0x17de <__floatsisf>
     a12:	2b 01       	movw	r4, r22
     a14:	3c 01       	movw	r6, r24
     a16:	b7 01       	movw	r22, r14
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 ed 0b 	call	0x17da	; 0x17da <__floatunsisf>
     a20:	6b 01       	movw	r12, r22
     a22:	7c 01       	movw	r14, r24
     a24:	61 2f       	mov	r22, r17
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 ed 0b 	call	0x17da	; 0x17da <__floatunsisf>
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e0       	ldi	r20, 0x00	; 0
     a36:	5f e3       	ldi	r21, 0x3F	; 63
     a38:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__mulsf3>
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	a9 01       	movw	r20, r18
     a42:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__addsf3>
     a46:	a5 01       	movw	r20, r10
     a48:	94 01       	movw	r18, r8
     a4a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__mulsf3>
     a4e:	9b 01       	movw	r18, r22
     a50:	ac 01       	movw	r20, r24
     a52:	c7 01       	movw	r24, r14
     a54:	b6 01       	movw	r22, r12
     a56:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__subsf3>
     a5a:	9b 01       	movw	r18, r22
     a5c:	ac 01       	movw	r20, r24
     a5e:	c3 01       	movw	r24, r6
     a60:	b2 01       	movw	r22, r4
     a62:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	40 e2       	ldi	r20, 0x20	; 32
     a6c:	51 e4       	ldi	r21, 0x41	; 65
     a6e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__mulsf3>
     a72:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fixsfsi>
     a76:	7b 01       	movw	r14, r22
     a78:	c5 01       	movw	r24, r10
     a7a:	b4 01       	movw	r22, r8
     a7c:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fixsfsi>
     a80:	ab 01       	movw	r20, r22
     a82:	bc 01       	movw	r22, r24
     a84:	c7 01       	movw	r24, r14
     a86:	ba 01       	movw	r22, r20
     a88:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__divmodhi4>
     a8c:	16 2f       	mov	r17, r22
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     a90:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     a92:	cd 3b       	cpi	r28, 0xBD	; 189
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	d8 07       	cpc	r29, r24
     a98:	0c f4       	brge	.+2      	; 0xa9c <estimate_distance+0x130>
     a9a:	ca c0       	rjmp	.+404    	; 0xc30 <estimate_distance+0x2c4>
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     a9e:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     aa0:	f1 01       	movw	r30, r2
     aa2:	c0 80       	ld	r12, Z
     aa4:	d1 80       	ldd	r13, Z+1	; 0x01
     aa6:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <kilo_irlow>
     aaa:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <kilo_irlow+0x1>
     aae:	8c 15       	cp	r24, r12
     ab0:	9d 05       	cpc	r25, r13
     ab2:	88 f0       	brcs	.+34     	; 0xad6 <estimate_distance+0x16a>
     ab4:	e2 ec       	ldi	r30, 0xC2	; 194
     ab6:	f1 e0       	ldi	r31, 0x01	; 1
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     abe:	e1 90       	ld	r14, Z+
     ac0:	f1 90       	ld	r15, Z+
     ac2:	ec 14       	cp	r14, r12
     ac4:	fd 04       	cpc	r15, r13
     ac6:	08 f4       	brcc	.+2      	; 0xaca <estimate_distance+0x15e>
     ac8:	58 c0       	rjmp	.+176    	; 0xb7a <estimate_distance+0x20e>
     aca:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     acc:	8e 30       	cpi	r24, 0x0E	; 14
     ace:	91 05       	cpc	r25, r1
     ad0:	a9 f7       	brne	.-22     	; 0xabc <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     ad2:	0a e5       	ldi	r16, 0x5A	; 90
     ad4:	01 c0       	rjmp	.+2      	; 0xad8 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     ad6:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     ad8:	1f 3f       	cpi	r17, 0xFF	; 255
     ada:	09 f4       	brne	.+2      	; 0xade <estimate_distance+0x172>
     adc:	4b c0       	rjmp	.+150    	; 0xb74 <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     ade:	be 01       	movw	r22, r28
     ae0:	dd 0f       	add	r29, r29
     ae2:	88 0b       	sbc	r24, r24
     ae4:	99 0b       	sbc	r25, r25
     ae6:	0e 94 ef 0b 	call	0x17de	; 0x17de <__floatsisf>
     aea:	6b 01       	movw	r12, r22
     aec:	7c 01       	movw	r14, r24
     aee:	61 2f       	mov	r22, r17
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	0e 94 ed 0b 	call	0x17da	; 0x17da <__floatunsisf>
     afa:	4b 01       	movw	r8, r22
     afc:	5c 01       	movw	r10, r24
     afe:	a7 01       	movw	r20, r14
     b00:	96 01       	movw	r18, r12
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	81 e6       	ldi	r24, 0x61	; 97
     b08:	94 e4       	ldi	r25, 0x44	; 68
     b0a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__subsf3>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	c5 01       	movw	r24, r10
     b14:	b4 01       	movw	r22, r8
     b16:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__mulsf3>
     b1a:	4b 01       	movw	r8, r22
     b1c:	5c 01       	movw	r10, r24
     b1e:	60 2f       	mov	r22, r16
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 ed 0b 	call	0x17da	; 0x17da <__floatunsisf>
     b2a:	2b 01       	movw	r4, r22
     b2c:	3c 01       	movw	r6, r24
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	4f e2       	ldi	r20, 0x2F	; 47
     b34:	54 e4       	ldi	r21, 0x44	; 68
     b36:	c7 01       	movw	r24, r14
     b38:	b6 01       	movw	r22, r12
     b3a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__subsf3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c3 01       	movw	r24, r6
     b44:	b2 01       	movw	r22, r4
     b46:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__mulsf3>
     b4a:	9b 01       	movw	r18, r22
     b4c:	ac 01       	movw	r20, r24
     b4e:	c5 01       	movw	r24, r10
     b50:	b4 01       	movw	r22, r8
     b52:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__addsf3>
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	48 e4       	ldi	r20, 0x48	; 72
     b5c:	53 e4       	ldi	r21, 0x43	; 67
     b5e:	0e 94 45 0b 	call	0x168a	; 0x168a <__divsf3>
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	44 e0       	ldi	r20, 0x04	; 4
     b68:	52 e4       	ldi	r21, 0x42	; 66
     b6a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__addsf3>
     b6e:	0e 94 be 0b 	call	0x177c	; 0x177c <__fixunssfsi>
     b72:	60 c0       	rjmp	.+192    	; 0xc34 <estimate_distance+0x2c8>
        } else {
            return 33 + dist_low;
     b74:	61 e2       	ldi	r22, 0x21	; 33
     b76:	60 0f       	add	r22, r16
     b78:	5d c0       	rjmp	.+186    	; 0xc34 <estimate_distance+0x2c8>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	fc 01       	movw	r30, r24
     b80:	e2 54       	subi	r30, 0x42	; 66
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	80 81       	ld	r24, Z
     b86:	91 81       	ldd	r25, Z+1	; 0x01
     b88:	b7 01       	movw	r22, r14
     b8a:	68 1b       	sub	r22, r24
     b8c:	79 0b       	sbc	r23, r25
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 ed 0b 	call	0x17da	; 0x17da <__floatunsisf>
     b96:	9b 01       	movw	r18, r22
     b98:	ac 01       	movw	r20, r24
     b9a:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__addsf3>
     b9e:	4b 01       	movw	r8, r22
     ba0:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ba2:	b6 01       	movw	r22, r12
     ba4:	dd 0c       	add	r13, r13
     ba6:	88 0b       	sbc	r24, r24
     ba8:	99 0b       	sbc	r25, r25
     baa:	0e 94 ef 0b 	call	0x17de	; 0x17de <__floatsisf>
     bae:	2b 01       	movw	r4, r22
     bb0:	3c 01       	movw	r6, r24
     bb2:	b7 01       	movw	r22, r14
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 ed 0b 	call	0x17da	; 0x17da <__floatunsisf>
     bbc:	6b 01       	movw	r12, r22
     bbe:	7c 01       	movw	r14, r24
     bc0:	63 2d       	mov	r22, r3
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 ed 0b 	call	0x17da	; 0x17da <__floatunsisf>
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	5f e3       	ldi	r21, 0x3F	; 63
     bd4:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__mulsf3>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	a9 01       	movw	r20, r18
     bde:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__addsf3>
     be2:	a5 01       	movw	r20, r10
     be4:	94 01       	movw	r18, r8
     be6:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__mulsf3>
     bea:	9b 01       	movw	r18, r22
     bec:	ac 01       	movw	r20, r24
     bee:	c7 01       	movw	r24, r14
     bf0:	b6 01       	movw	r22, r12
     bf2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__subsf3>
     bf6:	9b 01       	movw	r18, r22
     bf8:	ac 01       	movw	r20, r24
     bfa:	c3 01       	movw	r24, r6
     bfc:	b2 01       	movw	r22, r4
     bfe:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e2       	ldi	r20, 0x20	; 32
     c08:	51 e4       	ldi	r21, 0x41	; 65
     c0a:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__mulsf3>
     c0e:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fixsfsi>
     c12:	7b 01       	movw	r14, r22
     c14:	c5 01       	movw	r24, r10
     c16:	b4 01       	movw	r22, r8
     c18:	0e 94 b7 0b 	call	0x176e	; 0x176e <__fixsfsi>
     c1c:	ab 01       	movw	r20, r22
     c1e:	bc 01       	movw	r22, r24
     c20:	c7 01       	movw	r24, r14
     c22:	ba 01       	movw	r22, r20
     c24:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__divmodhi4>
     c28:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     c2a:	6f 3f       	cpi	r22, 0xFF	; 255
     c2c:	09 f0       	breq	.+2      	; 0xc30 <estimate_distance+0x2c4>
     c2e:	54 cf       	rjmp	.-344    	; 0xad8 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     c30:	61 e2       	ldi	r22, 0x21	; 33
     c32:	61 0f       	add	r22, r17
    }
}
     c34:	86 2f       	mov	r24, r22
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	7f 90       	pop	r7
     c50:	6f 90       	pop	r6
     c52:	5f 90       	pop	r5
     c54:	4f 90       	pop	r4
     c56:	3f 90       	pop	r3
     c58:	2f 90       	pop	r2
     c5a:	08 95       	ret

00000c5c <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	2f 93       	push	r18
     c68:	3f 93       	push	r19
     c6a:	4f 93       	push	r20
     c6c:	5f 93       	push	r21
     c6e:	6f 93       	push	r22
     c70:	7f 93       	push	r23
     c72:	8f 93       	push	r24
     c74:	9f 93       	push	r25
     c76:	af 93       	push	r26
     c78:	bf 93       	push	r27
     c7a:	ef 93       	push	r30
     c7c:	ff 93       	push	r31
    tx_clock += tx_increment;
     c7e:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <tx_clock>
     c82:	30 91 e0 01 	lds	r19, 0x01E0	; 0x8001e0 <tx_clock+0x1>
     c86:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <tx_increment>
     c8a:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <tx_increment+0x1>
     c8e:	82 0f       	add	r24, r18
     c90:	93 1f       	adc	r25, r19
     c92:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <tx_clock+0x1>
     c96:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <tx_clock>
    tx_increment = 0xFF;
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <tx_increment+0x1>
     ca2:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <tx_increment>
    OCR0A = tx_increment;
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     caa:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <kilo_ticks>
     cae:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <kilo_ticks+0x1>
     cb2:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <kilo_ticks+0x2>
     cb6:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <kilo_ticks+0x3>
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	a1 1d       	adc	r26, r1
     cbe:	b1 1d       	adc	r27, r1
     cc0:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <kilo_ticks>
     cc4:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <kilo_ticks+0x1>
     cc8:	a0 93 bd 01 	sts	0x01BD, r26	; 0x8001bd <kilo_ticks+0x2>
     ccc:	b0 93 be 01 	sts	0x01BE, r27	; 0x8001be <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     cd0:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <rx_busy>
     cd4:	81 11       	cpse	r24, r1
     cd6:	2d c0       	rjmp	.+90     	; 0xd32 <__vector_14+0xd6>
     cd8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <kilo_tx_period>
     cdc:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <kilo_tx_period+0x1>
     ce0:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <tx_clock>
     ce4:	30 91 e0 01 	lds	r19, 0x01E0	; 0x8001e0 <tx_clock+0x1>
     ce8:	82 17       	cp	r24, r18
     cea:	93 07       	cpc	r25, r19
     cec:	10 f5       	brcc	.+68     	; 0xd32 <__vector_14+0xd6>
     cee:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
     cf2:	84 30       	cpi	r24, 0x04	; 4
     cf4:	f1 f4       	brne	.+60     	; 0xd32 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     cf6:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <kilo_message_tx>
     cfa:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <kilo_message_tx+0x1>
     cfe:	09 95       	icall
        if (msg) {
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	b9 f0       	breq	.+46     	; 0xd32 <__vector_14+0xd6>
            if (message_send(msg)) {
     d04:	0e 94 01 0a 	call	0x1402	; 0x1402 <message_send>
     d08:	88 23       	and	r24, r24
     d0a:	51 f0       	breq	.+20     	; 0xd20 <__vector_14+0xc4>
                kilo_message_tx_success();
     d0c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <kilo_message_tx_success>
     d10:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <kilo_message_tx_success+0x1>
     d14:	09 95       	icall
                tx_clock = 0;
     d16:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <tx_clock+0x1>
     d1a:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <tx_clock>
     d1e:	09 c0       	rjmp	.+18     	; 0xd32 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     d20:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <rand>
     d24:	9c 01       	movw	r18, r24
     d26:	33 27       	eor	r19, r19
     d28:	30 93 de 01 	sts	0x01DE, r19	; 0x8001de <tx_increment+0x1>
     d2c:	20 93 dd 01 	sts	0x01DD, r18	; 0x8001dd <tx_increment>
                OCR0A = tx_increment;
     d30:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     d32:	ff 91       	pop	r31
     d34:	ef 91       	pop	r30
     d36:	bf 91       	pop	r27
     d38:	af 91       	pop	r26
     d3a:	9f 91       	pop	r25
     d3c:	8f 91       	pop	r24
     d3e:	7f 91       	pop	r23
     d40:	6f 91       	pop	r22
     d42:	5f 91       	pop	r21
     d44:	4f 91       	pop	r20
     d46:	3f 91       	pop	r19
     d48:	2f 91       	pop	r18
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     d54:	80 ff       	sbrs	r24, 0
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <set_color+0x8>
        DDRD |= (1<<5);
     d58:	55 9a       	sbi	0x0a, 5	; 10
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     d5c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     d5e:	81 ff       	sbrs	r24, 1
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <set_color+0x12>
        DDRD |= (1<<4);
     d62:	54 9a       	sbi	0x0a, 4	; 10
     d64:	01 c0       	rjmp	.+2      	; 0xd68 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     d66:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     d68:	82 ff       	sbrs	r24, 2
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <set_color+0x1c>
        DDRC |= (1<<3);
     d6c:	3b 9a       	sbi	0x07, 3	; 7
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     d70:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     d72:	83 ff       	sbrs	r24, 3
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <set_color+0x26>
        DDRC |= (1<<2);
     d76:	3a 9a       	sbi	0x07, 2	; 7
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     d7a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     d7c:	84 ff       	sbrs	r24, 4
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <set_color+0x30>
        DDRC |= (1<<5);
     d80:	3d 9a       	sbi	0x07, 5	; 7
     d82:	01 c0       	rjmp	.+2      	; 0xd86 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     d84:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     d86:	85 ff       	sbrs	r24, 5
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <set_color+0x3a>
        DDRC |= (1<<4);
     d8a:	3c 9a       	sbi	0x07, 4	; 7
     d8c:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     d8e:	3c 98       	cbi	0x07, 4	; 7
     d90:	08 95       	ret

00000d92 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     d92:	8c 01       	movw	r16, r24
     d94:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     d96:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     d98:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     d9e:	98 e1       	ldi	r25, 0x18	; 24
     da0:	c9 2e       	mov	r12, r25
     da2:	29 e2       	ldi	r18, 0x29	; 41
     da4:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     da6:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <kilo_state>
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	e7 30       	cpi	r30, 0x07	; 7
     dae:	f1 05       	cpc	r31, r1
     db0:	d0 f7       	brcc	.-12     	; 0xda6 <kilo_start+0x14>
     db2:	e5 5c       	subi	r30, 0xC5	; 197
     db4:	ff 4f       	sbci	r31, 0xFF	; 255
     db6:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__tablejump2__>
            case SLEEPING:
                cli();
     dba:	f8 94       	cli
                acomp_off();
     dbc:	80 b7       	in	r24, 0x30	; 48
     dbe:	87 7f       	andi	r24, 0xF7	; 247
     dc0:	80 bf       	out	0x30, r24	; 48
                adc_off();
     dc2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dc6:	8f 77       	andi	r24, 0x7F	; 127
     dc8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     dcc:	14 b8       	out	0x04, r1	; 4
     dce:	17 b8       	out	0x07, r1	; 7
     dd0:	1a b8       	out	0x0a, r1	; 10
     dd2:	15 b8       	out	0x05, r1	; 5
     dd4:	18 b8       	out	0x08, r1	; 8
     dd6:	1b b8       	out	0x0b, r1	; 11
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	a8 95       	wdr
     dde:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     de8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     dec:	80 64       	ori	r24, 0x40	; 64
     dee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     df2:	83 b7       	in	r24, 0x33	; 51
     df4:	81 7f       	andi	r24, 0xF1	; 241
     df6:	84 60       	ori	r24, 0x04	; 4
     df8:	83 bf       	out	0x33, r24	; 51
                cli();
     dfa:	f8 94       	cli
                sleep_enable();
     dfc:	83 b7       	in	r24, 0x33	; 51
     dfe:	81 60       	ori	r24, 0x01	; 1
     e00:	83 bf       	out	0x33, r24	; 51
                sei();
     e02:	78 94       	sei
                sleep_cpu();
     e04:	88 95       	sleep
                sleep_disable();
     e06:	83 b7       	in	r24, 0x33	; 51
     e08:	8e 7f       	andi	r24, 0xFE	; 254
     e0a:	83 bf       	out	0x33, r24	; 51
                sei();
     e0c:	78 94       	sei
                rx_busy = 0;
     e0e:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>
                ports_on();
     e12:	52 9a       	sbi	0x0a, 2	; 10
     e14:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     e16:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e1a:	80 68       	ori	r24, 0x80	; 128
     e1c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e20:	87 e5       	ldi	r24, 0x57	; 87
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <kilo_start+0x92>
     e28:	00 c0       	rjmp	.+0      	; 0xe2a <kilo_start+0x98>
     e2a:	00 00       	nop
                _delay_us(300);
                acomp_on();
     e2c:	80 b7       	in	r24, 0x30	; 48
     e2e:	88 61       	ori	r24, 0x18	; 24
     e30:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     e32:	8f e3       	ldi	r24, 0x3F	; 63
     e34:	0e 94 aa 06 	call	0xd54	; 0xd54 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e38:	ef e1       	ldi	r30, 0x1F	; 31
     e3a:	fe e4       	ldi	r31, 0x4E	; 78
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <kilo_start+0xaa>
     e40:	00 c0       	rjmp	.+0      	; 0xe42 <kilo_start+0xb0>
     e42:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     e44:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <rx_busy>
     e48:	88 23       	and	r24, r24
     e4a:	09 f4       	brne	.+2      	; 0xe4e <kilo_start+0xbc>
     e4c:	50 c0       	rjmp	.+160    	; 0xeee <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     e4e:	83 e0       	ldi	r24, 0x03	; 3
     e50:	0e 94 aa 06 	call	0xd54	; 0xd54 <set_color>
     e54:	ff ef       	ldi	r31, 0xFF	; 255
     e56:	20 e7       	ldi	r18, 0x70	; 112
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	f1 50       	subi	r31, 0x01	; 1
     e5c:	20 40       	sbci	r18, 0x00	; 0
     e5e:	80 40       	sbci	r24, 0x00	; 0
     e60:	e1 f7       	brne	.-8      	; 0xe5a <kilo_start+0xc8>
     e62:	00 c0       	rjmp	.+0      	; 0xe64 <kilo_start+0xd2>
     e64:	00 00       	nop
     e66:	43 c0       	rjmp	.+134    	; 0xeee <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     e68:	8c e0       	ldi	r24, 0x0C	; 12
     e6a:	0e 94 aa 06 	call	0xd54	; 0xd54 <set_color>
     e6e:	ef ec       	ldi	r30, 0xCF	; 207
     e70:	f7 e0       	ldi	r31, 0x07	; 7
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <kilo_start+0xe0>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <kilo_start+0xe6>
     e78:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 aa 06 	call	0xd54	; 0xd54 <set_color>
     e80:	ff ef       	ldi	r31, 0xFF	; 255
     e82:	21 ee       	ldi	r18, 0xE1	; 225
     e84:	84 e0       	ldi	r24, 0x04	; 4
     e86:	f1 50       	subi	r31, 0x01	; 1
     e88:	20 40       	sbci	r18, 0x00	; 0
     e8a:	80 40       	sbci	r24, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <kilo_start+0xf4>
     e8e:	2c c0       	rjmp	.+88     	; 0xee8 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     e90:	0e 94 99 04 	call	0x932	; 0x932 <get_voltage>
                if(voltage > 682)
     e94:	8b 3a       	cpi	r24, 0xAB	; 171
     e96:	e2 e0       	ldi	r30, 0x02	; 2
     e98:	9e 07       	cpc	r25, r30
     e9a:	24 f0       	brlt	.+8      	; 0xea4 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     e9c:	8c e0       	ldi	r24, 0x0C	; 12
     e9e:	0e 94 aa 06 	call	0xd54	; 0xd54 <set_color>
     ea2:	81 cf       	rjmp	.-254    	; 0xda6 <kilo_start+0x14>
                else if(voltage > 648)
     ea4:	89 38       	cpi	r24, 0x89	; 137
     ea6:	f2 e0       	ldi	r31, 0x02	; 2
     ea8:	9f 07       	cpc	r25, r31
     eaa:	14 f0       	brlt	.+4      	; 0xeb0 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     eac:	80 e3       	ldi	r24, 0x30	; 48
     eae:	f7 cf       	rjmp	.-18     	; 0xe9e <kilo_start+0x10c>
                else if(voltage > 614)
     eb0:	87 36       	cpi	r24, 0x67	; 103
     eb2:	92 40       	sbci	r25, 0x02	; 2
     eb4:	14 f0       	brlt	.+4      	; 0xeba <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     eb6:	8f e0       	ldi	r24, 0x0F	; 15
     eb8:	f2 cf       	rjmp	.-28     	; 0xe9e <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	f0 cf       	rjmp	.-32     	; 0xe9e <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     ebe:	48 99       	sbic	0x09, 0	; 9
     ec0:	16 c0       	rjmp	.+44     	; 0xeee <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	0e 94 aa 06 	call	0xd54	; 0xd54 <set_color>
     ec8:	8f ec       	ldi	r24, 0xCF	; 207
     eca:	97 e0       	ldi	r25, 0x07	; 7
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <kilo_start+0x13a>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <kilo_start+0x140>
     ed2:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	0e 94 aa 06 	call	0xd54	; 0xd54 <set_color>
     eda:	9f ef       	ldi	r25, 0xFF	; 255
     edc:	e1 ee       	ldi	r30, 0xE1	; 225
     ede:	f4 e0       	ldi	r31, 0x04	; 4
     ee0:	91 50       	subi	r25, 0x01	; 1
     ee2:	e0 40       	sbci	r30, 0x00	; 0
     ee4:	f0 40       	sbci	r31, 0x00	; 0
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <kilo_start+0x14e>
     ee8:	00 c0       	rjmp	.+0      	; 0xeea <kilo_start+0x158>
     eea:	00 00       	nop
     eec:	5c cf       	rjmp	.-328    	; 0xda6 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	d6 cf       	rjmp	.-84     	; 0xe9e <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     ef2:	d1 11       	cpse	r29, r1
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <kilo_start+0x168>
                    setup();
     ef6:	f8 01       	movw	r30, r16
     ef8:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     efa:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <kilo_state>
     efe:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     f00:	f7 01       	movw	r30, r14
     f02:	09 95       	icall
                break;
     f04:	50 cf       	rjmp	.-352    	; 0xda6 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     f06:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cur_motion>
     f0a:	81 11       	cpse	r24, r1
     f0c:	07 c0       	rjmp	.+14     	; 0xf1c <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     f0e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     f12:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     f16:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prev_motion>
     f1a:	45 cf       	rjmp	.-374    	; 0xda6 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     f1c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cur_motion>
     f20:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <prev_motion>
     f24:	98 17       	cp	r25, r24
     f26:	09 f4       	brne	.+2      	; 0xf2a <kilo_start+0x198>
     f28:	3e cf       	rjmp	.-388    	; 0xda6 <kilo_start+0x14>
                        prev_motion = cur_motion;
     f2a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cur_motion>
     f2e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     f32:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cur_motion>
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	89 f4       	brne	.+34     	; 0xf5c <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     f3a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     f3e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f42:	8f e2       	ldi	r24, 0x2F	; 47
     f44:	95 e7       	ldi	r25, 0x75	; 117
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <kilo_start+0x1b4>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <kilo_start+0x1ba>
     f4c:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     f4e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     f52:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     f56:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f5a:	25 cf       	rjmp	.-438    	; 0xda6 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     f5c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     f60:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     f64:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	59 f4       	brne	.+22     	; 0xf82 <kilo_start+0x1f0>
     f6c:	ef e2       	ldi	r30, 0x2F	; 47
     f6e:	f5 e7       	ldi	r31, 0x75	; 117
     f70:	31 97       	sbiw	r30, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <kilo_start+0x1de>
     f74:	00 c0       	rjmp	.+0      	; 0xf76 <kilo_start+0x1e4>
     f76:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     f78:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     f7c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     f80:	10 c0       	rjmp	.+32     	; 0xfa2 <kilo_start+0x210>
     f82:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     f86:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f8a:	8f e2       	ldi	r24, 0x2F	; 47
     f8c:	95 e7       	ldi	r25, 0x75	; 117
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <kilo_start+0x1fc>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <kilo_start+0x202>
     f94:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     f96:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <kilo_straight_right>
     f9a:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     f9e:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     fa2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fa6:	ff ce       	rjmp	.-514    	; 0xda6 <kilo_start+0x14>

00000fa8 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     fa8:	1f 92       	push	r1
     faa:	0f 92       	push	r0
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	0f 92       	push	r0
     fb0:	11 24       	eor	r1, r1
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
    rx_timer_off();
     fb6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     fba:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     fbe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <rx_leadingbit>
    rx_leadingbyte = 1;
     fc8:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <rx_leadingbyte>
    rx_busy = 0;
     fcc:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>
    adc_trigger_high_gain();
     fd0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     fd4:	93 ea       	ldi	r25, 0xA3	; 163
     fd6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     fda:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	0f 90       	pop	r0
     fe8:	1f 90       	pop	r1
     fea:	18 95       	reti

00000fec <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     fec:	1f 92       	push	r1
     fee:	0f 92       	push	r0
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	0f 92       	push	r0
     ff4:	11 24       	eor	r1, r1
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	2f 93       	push	r18
     ffc:	3f 93       	push	r19
     ffe:	4f 93       	push	r20
    1000:	5f 93       	push	r21
    1002:	6f 93       	push	r22
    1004:	7f 93       	push	r23
    1006:	8f 93       	push	r24
    1008:	9f 93       	push	r25
    100a:	af 93       	push	r26
    100c:	bf 93       	push	r27
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    1012:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1016:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
    101a:	41 e0       	ldi	r20, 0x01	; 1
    101c:	40 93 bf 01 	sts	0x01BF, r20	; 0x8001bf <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    1020:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <rx_leadingbit>
    1024:	88 23       	and	r24, r24
    1026:	21 f1       	breq	.+72     	; 0x1070 <__vector_23+0x84>
        rx_timer_on();
    1028:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    102c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    1030:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
    1034:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <rx_bytevalue>
        rx_leadingbit = 0;
    1038:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <rx_leadingbit>
        if (rx_leadingbyte) {
    103c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rx_leadingbyte>
    1040:	88 23       	and	r24, r24
    1042:	09 f4       	brne	.+2      	; 0x1046 <__vector_23+0x5a>
    1044:	af c1       	rjmp	.+862    	; 0x13a4 <__vector_23+0x3b8>
            adc_finish_conversion();
    1046:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    104a:	86 fd       	sbrc	r24, 6
    104c:	fc cf       	rjmp	.-8      	; 0x1046 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
    104e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1052:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    1056:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <rx_dist+0x3>
    105a:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <rx_dist+0x2>
            adc_trigger_low_gain();
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1064:	93 ea       	ldi	r25, 0xA3	; 163
    1066:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    106a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
    106e:	9a c1       	rjmp	.+820    	; 0x13a4 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1070:	c9 01       	movw	r24, r18
    1072:	87 58       	subi	r24, 0x87	; 135
    1074:	91 09       	sbc	r25, r1
    1076:	84 37       	cpi	r24, 0x74	; 116
    1078:	99 40       	sbci	r25, 0x09	; 9
    107a:	a0 f0       	brcs	.+40     	; 0x10a4 <__vector_23+0xb8>
            rx_timer_off();
    107c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1080:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1084:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
    1088:	40 93 98 01 	sts	0x0198, r20	; 0x800198 <rx_leadingbit>
            rx_leadingbyte = 1;
    108c:	40 93 dc 01 	sts	0x01DC, r20	; 0x8001dc <rx_leadingbyte>
            rx_busy = 0;
    1090:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>
            adc_trigger_high_gain();
    1094:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    1098:	83 ea       	ldi	r24, 0xA3	; 163
    109a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    109e:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
    10a2:	80 c1       	rjmp	.+768    	; 0x13a4 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    10a4:	26 58       	subi	r18, 0x86	; 134
    10a6:	31 09       	sbc	r19, r1
    10a8:	a4 ef       	ldi	r26, 0xF4	; 244
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	0e 94 b5 0a 	call	0x156a	; 0x156a <__umulhisi3>
    10b0:	8c 01       	movw	r16, r24
    10b2:	22 27       	eor	r18, r18
    10b4:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
    10b6:	08 30       	cpi	r16, 0x08	; 8
    10b8:	60 f4       	brcc	.+24     	; 0x10d2 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	01 c0       	rjmp	.+2      	; 0x10c2 <__vector_23+0xd6>
    10c0:	88 0f       	add	r24, r24
    10c2:	0a 95       	dec	r16
    10c4:	ea f7       	brpl	.-6      	; 0x10c0 <__vector_23+0xd4>
    10c6:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <rx_bytevalue>
    10ca:	89 2b       	or	r24, r25
    10cc:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <rx_bytevalue>
    10d0:	69 c1       	rjmp	.+722    	; 0x13a4 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    10d2:	40 93 98 01 	sts	0x0198, r20	; 0x800198 <rx_leadingbit>
                if (rx_leadingbyte) {
    10d6:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rx_leadingbyte>
    10da:	88 23       	and	r24, r24
    10dc:	41 f1       	breq	.+80     	; 0x112e <__vector_23+0x142>
                    adc_finish_conversion();
    10de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10e2:	86 fd       	sbrc	r24, 6
    10e4:	fc cf       	rjmp	.-8      	; 0x10de <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
    10e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    10ea:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    10ee:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <rx_dist+0x1>
    10f2:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <rx_dist>
                    adc_trigger_high_gain();
    10f6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    10fa:	83 ea       	ldi	r24, 0xA3	; 163
    10fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
    1106:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <rx_bytevalue>
    110a:	99 23       	and	r25, r25
    110c:	59 f0       	breq	.+22     	; 0x1124 <__vector_23+0x138>
                        rx_timer_off();
    110e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1112:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1116:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
    111a:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <rx_leadingbyte>
                        rx_busy = 0;
    111e:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>
    1122:	40 c1       	rjmp	.+640    	; 0x13a4 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    1124:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <rx_leadingbyte>
                        rx_byteindex = 0;
    1128:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <rx_byteindex>
    112c:	3b c1       	rjmp	.+630    	; 0x13a4 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    112e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <rx_byteindex>
    1132:	e8 2f       	mov	r30, r24
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	ee 51       	subi	r30, 0x1E	; 30
    1138:	fe 4f       	sbci	r31, 0xFE	; 254
    113a:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <rx_bytevalue>
    113e:	90 83       	st	Z, r25
                    rx_byteindex++;
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
    1146:	8c 30       	cpi	r24, 0x0C	; 12
    1148:	09 f0       	breq	.+2      	; 0x114c <__vector_23+0x160>
    114a:	2c c1       	rjmp	.+600    	; 0x13a4 <__vector_23+0x3b8>
                        rx_timer_off();
    114c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1150:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1154:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
    1158:	40 93 dc 01 	sts	0x01DC, r20	; 0x8001dc <rx_leadingbyte>
                        rx_busy = 0;
    115c:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
    1160:	00 91 ec 01 	lds	r16, 0x01EC	; 0x8001ec <rx_msg+0xa>
    1164:	10 91 ed 01 	lds	r17, 0x01ED	; 0x8001ed <rx_msg+0xb>
    1168:	82 ee       	ldi	r24, 0xE2	; 226
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <message_crc>
    1170:	08 17       	cp	r16, r24
    1172:	19 07       	cpc	r17, r25
    1174:	09 f0       	breq	.+2      	; 0x1178 <__vector_23+0x18c>
    1176:	16 c1       	rjmp	.+556    	; 0x13a4 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    1178:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <rx_msg+0x9>
    117c:	e7 fd       	sbrc	r30, 7
    117e:	0a c0       	rjmp	.+20     	; 0x1194 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
    1180:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <kilo_message_rx>
    1184:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <kilo_message_rx+0x1>
    1188:	67 eb       	ldi	r22, 0xB7	; 183
    118a:	71 e0       	ldi	r23, 0x01	; 1
    118c:	82 ee       	ldi	r24, 0xE2	; 226
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	09 95       	icall
    1192:	08 c1       	rjmp	.+528    	; 0x13a4 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    1194:	88 e7       	ldi	r24, 0x78	; 120
    1196:	8e 0f       	add	r24, r30
    1198:	83 30       	cpi	r24, 0x03	; 3
    119a:	30 f0       	brcs	.+12     	; 0x11a8 <__vector_23+0x1bc>
        motors_off();
    119c:	53 98       	cbi	0x0a, 3	; 10
    119e:	23 98       	cbi	0x04, 3	; 4
    11a0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    11a4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
    11a8:	8e 2f       	mov	r24, r30
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	fc 01       	movw	r30, r24
    11ae:	e0 58       	subi	r30, 0x80	; 128
    11b0:	f1 09       	sbc	r31, r1
    11b2:	eb 30       	cpi	r30, 0x0B	; 11
    11b4:	f1 05       	cpc	r31, r1
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <__vector_23+0x1ce>
    11b8:	f5 c0       	rjmp	.+490    	; 0x13a4 <__vector_23+0x3b8>
    11ba:	ee 5b       	subi	r30, 0xBE	; 190
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__tablejump2__>
        case BOOT:
            tx_timer_off();
    11c2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    11c6:	8d 7f       	andi	r24, 0xFD	; 253
    11c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    11cc:	16 bc       	out	0x26, r1	; 38
            bootload();
    11ce:	e0 e0       	ldi	r30, 0x00	; 0
    11d0:	f0 e7       	ldi	r31, 0x70	; 112
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
    11d4:	e0 e0       	ldi	r30, 0x00	; 0
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    11da:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <kilo_state>
    11de:	e2 c0       	rjmp	.+452    	; 0x13a4 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	b2 c0       	rjmp	.+356    	; 0x1348 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
    11e4:	85 e0       	ldi	r24, 0x05	; 5
    11e6:	b0 c0       	rjmp	.+352    	; 0x1348 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	ae c0       	rjmp	.+348    	; 0x1348 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    11ec:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
    11f0:	83 30       	cpi	r24, 0x03	; 3
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <__vector_23+0x20a>
    11f4:	d7 c0       	rjmp	.+430    	; 0x13a4 <__vector_23+0x3b8>
    11f6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	09 f4       	brne	.+2      	; 0x1200 <__vector_23+0x214>
    11fe:	d2 c0       	rjmp	.+420    	; 0x13a4 <__vector_23+0x3b8>
                motors_on();
    1200:	53 9a       	sbi	0x0a, 3	; 10
    1202:	23 9a       	sbi	0x04, 3	; 4
    1204:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1208:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	9c c0       	rjmp	.+312    	; 0x1348 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1210:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <rx_msg>
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	09 f4       	brne	.+2      	; 0x121a <__vector_23+0x22e>
    1218:	4b c0       	rjmp	.+150    	; 0x12b0 <__vector_23+0x2c4>
    121a:	80 f4       	brcc	.+32     	; 0x123c <__vector_23+0x250>
    121c:	88 23       	and	r24, r24
    121e:	a9 f0       	breq	.+42     	; 0x124a <__vector_23+0x25e>
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	09 f0       	breq	.+2      	; 0x1226 <__vector_23+0x23a>
    1224:	82 c0       	rjmp	.+260    	; 0x132a <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1226:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <rx_msg+0x1>
    122a:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <rx_msg+0x2>
    122e:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <kilo_uid+0x1>
    1232:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <kilo_uid>
                    cur_motion = MOVE_STOP;
    1236:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cur_motion>
    123a:	77 c0       	rjmp	.+238    	; 0x132a <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    123c:	83 30       	cpi	r24, 0x03	; 3
    123e:	09 f4       	brne	.+2      	; 0x1242 <__vector_23+0x256>
    1240:	49 c0       	rjmp	.+146    	; 0x12d4 <__vector_23+0x2e8>
    1242:	84 30       	cpi	r24, 0x04	; 4
    1244:	09 f4       	brne	.+2      	; 0x1248 <__vector_23+0x25c>
    1246:	58 c0       	rjmp	.+176    	; 0x12f8 <__vector_23+0x30c>
    1248:	70 c0       	rjmp	.+224    	; 0x132a <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    124a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
    124e:	86 30       	cpi	r24, 0x06	; 6
    1250:	09 f0       	breq	.+2      	; 0x1254 <__vector_23+0x268>
    1252:	6b c0       	rjmp	.+214    	; 0x132a <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    1254:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <kilo_uid>
    1258:	80 eb       	ldi	r24, 0xB0	; 176
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1260:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <kilo_uid+0x1>
    1264:	81 eb       	ldi	r24, 0xB1	; 177
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    126c:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <kilo_turn_left>
    1270:	85 e0       	ldi	r24, 0x05	; 5
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    1278:	60 91 e1 01 	lds	r22, 0x01E1	; 0x8001e1 <kilo_turn_right>
    127c:	89 e0       	ldi	r24, 0x09	; 9
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1284:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <kilo_straight_left>
    1288:	8c e0       	ldi	r24, 0x0C	; 12
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1290:	60 91 f4 01 	lds	r22, 0x01F4	; 0x8001f4 <kilo_straight_right>
    1294:	84 e1       	ldi	r24, 0x14	; 20
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <eeprom_write_byte>
                        motors_off();
    129c:	53 98       	cbi	0x0a, 3	; 10
    129e:	23 98       	cbi	0x04, 3	; 4
    12a0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    12a4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <kilo_state>
    12ae:	3d c0       	rjmp	.+122    	; 0x132a <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    12b0:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cur_motion>
    12b4:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <rx_msg+0x3>
    12b8:	91 30       	cpi	r25, 0x01	; 1
    12ba:	21 f4       	brne	.+8      	; 0x12c4 <__vector_23+0x2d8>
    12bc:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <kilo_turn_left>
    12c0:	89 17       	cp	r24, r25
    12c2:	99 f1       	breq	.+102    	; 0x132a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    12c4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prev_motion>
                        cur_motion = MOVE_LEFT;
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    12ce:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <kilo_turn_left>
    12d2:	2b c0       	rjmp	.+86     	; 0x132a <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12d4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cur_motion>
    12d8:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <rx_msg+0x4>
    12dc:	92 30       	cpi	r25, 0x02	; 2
    12de:	21 f4       	brne	.+8      	; 0x12e8 <__vector_23+0x2fc>
    12e0:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <kilo_turn_right>
    12e4:	89 17       	cp	r24, r25
    12e6:	09 f1       	breq	.+66     	; 0x132a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    12e8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    12f2:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <kilo_turn_right>
    12f6:	19 c0       	rjmp	.+50     	; 0x132a <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12f8:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <cur_motion>
    12fc:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <rx_msg+0x6>
    1300:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <rx_msg+0x5>
    1304:	23 30       	cpi	r18, 0x03	; 3
    1306:	41 f4       	brne	.+16     	; 0x1318 <__vector_23+0x32c>
    1308:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <kilo_straight_right>
    130c:	82 13       	cpse	r24, r18
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <__vector_23+0x32c>
    1310:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <kilo_straight_left>
    1314:	92 17       	cp	r25, r18
    1316:	49 f0       	breq	.+18     	; 0x132a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1318:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    131c:	23 e0       	ldi	r18, 0x03	; 3
    131e:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    1322:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    1326:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    132a:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <rx_msg>
    132e:	88 23       	and	r24, r24
    1330:	c9 f1       	breq	.+114    	; 0x13a4 <__vector_23+0x3b8>
    1332:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
    1336:	86 30       	cpi	r24, 0x06	; 6
    1338:	a9 f1       	breq	.+106    	; 0x13a4 <__vector_23+0x3b8>
                motors_on();
    133a:	53 9a       	sbi	0x0a, 3	; 10
    133c:	23 9a       	sbi	0x04, 3	; 4
    133e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1342:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    1346:	86 e0       	ldi	r24, 0x06	; 6
    1348:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <kilo_state>
    134c:	2b c0       	rjmp	.+86     	; 0x13a4 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    134e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
    1352:	86 30       	cpi	r24, 0x06	; 6
    1354:	81 f0       	breq	.+32     	; 0x1376 <__vector_23+0x38a>
                motors_on();
    1356:	53 9a       	sbi	0x0a, 3	; 10
    1358:	23 9a       	sbi	0x04, 3	; 4
    135a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    135e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	0e 94 aa 06 	call	0xd54	; 0xd54 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    1368:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cur_motion>
    136c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prev_motion>
                kilo_state = MOVING;
    1370:	86 e0       	ldi	r24, 0x06	; 6
    1372:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	00 90 e2 01 	lds	r0, 0x01E2	; 0x8001e2 <rx_msg>
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <__vector_23+0x398>
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <__vector_23+0x394>
    1388:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <kilo_uid>
    138c:	30 91 f2 01 	lds	r19, 0x01F2	; 0x8001f2 <kilo_uid+0x1>
    1390:	82 23       	and	r24, r18
    1392:	93 23       	and	r25, r19
    1394:	89 2b       	or	r24, r25
    1396:	21 f0       	breq	.+8      	; 0x13a0 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <cur_motion>
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    13a0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cur_motion>
                    }
                }
            }
        }
    }
}
    13a4:	ff 91       	pop	r31
    13a6:	ef 91       	pop	r30
    13a8:	bf 91       	pop	r27
    13aa:	af 91       	pop	r26
    13ac:	9f 91       	pop	r25
    13ae:	8f 91       	pop	r24
    13b0:	7f 91       	pop	r23
    13b2:	6f 91       	pop	r22
    13b4:	5f 91       	pop	r21
    13b6:	4f 91       	pop	r20
    13b8:	3f 91       	pop	r19
    13ba:	2f 91       	pop	r18
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	0f 90       	pop	r0
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	0f 90       	pop	r0
    13c6:	1f 90       	pop	r1
    13c8:	18 95       	reti

000013ca <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    13ca:	fc 01       	movw	r30, r24
    13cc:	9c 01       	movw	r18, r24
    13ce:	26 5f       	subi	r18, 0xF6	; 246
    13d0:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    13d6:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    13d8:	84 27       	eor	r24, r20
    13da:	08 2e       	mov	r0, r24
    13dc:	82 95       	swap	r24
    13de:	80 7f       	andi	r24, 0xF0	; 240
    13e0:	80 25       	eor	r24, r0
    13e2:	09 2e       	mov	r0, r25
    13e4:	98 2f       	mov	r25, r24
    13e6:	82 95       	swap	r24
    13e8:	8f 70       	andi	r24, 0x0F	; 15
    13ea:	08 26       	eor	r0, r24
    13ec:	86 95       	lsr	r24
    13ee:	98 27       	eor	r25, r24
    13f0:	89 27       	eor	r24, r25
    13f2:	88 0f       	add	r24, r24
    13f4:	88 0f       	add	r24, r24
    13f6:	88 0f       	add	r24, r24
    13f8:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    13fa:	e2 17       	cp	r30, r18
    13fc:	f3 07       	cpc	r31, r19
    13fe:	59 f7       	brne	.-42     	; 0x13d6 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1400:	08 95       	ret

00001402 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    1402:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    1404:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1406:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1408:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <tx_mask>
    or tmpreg1, ddrreg
    140c:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    140e:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1410:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1412:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <tx_mask>
    1416:	20 30       	cpi	r18, 0x00	; 0
    1418:	29 f0       	breq	.+10     	; 0x1424 <message_send+0x22>
    141a:	00 00       	nop
    141c:	25 b1       	in	r18, 0x05	; 5
    141e:	23 2b       	or	r18, r19
    1420:	25 b9       	out	0x05, r18	; 5
    1422:	04 c0       	rjmp	.+8      	; 0x142c <message_send+0x2a>
    1424:	00 00       	nop
    1426:	00 00       	nop
    1428:	00 00       	nop
    142a:	00 c0       	rjmp	.+0      	; 0x142c <message_send+0x2a>
    142c:	00 00       	nop
    142e:	00 00       	nop
    1430:	00 00       	nop
    1432:	30 95       	com	r19
    1434:	25 b1       	in	r18, 0x05	; 5
    1436:	23 23       	and	r18, r19
    1438:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    143a:	2e ea       	ldi	r18, 0xAE	; 174
    143c:	2a 95       	dec	r18
    143e:	f1 f7       	brne	.-4      	; 0x143c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1440:	2b ee       	ldi	r18, 0xEB	; 235

00001442 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1442:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1444:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1446:	0a c0       	rjmp	.+20     	; 0x145c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1448:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    144a:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <tx_mask>
    com tmpreg2
    144e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1450:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1452:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1454:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1456:	0f be       	out	0x3f, r0	; 63
    return 0
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	08 95       	ret

0000145c <nocollision>:
nocollision:
    nop
    145c:	00 00       	nop
    dec tmpreg1
    145e:	2a 95       	dec	r18
    brne checkcollision
    1460:	81 f7       	brne	.-32     	; 0x1442 <checkcollision>

    ldi tmpreg1, 0x01
    1462:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1464:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <tx_mask>
    1468:	20 30       	cpi	r18, 0x00	; 0
    146a:	29 f0       	breq	.+10     	; 0x1476 <nocollision+0x1a>
    146c:	00 00       	nop
    146e:	25 b1       	in	r18, 0x05	; 5
    1470:	23 2b       	or	r18, r19
    1472:	25 b9       	out	0x05, r18	; 5
    1474:	04 c0       	rjmp	.+8      	; 0x147e <nocollision+0x22>
    1476:	00 00       	nop
    1478:	00 00       	nop
    147a:	00 00       	nop
    147c:	00 c0       	rjmp	.+0      	; 0x147e <nocollision+0x22>
    147e:	00 00       	nop
    1480:	00 00       	nop
    1482:	00 00       	nop
    1484:	30 95       	com	r19
    1486:	25 b1       	in	r18, 0x05	; 5
    1488:	23 23       	and	r18, r19
    148a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    148c:	00 00       	nop
    148e:	24 e5       	ldi	r18, 0x54	; 84
    1490:	2a 95       	dec	r18
    1492:	f1 f7       	brne	.-4      	; 0x1490 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1494:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1496:	8c e0       	ldi	r24, 0x0C	; 12

00001498 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1498:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    149a:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    149c:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    149e:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    14a0:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    14a2:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    14a4:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    14a8:	50 e0       	ldi	r21, 0x00	; 0

000014aa <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    14aa:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    14ac:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    14ae:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    14b0:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    14b2:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <tx_mask>
    14b6:	20 30       	cpi	r18, 0x00	; 0
    14b8:	29 f0       	breq	.+10     	; 0x14c4 <sendbit+0x1a>
    14ba:	00 00       	nop
    14bc:	25 b1       	in	r18, 0x05	; 5
    14be:	23 2b       	or	r18, r19
    14c0:	25 b9       	out	0x05, r18	; 5
    14c2:	04 c0       	rjmp	.+8      	; 0x14cc <sendbit+0x22>
    14c4:	00 00       	nop
    14c6:	00 00       	nop
    14c8:	00 00       	nop
    14ca:	00 c0       	rjmp	.+0      	; 0x14cc <sendbit+0x22>
    14cc:	00 00       	nop
    14ce:	00 00       	nop
    14d0:	00 00       	nop
    14d2:	30 95       	com	r19
    14d4:	25 b1       	in	r18, 0x05	; 5
    14d6:	23 23       	and	r18, r19
    14d8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    14da:	00 00       	nop
    14dc:	21 e5       	ldi	r18, 0x51	; 81
    14de:	2a 95       	dec	r18
    14e0:	f1 f7       	brne	.-4      	; 0x14de <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    14e2:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    14e4:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    14e6:	9a 95       	dec	r25
    brne sendbit
    14e8:	01 f7       	brne	.-64     	; 0x14aa <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    14ea:	8a 95       	dec	r24
    brne sendbyte
    14ec:	a9 f6       	brne	.-86     	; 0x1498 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    14ee:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    14f0:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    14f2:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    14f4:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    14f6:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <tx_mask>
    com tmpreg2
    14fa:	30 95       	com	r19
    in tmpreg1, IR_PORT
    14fc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    14fe:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1500:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1502:	0f be       	out	0x3f, r0	; 63
    return 1
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	08 95       	ret

00001508 <main>:
    }
}

// Do main things
int main() {
    kilo_init();
    1508:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <kilo_init>
    kilo_message_rx = message_rx;
    150c:	8e ed       	ldi	r24, 0xDE	; 222
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <kilo_message_rx+0x1>
    1514:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <kilo_message_rx>
    kilo_message_tx = message_tx;
    1518:	83 ec       	ldi	r24, 0xC3	; 195
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <kilo_message_tx+0x1>
    1520:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <kilo_message_tx>
    kilo_start(setup, loop);
    1524:	6d ee       	ldi	r22, 0xED	; 237
    1526:	71 e0       	ldi	r23, 0x01	; 1
    1528:	88 e7       	ldi	r24, 0x78	; 120
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 c9 06 	call	0xd92	; 0xd92 <kilo_start>

    return 0;
}
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	08 95       	ret

00001536 <__divmodhi4>:
    1536:	97 fb       	bst	r25, 7
    1538:	07 2e       	mov	r0, r23
    153a:	16 f4       	brtc	.+4      	; 0x1540 <__divmodhi4+0xa>
    153c:	00 94       	com	r0
    153e:	07 d0       	rcall	.+14     	; 0x154e <__divmodhi4_neg1>
    1540:	77 fd       	sbrc	r23, 7
    1542:	09 d0       	rcall	.+18     	; 0x1556 <__divmodhi4_neg2>
    1544:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__udivmodhi4>
    1548:	07 fc       	sbrc	r0, 7
    154a:	05 d0       	rcall	.+10     	; 0x1556 <__divmodhi4_neg2>
    154c:	3e f4       	brtc	.+14     	; 0x155c <__divmodhi4_exit>

0000154e <__divmodhi4_neg1>:
    154e:	90 95       	com	r25
    1550:	81 95       	neg	r24
    1552:	9f 4f       	sbci	r25, 0xFF	; 255
    1554:	08 95       	ret

00001556 <__divmodhi4_neg2>:
    1556:	70 95       	com	r23
    1558:	61 95       	neg	r22
    155a:	7f 4f       	sbci	r23, 0xFF	; 255

0000155c <__divmodhi4_exit>:
    155c:	08 95       	ret

0000155e <__tablejump2__>:
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	05 90       	lpm	r0, Z+
    1564:	f4 91       	lpm	r31, Z
    1566:	e0 2d       	mov	r30, r0
    1568:	09 94       	ijmp

0000156a <__umulhisi3>:
    156a:	a2 9f       	mul	r26, r18
    156c:	b0 01       	movw	r22, r0
    156e:	b3 9f       	mul	r27, r19
    1570:	c0 01       	movw	r24, r0
    1572:	a3 9f       	mul	r26, r19
    1574:	70 0d       	add	r23, r0
    1576:	81 1d       	adc	r24, r1
    1578:	11 24       	eor	r1, r1
    157a:	91 1d       	adc	r25, r1
    157c:	b2 9f       	mul	r27, r18
    157e:	70 0d       	add	r23, r0
    1580:	81 1d       	adc	r24, r1
    1582:	11 24       	eor	r1, r1
    1584:	91 1d       	adc	r25, r1
    1586:	08 95       	ret

00001588 <__udivmodhi4>:
    1588:	aa 1b       	sub	r26, r26
    158a:	bb 1b       	sub	r27, r27
    158c:	51 e1       	ldi	r21, 0x11	; 17
    158e:	07 c0       	rjmp	.+14     	; 0x159e <__udivmodhi4_ep>

00001590 <__udivmodhi4_loop>:
    1590:	aa 1f       	adc	r26, r26
    1592:	bb 1f       	adc	r27, r27
    1594:	a6 17       	cp	r26, r22
    1596:	b7 07       	cpc	r27, r23
    1598:	10 f0       	brcs	.+4      	; 0x159e <__udivmodhi4_ep>
    159a:	a6 1b       	sub	r26, r22
    159c:	b7 0b       	sbc	r27, r23

0000159e <__udivmodhi4_ep>:
    159e:	88 1f       	adc	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	5a 95       	dec	r21
    15a4:	a9 f7       	brne	.-22     	; 0x1590 <__udivmodhi4_loop>
    15a6:	80 95       	com	r24
    15a8:	90 95       	com	r25
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	08 95       	ret

000015b0 <__subsf3>:
    15b0:	50 58       	subi	r21, 0x80	; 128

000015b2 <__addsf3>:
    15b2:	bb 27       	eor	r27, r27
    15b4:	aa 27       	eor	r26, r26
    15b6:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__addsf3x>
    15ba:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__fp_round>
    15be:	0e 94 33 0c 	call	0x1866	; 0x1866 <__fp_pscA>
    15c2:	38 f0       	brcs	.+14     	; 0x15d2 <__addsf3+0x20>
    15c4:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fp_pscB>
    15c8:	20 f0       	brcs	.+8      	; 0x15d2 <__addsf3+0x20>
    15ca:	39 f4       	brne	.+14     	; 0x15da <__addsf3+0x28>
    15cc:	9f 3f       	cpi	r25, 0xFF	; 255
    15ce:	19 f4       	brne	.+6      	; 0x15d6 <__addsf3+0x24>
    15d0:	26 f4       	brtc	.+8      	; 0x15da <__addsf3+0x28>
    15d2:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__fp_nan>
    15d6:	0e f4       	brtc	.+2      	; 0x15da <__addsf3+0x28>
    15d8:	e0 95       	com	r30
    15da:	e7 fb       	bst	r30, 7
    15dc:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__fp_inf>

000015e0 <__addsf3x>:
    15e0:	e9 2f       	mov	r30, r25
    15e2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__fp_split3>
    15e6:	58 f3       	brcs	.-42     	; 0x15be <__addsf3+0xc>
    15e8:	ba 17       	cp	r27, r26
    15ea:	62 07       	cpc	r22, r18
    15ec:	73 07       	cpc	r23, r19
    15ee:	84 07       	cpc	r24, r20
    15f0:	95 07       	cpc	r25, r21
    15f2:	20 f0       	brcs	.+8      	; 0x15fc <__addsf3x+0x1c>
    15f4:	79 f4       	brne	.+30     	; 0x1614 <__addsf3x+0x34>
    15f6:	a6 f5       	brtc	.+104    	; 0x1660 <__addsf3x+0x80>
    15f8:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__fp_zero>
    15fc:	0e f4       	brtc	.+2      	; 0x1600 <__addsf3x+0x20>
    15fe:	e0 95       	com	r30
    1600:	0b 2e       	mov	r0, r27
    1602:	ba 2f       	mov	r27, r26
    1604:	a0 2d       	mov	r26, r0
    1606:	0b 01       	movw	r0, r22
    1608:	b9 01       	movw	r22, r18
    160a:	90 01       	movw	r18, r0
    160c:	0c 01       	movw	r0, r24
    160e:	ca 01       	movw	r24, r20
    1610:	a0 01       	movw	r20, r0
    1612:	11 24       	eor	r1, r1
    1614:	ff 27       	eor	r31, r31
    1616:	59 1b       	sub	r21, r25
    1618:	99 f0       	breq	.+38     	; 0x1640 <__addsf3x+0x60>
    161a:	59 3f       	cpi	r21, 0xF9	; 249
    161c:	50 f4       	brcc	.+20     	; 0x1632 <__addsf3x+0x52>
    161e:	50 3e       	cpi	r21, 0xE0	; 224
    1620:	68 f1       	brcs	.+90     	; 0x167c <__addsf3x+0x9c>
    1622:	1a 16       	cp	r1, r26
    1624:	f0 40       	sbci	r31, 0x00	; 0
    1626:	a2 2f       	mov	r26, r18
    1628:	23 2f       	mov	r18, r19
    162a:	34 2f       	mov	r19, r20
    162c:	44 27       	eor	r20, r20
    162e:	58 5f       	subi	r21, 0xF8	; 248
    1630:	f3 cf       	rjmp	.-26     	; 0x1618 <__addsf3x+0x38>
    1632:	46 95       	lsr	r20
    1634:	37 95       	ror	r19
    1636:	27 95       	ror	r18
    1638:	a7 95       	ror	r26
    163a:	f0 40       	sbci	r31, 0x00	; 0
    163c:	53 95       	inc	r21
    163e:	c9 f7       	brne	.-14     	; 0x1632 <__addsf3x+0x52>
    1640:	7e f4       	brtc	.+30     	; 0x1660 <__addsf3x+0x80>
    1642:	1f 16       	cp	r1, r31
    1644:	ba 0b       	sbc	r27, r26
    1646:	62 0b       	sbc	r22, r18
    1648:	73 0b       	sbc	r23, r19
    164a:	84 0b       	sbc	r24, r20
    164c:	ba f0       	brmi	.+46     	; 0x167c <__addsf3x+0x9c>
    164e:	91 50       	subi	r25, 0x01	; 1
    1650:	a1 f0       	breq	.+40     	; 0x167a <__addsf3x+0x9a>
    1652:	ff 0f       	add	r31, r31
    1654:	bb 1f       	adc	r27, r27
    1656:	66 1f       	adc	r22, r22
    1658:	77 1f       	adc	r23, r23
    165a:	88 1f       	adc	r24, r24
    165c:	c2 f7       	brpl	.-16     	; 0x164e <__addsf3x+0x6e>
    165e:	0e c0       	rjmp	.+28     	; 0x167c <__addsf3x+0x9c>
    1660:	ba 0f       	add	r27, r26
    1662:	62 1f       	adc	r22, r18
    1664:	73 1f       	adc	r23, r19
    1666:	84 1f       	adc	r24, r20
    1668:	48 f4       	brcc	.+18     	; 0x167c <__addsf3x+0x9c>
    166a:	87 95       	ror	r24
    166c:	77 95       	ror	r23
    166e:	67 95       	ror	r22
    1670:	b7 95       	ror	r27
    1672:	f7 95       	ror	r31
    1674:	9e 3f       	cpi	r25, 0xFE	; 254
    1676:	08 f0       	brcs	.+2      	; 0x167a <__addsf3x+0x9a>
    1678:	b0 cf       	rjmp	.-160    	; 0x15da <__addsf3+0x28>
    167a:	93 95       	inc	r25
    167c:	88 0f       	add	r24, r24
    167e:	08 f0       	brcs	.+2      	; 0x1682 <__addsf3x+0xa2>
    1680:	99 27       	eor	r25, r25
    1682:	ee 0f       	add	r30, r30
    1684:	97 95       	ror	r25
    1686:	87 95       	ror	r24
    1688:	08 95       	ret

0000168a <__divsf3>:
    168a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__divsf3x>
    168e:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__fp_round>
    1692:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fp_pscB>
    1696:	58 f0       	brcs	.+22     	; 0x16ae <__divsf3+0x24>
    1698:	0e 94 33 0c 	call	0x1866	; 0x1866 <__fp_pscA>
    169c:	40 f0       	brcs	.+16     	; 0x16ae <__divsf3+0x24>
    169e:	29 f4       	brne	.+10     	; 0x16aa <__divsf3+0x20>
    16a0:	5f 3f       	cpi	r21, 0xFF	; 255
    16a2:	29 f0       	breq	.+10     	; 0x16ae <__divsf3+0x24>
    16a4:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__fp_inf>
    16a8:	51 11       	cpse	r21, r1
    16aa:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__fp_szero>
    16ae:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__fp_nan>

000016b2 <__divsf3x>:
    16b2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__fp_split3>
    16b6:	68 f3       	brcs	.-38     	; 0x1692 <__divsf3+0x8>

000016b8 <__divsf3_pse>:
    16b8:	99 23       	and	r25, r25
    16ba:	b1 f3       	breq	.-20     	; 0x16a8 <__divsf3+0x1e>
    16bc:	55 23       	and	r21, r21
    16be:	91 f3       	breq	.-28     	; 0x16a4 <__divsf3+0x1a>
    16c0:	95 1b       	sub	r25, r21
    16c2:	55 0b       	sbc	r21, r21
    16c4:	bb 27       	eor	r27, r27
    16c6:	aa 27       	eor	r26, r26
    16c8:	62 17       	cp	r22, r18
    16ca:	73 07       	cpc	r23, r19
    16cc:	84 07       	cpc	r24, r20
    16ce:	38 f0       	brcs	.+14     	; 0x16de <__divsf3_pse+0x26>
    16d0:	9f 5f       	subi	r25, 0xFF	; 255
    16d2:	5f 4f       	sbci	r21, 0xFF	; 255
    16d4:	22 0f       	add	r18, r18
    16d6:	33 1f       	adc	r19, r19
    16d8:	44 1f       	adc	r20, r20
    16da:	aa 1f       	adc	r26, r26
    16dc:	a9 f3       	breq	.-22     	; 0x16c8 <__divsf3_pse+0x10>
    16de:	35 d0       	rcall	.+106    	; 0x174a <__divsf3_pse+0x92>
    16e0:	0e 2e       	mov	r0, r30
    16e2:	3a f0       	brmi	.+14     	; 0x16f2 <__divsf3_pse+0x3a>
    16e4:	e0 e8       	ldi	r30, 0x80	; 128
    16e6:	32 d0       	rcall	.+100    	; 0x174c <__divsf3_pse+0x94>
    16e8:	91 50       	subi	r25, 0x01	; 1
    16ea:	50 40       	sbci	r21, 0x00	; 0
    16ec:	e6 95       	lsr	r30
    16ee:	00 1c       	adc	r0, r0
    16f0:	ca f7       	brpl	.-14     	; 0x16e4 <__divsf3_pse+0x2c>
    16f2:	2b d0       	rcall	.+86     	; 0x174a <__divsf3_pse+0x92>
    16f4:	fe 2f       	mov	r31, r30
    16f6:	29 d0       	rcall	.+82     	; 0x174a <__divsf3_pse+0x92>
    16f8:	66 0f       	add	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	88 1f       	adc	r24, r24
    16fe:	bb 1f       	adc	r27, r27
    1700:	26 17       	cp	r18, r22
    1702:	37 07       	cpc	r19, r23
    1704:	48 07       	cpc	r20, r24
    1706:	ab 07       	cpc	r26, r27
    1708:	b0 e8       	ldi	r27, 0x80	; 128
    170a:	09 f0       	breq	.+2      	; 0x170e <__divsf3_pse+0x56>
    170c:	bb 0b       	sbc	r27, r27
    170e:	80 2d       	mov	r24, r0
    1710:	bf 01       	movw	r22, r30
    1712:	ff 27       	eor	r31, r31
    1714:	93 58       	subi	r25, 0x83	; 131
    1716:	5f 4f       	sbci	r21, 0xFF	; 255
    1718:	3a f0       	brmi	.+14     	; 0x1728 <__divsf3_pse+0x70>
    171a:	9e 3f       	cpi	r25, 0xFE	; 254
    171c:	51 05       	cpc	r21, r1
    171e:	78 f0       	brcs	.+30     	; 0x173e <__divsf3_pse+0x86>
    1720:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__fp_inf>
    1724:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__fp_szero>
    1728:	5f 3f       	cpi	r21, 0xFF	; 255
    172a:	e4 f3       	brlt	.-8      	; 0x1724 <__divsf3_pse+0x6c>
    172c:	98 3e       	cpi	r25, 0xE8	; 232
    172e:	d4 f3       	brlt	.-12     	; 0x1724 <__divsf3_pse+0x6c>
    1730:	86 95       	lsr	r24
    1732:	77 95       	ror	r23
    1734:	67 95       	ror	r22
    1736:	b7 95       	ror	r27
    1738:	f7 95       	ror	r31
    173a:	9f 5f       	subi	r25, 0xFF	; 255
    173c:	c9 f7       	brne	.-14     	; 0x1730 <__divsf3_pse+0x78>
    173e:	88 0f       	add	r24, r24
    1740:	91 1d       	adc	r25, r1
    1742:	96 95       	lsr	r25
    1744:	87 95       	ror	r24
    1746:	97 f9       	bld	r25, 7
    1748:	08 95       	ret
    174a:	e1 e0       	ldi	r30, 0x01	; 1
    174c:	66 0f       	add	r22, r22
    174e:	77 1f       	adc	r23, r23
    1750:	88 1f       	adc	r24, r24
    1752:	bb 1f       	adc	r27, r27
    1754:	62 17       	cp	r22, r18
    1756:	73 07       	cpc	r23, r19
    1758:	84 07       	cpc	r24, r20
    175a:	ba 07       	cpc	r27, r26
    175c:	20 f0       	brcs	.+8      	; 0x1766 <__divsf3_pse+0xae>
    175e:	62 1b       	sub	r22, r18
    1760:	73 0b       	sbc	r23, r19
    1762:	84 0b       	sbc	r24, r20
    1764:	ba 0b       	sbc	r27, r26
    1766:	ee 1f       	adc	r30, r30
    1768:	88 f7       	brcc	.-30     	; 0x174c <__divsf3_pse+0x94>
    176a:	e0 95       	com	r30
    176c:	08 95       	ret

0000176e <__fixsfsi>:
    176e:	0e 94 be 0b 	call	0x177c	; 0x177c <__fixunssfsi>
    1772:	68 94       	set
    1774:	b1 11       	cpse	r27, r1
    1776:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__fp_szero>
    177a:	08 95       	ret

0000177c <__fixunssfsi>:
    177c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__fp_splitA>
    1780:	88 f0       	brcs	.+34     	; 0x17a4 <__fixunssfsi+0x28>
    1782:	9f 57       	subi	r25, 0x7F	; 127
    1784:	98 f0       	brcs	.+38     	; 0x17ac <__fixunssfsi+0x30>
    1786:	b9 2f       	mov	r27, r25
    1788:	99 27       	eor	r25, r25
    178a:	b7 51       	subi	r27, 0x17	; 23
    178c:	b0 f0       	brcs	.+44     	; 0x17ba <__fixunssfsi+0x3e>
    178e:	e1 f0       	breq	.+56     	; 0x17c8 <__fixunssfsi+0x4c>
    1790:	66 0f       	add	r22, r22
    1792:	77 1f       	adc	r23, r23
    1794:	88 1f       	adc	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	1a f0       	brmi	.+6      	; 0x17a0 <__fixunssfsi+0x24>
    179a:	ba 95       	dec	r27
    179c:	c9 f7       	brne	.-14     	; 0x1790 <__fixunssfsi+0x14>
    179e:	14 c0       	rjmp	.+40     	; 0x17c8 <__fixunssfsi+0x4c>
    17a0:	b1 30       	cpi	r27, 0x01	; 1
    17a2:	91 f0       	breq	.+36     	; 0x17c8 <__fixunssfsi+0x4c>
    17a4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__fp_zero>
    17a8:	b1 e0       	ldi	r27, 0x01	; 1
    17aa:	08 95       	ret
    17ac:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__fp_zero>
    17b0:	67 2f       	mov	r22, r23
    17b2:	78 2f       	mov	r23, r24
    17b4:	88 27       	eor	r24, r24
    17b6:	b8 5f       	subi	r27, 0xF8	; 248
    17b8:	39 f0       	breq	.+14     	; 0x17c8 <__fixunssfsi+0x4c>
    17ba:	b9 3f       	cpi	r27, 0xF9	; 249
    17bc:	cc f3       	brlt	.-14     	; 0x17b0 <__fixunssfsi+0x34>
    17be:	86 95       	lsr	r24
    17c0:	77 95       	ror	r23
    17c2:	67 95       	ror	r22
    17c4:	b3 95       	inc	r27
    17c6:	d9 f7       	brne	.-10     	; 0x17be <__fixunssfsi+0x42>
    17c8:	3e f4       	brtc	.+14     	; 0x17d8 <__fixunssfsi+0x5c>
    17ca:	90 95       	com	r25
    17cc:	80 95       	com	r24
    17ce:	70 95       	com	r23
    17d0:	61 95       	neg	r22
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	8f 4f       	sbci	r24, 0xFF	; 255
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	08 95       	ret

000017da <__floatunsisf>:
    17da:	e8 94       	clt
    17dc:	09 c0       	rjmp	.+18     	; 0x17f0 <__floatsisf+0x12>

000017de <__floatsisf>:
    17de:	97 fb       	bst	r25, 7
    17e0:	3e f4       	brtc	.+14     	; 0x17f0 <__floatsisf+0x12>
    17e2:	90 95       	com	r25
    17e4:	80 95       	com	r24
    17e6:	70 95       	com	r23
    17e8:	61 95       	neg	r22
    17ea:	7f 4f       	sbci	r23, 0xFF	; 255
    17ec:	8f 4f       	sbci	r24, 0xFF	; 255
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	99 23       	and	r25, r25
    17f2:	a9 f0       	breq	.+42     	; 0x181e <__floatsisf+0x40>
    17f4:	f9 2f       	mov	r31, r25
    17f6:	96 e9       	ldi	r25, 0x96	; 150
    17f8:	bb 27       	eor	r27, r27
    17fa:	93 95       	inc	r25
    17fc:	f6 95       	lsr	r31
    17fe:	87 95       	ror	r24
    1800:	77 95       	ror	r23
    1802:	67 95       	ror	r22
    1804:	b7 95       	ror	r27
    1806:	f1 11       	cpse	r31, r1
    1808:	f8 cf       	rjmp	.-16     	; 0x17fa <__floatsisf+0x1c>
    180a:	fa f4       	brpl	.+62     	; 0x184a <__floatsisf+0x6c>
    180c:	bb 0f       	add	r27, r27
    180e:	11 f4       	brne	.+4      	; 0x1814 <__floatsisf+0x36>
    1810:	60 ff       	sbrs	r22, 0
    1812:	1b c0       	rjmp	.+54     	; 0x184a <__floatsisf+0x6c>
    1814:	6f 5f       	subi	r22, 0xFF	; 255
    1816:	7f 4f       	sbci	r23, 0xFF	; 255
    1818:	8f 4f       	sbci	r24, 0xFF	; 255
    181a:	9f 4f       	sbci	r25, 0xFF	; 255
    181c:	16 c0       	rjmp	.+44     	; 0x184a <__floatsisf+0x6c>
    181e:	88 23       	and	r24, r24
    1820:	11 f0       	breq	.+4      	; 0x1826 <__floatsisf+0x48>
    1822:	96 e9       	ldi	r25, 0x96	; 150
    1824:	11 c0       	rjmp	.+34     	; 0x1848 <__floatsisf+0x6a>
    1826:	77 23       	and	r23, r23
    1828:	21 f0       	breq	.+8      	; 0x1832 <__floatsisf+0x54>
    182a:	9e e8       	ldi	r25, 0x8E	; 142
    182c:	87 2f       	mov	r24, r23
    182e:	76 2f       	mov	r23, r22
    1830:	05 c0       	rjmp	.+10     	; 0x183c <__floatsisf+0x5e>
    1832:	66 23       	and	r22, r22
    1834:	71 f0       	breq	.+28     	; 0x1852 <__floatsisf+0x74>
    1836:	96 e8       	ldi	r25, 0x86	; 134
    1838:	86 2f       	mov	r24, r22
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	60 e0       	ldi	r22, 0x00	; 0
    183e:	2a f0       	brmi	.+10     	; 0x184a <__floatsisf+0x6c>
    1840:	9a 95       	dec	r25
    1842:	66 0f       	add	r22, r22
    1844:	77 1f       	adc	r23, r23
    1846:	88 1f       	adc	r24, r24
    1848:	da f7       	brpl	.-10     	; 0x1840 <__floatsisf+0x62>
    184a:	88 0f       	add	r24, r24
    184c:	96 95       	lsr	r25
    184e:	87 95       	ror	r24
    1850:	97 f9       	bld	r25, 7
    1852:	08 95       	ret

00001854 <__fp_inf>:
    1854:	97 f9       	bld	r25, 7
    1856:	9f 67       	ori	r25, 0x7F	; 127
    1858:	80 e8       	ldi	r24, 0x80	; 128
    185a:	70 e0       	ldi	r23, 0x00	; 0
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	08 95       	ret

00001860 <__fp_nan>:
    1860:	9f ef       	ldi	r25, 0xFF	; 255
    1862:	80 ec       	ldi	r24, 0xC0	; 192
    1864:	08 95       	ret

00001866 <__fp_pscA>:
    1866:	00 24       	eor	r0, r0
    1868:	0a 94       	dec	r0
    186a:	16 16       	cp	r1, r22
    186c:	17 06       	cpc	r1, r23
    186e:	18 06       	cpc	r1, r24
    1870:	09 06       	cpc	r0, r25
    1872:	08 95       	ret

00001874 <__fp_pscB>:
    1874:	00 24       	eor	r0, r0
    1876:	0a 94       	dec	r0
    1878:	12 16       	cp	r1, r18
    187a:	13 06       	cpc	r1, r19
    187c:	14 06       	cpc	r1, r20
    187e:	05 06       	cpc	r0, r21
    1880:	08 95       	ret

00001882 <__fp_round>:
    1882:	09 2e       	mov	r0, r25
    1884:	03 94       	inc	r0
    1886:	00 0c       	add	r0, r0
    1888:	11 f4       	brne	.+4      	; 0x188e <__fp_round+0xc>
    188a:	88 23       	and	r24, r24
    188c:	52 f0       	brmi	.+20     	; 0x18a2 <__fp_round+0x20>
    188e:	bb 0f       	add	r27, r27
    1890:	40 f4       	brcc	.+16     	; 0x18a2 <__fp_round+0x20>
    1892:	bf 2b       	or	r27, r31
    1894:	11 f4       	brne	.+4      	; 0x189a <__fp_round+0x18>
    1896:	60 ff       	sbrs	r22, 0
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <__fp_round+0x20>
    189a:	6f 5f       	subi	r22, 0xFF	; 255
    189c:	7f 4f       	sbci	r23, 0xFF	; 255
    189e:	8f 4f       	sbci	r24, 0xFF	; 255
    18a0:	9f 4f       	sbci	r25, 0xFF	; 255
    18a2:	08 95       	ret

000018a4 <__fp_split3>:
    18a4:	57 fd       	sbrc	r21, 7
    18a6:	90 58       	subi	r25, 0x80	; 128
    18a8:	44 0f       	add	r20, r20
    18aa:	55 1f       	adc	r21, r21
    18ac:	59 f0       	breq	.+22     	; 0x18c4 <__fp_splitA+0x10>
    18ae:	5f 3f       	cpi	r21, 0xFF	; 255
    18b0:	71 f0       	breq	.+28     	; 0x18ce <__fp_splitA+0x1a>
    18b2:	47 95       	ror	r20

000018b4 <__fp_splitA>:
    18b4:	88 0f       	add	r24, r24
    18b6:	97 fb       	bst	r25, 7
    18b8:	99 1f       	adc	r25, r25
    18ba:	61 f0       	breq	.+24     	; 0x18d4 <__fp_splitA+0x20>
    18bc:	9f 3f       	cpi	r25, 0xFF	; 255
    18be:	79 f0       	breq	.+30     	; 0x18de <__fp_splitA+0x2a>
    18c0:	87 95       	ror	r24
    18c2:	08 95       	ret
    18c4:	12 16       	cp	r1, r18
    18c6:	13 06       	cpc	r1, r19
    18c8:	14 06       	cpc	r1, r20
    18ca:	55 1f       	adc	r21, r21
    18cc:	f2 cf       	rjmp	.-28     	; 0x18b2 <__fp_split3+0xe>
    18ce:	46 95       	lsr	r20
    18d0:	f1 df       	rcall	.-30     	; 0x18b4 <__fp_splitA>
    18d2:	08 c0       	rjmp	.+16     	; 0x18e4 <__fp_splitA+0x30>
    18d4:	16 16       	cp	r1, r22
    18d6:	17 06       	cpc	r1, r23
    18d8:	18 06       	cpc	r1, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	f1 cf       	rjmp	.-30     	; 0x18c0 <__fp_splitA+0xc>
    18de:	86 95       	lsr	r24
    18e0:	71 05       	cpc	r23, r1
    18e2:	61 05       	cpc	r22, r1
    18e4:	08 94       	sec
    18e6:	08 95       	ret

000018e8 <__fp_zero>:
    18e8:	e8 94       	clt

000018ea <__fp_szero>:
    18ea:	bb 27       	eor	r27, r27
    18ec:	66 27       	eor	r22, r22
    18ee:	77 27       	eor	r23, r23
    18f0:	cb 01       	movw	r24, r22
    18f2:	97 f9       	bld	r25, 7
    18f4:	08 95       	ret

000018f6 <__mulsf3>:
    18f6:	0e 94 8e 0c 	call	0x191c	; 0x191c <__mulsf3x>
    18fa:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__fp_round>
    18fe:	0e 94 33 0c 	call	0x1866	; 0x1866 <__fp_pscA>
    1902:	38 f0       	brcs	.+14     	; 0x1912 <__mulsf3+0x1c>
    1904:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fp_pscB>
    1908:	20 f0       	brcs	.+8      	; 0x1912 <__mulsf3+0x1c>
    190a:	95 23       	and	r25, r21
    190c:	11 f0       	breq	.+4      	; 0x1912 <__mulsf3+0x1c>
    190e:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__fp_inf>
    1912:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__fp_nan>
    1916:	11 24       	eor	r1, r1
    1918:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__fp_szero>

0000191c <__mulsf3x>:
    191c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__fp_split3>
    1920:	70 f3       	brcs	.-36     	; 0x18fe <__mulsf3+0x8>

00001922 <__mulsf3_pse>:
    1922:	95 9f       	mul	r25, r21
    1924:	c1 f3       	breq	.-16     	; 0x1916 <__mulsf3+0x20>
    1926:	95 0f       	add	r25, r21
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	55 1f       	adc	r21, r21
    192c:	62 9f       	mul	r22, r18
    192e:	f0 01       	movw	r30, r0
    1930:	72 9f       	mul	r23, r18
    1932:	bb 27       	eor	r27, r27
    1934:	f0 0d       	add	r31, r0
    1936:	b1 1d       	adc	r27, r1
    1938:	63 9f       	mul	r22, r19
    193a:	aa 27       	eor	r26, r26
    193c:	f0 0d       	add	r31, r0
    193e:	b1 1d       	adc	r27, r1
    1940:	aa 1f       	adc	r26, r26
    1942:	64 9f       	mul	r22, r20
    1944:	66 27       	eor	r22, r22
    1946:	b0 0d       	add	r27, r0
    1948:	a1 1d       	adc	r26, r1
    194a:	66 1f       	adc	r22, r22
    194c:	82 9f       	mul	r24, r18
    194e:	22 27       	eor	r18, r18
    1950:	b0 0d       	add	r27, r0
    1952:	a1 1d       	adc	r26, r1
    1954:	62 1f       	adc	r22, r18
    1956:	73 9f       	mul	r23, r19
    1958:	b0 0d       	add	r27, r0
    195a:	a1 1d       	adc	r26, r1
    195c:	62 1f       	adc	r22, r18
    195e:	83 9f       	mul	r24, r19
    1960:	a0 0d       	add	r26, r0
    1962:	61 1d       	adc	r22, r1
    1964:	22 1f       	adc	r18, r18
    1966:	74 9f       	mul	r23, r20
    1968:	33 27       	eor	r19, r19
    196a:	a0 0d       	add	r26, r0
    196c:	61 1d       	adc	r22, r1
    196e:	23 1f       	adc	r18, r19
    1970:	84 9f       	mul	r24, r20
    1972:	60 0d       	add	r22, r0
    1974:	21 1d       	adc	r18, r1
    1976:	82 2f       	mov	r24, r18
    1978:	76 2f       	mov	r23, r22
    197a:	6a 2f       	mov	r22, r26
    197c:	11 24       	eor	r1, r1
    197e:	9f 57       	subi	r25, 0x7F	; 127
    1980:	50 40       	sbci	r21, 0x00	; 0
    1982:	9a f0       	brmi	.+38     	; 0x19aa <__mulsf3_pse+0x88>
    1984:	f1 f0       	breq	.+60     	; 0x19c2 <__mulsf3_pse+0xa0>
    1986:	88 23       	and	r24, r24
    1988:	4a f0       	brmi	.+18     	; 0x199c <__mulsf3_pse+0x7a>
    198a:	ee 0f       	add	r30, r30
    198c:	ff 1f       	adc	r31, r31
    198e:	bb 1f       	adc	r27, r27
    1990:	66 1f       	adc	r22, r22
    1992:	77 1f       	adc	r23, r23
    1994:	88 1f       	adc	r24, r24
    1996:	91 50       	subi	r25, 0x01	; 1
    1998:	50 40       	sbci	r21, 0x00	; 0
    199a:	a9 f7       	brne	.-22     	; 0x1986 <__mulsf3_pse+0x64>
    199c:	9e 3f       	cpi	r25, 0xFE	; 254
    199e:	51 05       	cpc	r21, r1
    19a0:	80 f0       	brcs	.+32     	; 0x19c2 <__mulsf3_pse+0xa0>
    19a2:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__fp_inf>
    19a6:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__fp_szero>
    19aa:	5f 3f       	cpi	r21, 0xFF	; 255
    19ac:	e4 f3       	brlt	.-8      	; 0x19a6 <__mulsf3_pse+0x84>
    19ae:	98 3e       	cpi	r25, 0xE8	; 232
    19b0:	d4 f3       	brlt	.-12     	; 0x19a6 <__mulsf3_pse+0x84>
    19b2:	86 95       	lsr	r24
    19b4:	77 95       	ror	r23
    19b6:	67 95       	ror	r22
    19b8:	b7 95       	ror	r27
    19ba:	f7 95       	ror	r31
    19bc:	e7 95       	ror	r30
    19be:	9f 5f       	subi	r25, 0xFF	; 255
    19c0:	c1 f7       	brne	.-16     	; 0x19b2 <__mulsf3_pse+0x90>
    19c2:	fe 2b       	or	r31, r30
    19c4:	88 0f       	add	r24, r24
    19c6:	91 1d       	adc	r25, r1
    19c8:	96 95       	lsr	r25
    19ca:	87 95       	ror	r24
    19cc:	97 f9       	bld	r25, 7
    19ce:	08 95       	ret

000019d0 <do_rand>:
    19d0:	8f 92       	push	r8
    19d2:	9f 92       	push	r9
    19d4:	af 92       	push	r10
    19d6:	bf 92       	push	r11
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	ec 01       	movw	r28, r24
    19e6:	68 81       	ld	r22, Y
    19e8:	79 81       	ldd	r23, Y+1	; 0x01
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	9b 81       	ldd	r25, Y+3	; 0x03
    19ee:	61 15       	cp	r22, r1
    19f0:	71 05       	cpc	r23, r1
    19f2:	81 05       	cpc	r24, r1
    19f4:	91 05       	cpc	r25, r1
    19f6:	21 f4       	brne	.+8      	; 0x1a00 <do_rand+0x30>
    19f8:	64 e2       	ldi	r22, 0x24	; 36
    19fa:	79 ed       	ldi	r23, 0xD9	; 217
    19fc:	8b e5       	ldi	r24, 0x5B	; 91
    19fe:	97 e0       	ldi	r25, 0x07	; 7
    1a00:	2d e1       	ldi	r18, 0x1D	; 29
    1a02:	33 ef       	ldi	r19, 0xF3	; 243
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__divmodsi4>
    1a0c:	49 01       	movw	r8, r18
    1a0e:	5a 01       	movw	r10, r20
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
    1a14:	a7 ea       	ldi	r26, 0xA7	; 167
    1a16:	b1 e4       	ldi	r27, 0x41	; 65
    1a18:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__muluhisi3>
    1a1c:	6b 01       	movw	r12, r22
    1a1e:	7c 01       	movw	r14, r24
    1a20:	ac ee       	ldi	r26, 0xEC	; 236
    1a22:	b4 ef       	ldi	r27, 0xF4	; 244
    1a24:	a5 01       	movw	r20, r10
    1a26:	94 01       	movw	r18, r8
    1a28:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__mulohisi3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8c 0d       	add	r24, r12
    1a32:	9d 1d       	adc	r25, r13
    1a34:	ae 1d       	adc	r26, r14
    1a36:	bf 1d       	adc	r27, r15
    1a38:	b7 ff       	sbrs	r27, 7
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <do_rand+0x72>
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	a1 09       	sbc	r26, r1
    1a40:	b0 48       	sbci	r27, 0x80	; 128
    1a42:	88 83       	st	Y, r24
    1a44:	99 83       	std	Y+1, r25	; 0x01
    1a46:	aa 83       	std	Y+2, r26	; 0x02
    1a48:	bb 83       	std	Y+3, r27	; 0x03
    1a4a:	9f 77       	andi	r25, 0x7F	; 127
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	ff 90       	pop	r15
    1a52:	ef 90       	pop	r14
    1a54:	df 90       	pop	r13
    1a56:	cf 90       	pop	r12
    1a58:	bf 90       	pop	r11
    1a5a:	af 90       	pop	r10
    1a5c:	9f 90       	pop	r9
    1a5e:	8f 90       	pop	r8
    1a60:	08 95       	ret

00001a62 <rand_r>:
    1a62:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <do_rand>
    1a66:	08 95       	ret

00001a68 <rand>:
    1a68:	88 e0       	ldi	r24, 0x08	; 8
    1a6a:	91 e0       	ldi	r25, 0x01	; 1
    1a6c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <do_rand>
    1a70:	08 95       	ret

00001a72 <srand>:
    1a72:	a0 e0       	ldi	r26, 0x00	; 0
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next>
    1a7a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x1>
    1a7e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <next+0x2>
    1a82:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <next+0x3>
    1a86:	08 95       	ret

00001a88 <eeprom_read_byte>:
    1a88:	f9 99       	sbic	0x1f, 1	; 31
    1a8a:	fe cf       	rjmp	.-4      	; 0x1a88 <eeprom_read_byte>
    1a8c:	92 bd       	out	0x22, r25	; 34
    1a8e:	81 bd       	out	0x21, r24	; 33
    1a90:	f8 9a       	sbi	0x1f, 0	; 31
    1a92:	99 27       	eor	r25, r25
    1a94:	80 b5       	in	r24, 0x20	; 32
    1a96:	08 95       	ret

00001a98 <eeprom_write_byte>:
    1a98:	26 2f       	mov	r18, r22

00001a9a <eeprom_write_r18>:
    1a9a:	f9 99       	sbic	0x1f, 1	; 31
    1a9c:	fe cf       	rjmp	.-4      	; 0x1a9a <eeprom_write_r18>
    1a9e:	1f ba       	out	0x1f, r1	; 31
    1aa0:	92 bd       	out	0x22, r25	; 34
    1aa2:	81 bd       	out	0x21, r24	; 33
    1aa4:	20 bd       	out	0x20, r18	; 32
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	fa 9a       	sbi	0x1f, 2	; 31
    1aac:	f9 9a       	sbi	0x1f, 1	; 31
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	08 95       	ret

00001ab4 <__divmodsi4>:
    1ab4:	05 2e       	mov	r0, r21
    1ab6:	97 fb       	bst	r25, 7
    1ab8:	1e f4       	brtc	.+6      	; 0x1ac0 <__divmodsi4+0xc>
    1aba:	00 94       	com	r0
    1abc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__negsi2>
    1ac0:	57 fd       	sbrc	r21, 7
    1ac2:	07 d0       	rcall	.+14     	; 0x1ad2 <__divmodsi4_neg2>
    1ac4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__udivmodsi4>
    1ac8:	07 fc       	sbrc	r0, 7
    1aca:	03 d0       	rcall	.+6      	; 0x1ad2 <__divmodsi4_neg2>
    1acc:	4e f4       	brtc	.+18     	; 0x1ae0 <__divmodsi4_exit>
    1ace:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__negsi2>

00001ad2 <__divmodsi4_neg2>:
    1ad2:	50 95       	com	r21
    1ad4:	40 95       	com	r20
    1ad6:	30 95       	com	r19
    1ad8:	21 95       	neg	r18
    1ada:	3f 4f       	sbci	r19, 0xFF	; 255
    1adc:	4f 4f       	sbci	r20, 0xFF	; 255
    1ade:	5f 4f       	sbci	r21, 0xFF	; 255

00001ae0 <__divmodsi4_exit>:
    1ae0:	08 95       	ret

00001ae2 <__negsi2>:
    1ae2:	90 95       	com	r25
    1ae4:	80 95       	com	r24
    1ae6:	70 95       	com	r23
    1ae8:	61 95       	neg	r22
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	8f 4f       	sbci	r24, 0xFF	; 255
    1aee:	9f 4f       	sbci	r25, 0xFF	; 255
    1af0:	08 95       	ret

00001af2 <__muluhisi3>:
    1af2:	0e 94 b5 0a 	call	0x156a	; 0x156a <__umulhisi3>
    1af6:	a5 9f       	mul	r26, r21
    1af8:	90 0d       	add	r25, r0
    1afa:	b4 9f       	mul	r27, r20
    1afc:	90 0d       	add	r25, r0
    1afe:	a4 9f       	mul	r26, r20
    1b00:	80 0d       	add	r24, r0
    1b02:	91 1d       	adc	r25, r1
    1b04:	11 24       	eor	r1, r1
    1b06:	08 95       	ret

00001b08 <__mulshisi3>:
    1b08:	b7 ff       	sbrs	r27, 7
    1b0a:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__muluhisi3>

00001b0e <__mulohisi3>:
    1b0e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__muluhisi3>
    1b12:	82 1b       	sub	r24, r18
    1b14:	93 0b       	sbc	r25, r19
    1b16:	08 95       	ret

00001b18 <__udivmodsi4>:
    1b18:	a1 e2       	ldi	r26, 0x21	; 33
    1b1a:	1a 2e       	mov	r1, r26
    1b1c:	aa 1b       	sub	r26, r26
    1b1e:	bb 1b       	sub	r27, r27
    1b20:	fd 01       	movw	r30, r26
    1b22:	0d c0       	rjmp	.+26     	; 0x1b3e <__udivmodsi4_ep>

00001b24 <__udivmodsi4_loop>:
    1b24:	aa 1f       	adc	r26, r26
    1b26:	bb 1f       	adc	r27, r27
    1b28:	ee 1f       	adc	r30, r30
    1b2a:	ff 1f       	adc	r31, r31
    1b2c:	a2 17       	cp	r26, r18
    1b2e:	b3 07       	cpc	r27, r19
    1b30:	e4 07       	cpc	r30, r20
    1b32:	f5 07       	cpc	r31, r21
    1b34:	20 f0       	brcs	.+8      	; 0x1b3e <__udivmodsi4_ep>
    1b36:	a2 1b       	sub	r26, r18
    1b38:	b3 0b       	sbc	r27, r19
    1b3a:	e4 0b       	sbc	r30, r20
    1b3c:	f5 0b       	sbc	r31, r21

00001b3e <__udivmodsi4_ep>:
    1b3e:	66 1f       	adc	r22, r22
    1b40:	77 1f       	adc	r23, r23
    1b42:	88 1f       	adc	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	1a 94       	dec	r1
    1b48:	69 f7       	brne	.-38     	; 0x1b24 <__udivmodsi4_loop>
    1b4a:	60 95       	com	r22
    1b4c:	70 95       	com	r23
    1b4e:	80 95       	com	r24
    1b50:	90 95       	com	r25
    1b52:	9b 01       	movw	r18, r22
    1b54:	ac 01       	movw	r20, r24
    1b56:	bd 01       	movw	r22, r26
    1b58:	cf 01       	movw	r24, r30
    1b5a:	08 95       	ret

00001b5c <_exit>:
    1b5c:	f8 94       	cli

00001b5e <__stop_program>:
    1b5e:	ff cf       	rjmp	.-2      	; 0x1b5e <__stop_program>
