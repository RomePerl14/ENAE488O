
build/final_proj_part1_redux.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
       4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
       c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      18:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_6>
      1c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      2c:	0c 94 37 08 	jmp	0x106e	; 0x106e <__vector_11>
      30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      38:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__vector_14>
      3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      5c:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__vector_23>
      60:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      64:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
      68:	ef 01       	movw	r28, r30
      6a:	f1 01       	movw	r30, r2
      6c:	f3 01       	movw	r30, r6
      6e:	f5 01       	movw	r30, r10
      70:	f7 01       	movw	r30, r14
      72:	fe 01       	movw	r30, r28
      74:	f9 01       	movw	r30, r18
      76:	40 07       	cpc	r20, r16
      78:	97 07       	cpc	r25, r23
      7a:	ab 07       	cpc	r26, r27
      7c:	dc 07       	cpc	r29, r28
      7e:	e3 07       	cpc	r30, r19
      80:	c2 07       	cpc	r28, r18
      82:	e6 07       	cpc	r30, r22
      84:	44 09       	sbc	r20, r4
      86:	35 0a       	sbc	r3, r21
      88:	35 0a       	sbc	r3, r21
      8a:	4d 09       	sbc	r20, r13
      8c:	50 09       	sbc	r21, r0
      8e:	53 09       	sbc	r21, r3
      90:	55 09       	sbc	r21, r5
      92:	57 09       	sbc	r21, r7
      94:	59 09       	sbc	r21, r9
      96:	0a 0a       	sbc	r0, r26
      98:	6b 09       	sbc	r22, r11

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d8 e0       	ldi	r29, 0x08	; 8
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      a6:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      a8:	0f b6       	in	r0, 0x3f	; 63
      aa:	f8 94       	cli
      ac:	a8 95       	wdr
      ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      b2:	88 61       	ori	r24, 0x18	; 24
      b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      b8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      bc:	0f be       	out	0x3f, r0	; 63

000000be <__do_copy_data>:
      be:	11 e0       	ldi	r17, 0x01	; 1
      c0:	a0 e0       	ldi	r26, 0x00	; 0
      c2:	b1 e0       	ldi	r27, 0x01	; 1
      c4:	e6 e2       	ldi	r30, 0x26	; 38
      c6:	fc e1       	ldi	r31, 0x1C	; 28
      c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
      ca:	05 90       	lpm	r0, Z+
      cc:	0d 92       	st	X+, r0
      ce:	ac 30       	cpi	r26, 0x0C	; 12
      d0:	b1 07       	cpc	r27, r17
      d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
      d4:	21 e0       	ldi	r18, 0x01	; 1
      d6:	ac e0       	ldi	r26, 0x0C	; 12
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
      dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
      de:	a6 3f       	cpi	r26, 0xF6	; 246
      e0:	b2 07       	cpc	r27, r18
      e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
      e4:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <main>
      e8:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <_exit>

000000ec <__bad_interrupt>:
      ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <setup>:
    }
}

// setup schtuff
void setup() 
{   
      f0:	e7 e5       	ldi	r30, 0x57	; 87
      f2:	f1 e0       	ldi	r31, 0x01	; 1
      f4:	a7 e7       	ldi	r26, 0x77	; 119
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	87 e7       	ldi	r24, 0x77	; 119
      fa:	91 e0       	ldi	r25, 0x01	; 1
    // fill our arrays with zero
    for(uint8_t i=0;i<16;i+=1)
    {
        local_network[i] = 0;
      fc:	11 92       	st	Z+, r1
      fe:	11 92       	st	Z+, r1
        heartbeat_check[i] = 0;
     100:	1d 92       	st	X+, r1
     102:	1d 92       	st	X+, r1

// setup schtuff
void setup() 
{   
    // fill our arrays with zero
    for(uint8_t i=0;i<16;i+=1)
     104:	8e 17       	cp	r24, r30
     106:	9f 07       	cpc	r25, r31
     108:	c9 f7       	brne	.-14     	; 0xfc <setup+0xc>
        local_network[i] = 0;
        heartbeat_check[i] = 0;
    }
    for(uint8_t i=0;i<5;i+=1)
    {
        neighbor_network_binaries[i] = 0;
     10a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <neighbor_network_binaries>
     10e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <neighbor_network_binaries+0x1>
     112:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <neighbor_network_binaries+0x2>
     116:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <neighbor_network_binaries+0x3>
     11a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <neighbor_network_binaries+0x4>
     11e:	eb e3       	ldi	r30, 0x3B	; 59
     120:	f1 e0       	ldi	r31, 0x01	; 1
    }
    for(uint8_t i=0;i<8;i+=1)
    {
        local_network_binary[i] = 0;
     122:	11 92       	st	Z+, r1
    }
    for(uint8_t i=0;i<5;i+=1)
    {
        neighbor_network_binaries[i] = 0;
    }
    for(uint8_t i=0;i<8;i+=1)
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	e3 34       	cpi	r30, 0x43	; 67
     128:	f8 07       	cpc	r31, r24
     12a:	d9 f7       	brne	.-10     	; 0x122 <setup+0x32>
    {
        local_network_binary[i] = 0;
    }
    
    // set up message
    msg.type = NORMAL;
     12c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <msg+0x9>
    msg.data[0] = kilo_uid;
     130:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <kilo_uid>
     134:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <msg>
    msg.data[1] = 0;
     138:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <msg+0x1>
    msg.data[2] = 0;
     13c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <msg+0x2>
    msg.data[3] = 0;
     140:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <msg+0x3>
    msg.data[4] = 0;
     144:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <msg+0x4>
    msg.data[5] = 0;
     148:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <msg+0x5>
    msg.data[6] = 0;
     14c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <msg+0x6>
    msg.data[7] = 0;
     150:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <msg+0x7>
    msg.crc = message_crc(&msg);
     154:	87 e2       	ldi	r24, 0x27	; 39
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	0e 94 48 0a 	call	0x1490	; 0x1490 <message_crc>
     15c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <msg+0xb>
     160:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <msg+0xa>
    
    start_time = kilo_ticks;
     164:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <kilo_ticks>
     168:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <kilo_ticks+0x1>
     16c:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <kilo_ticks+0x2>
     170:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <kilo_ticks+0x3>
     174:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <start_time>
     178:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <start_time+0x1>
     17c:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <start_time+0x2>
     180:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <start_time+0x3>
    global_timer = kilo_ticks;
     184:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <kilo_ticks>
     188:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <kilo_ticks+0x1>
     18c:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <kilo_ticks+0x2>
     190:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <kilo_ticks+0x3>
     194:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <global_timer>
     198:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <global_timer+0x1>
     19c:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <global_timer+0x2>
     1a0:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <global_timer+0x3>
    set_color(RGB(1,1,1));
     1a4:	85 e1       	ldi	r24, 0x15	; 21
     1a6:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <set_color>

000001aa <message_tx>:
                                                                                                                                                                                                               
}

message_t *message_tx() 
{
    msg.type = NORMAL;
     1aa:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <msg+0x9>
    // Transmit our kilo_uid
    msg.data[0] = (uint8_t) kilo_uid;
     1ae:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <kilo_uid>
     1b2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <msg>
     1b6:	ee e1       	ldi	r30, 0x1E	; 30
     1b8:	f1 e0       	ldi	r31, 0x01	; 1
     1ba:	a8 e2       	ldi	r26, 0x28	; 40
     1bc:	b1 e0       	ldi	r27, 0x01	; 1
    for(uint8_t i=0;i<5;i+=1)
    {
        msg.data[i+1] = neighbor_network_binaries[i]; // share all of the neighbor network binary numbers
     1be:	81 91       	ld	r24, Z+
     1c0:	8d 93       	st	X+, r24
message_t *message_tx() 
{
    msg.type = NORMAL;
    // Transmit our kilo_uid
    msg.data[0] = (uint8_t) kilo_uid;
    for(uint8_t i=0;i<5;i+=1)
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	e3 32       	cpi	r30, 0x23	; 35
     1c6:	f8 07       	cpc	r31, r24
     1c8:	d1 f7       	brne	.-12     	; 0x1be <message_tx+0x14>
    {
        msg.data[i+1] = neighbor_network_binaries[i]; // share all of the neighbor network binary numbers
    }
    // Do this thing
    msg.crc = message_crc(&msg);
     1ca:	87 e2       	ldi	r24, 0x27	; 39
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	0e 94 48 0a 	call	0x1490	; 0x1490 <message_crc>
     1d2:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <msg+0xb>
     1d6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <msg+0xa>

    return &msg;
}
     1da:	87 e2       	ldi	r24, 0x27	; 39
     1dc:	91 e0       	ldi	r25, 0x01	; 1
     1de:	08 95       	ret

000001e0 <message_rx>:

void message_rx(message_t *m, distance_measurement_t *d) {
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
    new_message = 1;
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <new_message>
    
    // get the distance just in case
    dist = *d;
     1ec:	fb 01       	movw	r30, r22
     1ee:	80 81       	ld	r24, Z
     1f0:	91 81       	ldd	r25, Z+1	; 0x01
     1f2:	a2 81       	ldd	r26, Z+2	; 0x02
     1f4:	b3 81       	ldd	r27, Z+3	; 0x03
     1f6:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <dist>
     1fa:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <dist+0x1>
     1fe:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <dist+0x2>
     202:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <dist+0x3>
    cur_distance = estimate_distance(&dist);
     206:	83 e3       	ldi	r24, 0x33	; 51
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	0e 94 19 05 	call	0xa32	; 0xa32 <estimate_distance>
     20e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <cur_distance>

    rx_kilo_id = m->data[0]+1; // always add 1 so that no kilo_uid should be less than 1 (i.e. 0 - which we dont want because I'm using it as an empty value place holder for my large ass arrays
     212:	88 81       	ld	r24, Y
     214:	8f 5f       	subi	r24, 0xFF	; 255
     216:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <rx_kilo_id>

    for(uint8_t i=0;i<5;i+=1)
    {
        if(i != kilo_uid)
     21a:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <kilo_uid>
     21e:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <kilo_uid+0x1>
     222:	fe 01       	movw	r30, r28
     224:	ae e1       	ldi	r26, 0x1E	; 30
     226:	b1 e0       	ldi	r27, 0x01	; 1
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	42 17       	cp	r20, r18
     22e:	53 07       	cpc	r21, r19
     230:	11 f0       	breq	.+4      	; 0x236 <message_rx+0x56>
        {   
            neighbor_network_binaries[i] = m->data[i+1]; // read in everyone's local network (except our own just incase)
     232:	91 81       	ldd	r25, Z+1	; 0x01
     234:	9c 93       	st	X, r25
     236:	2f 5f       	subi	r18, 0xFF	; 255
     238:	3f 4f       	sbci	r19, 0xFF	; 255
     23a:	31 96       	adiw	r30, 0x01	; 1
     23c:	11 96       	adiw	r26, 0x01	; 1
    dist = *d;
    cur_distance = estimate_distance(&dist);

    rx_kilo_id = m->data[0]+1; // always add 1 so that no kilo_uid should be less than 1 (i.e. 0 - which we dont want because I'm using it as an empty value place holder for my large ass arrays

    for(uint8_t i=0;i<5;i+=1)
     23e:	25 30       	cpi	r18, 0x05	; 5
     240:	31 05       	cpc	r19, r1
     242:	a1 f7       	brne	.-24     	; 0x22c <message_rx+0x4c>
            neighbor_network_binaries[i] = m->data[i+1]; // read in everyone's local network (except our own just incase)
        }
    }

    // if we have no neighbors, do some initial setup
    if(num_neighbors == 0)
     244:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <num_neighbors>
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	ee 23       	and	r30, r30
     24c:	39 f0       	breq	.+14     	; 0x25c <message_rx+0x7c>
     24e:	a7 e5       	ldi	r26, 0x57	; 87
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	ed 01       	movw	r28, r26
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	40 e0       	ldi	r20, 0x00	; 0
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	0b c0       	rjmp	.+22     	; 0x272 <message_rx+0x92>
    {
        num_neighbors = 1; // increment our number of neighbors
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <num_neighbors>
        local_network[0] = rx_kilo_id; // save our neighbor's id in the local network
     262:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <local_network+0x1>
     266:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <local_network>
     26a:	56 c0       	rjmp	.+172    	; 0x318 <message_rx+0x138>
    {
        uint8_t check_for_id = 0; // flag to check if we've already contacted this kilobot
        uint8_t index = 0; // index of the kilobot in our local_network array

        // First, check our array and see if the received kilobot_id is in the local_network array
        for(uint8_t i=0;i<num_neighbors;i+=1)
     26c:	3f 5f       	subi	r19, 0xFF	; 255
     26e:	e3 17       	cp	r30, r19
     270:	41 f0       	breq	.+16     	; 0x282 <message_rx+0xa2>
        {
            if(rx_kilo_id == local_network[i]) // check to see if our current received kilo_id is in the local stored network
     272:	69 91       	ld	r22, Y+
     274:	79 91       	ld	r23, Y+
     276:	86 17       	cp	r24, r22
     278:	97 07       	cpc	r25, r23
     27a:	c1 f7       	brne	.-16     	; 0x26c <message_rx+0x8c>
            {
                check_for_id += 1; // if it is, flip a flag
     27c:	2f 5f       	subi	r18, 0xFF	; 255
     27e:	43 2f       	mov	r20, r19
     280:	f5 cf       	rjmp	.-22     	; 0x26c <message_rx+0x8c>
                index = i; // save the location that it's in for use lator
            } 
        }

        // If we received a message from an already contacted neighbor
        if(check_for_id == 1) // if we flipped the flag
     282:	21 30       	cpi	r18, 0x01	; 1
     284:	49 f4       	brne	.+18     	; 0x298 <message_rx+0xb8>
        {
            heartbeat_check[index] = 0; // set our heartbeat to 0 as we've received a heartbeat
     286:	e4 2f       	mov	r30, r20
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	ee 0f       	add	r30, r30
     28c:	ff 1f       	adc	r31, r31
     28e:	e9 58       	subi	r30, 0x89	; 137
     290:	fe 4f       	sbci	r31, 0xFE	; 254
     292:	11 82       	std	Z+1, r1	; 0x01
     294:	10 82       	st	Z, r1
     296:	30 c0       	rjmp	.+96     	; 0x2f8 <message_rx+0x118>
        }
        // If we received a message from a new neighbor, add it to the local_network
        else if(check_for_id == 0) // if the kilo_id is NOT in the local_network, add it to our network
     298:	21 11       	cpse	r18, r1
     29a:	0b c0       	rjmp	.+22     	; 0x2b2 <message_rx+0xd2>
        {
            num_neighbors += 1; // increment the number of registered neighbors
     29c:	ef 5f       	subi	r30, 0xFF	; 255
     29e:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <num_neighbors>
            local_network[num_neighbors-1] = rx_kilo_id; // add the new kilo_uid to the end of the list
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	ee 0f       	add	r30, r30
     2a6:	ff 1f       	adc	r31, r31
     2a8:	eb 5a       	subi	r30, 0xAB	; 171
     2aa:	fe 4f       	sbci	r31, 0xFE	; 254
     2ac:	91 83       	std	Z+1, r25	; 0x01
     2ae:	80 83       	st	Z, r24
     2b0:	23 c0       	rjmp	.+70     	; 0x2f8 <message_rx+0x118>
        }
        else if(check_for_id == 2) // if for some reason we found it twice, squash one of them
     2b2:	22 30       	cpi	r18, 0x02	; 2
     2b4:	09 f5       	brne	.+66     	; 0x2f8 <message_rx+0x118>
        {
            for(uint8_t i=index;i<num_neighbors;i+=1)
     2b6:	4e 17       	cp	r20, r30
     2b8:	f8 f4       	brcc	.+62     	; 0x2f8 <message_rx+0x118>
            {
                local_network[i] = local_network[i+1]; // shift everything left, squash the current kilobot
     2ba:	84 2f       	mov	r24, r20
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	9c 01       	movw	r18, r24
     2c0:	2f 5f       	subi	r18, 0xFF	; 255
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	22 0f       	add	r18, r18
     2c6:	33 1f       	adc	r19, r19
     2c8:	e9 01       	movw	r28, r18
     2ca:	c9 5a       	subi	r28, 0xA9	; 169
     2cc:	de 4f       	sbci	r29, 0xFE	; 254
     2ce:	68 81       	ld	r22, Y
     2d0:	79 81       	ldd	r23, Y+1	; 0x01
     2d2:	88 0f       	add	r24, r24
     2d4:	99 1f       	adc	r25, r25
     2d6:	ec 01       	movw	r28, r24
     2d8:	c9 5a       	subi	r28, 0xA9	; 169
     2da:	de 4f       	sbci	r29, 0xFE	; 254
     2dc:	79 83       	std	Y+1, r23	; 0x01
     2de:	68 83       	st	Y, r22
                heartbeat_check[i] = heartbeat_check[i+1]; // shift everything left, squash the current kilobot's heartbeat
     2e0:	e9 01       	movw	r28, r18
     2e2:	c9 58       	subi	r28, 0x89	; 137
     2e4:	de 4f       	sbci	r29, 0xFE	; 254
     2e6:	28 81       	ld	r18, Y
     2e8:	39 81       	ldd	r19, Y+1	; 0x01
     2ea:	ec 01       	movw	r28, r24
     2ec:	c9 58       	subi	r28, 0x89	; 137
     2ee:	de 4f       	sbci	r29, 0xFE	; 254
     2f0:	39 83       	std	Y+1, r19	; 0x01
     2f2:	28 83       	st	Y, r18
            num_neighbors += 1; // increment the number of registered neighbors
            local_network[num_neighbors-1] = rx_kilo_id; // add the new kilo_uid to the end of the list
        }
        else if(check_for_id == 2) // if for some reason we found it twice, squash one of them
        {
            for(uint8_t i=index;i<num_neighbors;i+=1)
     2f4:	4f 5f       	subi	r20, 0xFF	; 255
     2f6:	df cf       	rjmp	.-66     	; 0x2b6 <message_rx+0xd6>
     2f8:	27 e7       	ldi	r18, 0x77	; 119
     2fa:	31 e0       	ldi	r19, 0x01	; 1
                local_network[i] = local_network[i+1]; // shift everything left, squash the current kilobot
                heartbeat_check[i] = heartbeat_check[i+1]; // shift everything left, squash the current kilobot's heartbeat
            }
        }

        uint8_t num_neighbors_check = 0;
     2fc:	80 e0       	ldi	r24, 0x00	; 0
        for(uint8_t i=0;i<16;i+=1)
        {
            if(local_network[i] != 0)
     2fe:	4d 91       	ld	r20, X+
     300:	5d 91       	ld	r21, X+
     302:	45 2b       	or	r20, r21
     304:	09 f0       	breq	.+2      	; 0x308 <message_rx+0x128>
            {
                num_neighbors_check+=1;
     306:	8f 5f       	subi	r24, 0xFF	; 255
                heartbeat_check[i] = heartbeat_check[i+1]; // shift everything left, squash the current kilobot's heartbeat
            }
        }

        uint8_t num_neighbors_check = 0;
        for(uint8_t i=0;i<16;i+=1)
     308:	2a 17       	cp	r18, r26
     30a:	3b 07       	cpc	r19, r27
     30c:	c1 f7       	brne	.-16     	; 0x2fe <message_rx+0x11e>
            if(local_network[i] != 0)
            {
                num_neighbors_check+=1;
            }
        }
        if(num_neighbors != num_neighbors_check)
     30e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <num_neighbors>
     312:	89 13       	cpse	r24, r25
        {
            num_neighbors = num_neighbors_check;
     314:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <num_neighbors>
        }
    }
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <check_heartbeats>:
uint32_t motion_timer;
uint32_t global_timer;
uint32_t global_number = 0;

void check_heartbeats()
{
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
    // Check to see if we've lost contact with a kilobot
    uint8_t counter = 0; // counter to keep track of our location
    do // while our counter is less than the number of neighbors we know of
    {
        // This should remove all values in the heartbeat_check that are greater than our threshold value
        if(heartbeat_check[counter] >= IN_CONTACT_THRESHOLD) // if the current neighobrs heartbeat value is greater than the preset threshold, we've lost contact with it
     326:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <num_neighbors>
uint32_t global_number = 0;

void check_heartbeats()
{
    // Check to see if we've lost contact with a kilobot
    uint8_t counter = 0; // counter to keep track of our location
     330:	20 e0       	ldi	r18, 0x00	; 0
    do // while our counter is less than the number of neighbors we know of
    {
        // This should remove all values in the heartbeat_check that are greater than our threshold value
        if(heartbeat_check[counter] >= IN_CONTACT_THRESHOLD) // if the current neighobrs heartbeat value is greater than the preset threshold, we've lost contact with it
     332:	82 2f       	mov	r24, r18
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	fc 01       	movw	r30, r24
     338:	ee 0f       	add	r30, r30
     33a:	ff 1f       	adc	r31, r31
     33c:	df 01       	movw	r26, r30
     33e:	a9 58       	subi	r26, 0x89	; 137
     340:	be 4f       	sbci	r27, 0xFE	; 254
     342:	6d 91       	ld	r22, X+
     344:	7c 91       	ld	r23, X
     346:	11 97       	sbiw	r26, 0x01	; 1
     348:	64 17       	cp	r22, r20
     34a:	75 07       	cpc	r23, r21
     34c:	70 f1       	brcs	.+92     	; 0x3aa <check_heartbeats+0x8c>
        {
            neighbor_network_binaries[local_network[counter]-1] = 0;
     34e:	e9 5a       	subi	r30, 0xA9	; 169
     350:	fe 4f       	sbci	r31, 0xFE	; 254
     352:	c0 81       	ld	r28, Z
     354:	d1 81       	ldd	r29, Z+1	; 0x01
     356:	c3 5e       	subi	r28, 0xE3	; 227
     358:	de 4f       	sbci	r29, 0xFE	; 254
     35a:	18 82       	st	Y, r1
            // if the counter is currently at the very end of the local_network, just set our lost neighbor's values to 0
            if(counter == (num_neighbors-1)) // case for where we're at the very end of the array
     35c:	63 2f       	mov	r22, r19
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	61 50       	subi	r22, 0x01	; 1
     362:	71 09       	sbc	r23, r1
     364:	86 17       	cp	r24, r22
     366:	97 07       	cpc	r25, r23
     368:	51 f0       	breq	.+20     	; 0x37e <check_heartbeats+0x60>
            else // if it's not at the very end, squash it's values with the neighbor to the right of it in the local_network array, effectively getting rid of it
            {
                for(uint8_t i=counter;i<num_neighbors;i+=1)
                {
                    // This algorithm is not very efficient, since it will repeat n+1 times, where n is the number of kilobots we've lost contact with
                    local_network[counter] = local_network[counter+1]; // shift everything left, squash the current kilobot
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	ec 01       	movw	r28, r24
     372:	c9 5a       	subi	r28, 0xA9	; 169
     374:	de 4f       	sbci	r29, 0xFE	; 254
     376:	8f 01       	movw	r16, r30
                    heartbeat_check[counter] = heartbeat_check[counter+1]; // shift everything left, squash the current kilobot's heartbeat
     378:	89 58       	subi	r24, 0x89	; 137
     37a:	9e 4f       	sbci	r25, 0xFE	; 254
     37c:	05 c0       	rjmp	.+10     	; 0x388 <check_heartbeats+0x6a>
            neighbor_network_binaries[local_network[counter]-1] = 0;
            // if the counter is currently at the very end of the local_network, just set our lost neighbor's values to 0
            if(counter == (num_neighbors-1)) // case for where we're at the very end of the array
            {
                // instead of squashing them, set them to 0
                local_network[counter] = 0; 
     37e:	11 82       	std	Z+1, r1	; 0x01
     380:	10 82       	st	Z, r1
                heartbeat_check[counter] = 0;
     382:	1d 92       	st	X+, r1
     384:	1c 92       	st	X, r1
     386:	0f c0       	rjmp	.+30     	; 0x3a6 <check_heartbeats+0x88>
            }
            else // if it's not at the very end, squash it's values with the neighbor to the right of it in the local_network array, effectively getting rid of it
            {
                for(uint8_t i=counter;i<num_neighbors;i+=1)
     388:	23 17       	cp	r18, r19
     38a:	68 f4       	brcc	.+26     	; 0x3a6 <check_heartbeats+0x88>
                {
                    // This algorithm is not very efficient, since it will repeat n+1 times, where n is the number of kilobots we've lost contact with
                    local_network[counter] = local_network[counter+1]; // shift everything left, squash the current kilobot
     38c:	68 81       	ld	r22, Y
     38e:	79 81       	ldd	r23, Y+1	; 0x01
     390:	f8 01       	movw	r30, r16
     392:	71 83       	std	Z+1, r23	; 0x01
     394:	60 83       	st	Z, r22
                    heartbeat_check[counter] = heartbeat_check[counter+1]; // shift everything left, squash the current kilobot's heartbeat
     396:	fc 01       	movw	r30, r24
     398:	60 81       	ld	r22, Z
     39a:	71 81       	ldd	r23, Z+1	; 0x01
     39c:	11 96       	adiw	r26, 0x01	; 1
     39e:	7c 93       	st	X, r23
     3a0:	6e 93       	st	-X, r22
                local_network[counter] = 0; 
                heartbeat_check[counter] = 0;
            }
            else // if it's not at the very end, squash it's values with the neighbor to the right of it in the local_network array, effectively getting rid of it
            {
                for(uint8_t i=counter;i<num_neighbors;i+=1)
     3a2:	2f 5f       	subi	r18, 0xFF	; 255
     3a4:	f1 cf       	rjmp	.-30     	; 0x388 <check_heartbeats+0x6a>
                    local_network[counter] = local_network[counter+1]; // shift everything left, squash the current kilobot
                    heartbeat_check[counter] = heartbeat_check[counter+1]; // shift everything left, squash the current kilobot's heartbeat
                }
            }
            counter = -1; // reset back to the beginning to check through the array ()
            num_neighbors -= 1; // decrement the number of neighbors
     3a6:	31 50       	subi	r19, 0x01	; 1
                    // This algorithm is not very efficient, since it will repeat n+1 times, where n is the number of kilobots we've lost contact with
                    local_network[counter] = local_network[counter+1]; // shift everything left, squash the current kilobot
                    heartbeat_check[counter] = heartbeat_check[counter+1]; // shift everything left, squash the current kilobot's heartbeat
                }
            }
            counter = -1; // reset back to the beginning to check through the array ()
     3a8:	2f ef       	ldi	r18, 0xFF	; 255
            num_neighbors -= 1; // decrement the number of neighbors
        }
        counter += 1;
     3aa:	2f 5f       	subi	r18, 0xFF	; 255
    }
    while (counter < num_neighbors);
     3ac:	23 17       	cp	r18, r19
     3ae:	08 f2       	brcs	.-126    	; 0x332 <check_heartbeats+0x14>
     3b0:	30 93 12 01 	sts	0x0112, r19	; 0x800112 <num_neighbors>
}
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	08 95       	ret

000003be <get_kilo_color>:

void get_kilo_color()
{
    switch(global_number)
     3be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     3c2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     3c6:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__data_end+0x2>
     3ca:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__data_end+0x3>
     3ce:	87 30       	cpi	r24, 0x07	; 7
     3d0:	91 05       	cpc	r25, r1
     3d2:	88 f4       	brcc	.+34     	; 0x3f6 <get_kilo_color+0x38>
     3d4:	fc 01       	movw	r30, r24
     3d6:	ec 5c       	subi	r30, 0xCC	; 204
     3d8:	ff 4f       	sbci	r31, 0xFF	; 255
     3da:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__tablejump2__>
    {
        case 0:
            set_color(RGB(1,1,1)); // WHITE
     3de:	85 e1       	ldi	r24, 0x15	; 21
     3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <get_kilo_color+0x3a>
            break;
        case 1:
            set_color(RGB(1,0,0)); // RED
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	09 c0       	rjmp	.+18     	; 0x3f8 <get_kilo_color+0x3a>
            break;
        case 2:
            set_color(RGB(1,1,0)); // YELLOW
     3e6:	85 e0       	ldi	r24, 0x05	; 5
     3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <get_kilo_color+0x3a>
            break;

        case 3:
            set_color(RGB(0,1,0)); // GREEN
     3ea:	84 e0       	ldi	r24, 0x04	; 4
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <get_kilo_color+0x3a>
            break;

        case 4:
            set_color(RGB(0,0,1)); // BLUE
     3ee:	80 e1       	ldi	r24, 0x10	; 16
     3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <get_kilo_color+0x3a>
        case 5:
            break;
            set_color(RGB(0,1,1)); // TEAL

        case 6:
            set_color(RGB(1,0,1)); // PURPLE
     3f2:	81 e1       	ldi	r24, 0x11	; 17
     3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <get_kilo_color+0x3a>
            break;

        default: // any other case, I guess just turn off the LED
            set_color(RGB(0,0,0));
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <set_color>
     3fc:	08 95       	ret

000003fe <loop>:
    global_timer = kilo_ticks;
    set_color(RGB(1,1,1));
}

// now loop
void loop() {
     3fe:	9f 92       	push	r9
     400:	af 92       	push	r10
     402:	bf 92       	push	r11
     404:	cf 92       	push	r12
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	cf 93       	push	r28
     412:	df 93       	push	r29

    if(new_message == 1)
     414:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <new_message>
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	11 f4       	brne	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
    {
        new_message = 0;
     41c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <new_message>
    }

    if((kilo_ticks-start_time) >= 24) // update our heartbeat every half-second (roughly)
     420:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <kilo_ticks>
     424:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <kilo_ticks+0x1>
     428:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <kilo_ticks+0x2>
     42c:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <kilo_ticks+0x3>
     430:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <start_time>
     434:	50 91 44 01 	lds	r21, 0x0144	; 0x800144 <start_time+0x1>
     438:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <start_time+0x2>
     43c:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <start_time+0x3>
     440:	84 1b       	sub	r24, r20
     442:	95 0b       	sbc	r25, r21
     444:	a6 0b       	sbc	r26, r22
     446:	b7 0b       	sbc	r27, r23
     448:	48 97       	sbiw	r24, 0x18	; 24
     44a:	a1 05       	cpc	r26, r1
     44c:	b1 05       	cpc	r27, r1
     44e:	f8 f0       	brcs	.+62     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
    {
        for(uint8_t i=0;i<num_neighbors;i+=1)
     450:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <num_neighbors>
     454:	e7 e7       	ldi	r30, 0x77	; 119
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	89 17       	cp	r24, r25
     45c:	41 f0       	breq	.+16     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
        {
            heartbeat_check[i] += 1;
     45e:	20 81       	ld	r18, Z
     460:	31 81       	ldd	r19, Z+1	; 0x01
     462:	2f 5f       	subi	r18, 0xFF	; 255
     464:	3f 4f       	sbci	r19, 0xFF	; 255
     466:	21 93       	st	Z+, r18
     468:	31 93       	st	Z+, r19
        new_message = 0;
    }

    if((kilo_ticks-start_time) >= 24) // update our heartbeat every half-second (roughly)
    {
        for(uint8_t i=0;i<num_neighbors;i+=1)
     46a:	8f 5f       	subi	r24, 0xFF	; 255
     46c:	f6 cf       	rjmp	.-20     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
        {
            heartbeat_check[i] += 1;
            
        }
        start_time = kilo_ticks;
     46e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <kilo_ticks>
     472:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <kilo_ticks+0x1>
     476:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <kilo_ticks+0x2>
     47a:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <kilo_ticks+0x3>
     47e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <start_time>
     482:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <start_time+0x1>
     486:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <start_time+0x2>
     48a:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <start_time+0x3>
    }    

    // regardless of if we got a message, check the heartbeats
    check_heartbeats();
     48e:	0e 94 8f 01 	call	0x31e	; 0x31e <check_heartbeats>
     492:	cb e3       	ldi	r28, 0x3B	; 59
     494:	d1 e0       	ldi	r29, 0x01	; 1
     496:	33 e4       	ldi	r19, 0x43	; 67
     498:	e3 2e       	mov	r14, r19
     49a:	31 e0       	ldi	r19, 0x01	; 1
     49c:	f3 2e       	mov	r15, r19
     49e:	fe 01       	movw	r30, r28

    // create local_network_binary
    for(uint8_t i=0;i<8;i+=1)
    {
        local_network_binary[i] = 0; // fill with 0s
     4a0:	11 92       	st	Z+, r1

    // regardless of if we got a message, check the heartbeats
    check_heartbeats();

    // create local_network_binary
    for(uint8_t i=0;i<8;i+=1)
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	e3 34       	cpi	r30, 0x43	; 67
     4a6:	f8 07       	cpc	r31, r24
     4a8:	d9 f7       	brne	.-10     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
    {
        local_network_binary[i] = 0; // fill with 0s
    }
    for(uint8_t i=0;i<num_neighbors;i+=1)
     4aa:	d0 90 12 01 	lds	r13, 0x0112	; 0x800112 <num_neighbors>
     4ae:	07 e5       	ldi	r16, 0x57	; 87
     4b0:	11 e0       	ldi	r17, 0x01	; 1
     4b2:	f8 01       	movw	r30, r16
     4b4:	20 e0       	ldi	r18, 0x00	; 0
    {
        if(local_network[i] != 0)
        {
            local_network_binary[local_network[i]-1] = 1; // get the correct location
     4b6:	31 e0       	ldi	r19, 0x01	; 1
    // create local_network_binary
    for(uint8_t i=0;i<8;i+=1)
    {
        local_network_binary[i] = 0; // fill with 0s
    }
    for(uint8_t i=0;i<num_neighbors;i+=1)
     4b8:	2d 15       	cp	r18, r13
     4ba:	51 f0       	breq	.+20     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
    {
        if(local_network[i] != 0)
     4bc:	81 91       	ld	r24, Z+
     4be:	91 91       	ld	r25, Z+
     4c0:	00 97       	sbiw	r24, 0x00	; 0
     4c2:	21 f0       	breq	.+8      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
        {
            local_network_binary[local_network[i]-1] = 1; // get the correct location
     4c4:	dc 01       	movw	r26, r24
     4c6:	a6 5c       	subi	r26, 0xC6	; 198
     4c8:	be 4f       	sbci	r27, 0xFE	; 254
     4ca:	3c 93       	st	X, r19
    // create local_network_binary
    for(uint8_t i=0;i<8;i+=1)
    {
        local_network_binary[i] = 0; // fill with 0s
    }
    for(uint8_t i=0;i<num_neighbors;i+=1)
     4cc:	2f 5f       	subi	r18, 0xFF	; 255
     4ce:	f4 cf       	rjmp	.-24     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
            local_network_binary[local_network[i]-1] = 1; // get the correct location
        }
    }

    // update our binary 
    local_network_binary[kilo_uid] = 1; // always say that our local network binary is 1
     4d0:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <kilo_uid>
     4d4:	30 91 f2 01 	lds	r19, 0x01F2	; 0x8001f2 <kilo_uid+0x1>
     4d8:	f9 01       	movw	r30, r18
     4da:	e5 5c       	subi	r30, 0xC5	; 197
     4dc:	fe 4f       	sbci	r31, 0xFE	; 254
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 83       	st	Z, r24
     4e2:	eb e3       	ldi	r30, 0x3B	; 59
     4e4:	f1 e0       	ldi	r31, 0x01	; 1
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	40 e0       	ldi	r20, 0x00	; 0
    send_local_network_binary = 0;
    for(uint8_t i=0; i<8; i+=1) 
    {
        send_local_network_binary |= (local_network_binary[i] << i); // store in LSB format
     4ec:	81 91       	ld	r24, Z+
     4ee:	06 2e       	mov	r0, r22
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4f2:	88 0f       	add	r24, r24
     4f4:	0a 94       	dec	r0
     4f6:	ea f7       	brpl	.-6      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     4f8:	48 2b       	or	r20, r24
     4fa:	6f 5f       	subi	r22, 0xFF	; 255
     4fc:	7f 4f       	sbci	r23, 0xFF	; 255
    }

    // update our binary 
    local_network_binary[kilo_uid] = 1; // always say that our local network binary is 1
    send_local_network_binary = 0;
    for(uint8_t i=0; i<8; i+=1) 
     4fe:	68 30       	cpi	r22, 0x08	; 8
     500:	71 05       	cpc	r23, r1
     502:	a1 f7       	brne	.-24     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
     504:	40 93 13 01 	sts	0x0113, r20	; 0x800113 <send_local_network_binary>
    {
        send_local_network_binary |= (local_network_binary[i] << i); // store in LSB format
    }
    neighbor_network_binaries[kilo_uid] = send_local_network_binary; // update and send my local network
     508:	f9 01       	movw	r30, r18
     50a:	e2 5e       	subi	r30, 0xE2	; 226
     50c:	fe 4f       	sbci	r31, 0xFE	; 254
     50e:	40 83       	st	Z, r20

    if((kilo_ticks-global_timer) >= (32*3))
     510:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <kilo_ticks>
     514:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <kilo_ticks+0x1>
     518:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <kilo_ticks+0x2>
     51c:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <kilo_ticks+0x3>
     520:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <global_timer>
     524:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <global_timer+0x1>
     528:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <global_timer+0x2>
     52c:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <global_timer+0x3>
     530:	84 1b       	sub	r24, r20
     532:	95 0b       	sbc	r25, r21
     534:	a6 0b       	sbc	r26, r22
     536:	b7 0b       	sbc	r27, r23
     538:	80 36       	cpi	r24, 0x60	; 96
     53a:	91 05       	cpc	r25, r1
     53c:	a1 05       	cpc	r26, r1
     53e:	b1 05       	cpc	r27, r1
     540:	08 f4       	brcc	.+2      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
     542:	81 c0       	rjmp	.+258    	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	dc 01       	movw	r26, r24
            uint8_t mask = 1 << bit_position;

            // Extract the bit using AND and right shift
            unsigned int extracted_bit = (neighbor_check & mask) >> bit_position;

            if(extracted_bit == 1)
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	c4 2e       	mov	r12, r20
     554:	2e e1       	ldi	r18, 0x1E	; 30
     556:	a2 2e       	mov	r10, r18
     558:	21 e0       	ldi	r18, 0x01	; 1
     55a:	b2 2e       	mov	r11, r18
            local_network_binary[local_network[i]-1] = 1; // get the correct location
        }
    }

    // update our binary 
    local_network_binary[kilo_uid] = 1; // always say that our local network binary is 1
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	20 e0       	ldi	r18, 0x00	; 0
        for(uint8_t neighborN=0;neighborN<5;neighborN+=1) // go through each neighbor and check their local network
        {
            uint8_t neighbor_check = 0; // value to store OR'd bit in
            for(uint8_t i=0;i<5;i+=1)
            {
                if(i != neighborN) // only do operations on every network other than the current one we're looking at
     560:	c3 16       	cp	r12, r19
     562:	19 f0       	breq	.+6      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
                {
                    neighbor_check |= neighbor_network_binaries[i]; // OR all of the local networks together
     564:	f5 01       	movw	r30, r10
     566:	90 80       	ld	r9, Z
     568:	29 29       	or	r18, r9
        
        global_number = 0;
        for(uint8_t neighborN=0;neighborN<5;neighborN+=1) // go through each neighbor and check their local network
        {
            uint8_t neighbor_check = 0; // value to store OR'd bit in
            for(uint8_t i=0;i<5;i+=1)
     56a:	3f 5f       	subi	r19, 0xFF	; 255
     56c:	ff ef       	ldi	r31, 0xFF	; 255
     56e:	af 1a       	sub	r10, r31
     570:	bf 0a       	sbc	r11, r31
     572:	35 30       	cpi	r19, 0x05	; 5
     574:	a9 f7       	brne	.-22     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
            uint8_t mask = 1 << bit_position;

            // Extract the bit using AND and right shift
            unsigned int extracted_bit = (neighbor_check & mask) >> bit_position;

            if(extracted_bit == 1)
     576:	fb 01       	movw	r30, r22
     578:	04 2e       	mov	r0, r20
     57a:	01 c0       	rjmp	.+2      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
     57c:	ee 0f       	add	r30, r30
     57e:	0a 94       	dec	r0
     580:	ea f7       	brpl	.-6      	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
     582:	e2 23       	and	r30, r18
     584:	2e 2f       	mov	r18, r30
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	04 2e       	mov	r0, r20
     58a:	02 c0       	rjmp	.+4      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
     58c:	35 95       	asr	r19
     58e:	27 95       	ror	r18
     590:	0a 94       	dec	r0
     592:	e2 f7       	brpl	.-8      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
     594:	21 30       	cpi	r18, 0x01	; 1
     596:	31 05       	cpc	r19, r1
     598:	19 f4       	brne	.+6      	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
            {
                global_number += 1;
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	a1 1d       	adc	r26, r1
     59e:	b1 1d       	adc	r27, r1
     5a0:	4f 5f       	subi	r20, 0xFF	; 255
     5a2:	5f 4f       	sbci	r21, 0xFF	; 255
    if((kilo_ticks-global_timer) >= (32*3))
    {
        
        
        global_number = 0;
        for(uint8_t neighborN=0;neighborN<5;neighborN+=1) // go through each neighbor and check their local network
     5a4:	45 30       	cpi	r20, 0x05	; 5
     5a6:	51 05       	cpc	r21, r1
     5a8:	a1 f6       	brne	.-88     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
     5aa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     5ae:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     5b2:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
     5b6:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
            {
                global_number += 1;
            }
        }
        // Finally, condition our global number:
        if(global_number != 0)
     5ba:	00 97       	sbiw	r24, 0x00	; 0
     5bc:	a1 05       	cpc	r26, r1
     5be:	b1 05       	cpc	r27, r1
     5c0:	59 f0       	breq	.+22     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
        {
            global_number -= 1; // subtract 1
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	a1 09       	sbc	r26, r1
     5c6:	b1 09       	sbc	r27, r1
     5c8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     5cc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     5d0:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_end+0x2>
     5d4:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_end+0x3>
        }

        // check if we have no neighbors, and if so, we're at 0
        if(num_neighbors == 0)
     5d8:	d1 10       	cpse	r13, r1
     5da:	08 c0       	rjmp	.+16     	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
        {
            global_number = 0;
     5dc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
     5e0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
     5e4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end+0x2>
     5e8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x3>
        }

        // get the color
        get_kilo_color();
     5ec:	0e 94 df 01 	call	0x3be	; 0x3be <get_kilo_color>
     5f0:	e7 e7       	ldi	r30, 0x77	; 119
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	87 e7       	ldi	r24, 0x77	; 119
     5f6:	91 e0       	ldi	r25, 0x01	; 1

        // fill our arrays with zero
        for(uint8_t i=0;i<16;i+=1)
        {
            local_network[i] = 0;
     5f8:	d8 01       	movw	r26, r16
     5fa:	1d 92       	st	X+, r1
     5fc:	1d 92       	st	X+, r1
     5fe:	8d 01       	movw	r16, r26
            heartbeat_check[i] = 0;
     600:	11 92       	st	Z+, r1
     602:	11 92       	st	Z+, r1

        // get the color
        get_kilo_color();

        // fill our arrays with zero
        for(uint8_t i=0;i<16;i+=1)
     604:	8a 17       	cp	r24, r26
     606:	9b 07       	cpc	r25, r27
     608:	b9 f7       	brne	.-18     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
            local_network[i] = 0;
            heartbeat_check[i] = 0;
        }
        for(uint8_t i=0;i<5;i+=1)
        {
            neighbor_network_binaries[i] = 0;
     60a:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <neighbor_network_binaries>
     60e:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <neighbor_network_binaries+0x1>
     612:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <neighbor_network_binaries+0x2>
     616:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <neighbor_network_binaries+0x3>
     61a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <neighbor_network_binaries+0x4>
        }
        for(uint8_t i=0;i<8;i+=1)
        {
            local_network_binary[i] = 0;
     61e:	19 92       	st	Y+, r1
        }
        for(uint8_t i=0;i<5;i+=1)
        {
            neighbor_network_binaries[i] = 0;
        }
        for(uint8_t i=0;i<8;i+=1)
     620:	ec 16       	cp	r14, r28
     622:	fd 06       	cpc	r15, r29
     624:	e1 f7       	brne	.-8      	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
        {
            local_network_binary[i] = 0;
        }
        global_timer = kilo_ticks;
     626:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <kilo_ticks>
     62a:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <kilo_ticks+0x1>
     62e:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <kilo_ticks+0x2>
     632:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <kilo_ticks+0x3>
     636:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <global_timer>
     63a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <global_timer+0x1>
     63e:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <global_timer+0x2>
     642:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <global_timer+0x3>
    }
                                                                                                                                                                                                               
}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	df 90       	pop	r13
     654:	cf 90       	pop	r12
     656:	bf 90       	pop	r11
     658:	af 90       	pop	r10
     65a:	9f 90       	pop	r9
     65c:	08 95       	ret

0000065e <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     65e:	08 95       	ret

00000660 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	08 95       	ret

00000666 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     666:	08 95       	ret

00000668 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     668:	df 92       	push	r13
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
    cli();
     676:	f8 94       	cli

    ports_off();
     678:	14 b8       	out	0x04, r1	; 4
     67a:	17 b8       	out	0x07, r1	; 7
     67c:	1a b8       	out	0x0a, r1	; 10
     67e:	15 b8       	out	0x05, r1	; 5
     680:	18 b8       	out	0x08, r1	; 8
     682:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     684:	52 9a       	sbi	0x0a, 2	; 10
     686:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     688:	14 bc       	out	0x24, r1	; 36
     68a:	85 e0       	ldi	r24, 0x05	; 5
     68c:	85 bd       	out	0x25, r24	; 37
     68e:	8f ef       	ldi	r24, 0xFF	; 255
     690:	87 bd       	out	0x27, r24	; 39
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     698:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     69c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     6a0:	2f e8       	ldi	r18, 0x8F	; 143
     6a2:	3b e0       	ldi	r19, 0x0B	; 11
     6a4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     6a8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     6ac:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     6b0:	53 98       	cbi	0x0a, 3	; 10
     6b2:	23 98       	cbi	0x04, 3	; 4
     6b4:	91 ea       	ldi	r25, 0xA1	; 161
     6b6:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     6ba:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     6be:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     6c2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     6c6:	8b e0       	ldi	r24, 0x0B	; 11
     6c8:	80 bf       	out	0x30, r24	; 48
     6ca:	83 e0       	ldi	r24, 0x03	; 3
     6cc:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     6d0:	86 e0       	ldi	r24, 0x06	; 6
     6d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6d6:	83 e8       	ldi	r24, 0x83	; 131
     6d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6e0:	80 64       	ori	r24, 0x40	; 64
     6e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6e6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6ea:	86 fd       	sbrc	r24, 6
     6ec:	fc cf       	rjmp	.-8      	; 0x6e6 <kilo_init+0x7e>
    adc_trigger_high_gain();
     6ee:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6f2:	83 ea       	ldi	r24, 0xA3	; 163
     6f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
    if (osccal != 0xFF)
     706:	8f 3f       	cpi	r24, 0xFF	; 255
     708:	11 f0       	breq	.+4      	; 0x70e <kilo_init+0xa6>
        OSCCAL = osccal;
     70a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     70e:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>
    rx_leadingbit = 1;
     712:	c1 e0       	ldi	r28, 0x01	; 1
     714:	c0 93 98 01 	sts	0x0198, r28	; 0x800198 <rx_leadingbit>
    rx_leadingbyte = 1;
     718:	c0 93 dc 01 	sts	0x01DC, r28	; 0x8001dc <rx_leadingbyte>
    rx_byteindex = 0;
     71c:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <rx_byteindex>
    rx_bytevalue = 0;
     720:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     724:	80 e9       	ldi	r24, 0x90	; 144
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     72c:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     730:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <tx_mask>
     734:	88 73       	andi	r24, 0x38	; 56
     736:	11 f0       	breq	.+4      	; 0x73c <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     738:	c0 93 b5 01 	sts	0x01B5, r28	; 0x8001b5 <tx_mask>
    tx_clock = 0;
     73c:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <tx_clock+0x1>
     740:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <tx_clock>
    tx_increment = 255;
     744:	8f ef       	ldi	r24, 0xFF	; 255
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <tx_increment+0x1>
     74c:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <tx_increment>
    kilo_ticks = 0;
     750:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <kilo_ticks>
     754:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <kilo_ticks+0x1>
     758:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <kilo_ticks+0x2>
     75c:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <kilo_ticks+0x3>
    kilo_state = IDLE;
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <kilo_state>
    kilo_tx_period = 3906;
     766:	82 e4       	ldi	r24, 0x42	; 66
     768:	9f e0       	ldi	r25, 0x0F	; 15
     76a:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <kilo_tx_period+0x1>
     76e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     772:	80 eb       	ldi	r24, 0xB0	; 176
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     77a:	c8 2f       	mov	r28, r24
     77c:	81 eb       	ldi	r24, 0xB1	; 177
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     784:	2c 2f       	mov	r18, r28
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	38 2b       	or	r19, r24
     78a:	30 93 f2 01 	sts	0x01F2, r19	; 0x8001f2 <kilo_uid+0x1>
     78e:	20 93 f1 01 	sts	0x01F1, r18	; 0x8001f1 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     79a:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     79e:	89 e0       	ldi	r24, 0x09	; 9
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     7a6:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     7aa:	8c e0       	ldi	r24, 0x0C	; 12
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     7b2:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     7b6:	84 e1       	ldi	r24, 0x14	; 20
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     7be:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <kilo_straight_right>
     7c2:	00 ec       	ldi	r16, 0xC0	; 192
     7c4:	11 e0       	ldi	r17, 0x01	; 1
     7c6:	59 e9       	ldi	r21, 0x99	; 153
     7c8:	e5 2e       	mov	r14, r21
     7ca:	51 e0       	ldi	r21, 0x01	; 1
     7cc:	f5 2e       	mov	r15, r21
     7ce:	c0 e2       	ldi	r28, 0x20	; 32
     7d0:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     7d2:	ce 01       	movw	r24, r28
     7d4:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     7d8:	d8 2e       	mov	r13, r24
     7da:	ce 01       	movw	r24, r28
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     7e2:	2d 2d       	mov	r18, r13
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	32 2f       	mov	r19, r18
     7e8:	22 27       	eor	r18, r18
     7ea:	28 2b       	or	r18, r24
     7ec:	f8 01       	movw	r30, r16
     7ee:	21 93       	st	Z+, r18
     7f0:	31 93       	st	Z+, r19
     7f2:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     7f4:	ce 01       	movw	r24, r28
     7f6:	c0 96       	adiw	r24, 0x30	; 48
     7f8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     7fc:	d8 2e       	mov	r13, r24
     7fe:	ce 01       	movw	r24, r28
     800:	c1 96       	adiw	r24, 0x31	; 49
     802:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <eeprom_read_byte>
     806:	2d 2d       	mov	r18, r13
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	32 2f       	mov	r19, r18
     80c:	22 27       	eor	r18, r18
     80e:	28 2b       	or	r18, r24
     810:	f7 01       	movw	r30, r14
     812:	21 93       	st	Z+, r18
     814:	31 93       	st	Z+, r19
     816:	7f 01       	movw	r14, r30
     818:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     81a:	cc 33       	cpi	r28, 0x3C	; 60
     81c:	d1 05       	cpc	r29, r1
     81e:	c9 f6       	brne	.-78     	; 0x7d2 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     820:	78 94       	sei
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	08 95       	ret

00000832 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     832:	1f 92       	push	r1
     834:	0f 92       	push	r0
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	0f 92       	push	r0
     83a:	11 24       	eor	r1, r1
     83c:	8f 93       	push	r24
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	a8 95       	wdr
     844:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     848:	88 61       	ori	r24, 0x18	; 24
     84a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     84e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     852:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     854:	8f 91       	pop	r24
     856:	0f 90       	pop	r0
     858:	0f be       	out	0x3f, r0	; 63
     85a:	0f 90       	pop	r0
     85c:	1f 90       	pop	r1
     85e:	18 95       	reti

00000860 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     860:	00 97       	sbiw	r24, 0x00	; 0
     862:	41 f0       	breq	.+16     	; 0x874 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     864:	ef ec       	ldi	r30, 0xCF	; 207
     866:	f7 e0       	ldi	r31, 0x07	; 7
     868:	31 97       	sbiw	r30, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <delay+0x8>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <delay+0xe>
     86e:	00 00       	nop
        _delay_ms(1);
        ms--;
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f6 cf       	rjmp	.-20     	; 0x860 <delay>
    }
}
     874:	08 95       	ret

00000876 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     876:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     87a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     87e:	08 95       	ret

00000880 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     880:	8f ef       	ldi	r24, 0xFF	; 255
     882:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     886:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     88a:	8f e0       	ldi	r24, 0x0F	; 15
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0c 94 30 04 	jmp	0x860	; 0x860 <delay>

00000892 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     892:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <rx_busy>
     896:	81 11       	cpse	r24, r1
     898:	1e c0       	rjmp	.+60     	; 0x8d6 <get_ambientlight+0x44>
        cli();
     89a:	f8 94       	cli
        adc_setup_conversion(7);
     89c:	87 e0       	ldi	r24, 0x07	; 7
     89e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     8a2:	83 e8       	ldi	r24, 0x83	; 131
     8a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     8a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8ac:	80 64       	ori	r24, 0x40	; 64
     8ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     8b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8b6:	86 fd       	sbrc	r24, 6
     8b8:	fc cf       	rjmp	.-8      	; 0x8b2 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     8ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     8be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     8c2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     8c6:	23 ea       	ldi	r18, 0xA3	; 163
     8c8:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     8d2:	78 94       	sei
     8d4:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     8da:	08 95       	ret

000008dc <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     8dc:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <rx_busy>
     8e0:	81 11       	cpse	r24, r1
     8e2:	1e c0       	rjmp	.+60     	; 0x920 <__stack+0x21>
        cli();
     8e4:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     8e6:	88 ec       	ldi	r24, 0xC8	; 200
     8e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     8ec:	87 e8       	ldi	r24, 0x87	; 135
     8ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     8f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     8f6:	80 64       	ori	r24, 0x40	; 64
     8f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     8fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     900:	86 fd       	sbrc	r24, 6
     902:	fc cf       	rjmp	.-8      	; 0x8fc <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     904:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     908:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     90c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     910:	23 ea       	ldi	r18, 0xA3	; 163
     912:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     916:	21 e0       	ldi	r18, 0x01	; 1
     918:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     91c:	78 94       	sei
     91e:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     924:	08 95       	ret

00000926 <rand_hard>:

uint8_t rand_hard() {
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     92e:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     930:	e3 ea       	ldi	r30, 0xA3	; 163
     932:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     934:	c6 e0       	ldi	r28, 0x06	; 6
     936:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     938:	a1 e0       	ldi	r26, 0x01	; 1
     93a:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     93c:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     93e:	f8 94       	cli
            adc_setup_conversion(6);
     940:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     944:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     948:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     94c:	40 64       	ori	r20, 0x40	; 64
     94e:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     952:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     956:	46 fd       	sbrc	r20, 6
     958:	fc cf       	rjmp	.-8      	; 0x952 <rand_hard+0x2c>
            a = ADCW&0x1;
     95a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     95e:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     962:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     964:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     968:	50 64       	ori	r21, 0x40	; 64
     96a:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     96e:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     972:	56 fd       	sbrc	r21, 6
     974:	fc cf       	rjmp	.-8      	; 0x96e <rand_hard+0x48>
            b = ADCW&0x1;
     976:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     97a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     97e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     982:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     986:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     98a:	78 94       	sei
            tries++;
     98c:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     98e:	61 70       	andi	r22, 0x01	; 1
     990:	46 17       	cp	r20, r22
     992:	51 f0       	breq	.+20     	; 0x9a8 <rand_hard+0x82>
        if (a)
     994:	44 23       	and	r20, r20
     996:	59 f0       	breq	.+22     	; 0x9ae <rand_hard+0x88>
            num |= (1<<i);
     998:	ad 01       	movw	r20, r26
     99a:	02 2e       	mov	r0, r18
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <rand_hard+0x7a>
     99e:	44 0f       	add	r20, r20
     9a0:	0a 94       	dec	r0
     9a2:	ea f7       	brpl	.-6      	; 0x99e <rand_hard+0x78>
     9a4:	84 2b       	or	r24, r20
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     9a8:	90 38       	cpi	r25, 0x80	; 128
     9aa:	49 f6       	brne	.-110    	; 0x93e <rand_hard+0x18>
     9ac:	f3 cf       	rjmp	.-26     	; 0x994 <rand_hard+0x6e>
     9ae:	2f 5f       	subi	r18, 0xFF	; 255
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     9b2:	28 30       	cpi	r18, 0x08	; 8
     9b4:	31 05       	cpc	r19, r1
     9b6:	09 f0       	breq	.+2      	; 0x9ba <rand_hard+0x94>
     9b8:	c1 cf       	rjmp	.-126    	; 0x93c <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     9c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <seed>
     9c4:	98 e0       	ldi	r25, 0x08	; 8
     9c6:	89 9f       	mul	r24, r25
     9c8:	90 01       	movw	r18, r0
     9ca:	11 24       	eor	r1, r1
     9cc:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     9ce:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <accumulator>
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	89 0f       	add	r24, r25
     9d6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <accumulator>
     9da:	82 2f       	mov	r24, r18
     9dc:	82 95       	swap	r24
     9de:	86 95       	lsr	r24
     9e0:	87 70       	andi	r24, 0x07	; 7
     9e2:	28 27       	eor	r18, r24
     9e4:	96 95       	lsr	r25
     9e6:	96 95       	lsr	r25
     9e8:	82 2f       	mov	r24, r18
     9ea:	89 27       	eor	r24, r25
     9ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <seed>
    return seed;
}
     9f0:	08 95       	ret

000009f2 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     9f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <seed>
     9f6:	08 95       	ret

000009f8 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     9f8:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <rx_busy>
     9fc:	81 11       	cpse	r24, r1
     9fe:	16 c0       	rjmp	.+44     	; 0xa2c <get_voltage+0x34>
        cli();                                    // disable interrupts
     a00:	f8 94       	cli
        adc_setup_conversion(6);
     a02:	86 e0       	ldi	r24, 0x06	; 6
     a04:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     a08:	83 e8       	ldi	r24, 0x83	; 131
     a0a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     a0e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a12:	80 64       	ori	r24, 0x40	; 64
     a14:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     a18:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a1c:	86 fd       	sbrc	r24, 6
     a1e:	fc cf       	rjmp	.-8      	; 0xa18 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     a20:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     a24:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     a28:	78 94       	sei
     a2a:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     a30:	08 95       	ret

00000a32 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     a32:	2f 92       	push	r2
     a34:	3f 92       	push	r3
     a36:	4f 92       	push	r4
     a38:	5f 92       	push	r5
     a3a:	6f 92       	push	r6
     a3c:	7f 92       	push	r7
     a3e:	8f 92       	push	r8
     a40:	9f 92       	push	r9
     a42:	af 92       	push	r10
     a44:	bf 92       	push	r11
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     a58:	fc 01       	movw	r30, r24
     a5a:	c2 81       	ldd	r28, Z+2	; 0x02
     a5c:	d3 81       	ldd	r29, Z+3	; 0x03
     a5e:	c4 38       	cpi	r28, 0x84	; 132
     a60:	f3 e0       	ldi	r31, 0x03	; 3
     a62:	df 07       	cpc	r29, r31
     a64:	0c f0       	brlt	.+2      	; 0xa68 <estimate_distance+0x36>
     a66:	7e c0       	rjmp	.+252    	; 0xb64 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     a68:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <kilo_irhigh>
     a6c:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <kilo_irhigh+0x1>
     a70:	8c 17       	cp	r24, r28
     a72:	9d 07       	cpc	r25, r29
     a74:	08 f4       	brcc	.+2      	; 0xa78 <estimate_distance+0x46>
     a76:	6f c0       	rjmp	.+222    	; 0xb56 <estimate_distance+0x124>
     a78:	eb e9       	ldi	r30, 0x9B	; 155
     a7a:	f1 e0       	ldi	r31, 0x01	; 1
     a7c:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     a7e:	81 91       	ld	r24, Z+
     a80:	91 91       	ld	r25, Z+
     a82:	8c 17       	cp	r24, r28
     a84:	9d 07       	cpc	r25, r29
     a86:	20 f0       	brcs	.+8      	; 0xa90 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     a88:	1f 5f       	subi	r17, 0xFF	; 255
     a8a:	1e 30       	cpi	r17, 0x0E	; 14
     a8c:	c1 f7       	brne	.-16     	; 0xa7e <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     a8e:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     a90:	81 2f       	mov	r24, r17
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	fc 01       	movw	r30, r24
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	e7 56       	subi	r30, 0x67	; 103
     a9c:	fe 4f       	sbci	r31, 0xFE	; 254
     a9e:	e0 80       	ld	r14, Z
     aa0:	f1 80       	ldd	r15, Z+1	; 0x01
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	fc 01       	movw	r30, r24
     aa8:	e9 56       	subi	r30, 0x69	; 105
     aaa:	fe 4f       	sbci	r31, 0xFE	; 254
     aac:	80 81       	ld	r24, Z
     aae:	91 81       	ldd	r25, Z+1	; 0x01
     ab0:	b7 01       	movw	r22, r14
     ab2:	68 1b       	sub	r22, r24
     ab4:	79 0b       	sbc	r23, r25
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     abe:	9b 01       	movw	r18, r22
     ac0:	ac 01       	movw	r20, r24
     ac2:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     ac6:	4b 01       	movw	r8, r22
     ac8:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     aca:	be 01       	movw	r22, r28
     acc:	0d 2e       	mov	r0, r29
     ace:	00 0c       	add	r0, r0
     ad0:	88 0b       	sbc	r24, r24
     ad2:	99 0b       	sbc	r25, r25
     ad4:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__floatsisf>
     ad8:	2b 01       	movw	r4, r22
     ada:	3c 01       	movw	r6, r24
     adc:	b7 01       	movw	r22, r14
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     ae6:	6b 01       	movw	r12, r22
     ae8:	7c 01       	movw	r14, r24
     aea:	61 2f       	mov	r22, r17
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	5f e3       	ldi	r21, 0x3F	; 63
     afe:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	a9 01       	movw	r20, r18
     b08:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     b0c:	a5 01       	movw	r20, r10
     b0e:	94 01       	movw	r18, r8
     b10:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     b14:	9b 01       	movw	r18, r22
     b16:	ac 01       	movw	r20, r24
     b18:	c7 01       	movw	r24, r14
     b1a:	b6 01       	movw	r22, r12
     b1c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	c3 01       	movw	r24, r6
     b26:	b2 01       	movw	r22, r4
     b28:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e2       	ldi	r20, 0x20	; 32
     b32:	51 e4       	ldi	r21, 0x41	; 65
     b34:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     b38:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__fixsfsi>
     b3c:	7b 01       	movw	r14, r22
     b3e:	c5 01       	movw	r24, r10
     b40:	b4 01       	movw	r22, r8
     b42:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__fixsfsi>
     b46:	ab 01       	movw	r20, r22
     b48:	bc 01       	movw	r22, r24
     b4a:	c7 01       	movw	r24, r14
     b4c:	ba 01       	movw	r22, r20
     b4e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divmodhi4>
     b52:	16 2f       	mov	r17, r22
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b56:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b58:	cd 3b       	cpi	r28, 0xBD	; 189
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	d8 07       	cpc	r29, r24
     b5e:	0c f4       	brge	.+2      	; 0xb62 <estimate_distance+0x130>
     b60:	ca c0       	rjmp	.+404    	; 0xcf6 <estimate_distance+0x2c4>
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     b64:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b66:	f1 01       	movw	r30, r2
     b68:	c0 80       	ld	r12, Z
     b6a:	d1 80       	ldd	r13, Z+1	; 0x01
     b6c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <kilo_irlow>
     b70:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <kilo_irlow+0x1>
     b74:	8c 15       	cp	r24, r12
     b76:	9d 05       	cpc	r25, r13
     b78:	88 f0       	brcs	.+34     	; 0xb9c <estimate_distance+0x16a>
     b7a:	e2 ec       	ldi	r30, 0xC2	; 194
     b7c:	f1 e0       	ldi	r31, 0x01	; 1
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     b84:	e1 90       	ld	r14, Z+
     b86:	f1 90       	ld	r15, Z+
     b88:	ec 14       	cp	r14, r12
     b8a:	fd 04       	cpc	r15, r13
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <estimate_distance+0x15e>
     b8e:	58 c0       	rjmp	.+176    	; 0xc40 <estimate_distance+0x20e>
     b90:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b92:	8e 30       	cpi	r24, 0x0E	; 14
     b94:	91 05       	cpc	r25, r1
     b96:	a9 f7       	brne	.-22     	; 0xb82 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     b98:	0a e5       	ldi	r16, 0x5A	; 90
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     b9c:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     b9e:	1f 3f       	cpi	r17, 0xFF	; 255
     ba0:	09 f4       	brne	.+2      	; 0xba4 <estimate_distance+0x172>
     ba2:	4b c0       	rjmp	.+150    	; 0xc3a <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     ba4:	be 01       	movw	r22, r28
     ba6:	dd 0f       	add	r29, r29
     ba8:	88 0b       	sbc	r24, r24
     baa:	99 0b       	sbc	r25, r25
     bac:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__floatsisf>
     bb0:	6b 01       	movw	r12, r22
     bb2:	7c 01       	movw	r14, r24
     bb4:	61 2f       	mov	r22, r17
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     bc0:	4b 01       	movw	r8, r22
     bc2:	5c 01       	movw	r10, r24
     bc4:	a7 01       	movw	r20, r14
     bc6:	96 01       	movw	r18, r12
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	81 e6       	ldi	r24, 0x61	; 97
     bce:	94 e4       	ldi	r25, 0x44	; 68
     bd0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     bd4:	9b 01       	movw	r18, r22
     bd6:	ac 01       	movw	r20, r24
     bd8:	c5 01       	movw	r24, r10
     bda:	b4 01       	movw	r22, r8
     bdc:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     be0:	4b 01       	movw	r8, r22
     be2:	5c 01       	movw	r10, r24
     be4:	60 2f       	mov	r22, r16
     be6:	70 e0       	ldi	r23, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     bf0:	2b 01       	movw	r4, r22
     bf2:	3c 01       	movw	r6, r24
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	4f e2       	ldi	r20, 0x2F	; 47
     bfa:	54 e4       	ldi	r21, 0x44	; 68
     bfc:	c7 01       	movw	r24, r14
     bfe:	b6 01       	movw	r22, r12
     c00:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     c04:	9b 01       	movw	r18, r22
     c06:	ac 01       	movw	r20, r24
     c08:	c3 01       	movw	r24, r6
     c0a:	b2 01       	movw	r22, r4
     c0c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     c10:	9b 01       	movw	r18, r22
     c12:	ac 01       	movw	r20, r24
     c14:	c5 01       	movw	r24, r10
     c16:	b4 01       	movw	r22, r8
     c18:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	48 e4       	ldi	r20, 0x48	; 72
     c22:	53 e4       	ldi	r21, 0x43	; 67
     c24:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__divsf3>
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	44 e0       	ldi	r20, 0x04	; 4
     c2e:	52 e4       	ldi	r21, 0x42	; 66
     c30:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     c34:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fixunssfsi>
     c38:	60 c0       	rjmp	.+192    	; 0xcfa <estimate_distance+0x2c8>
        } else {
            return 33 + dist_low;
     c3a:	61 e2       	ldi	r22, 0x21	; 33
     c3c:	60 0f       	add	r22, r16
     c3e:	5d c0       	rjmp	.+186    	; 0xcfa <estimate_distance+0x2c8>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	fc 01       	movw	r30, r24
     c46:	e2 54       	subi	r30, 0x42	; 66
     c48:	fe 4f       	sbci	r31, 0xFE	; 254
     c4a:	80 81       	ld	r24, Z
     c4c:	91 81       	ldd	r25, Z+1	; 0x01
     c4e:	b7 01       	movw	r22, r14
     c50:	68 1b       	sub	r22, r24
     c52:	79 0b       	sbc	r23, r25
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     c5c:	9b 01       	movw	r18, r22
     c5e:	ac 01       	movw	r20, r24
     c60:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     c64:	4b 01       	movw	r8, r22
     c66:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c68:	b6 01       	movw	r22, r12
     c6a:	dd 0c       	add	r13, r13
     c6c:	88 0b       	sbc	r24, r24
     c6e:	99 0b       	sbc	r25, r25
     c70:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__floatsisf>
     c74:	2b 01       	movw	r4, r22
     c76:	3c 01       	movw	r6, r24
     c78:	b7 01       	movw	r22, r14
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     c82:	6b 01       	movw	r12, r22
     c84:	7c 01       	movw	r14, r24
     c86:	63 2d       	mov	r22, r3
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <__floatunsisf>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	5f e3       	ldi	r21, 0x3F	; 63
     c9a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	a9 01       	movw	r20, r18
     ca4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__addsf3>
     ca8:	a5 01       	movw	r20, r10
     caa:	94 01       	movw	r18, r8
     cac:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     cb0:	9b 01       	movw	r18, r22
     cb2:	ac 01       	movw	r20, r24
     cb4:	c7 01       	movw	r24, r14
     cb6:	b6 01       	movw	r22, r12
     cb8:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
     cbc:	9b 01       	movw	r18, r22
     cbe:	ac 01       	movw	r20, r24
     cc0:	c3 01       	movw	r24, r6
     cc2:	b2 01       	movw	r22, r4
     cc4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e2       	ldi	r20, 0x20	; 32
     cce:	51 e4       	ldi	r21, 0x41	; 65
     cd0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__mulsf3>
     cd4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__fixsfsi>
     cd8:	7b 01       	movw	r14, r22
     cda:	c5 01       	movw	r24, r10
     cdc:	b4 01       	movw	r22, r8
     cde:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__fixsfsi>
     ce2:	ab 01       	movw	r20, r22
     ce4:	bc 01       	movw	r22, r24
     ce6:	c7 01       	movw	r24, r14
     ce8:	ba 01       	movw	r22, r20
     cea:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <__divmodhi4>
     cee:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     cf0:	6f 3f       	cpi	r22, 0xFF	; 255
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <estimate_distance+0x2c4>
     cf4:	54 cf       	rjmp	.-344    	; 0xb9e <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     cf6:	61 e2       	ldi	r22, 0x21	; 33
     cf8:	61 0f       	add	r22, r17
    }
}
     cfa:	86 2f       	mov	r24, r22
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	bf 90       	pop	r11
     d0e:	af 90       	pop	r10
     d10:	9f 90       	pop	r9
     d12:	8f 90       	pop	r8
     d14:	7f 90       	pop	r7
     d16:	6f 90       	pop	r6
     d18:	5f 90       	pop	r5
     d1a:	4f 90       	pop	r4
     d1c:	3f 90       	pop	r3
     d1e:	2f 90       	pop	r2
     d20:	08 95       	ret

00000d22 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	5f 93       	push	r21
     d34:	6f 93       	push	r22
     d36:	7f 93       	push	r23
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	af 93       	push	r26
     d3e:	bf 93       	push	r27
     d40:	ef 93       	push	r30
     d42:	ff 93       	push	r31
    tx_clock += tx_increment;
     d44:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <tx_clock>
     d48:	30 91 e0 01 	lds	r19, 0x01E0	; 0x8001e0 <tx_clock+0x1>
     d4c:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <tx_increment>
     d50:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <tx_increment+0x1>
     d54:	82 0f       	add	r24, r18
     d56:	93 1f       	adc	r25, r19
     d58:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <tx_clock+0x1>
     d5c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <tx_clock>
    tx_increment = 0xFF;
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <tx_increment+0x1>
     d68:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <tx_increment>
    OCR0A = tx_increment;
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     d70:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <kilo_ticks>
     d74:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <kilo_ticks+0x1>
     d78:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <kilo_ticks+0x2>
     d7c:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <kilo_ticks+0x3>
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	a1 1d       	adc	r26, r1
     d84:	b1 1d       	adc	r27, r1
     d86:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <kilo_ticks>
     d8a:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <kilo_ticks+0x1>
     d8e:	a0 93 bd 01 	sts	0x01BD, r26	; 0x8001bd <kilo_ticks+0x2>
     d92:	b0 93 be 01 	sts	0x01BE, r27	; 0x8001be <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     d96:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <rx_busy>
     d9a:	81 11       	cpse	r24, r1
     d9c:	2d c0       	rjmp	.+90     	; 0xdf8 <__vector_14+0xd6>
     d9e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <kilo_tx_period>
     da2:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <kilo_tx_period+0x1>
     da6:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <tx_clock>
     daa:	30 91 e0 01 	lds	r19, 0x01E0	; 0x8001e0 <tx_clock+0x1>
     dae:	82 17       	cp	r24, r18
     db0:	93 07       	cpc	r25, r19
     db2:	10 f5       	brcc	.+68     	; 0xdf8 <__vector_14+0xd6>
     db4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
     db8:	84 30       	cpi	r24, 0x04	; 4
     dba:	f1 f4       	brne	.+60     	; 0xdf8 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     dbc:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <kilo_message_tx>
     dc0:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <kilo_message_tx+0x1>
     dc4:	09 95       	icall
        if (msg) {
     dc6:	00 97       	sbiw	r24, 0x00	; 0
     dc8:	b9 f0       	breq	.+46     	; 0xdf8 <__vector_14+0xd6>
            if (message_send(msg)) {
     dca:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <message_send>
     dce:	88 23       	and	r24, r24
     dd0:	51 f0       	breq	.+20     	; 0xde6 <__vector_14+0xc4>
                kilo_message_tx_success();
     dd2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <kilo_message_tx_success>
     dd6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <kilo_message_tx_success+0x1>
     dda:	09 95       	icall
                tx_clock = 0;
     ddc:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <tx_clock+0x1>
     de0:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <tx_clock>
     de4:	09 c0       	rjmp	.+18     	; 0xdf8 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     de6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <rand>
     dea:	9c 01       	movw	r18, r24
     dec:	33 27       	eor	r19, r19
     dee:	30 93 de 01 	sts	0x01DE, r19	; 0x8001de <tx_increment+0x1>
     df2:	20 93 dd 01 	sts	0x01DD, r18	; 0x8001dd <tx_increment>
                OCR0A = tx_increment;
     df6:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	bf 91       	pop	r27
     dfe:	af 91       	pop	r26
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	7f 91       	pop	r23
     e06:	6f 91       	pop	r22
     e08:	5f 91       	pop	r21
     e0a:	4f 91       	pop	r20
     e0c:	3f 91       	pop	r19
     e0e:	2f 91       	pop	r18
     e10:	0f 90       	pop	r0
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	0f 90       	pop	r0
     e16:	1f 90       	pop	r1
     e18:	18 95       	reti

00000e1a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e1a:	80 ff       	sbrs	r24, 0
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <set_color+0x8>
        DDRD |= (1<<5);
     e1e:	55 9a       	sbi	0x0a, 5	; 10
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     e22:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e24:	81 ff       	sbrs	r24, 1
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <set_color+0x12>
        DDRD |= (1<<4);
     e28:	54 9a       	sbi	0x0a, 4	; 10
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     e2c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e2e:	82 ff       	sbrs	r24, 2
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <set_color+0x1c>
        DDRC |= (1<<3);
     e32:	3b 9a       	sbi	0x07, 3	; 7
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     e36:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e38:	83 ff       	sbrs	r24, 3
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <set_color+0x26>
        DDRC |= (1<<2);
     e3c:	3a 9a       	sbi	0x07, 2	; 7
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     e40:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e42:	84 ff       	sbrs	r24, 4
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <set_color+0x30>
        DDRC |= (1<<5);
     e46:	3d 9a       	sbi	0x07, 5	; 7
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     e4a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e4c:	85 ff       	sbrs	r24, 5
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <set_color+0x3a>
        DDRC |= (1<<4);
     e50:	3c 9a       	sbi	0x07, 4	; 7
     e52:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     e54:	3c 98       	cbi	0x07, 4	; 7
     e56:	08 95       	ret

00000e58 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     e58:	8c 01       	movw	r16, r24
     e5a:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     e5c:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     e5e:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     e60:	84 e0       	ldi	r24, 0x04	; 4
     e62:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     e64:	98 e1       	ldi	r25, 0x18	; 24
     e66:	c9 2e       	mov	r12, r25
     e68:	29 e2       	ldi	r18, 0x29	; 41
     e6a:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     e6c:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <kilo_state>
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	e7 30       	cpi	r30, 0x07	; 7
     e74:	f1 05       	cpc	r31, r1
     e76:	d0 f7       	brcc	.-12     	; 0xe6c <kilo_start+0x14>
     e78:	e5 5c       	subi	r30, 0xC5	; 197
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__tablejump2__>
            case SLEEPING:
                cli();
     e80:	f8 94       	cli
                acomp_off();
     e82:	80 b7       	in	r24, 0x30	; 48
     e84:	87 7f       	andi	r24, 0xF7	; 247
     e86:	80 bf       	out	0x30, r24	; 48
                adc_off();
     e88:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e8c:	8f 77       	andi	r24, 0x7F	; 127
     e8e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     e92:	14 b8       	out	0x04, r1	; 4
     e94:	17 b8       	out	0x07, r1	; 7
     e96:	1a b8       	out	0x0a, r1	; 10
     e98:	15 b8       	out	0x05, r1	; 5
     e9a:	18 b8       	out	0x08, r1	; 8
     e9c:	1b b8       	out	0x0b, r1	; 11
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	a8 95       	wdr
     ea4:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     eae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     eb2:	80 64       	ori	r24, 0x40	; 64
     eb4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     eb8:	83 b7       	in	r24, 0x33	; 51
     eba:	81 7f       	andi	r24, 0xF1	; 241
     ebc:	84 60       	ori	r24, 0x04	; 4
     ebe:	83 bf       	out	0x33, r24	; 51
                cli();
     ec0:	f8 94       	cli
                sleep_enable();
     ec2:	83 b7       	in	r24, 0x33	; 51
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	83 bf       	out	0x33, r24	; 51
                sei();
     ec8:	78 94       	sei
                sleep_cpu();
     eca:	88 95       	sleep
                sleep_disable();
     ecc:	83 b7       	in	r24, 0x33	; 51
     ece:	8e 7f       	andi	r24, 0xFE	; 254
     ed0:	83 bf       	out	0x33, r24	; 51
                sei();
     ed2:	78 94       	sei
                rx_busy = 0;
     ed4:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>
                ports_on();
     ed8:	52 9a       	sbi	0x0a, 2	; 10
     eda:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     edc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ee0:	80 68       	ori	r24, 0x80	; 128
     ee2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ee6:	87 e5       	ldi	r24, 0x57	; 87
     ee8:	92 e0       	ldi	r25, 0x02	; 2
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	f1 f7       	brne	.-4      	; 0xeea <kilo_start+0x92>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <kilo_start+0x98>
     ef0:	00 00       	nop
                _delay_us(300);
                acomp_on();
     ef2:	80 b7       	in	r24, 0x30	; 48
     ef4:	88 61       	ori	r24, 0x18	; 24
     ef6:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     ef8:	8f e3       	ldi	r24, 0x3F	; 63
     efa:	0e 94 0d 07 	call	0xe1a	; 0xe1a <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     efe:	ef e1       	ldi	r30, 0x1F	; 31
     f00:	fe e4       	ldi	r31, 0x4E	; 78
     f02:	31 97       	sbiw	r30, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <kilo_start+0xaa>
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <kilo_start+0xb0>
     f08:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     f0a:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <rx_busy>
     f0e:	88 23       	and	r24, r24
     f10:	09 f4       	brne	.+2      	; 0xf14 <kilo_start+0xbc>
     f12:	50 c0       	rjmp	.+160    	; 0xfb4 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	0e 94 0d 07 	call	0xe1a	; 0xe1a <set_color>
     f1a:	ff ef       	ldi	r31, 0xFF	; 255
     f1c:	20 e7       	ldi	r18, 0x70	; 112
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	f1 50       	subi	r31, 0x01	; 1
     f22:	20 40       	sbci	r18, 0x00	; 0
     f24:	80 40       	sbci	r24, 0x00	; 0
     f26:	e1 f7       	brne	.-8      	; 0xf20 <kilo_start+0xc8>
     f28:	00 c0       	rjmp	.+0      	; 0xf2a <kilo_start+0xd2>
     f2a:	00 00       	nop
     f2c:	43 c0       	rjmp	.+134    	; 0xfb4 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     f2e:	8c e0       	ldi	r24, 0x0C	; 12
     f30:	0e 94 0d 07 	call	0xe1a	; 0xe1a <set_color>
     f34:	ef ec       	ldi	r30, 0xCF	; 207
     f36:	f7 e0       	ldi	r31, 0x07	; 7
     f38:	31 97       	sbiw	r30, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <kilo_start+0xe0>
     f3c:	00 c0       	rjmp	.+0      	; 0xf3e <kilo_start+0xe6>
     f3e:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	0e 94 0d 07 	call	0xe1a	; 0xe1a <set_color>
     f46:	ff ef       	ldi	r31, 0xFF	; 255
     f48:	21 ee       	ldi	r18, 0xE1	; 225
     f4a:	84 e0       	ldi	r24, 0x04	; 4
     f4c:	f1 50       	subi	r31, 0x01	; 1
     f4e:	20 40       	sbci	r18, 0x00	; 0
     f50:	80 40       	sbci	r24, 0x00	; 0
     f52:	e1 f7       	brne	.-8      	; 0xf4c <kilo_start+0xf4>
     f54:	2c c0       	rjmp	.+88     	; 0xfae <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     f56:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <get_voltage>
                if(voltage > 682)
     f5a:	8b 3a       	cpi	r24, 0xAB	; 171
     f5c:	e2 e0       	ldi	r30, 0x02	; 2
     f5e:	9e 07       	cpc	r25, r30
     f60:	24 f0       	brlt	.+8      	; 0xf6a <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     f62:	8c e0       	ldi	r24, 0x0C	; 12
     f64:	0e 94 0d 07 	call	0xe1a	; 0xe1a <set_color>
     f68:	81 cf       	rjmp	.-254    	; 0xe6c <kilo_start+0x14>
                else if(voltage > 648)
     f6a:	89 38       	cpi	r24, 0x89	; 137
     f6c:	f2 e0       	ldi	r31, 0x02	; 2
     f6e:	9f 07       	cpc	r25, r31
     f70:	14 f0       	brlt	.+4      	; 0xf76 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     f72:	80 e3       	ldi	r24, 0x30	; 48
     f74:	f7 cf       	rjmp	.-18     	; 0xf64 <kilo_start+0x10c>
                else if(voltage > 614)
     f76:	87 36       	cpi	r24, 0x67	; 103
     f78:	92 40       	sbci	r25, 0x02	; 2
     f7a:	14 f0       	brlt	.+4      	; 0xf80 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     f7c:	8f e0       	ldi	r24, 0x0F	; 15
     f7e:	f2 cf       	rjmp	.-28     	; 0xf64 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     f80:	83 e0       	ldi	r24, 0x03	; 3
     f82:	f0 cf       	rjmp	.-32     	; 0xf64 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     f84:	48 99       	sbic	0x09, 0	; 9
     f86:	16 c0       	rjmp	.+44     	; 0xfb4 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <set_color>
     f8e:	8f ec       	ldi	r24, 0xCF	; 207
     f90:	97 e0       	ldi	r25, 0x07	; 7
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <kilo_start+0x13a>
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <kilo_start+0x140>
     f98:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <set_color>
     fa0:	9f ef       	ldi	r25, 0xFF	; 255
     fa2:	e1 ee       	ldi	r30, 0xE1	; 225
     fa4:	f4 e0       	ldi	r31, 0x04	; 4
     fa6:	91 50       	subi	r25, 0x01	; 1
     fa8:	e0 40       	sbci	r30, 0x00	; 0
     faa:	f0 40       	sbci	r31, 0x00	; 0
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <kilo_start+0x14e>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <kilo_start+0x158>
     fb0:	00 00       	nop
     fb2:	5c cf       	rjmp	.-328    	; 0xe6c <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	d6 cf       	rjmp	.-84     	; 0xf64 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     fb8:	d1 11       	cpse	r29, r1
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <kilo_start+0x168>
                    setup();
     fbc:	f8 01       	movw	r30, r16
     fbe:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     fc0:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <kilo_state>
     fc4:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     fc6:	f7 01       	movw	r30, r14
     fc8:	09 95       	icall
                break;
     fca:	50 cf       	rjmp	.-352    	; 0xe6c <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     fcc:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cur_motion>
     fd0:	81 11       	cpse	r24, r1
     fd2:	07 c0       	rjmp	.+14     	; 0xfe2 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     fd4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     fd8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     fdc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prev_motion>
     fe0:	45 cf       	rjmp	.-374    	; 0xe6c <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     fe2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cur_motion>
     fe6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <prev_motion>
     fea:	98 17       	cp	r25, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <kilo_start+0x198>
     fee:	3e cf       	rjmp	.-388    	; 0xe6c <kilo_start+0x14>
                        prev_motion = cur_motion;
     ff0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cur_motion>
     ff4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     ff8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cur_motion>
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	89 f4       	brne	.+34     	; 0x1022 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1000:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
    1004:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1008:	8f e2       	ldi	r24, 0x2F	; 47
    100a:	95 e7       	ldi	r25, 0x75	; 117
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <kilo_start+0x1b4>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <kilo_start+0x1ba>
    1012:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
    1014:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1018:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
    101c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1020:	25 cf       	rjmp	.-438    	; 0xe6c <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
    1022:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1026:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
    102a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
    102e:	82 30       	cpi	r24, 0x02	; 2
    1030:	59 f4       	brne	.+22     	; 0x1048 <kilo_start+0x1f0>
    1032:	ef e2       	ldi	r30, 0x2F	; 47
    1034:	f5 e7       	ldi	r31, 0x75	; 117
    1036:	31 97       	sbiw	r30, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <kilo_start+0x1de>
    103a:	00 c0       	rjmp	.+0      	; 0x103c <kilo_start+0x1e4>
    103c:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
    103e:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1042:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    1046:	10 c0       	rjmp	.+32     	; 0x1068 <kilo_start+0x210>
    1048:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
    104c:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1050:	8f e2       	ldi	r24, 0x2F	; 47
    1052:	95 e7       	ldi	r25, 0x75	; 117
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <kilo_start+0x1fc>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <kilo_start+0x202>
    105a:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
    105c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <kilo_straight_right>
    1060:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    1064:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
    1068:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    106c:	ff ce       	rjmp	.-514    	; 0xe6c <kilo_start+0x14>

0000106e <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    rx_timer_off();
    107c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1080:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    1084:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <rx_leadingbit>
    rx_leadingbyte = 1;
    108e:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <rx_leadingbyte>
    rx_busy = 0;
    1092:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>
    adc_trigger_high_gain();
    1096:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    109a:	93 ea       	ldi	r25, 0xA3	; 163
    109c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    10a0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
    10a4:	9f 91       	pop	r25
    10a6:	8f 91       	pop	r24
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	0f 90       	pop	r0
    10ae:	1f 90       	pop	r1
    10b0:	18 95       	reti

000010b2 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    10b2:	1f 92       	push	r1
    10b4:	0f 92       	push	r0
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	0f 92       	push	r0
    10ba:	11 24       	eor	r1, r1
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	2f 93       	push	r18
    10c2:	3f 93       	push	r19
    10c4:	4f 93       	push	r20
    10c6:	5f 93       	push	r21
    10c8:	6f 93       	push	r22
    10ca:	7f 93       	push	r23
    10cc:	8f 93       	push	r24
    10ce:	9f 93       	push	r25
    10d0:	af 93       	push	r26
    10d2:	bf 93       	push	r27
    10d4:	ef 93       	push	r30
    10d6:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    10d8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    10dc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	40 93 bf 01 	sts	0x01BF, r20	; 0x8001bf <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    10e6:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <rx_leadingbit>
    10ea:	88 23       	and	r24, r24
    10ec:	21 f1       	breq	.+72     	; 0x1136 <__vector_23+0x84>
        rx_timer_on();
    10ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    10f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    10f6:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
    10fa:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <rx_bytevalue>
        rx_leadingbit = 0;
    10fe:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <rx_leadingbit>
        if (rx_leadingbyte) {
    1102:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rx_leadingbyte>
    1106:	88 23       	and	r24, r24
    1108:	09 f4       	brne	.+2      	; 0x110c <__vector_23+0x5a>
    110a:	af c1       	rjmp	.+862    	; 0x146a <__vector_23+0x3b8>
            adc_finish_conversion();
    110c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1110:	86 fd       	sbrc	r24, 6
    1112:	fc cf       	rjmp	.-8      	; 0x110c <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
    1114:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1118:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    111c:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <rx_dist+0x3>
    1120:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <rx_dist+0x2>
            adc_trigger_low_gain();
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    112a:	93 ea       	ldi	r25, 0xA3	; 163
    112c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1130:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
    1134:	9a c1       	rjmp	.+820    	; 0x146a <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    1136:	c9 01       	movw	r24, r18
    1138:	87 58       	subi	r24, 0x87	; 135
    113a:	91 09       	sbc	r25, r1
    113c:	84 37       	cpi	r24, 0x74	; 116
    113e:	99 40       	sbci	r25, 0x09	; 9
    1140:	a0 f0       	brcs	.+40     	; 0x116a <__vector_23+0xb8>
            rx_timer_off();
    1142:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1146:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    114a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
    114e:	40 93 98 01 	sts	0x0198, r20	; 0x800198 <rx_leadingbit>
            rx_leadingbyte = 1;
    1152:	40 93 dc 01 	sts	0x01DC, r20	; 0x8001dc <rx_leadingbyte>
            rx_busy = 0;
    1156:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>
            adc_trigger_high_gain();
    115a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    115e:	83 ea       	ldi	r24, 0xA3	; 163
    1160:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1164:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
    1168:	80 c1       	rjmp	.+768    	; 0x146a <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    116a:	26 58       	subi	r18, 0x86	; 134
    116c:	31 09       	sbc	r19, r1
    116e:	a4 ef       	ldi	r26, 0xF4	; 244
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	0e 94 18 0b 	call	0x1630	; 0x1630 <__umulhisi3>
    1176:	8c 01       	movw	r16, r24
    1178:	22 27       	eor	r18, r18
    117a:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
    117c:	08 30       	cpi	r16, 0x08	; 8
    117e:	60 f4       	brcc	.+24     	; 0x1198 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <__vector_23+0xd6>
    1186:	88 0f       	add	r24, r24
    1188:	0a 95       	dec	r16
    118a:	ea f7       	brpl	.-6      	; 0x1186 <__vector_23+0xd4>
    118c:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <rx_bytevalue>
    1190:	89 2b       	or	r24, r25
    1192:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <rx_bytevalue>
    1196:	69 c1       	rjmp	.+722    	; 0x146a <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    1198:	40 93 98 01 	sts	0x0198, r20	; 0x800198 <rx_leadingbit>
                if (rx_leadingbyte) {
    119c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rx_leadingbyte>
    11a0:	88 23       	and	r24, r24
    11a2:	41 f1       	breq	.+80     	; 0x11f4 <__vector_23+0x142>
                    adc_finish_conversion();
    11a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    11a8:	86 fd       	sbrc	r24, 6
    11aa:	fc cf       	rjmp	.-8      	; 0x11a4 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
    11ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    11b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
    11b4:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <rx_dist+0x1>
    11b8:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <rx_dist>
                    adc_trigger_high_gain();
    11bc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    11c0:	83 ea       	ldi	r24, 0xA3	; 163
    11c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
    11cc:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <rx_bytevalue>
    11d0:	99 23       	and	r25, r25
    11d2:	59 f0       	breq	.+22     	; 0x11ea <__vector_23+0x138>
                        rx_timer_off();
    11d4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    11d8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    11dc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
    11e0:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <rx_leadingbyte>
                        rx_busy = 0;
    11e4:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>
    11e8:	40 c1       	rjmp	.+640    	; 0x146a <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    11ea:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <rx_leadingbyte>
                        rx_byteindex = 0;
    11ee:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <rx_byteindex>
    11f2:	3b c1       	rjmp	.+630    	; 0x146a <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    11f4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <rx_byteindex>
    11f8:	e8 2f       	mov	r30, r24
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	ee 51       	subi	r30, 0x1E	; 30
    11fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1200:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <rx_bytevalue>
    1204:	90 83       	st	Z, r25
                    rx_byteindex++;
    1206:	8f 5f       	subi	r24, 0xFF	; 255
    1208:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
    120c:	8c 30       	cpi	r24, 0x0C	; 12
    120e:	09 f0       	breq	.+2      	; 0x1212 <__vector_23+0x160>
    1210:	2c c1       	rjmp	.+600    	; 0x146a <__vector_23+0x3b8>
                        rx_timer_off();
    1212:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1216:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    121a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
    121e:	40 93 dc 01 	sts	0x01DC, r20	; 0x8001dc <rx_leadingbyte>
                        rx_busy = 0;
    1222:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
    1226:	00 91 ec 01 	lds	r16, 0x01EC	; 0x8001ec <rx_msg+0xa>
    122a:	10 91 ed 01 	lds	r17, 0x01ED	; 0x8001ed <rx_msg+0xb>
    122e:	82 ee       	ldi	r24, 0xE2	; 226
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 48 0a 	call	0x1490	; 0x1490 <message_crc>
    1236:	08 17       	cp	r16, r24
    1238:	19 07       	cpc	r17, r25
    123a:	09 f0       	breq	.+2      	; 0x123e <__vector_23+0x18c>
    123c:	16 c1       	rjmp	.+556    	; 0x146a <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
    123e:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <rx_msg+0x9>
    1242:	e7 fd       	sbrc	r30, 7
    1244:	0a c0       	rjmp	.+20     	; 0x125a <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
    1246:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <kilo_message_rx>
    124a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <kilo_message_rx+0x1>
    124e:	67 eb       	ldi	r22, 0xB7	; 183
    1250:	71 e0       	ldi	r23, 0x01	; 1
    1252:	82 ee       	ldi	r24, 0xE2	; 226
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	09 95       	icall
    1258:	08 c1       	rjmp	.+528    	; 0x146a <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
    125a:	88 e7       	ldi	r24, 0x78	; 120
    125c:	8e 0f       	add	r24, r30
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	30 f0       	brcs	.+12     	; 0x126e <__vector_23+0x1bc>
        motors_off();
    1262:	53 98       	cbi	0x0a, 3	; 10
    1264:	23 98       	cbi	0x04, 3	; 4
    1266:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    126a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
    126e:	8e 2f       	mov	r24, r30
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	fc 01       	movw	r30, r24
    1274:	e0 58       	subi	r30, 0x80	; 128
    1276:	f1 09       	sbc	r31, r1
    1278:	eb 30       	cpi	r30, 0x0B	; 11
    127a:	f1 05       	cpc	r31, r1
    127c:	08 f0       	brcs	.+2      	; 0x1280 <__vector_23+0x1ce>
    127e:	f5 c0       	rjmp	.+490    	; 0x146a <__vector_23+0x3b8>
    1280:	ee 5b       	subi	r30, 0xBE	; 190
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__tablejump2__>
        case BOOT:
            tx_timer_off();
    1288:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    128c:	8d 7f       	andi	r24, 0xFD	; 253
    128e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    1292:	16 bc       	out	0x26, r1	; 38
            bootload();
    1294:	e0 e0       	ldi	r30, 0x00	; 0
    1296:	f0 e7       	ldi	r31, 0x70	; 112
    1298:	02 c0       	rjmp	.+4      	; 0x129e <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
    129a:	e0 e0       	ldi	r30, 0x00	; 0
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    12a0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <kilo_state>
    12a4:	e2 c0       	rjmp	.+452    	; 0x146a <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	b2 c0       	rjmp	.+356    	; 0x140e <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
    12aa:	85 e0       	ldi	r24, 0x05	; 5
    12ac:	b0 c0       	rjmp	.+352    	; 0x140e <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	ae c0       	rjmp	.+348    	; 0x140e <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    12b2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	09 f4       	brne	.+2      	; 0x12bc <__vector_23+0x20a>
    12ba:	d7 c0       	rjmp	.+430    	; 0x146a <__vector_23+0x3b8>
    12bc:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
    12c0:	84 30       	cpi	r24, 0x04	; 4
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <__vector_23+0x214>
    12c4:	d2 c0       	rjmp	.+420    	; 0x146a <__vector_23+0x3b8>
                motors_on();
    12c6:	53 9a       	sbi	0x0a, 3	; 10
    12c8:	23 9a       	sbi	0x04, 3	; 4
    12ca:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    12ce:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	9c c0       	rjmp	.+312    	; 0x140e <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    12d6:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <rx_msg>
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <__vector_23+0x22e>
    12de:	4b c0       	rjmp	.+150    	; 0x1376 <__vector_23+0x2c4>
    12e0:	80 f4       	brcc	.+32     	; 0x1302 <__vector_23+0x250>
    12e2:	88 23       	and	r24, r24
    12e4:	a9 f0       	breq	.+42     	; 0x1310 <__vector_23+0x25e>
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	09 f0       	breq	.+2      	; 0x12ec <__vector_23+0x23a>
    12ea:	82 c0       	rjmp	.+260    	; 0x13f0 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    12ec:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <rx_msg+0x1>
    12f0:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <rx_msg+0x2>
    12f4:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <kilo_uid+0x1>
    12f8:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <kilo_uid>
                    cur_motion = MOVE_STOP;
    12fc:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cur_motion>
    1300:	77 c0       	rjmp	.+238    	; 0x13f0 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	09 f4       	brne	.+2      	; 0x1308 <__vector_23+0x256>
    1306:	49 c0       	rjmp	.+146    	; 0x139a <__vector_23+0x2e8>
    1308:	84 30       	cpi	r24, 0x04	; 4
    130a:	09 f4       	brne	.+2      	; 0x130e <__vector_23+0x25c>
    130c:	58 c0       	rjmp	.+176    	; 0x13be <__vector_23+0x30c>
    130e:	70 c0       	rjmp	.+224    	; 0x13f0 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    1310:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
    1314:	86 30       	cpi	r24, 0x06	; 6
    1316:	09 f0       	breq	.+2      	; 0x131a <__vector_23+0x268>
    1318:	6b c0       	rjmp	.+214    	; 0x13f0 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    131a:	60 91 f1 01 	lds	r22, 0x01F1	; 0x8001f1 <kilo_uid>
    131e:	80 eb       	ldi	r24, 0xB0	; 176
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    1326:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <kilo_uid+0x1>
    132a:	81 eb       	ldi	r24, 0xB1	; 177
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    1332:	60 91 f5 01 	lds	r22, 0x01F5	; 0x8001f5 <kilo_turn_left>
    1336:	85 e0       	ldi	r24, 0x05	; 5
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    133e:	60 91 e1 01 	lds	r22, 0x01E1	; 0x8001e1 <kilo_turn_right>
    1342:	89 e0       	ldi	r24, 0x09	; 9
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    134a:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <kilo_straight_left>
    134e:	8c e0       	ldi	r24, 0x0C	; 12
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1356:	60 91 f4 01 	lds	r22, 0x01F4	; 0x8001f4 <kilo_straight_right>
    135a:	84 e1       	ldi	r24, 0x14	; 20
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <eeprom_write_byte>
                        motors_off();
    1362:	53 98       	cbi	0x0a, 3	; 10
    1364:	23 98       	cbi	0x04, 3	; 4
    1366:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    136a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <kilo_state>
    1374:	3d c0       	rjmp	.+122    	; 0x13f0 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1376:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cur_motion>
    137a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <rx_msg+0x3>
    137e:	91 30       	cpi	r25, 0x01	; 1
    1380:	21 f4       	brne	.+8      	; 0x138a <__vector_23+0x2d8>
    1382:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <kilo_turn_left>
    1386:	89 17       	cp	r24, r25
    1388:	99 f1       	breq	.+102    	; 0x13f0 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    138a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prev_motion>
                        cur_motion = MOVE_LEFT;
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    1394:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <kilo_turn_left>
    1398:	2b c0       	rjmp	.+86     	; 0x13f0 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    139a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <cur_motion>
    139e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <rx_msg+0x4>
    13a2:	92 30       	cpi	r25, 0x02	; 2
    13a4:	21 f4       	brne	.+8      	; 0x13ae <__vector_23+0x2fc>
    13a6:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <kilo_turn_right>
    13aa:	89 17       	cp	r24, r25
    13ac:	09 f1       	breq	.+66     	; 0x13f0 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    13ae:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    13b2:	92 e0       	ldi	r25, 0x02	; 2
    13b4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    13b8:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <kilo_turn_right>
    13bc:	19 c0       	rjmp	.+50     	; 0x13f0 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    13be:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <cur_motion>
    13c2:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <rx_msg+0x6>
    13c6:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <rx_msg+0x5>
    13ca:	23 30       	cpi	r18, 0x03	; 3
    13cc:	41 f4       	brne	.+16     	; 0x13de <__vector_23+0x32c>
    13ce:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <kilo_straight_right>
    13d2:	82 13       	cpse	r24, r18
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <__vector_23+0x32c>
    13d6:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <kilo_straight_left>
    13da:	92 17       	cp	r25, r18
    13dc:	49 f0       	breq	.+18     	; 0x13f0 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    13de:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    13e2:	23 e0       	ldi	r18, 0x03	; 3
    13e4:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    13e8:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    13ec:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    13f0:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <rx_msg>
    13f4:	88 23       	and	r24, r24
    13f6:	c9 f1       	breq	.+114    	; 0x146a <__vector_23+0x3b8>
    13f8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
    13fc:	86 30       	cpi	r24, 0x06	; 6
    13fe:	a9 f1       	breq	.+106    	; 0x146a <__vector_23+0x3b8>
                motors_on();
    1400:	53 9a       	sbi	0x0a, 3	; 10
    1402:	23 9a       	sbi	0x04, 3	; 4
    1404:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1408:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    140c:	86 e0       	ldi	r24, 0x06	; 6
    140e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <kilo_state>
    1412:	2b c0       	rjmp	.+86     	; 0x146a <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1414:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <kilo_state>
    1418:	86 30       	cpi	r24, 0x06	; 6
    141a:	81 f0       	breq	.+32     	; 0x143c <__vector_23+0x38a>
                motors_on();
    141c:	53 9a       	sbi	0x0a, 3	; 10
    141e:	23 9a       	sbi	0x04, 3	; 4
    1420:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    1424:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    142e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cur_motion>
    1432:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <prev_motion>
                kilo_state = MOVING;
    1436:	86 e0       	ldi	r24, 0x06	; 6
    1438:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	00 90 e2 01 	lds	r0, 0x01E2	; 0x8001e2 <rx_msg>
    1444:	02 c0       	rjmp	.+4      	; 0x144a <__vector_23+0x398>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <__vector_23+0x394>
    144e:	20 91 f1 01 	lds	r18, 0x01F1	; 0x8001f1 <kilo_uid>
    1452:	30 91 f2 01 	lds	r19, 0x01F2	; 0x8001f2 <kilo_uid+0x1>
    1456:	82 23       	and	r24, r18
    1458:	93 23       	and	r25, r19
    145a:	89 2b       	or	r24, r25
    145c:	21 f0       	breq	.+8      	; 0x1466 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <cur_motion>
    1464:	02 c0       	rjmp	.+4      	; 0x146a <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    1466:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <cur_motion>
                    }
                }
            }
        }
    }
}
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	0f 90       	pop	r0
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	0f 90       	pop	r0
    148c:	1f 90       	pop	r1
    148e:	18 95       	reti

00001490 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1490:	fc 01       	movw	r30, r24
    1492:	9c 01       	movw	r18, r24
    1494:	26 5f       	subi	r18, 0xF6	; 246
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    149c:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    149e:	84 27       	eor	r24, r20
    14a0:	08 2e       	mov	r0, r24
    14a2:	82 95       	swap	r24
    14a4:	80 7f       	andi	r24, 0xF0	; 240
    14a6:	80 25       	eor	r24, r0
    14a8:	09 2e       	mov	r0, r25
    14aa:	98 2f       	mov	r25, r24
    14ac:	82 95       	swap	r24
    14ae:	8f 70       	andi	r24, 0x0F	; 15
    14b0:	08 26       	eor	r0, r24
    14b2:	86 95       	lsr	r24
    14b4:	98 27       	eor	r25, r24
    14b6:	89 27       	eor	r24, r25
    14b8:	88 0f       	add	r24, r24
    14ba:	88 0f       	add	r24, r24
    14bc:	88 0f       	add	r24, r24
    14be:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    14c0:	e2 17       	cp	r30, r18
    14c2:	f3 07       	cpc	r31, r19
    14c4:	59 f7       	brne	.-42     	; 0x149c <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    14c6:	08 95       	ret

000014c8 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    14c8:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    14ca:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    14cc:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    14ce:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <tx_mask>
    or tmpreg1, ddrreg
    14d2:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    14d4:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    14d6:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    14d8:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <tx_mask>
    14dc:	20 30       	cpi	r18, 0x00	; 0
    14de:	29 f0       	breq	.+10     	; 0x14ea <message_send+0x22>
    14e0:	00 00       	nop
    14e2:	25 b1       	in	r18, 0x05	; 5
    14e4:	23 2b       	or	r18, r19
    14e6:	25 b9       	out	0x05, r18	; 5
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <message_send+0x2a>
    14ea:	00 00       	nop
    14ec:	00 00       	nop
    14ee:	00 00       	nop
    14f0:	00 c0       	rjmp	.+0      	; 0x14f2 <message_send+0x2a>
    14f2:	00 00       	nop
    14f4:	00 00       	nop
    14f6:	00 00       	nop
    14f8:	30 95       	com	r19
    14fa:	25 b1       	in	r18, 0x05	; 5
    14fc:	23 23       	and	r18, r19
    14fe:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1500:	2e ea       	ldi	r18, 0xAE	; 174
    1502:	2a 95       	dec	r18
    1504:	f1 f7       	brne	.-4      	; 0x1502 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1506:	2b ee       	ldi	r18, 0xEB	; 235

00001508 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1508:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    150a:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    150c:	0a c0       	rjmp	.+20     	; 0x1522 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    150e:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1510:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <tx_mask>
    com tmpreg2
    1514:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1516:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1518:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    151a:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    151c:	0f be       	out	0x3f, r0	; 63
    return 0
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	08 95       	ret

00001522 <nocollision>:
nocollision:
    nop
    1522:	00 00       	nop
    dec tmpreg1
    1524:	2a 95       	dec	r18
    brne checkcollision
    1526:	81 f7       	brne	.-32     	; 0x1508 <checkcollision>

    ldi tmpreg1, 0x01
    1528:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    152a:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <tx_mask>
    152e:	20 30       	cpi	r18, 0x00	; 0
    1530:	29 f0       	breq	.+10     	; 0x153c <nocollision+0x1a>
    1532:	00 00       	nop
    1534:	25 b1       	in	r18, 0x05	; 5
    1536:	23 2b       	or	r18, r19
    1538:	25 b9       	out	0x05, r18	; 5
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <nocollision+0x22>
    153c:	00 00       	nop
    153e:	00 00       	nop
    1540:	00 00       	nop
    1542:	00 c0       	rjmp	.+0      	; 0x1544 <nocollision+0x22>
    1544:	00 00       	nop
    1546:	00 00       	nop
    1548:	00 00       	nop
    154a:	30 95       	com	r19
    154c:	25 b1       	in	r18, 0x05	; 5
    154e:	23 23       	and	r18, r19
    1550:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1552:	00 00       	nop
    1554:	24 e5       	ldi	r18, 0x54	; 84
    1556:	2a 95       	dec	r18
    1558:	f1 f7       	brne	.-4      	; 0x1556 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    155a:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    155c:	8c e0       	ldi	r24, 0x0C	; 12

0000155e <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    155e:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1560:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1562:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1564:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1566:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1568:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    156a:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    156c:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    156e:	50 e0       	ldi	r21, 0x00	; 0

00001570 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1570:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1572:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1574:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1576:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1578:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <tx_mask>
    157c:	20 30       	cpi	r18, 0x00	; 0
    157e:	29 f0       	breq	.+10     	; 0x158a <sendbit+0x1a>
    1580:	00 00       	nop
    1582:	25 b1       	in	r18, 0x05	; 5
    1584:	23 2b       	or	r18, r19
    1586:	25 b9       	out	0x05, r18	; 5
    1588:	04 c0       	rjmp	.+8      	; 0x1592 <sendbit+0x22>
    158a:	00 00       	nop
    158c:	00 00       	nop
    158e:	00 00       	nop
    1590:	00 c0       	rjmp	.+0      	; 0x1592 <sendbit+0x22>
    1592:	00 00       	nop
    1594:	00 00       	nop
    1596:	00 00       	nop
    1598:	30 95       	com	r19
    159a:	25 b1       	in	r18, 0x05	; 5
    159c:	23 23       	and	r18, r19
    159e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    15a0:	00 00       	nop
    15a2:	21 e5       	ldi	r18, 0x51	; 81
    15a4:	2a 95       	dec	r18
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    15a8:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    15aa:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    15ac:	9a 95       	dec	r25
    brne sendbit
    15ae:	01 f7       	brne	.-64     	; 0x1570 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    15b0:	8a 95       	dec	r24
    brne sendbyte
    15b2:	a9 f6       	brne	.-86     	; 0x155e <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    15b4:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    15b6:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    15b8:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    15ba:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    15bc:	30 91 b5 01 	lds	r19, 0x01B5	; 0x8001b5 <tx_mask>
    com tmpreg2
    15c0:	30 95       	com	r19
    in tmpreg1, IR_PORT
    15c2:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    15c4:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    15c6:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    15c8:	0f be       	out	0x3f, r0	; 63
    return 1
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	08 95       	ret

000015ce <main>:
    }
}

// Do main things
int main() {
    kilo_init();
    15ce:	0e 94 34 03 	call	0x668	; 0x668 <kilo_init>
    kilo_message_rx = message_rx;
    15d2:	80 ef       	ldi	r24, 0xF0	; 240
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <kilo_message_rx+0x1>
    15da:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <kilo_message_rx>
    kilo_message_tx = message_tx;
    15de:	85 ed       	ldi	r24, 0xD5	; 213
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <kilo_message_tx+0x1>
    15e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <kilo_message_tx>
    kilo_start(setup, loop);
    15ea:	6f ef       	ldi	r22, 0xFF	; 255
    15ec:	71 e0       	ldi	r23, 0x01	; 1
    15ee:	88 e7       	ldi	r24, 0x78	; 120
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 2c 07 	call	0xe58	; 0xe58 <kilo_start>

    return 0;
}
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	08 95       	ret

000015fc <__divmodhi4>:
    15fc:	97 fb       	bst	r25, 7
    15fe:	07 2e       	mov	r0, r23
    1600:	16 f4       	brtc	.+4      	; 0x1606 <__divmodhi4+0xa>
    1602:	00 94       	com	r0
    1604:	07 d0       	rcall	.+14     	; 0x1614 <__divmodhi4_neg1>
    1606:	77 fd       	sbrc	r23, 7
    1608:	09 d0       	rcall	.+18     	; 0x161c <__divmodhi4_neg2>
    160a:	0e 94 27 0b 	call	0x164e	; 0x164e <__udivmodhi4>
    160e:	07 fc       	sbrc	r0, 7
    1610:	05 d0       	rcall	.+10     	; 0x161c <__divmodhi4_neg2>
    1612:	3e f4       	brtc	.+14     	; 0x1622 <__divmodhi4_exit>

00001614 <__divmodhi4_neg1>:
    1614:	90 95       	com	r25
    1616:	81 95       	neg	r24
    1618:	9f 4f       	sbci	r25, 0xFF	; 255
    161a:	08 95       	ret

0000161c <__divmodhi4_neg2>:
    161c:	70 95       	com	r23
    161e:	61 95       	neg	r22
    1620:	7f 4f       	sbci	r23, 0xFF	; 255

00001622 <__divmodhi4_exit>:
    1622:	08 95       	ret

00001624 <__tablejump2__>:
    1624:	ee 0f       	add	r30, r30
    1626:	ff 1f       	adc	r31, r31
    1628:	05 90       	lpm	r0, Z+
    162a:	f4 91       	lpm	r31, Z
    162c:	e0 2d       	mov	r30, r0
    162e:	09 94       	ijmp

00001630 <__umulhisi3>:
    1630:	a2 9f       	mul	r26, r18
    1632:	b0 01       	movw	r22, r0
    1634:	b3 9f       	mul	r27, r19
    1636:	c0 01       	movw	r24, r0
    1638:	a3 9f       	mul	r26, r19
    163a:	70 0d       	add	r23, r0
    163c:	81 1d       	adc	r24, r1
    163e:	11 24       	eor	r1, r1
    1640:	91 1d       	adc	r25, r1
    1642:	b2 9f       	mul	r27, r18
    1644:	70 0d       	add	r23, r0
    1646:	81 1d       	adc	r24, r1
    1648:	11 24       	eor	r1, r1
    164a:	91 1d       	adc	r25, r1
    164c:	08 95       	ret

0000164e <__udivmodhi4>:
    164e:	aa 1b       	sub	r26, r26
    1650:	bb 1b       	sub	r27, r27
    1652:	51 e1       	ldi	r21, 0x11	; 17
    1654:	07 c0       	rjmp	.+14     	; 0x1664 <__udivmodhi4_ep>

00001656 <__udivmodhi4_loop>:
    1656:	aa 1f       	adc	r26, r26
    1658:	bb 1f       	adc	r27, r27
    165a:	a6 17       	cp	r26, r22
    165c:	b7 07       	cpc	r27, r23
    165e:	10 f0       	brcs	.+4      	; 0x1664 <__udivmodhi4_ep>
    1660:	a6 1b       	sub	r26, r22
    1662:	b7 0b       	sbc	r27, r23

00001664 <__udivmodhi4_ep>:
    1664:	88 1f       	adc	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	5a 95       	dec	r21
    166a:	a9 f7       	brne	.-22     	; 0x1656 <__udivmodhi4_loop>
    166c:	80 95       	com	r24
    166e:	90 95       	com	r25
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	08 95       	ret

00001676 <__subsf3>:
    1676:	50 58       	subi	r21, 0x80	; 128

00001678 <__addsf3>:
    1678:	bb 27       	eor	r27, r27
    167a:	aa 27       	eor	r26, r26
    167c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__addsf3x>
    1680:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_round>
    1684:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_pscA>
    1688:	38 f0       	brcs	.+14     	; 0x1698 <__addsf3+0x20>
    168a:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_pscB>
    168e:	20 f0       	brcs	.+8      	; 0x1698 <__addsf3+0x20>
    1690:	39 f4       	brne	.+14     	; 0x16a0 <__addsf3+0x28>
    1692:	9f 3f       	cpi	r25, 0xFF	; 255
    1694:	19 f4       	brne	.+6      	; 0x169c <__addsf3+0x24>
    1696:	26 f4       	brtc	.+8      	; 0x16a0 <__addsf3+0x28>
    1698:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_nan>
    169c:	0e f4       	brtc	.+2      	; 0x16a0 <__addsf3+0x28>
    169e:	e0 95       	com	r30
    16a0:	e7 fb       	bst	r30, 7
    16a2:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>

000016a6 <__addsf3x>:
    16a6:	e9 2f       	mov	r30, r25
    16a8:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_split3>
    16ac:	58 f3       	brcs	.-42     	; 0x1684 <__addsf3+0xc>
    16ae:	ba 17       	cp	r27, r26
    16b0:	62 07       	cpc	r22, r18
    16b2:	73 07       	cpc	r23, r19
    16b4:	84 07       	cpc	r24, r20
    16b6:	95 07       	cpc	r25, r21
    16b8:	20 f0       	brcs	.+8      	; 0x16c2 <__addsf3x+0x1c>
    16ba:	79 f4       	brne	.+30     	; 0x16da <__addsf3x+0x34>
    16bc:	a6 f5       	brtc	.+104    	; 0x1726 <__addsf3x+0x80>
    16be:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__fp_zero>
    16c2:	0e f4       	brtc	.+2      	; 0x16c6 <__addsf3x+0x20>
    16c4:	e0 95       	com	r30
    16c6:	0b 2e       	mov	r0, r27
    16c8:	ba 2f       	mov	r27, r26
    16ca:	a0 2d       	mov	r26, r0
    16cc:	0b 01       	movw	r0, r22
    16ce:	b9 01       	movw	r22, r18
    16d0:	90 01       	movw	r18, r0
    16d2:	0c 01       	movw	r0, r24
    16d4:	ca 01       	movw	r24, r20
    16d6:	a0 01       	movw	r20, r0
    16d8:	11 24       	eor	r1, r1
    16da:	ff 27       	eor	r31, r31
    16dc:	59 1b       	sub	r21, r25
    16de:	99 f0       	breq	.+38     	; 0x1706 <__addsf3x+0x60>
    16e0:	59 3f       	cpi	r21, 0xF9	; 249
    16e2:	50 f4       	brcc	.+20     	; 0x16f8 <__addsf3x+0x52>
    16e4:	50 3e       	cpi	r21, 0xE0	; 224
    16e6:	68 f1       	brcs	.+90     	; 0x1742 <__addsf3x+0x9c>
    16e8:	1a 16       	cp	r1, r26
    16ea:	f0 40       	sbci	r31, 0x00	; 0
    16ec:	a2 2f       	mov	r26, r18
    16ee:	23 2f       	mov	r18, r19
    16f0:	34 2f       	mov	r19, r20
    16f2:	44 27       	eor	r20, r20
    16f4:	58 5f       	subi	r21, 0xF8	; 248
    16f6:	f3 cf       	rjmp	.-26     	; 0x16de <__addsf3x+0x38>
    16f8:	46 95       	lsr	r20
    16fa:	37 95       	ror	r19
    16fc:	27 95       	ror	r18
    16fe:	a7 95       	ror	r26
    1700:	f0 40       	sbci	r31, 0x00	; 0
    1702:	53 95       	inc	r21
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__addsf3x+0x52>
    1706:	7e f4       	brtc	.+30     	; 0x1726 <__addsf3x+0x80>
    1708:	1f 16       	cp	r1, r31
    170a:	ba 0b       	sbc	r27, r26
    170c:	62 0b       	sbc	r22, r18
    170e:	73 0b       	sbc	r23, r19
    1710:	84 0b       	sbc	r24, r20
    1712:	ba f0       	brmi	.+46     	; 0x1742 <__addsf3x+0x9c>
    1714:	91 50       	subi	r25, 0x01	; 1
    1716:	a1 f0       	breq	.+40     	; 0x1740 <__addsf3x+0x9a>
    1718:	ff 0f       	add	r31, r31
    171a:	bb 1f       	adc	r27, r27
    171c:	66 1f       	adc	r22, r22
    171e:	77 1f       	adc	r23, r23
    1720:	88 1f       	adc	r24, r24
    1722:	c2 f7       	brpl	.-16     	; 0x1714 <__addsf3x+0x6e>
    1724:	0e c0       	rjmp	.+28     	; 0x1742 <__addsf3x+0x9c>
    1726:	ba 0f       	add	r27, r26
    1728:	62 1f       	adc	r22, r18
    172a:	73 1f       	adc	r23, r19
    172c:	84 1f       	adc	r24, r20
    172e:	48 f4       	brcc	.+18     	; 0x1742 <__addsf3x+0x9c>
    1730:	87 95       	ror	r24
    1732:	77 95       	ror	r23
    1734:	67 95       	ror	r22
    1736:	b7 95       	ror	r27
    1738:	f7 95       	ror	r31
    173a:	9e 3f       	cpi	r25, 0xFE	; 254
    173c:	08 f0       	brcs	.+2      	; 0x1740 <__addsf3x+0x9a>
    173e:	b0 cf       	rjmp	.-160    	; 0x16a0 <__addsf3+0x28>
    1740:	93 95       	inc	r25
    1742:	88 0f       	add	r24, r24
    1744:	08 f0       	brcs	.+2      	; 0x1748 <__addsf3x+0xa2>
    1746:	99 27       	eor	r25, r25
    1748:	ee 0f       	add	r30, r30
    174a:	97 95       	ror	r25
    174c:	87 95       	ror	r24
    174e:	08 95       	ret

00001750 <__divsf3>:
    1750:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__divsf3x>
    1754:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_round>
    1758:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_pscB>
    175c:	58 f0       	brcs	.+22     	; 0x1774 <__divsf3+0x24>
    175e:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_pscA>
    1762:	40 f0       	brcs	.+16     	; 0x1774 <__divsf3+0x24>
    1764:	29 f4       	brne	.+10     	; 0x1770 <__divsf3+0x20>
    1766:	5f 3f       	cpi	r21, 0xFF	; 255
    1768:	29 f0       	breq	.+10     	; 0x1774 <__divsf3+0x24>
    176a:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    176e:	51 11       	cpse	r21, r1
    1770:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    1774:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_nan>

00001778 <__divsf3x>:
    1778:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_split3>
    177c:	68 f3       	brcs	.-38     	; 0x1758 <__divsf3+0x8>

0000177e <__divsf3_pse>:
    177e:	99 23       	and	r25, r25
    1780:	b1 f3       	breq	.-20     	; 0x176e <__divsf3+0x1e>
    1782:	55 23       	and	r21, r21
    1784:	91 f3       	breq	.-28     	; 0x176a <__divsf3+0x1a>
    1786:	95 1b       	sub	r25, r21
    1788:	55 0b       	sbc	r21, r21
    178a:	bb 27       	eor	r27, r27
    178c:	aa 27       	eor	r26, r26
    178e:	62 17       	cp	r22, r18
    1790:	73 07       	cpc	r23, r19
    1792:	84 07       	cpc	r24, r20
    1794:	38 f0       	brcs	.+14     	; 0x17a4 <__divsf3_pse+0x26>
    1796:	9f 5f       	subi	r25, 0xFF	; 255
    1798:	5f 4f       	sbci	r21, 0xFF	; 255
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	44 1f       	adc	r20, r20
    17a0:	aa 1f       	adc	r26, r26
    17a2:	a9 f3       	breq	.-22     	; 0x178e <__divsf3_pse+0x10>
    17a4:	35 d0       	rcall	.+106    	; 0x1810 <__divsf3_pse+0x92>
    17a6:	0e 2e       	mov	r0, r30
    17a8:	3a f0       	brmi	.+14     	; 0x17b8 <__divsf3_pse+0x3a>
    17aa:	e0 e8       	ldi	r30, 0x80	; 128
    17ac:	32 d0       	rcall	.+100    	; 0x1812 <__divsf3_pse+0x94>
    17ae:	91 50       	subi	r25, 0x01	; 1
    17b0:	50 40       	sbci	r21, 0x00	; 0
    17b2:	e6 95       	lsr	r30
    17b4:	00 1c       	adc	r0, r0
    17b6:	ca f7       	brpl	.-14     	; 0x17aa <__divsf3_pse+0x2c>
    17b8:	2b d0       	rcall	.+86     	; 0x1810 <__divsf3_pse+0x92>
    17ba:	fe 2f       	mov	r31, r30
    17bc:	29 d0       	rcall	.+82     	; 0x1810 <__divsf3_pse+0x92>
    17be:	66 0f       	add	r22, r22
    17c0:	77 1f       	adc	r23, r23
    17c2:	88 1f       	adc	r24, r24
    17c4:	bb 1f       	adc	r27, r27
    17c6:	26 17       	cp	r18, r22
    17c8:	37 07       	cpc	r19, r23
    17ca:	48 07       	cpc	r20, r24
    17cc:	ab 07       	cpc	r26, r27
    17ce:	b0 e8       	ldi	r27, 0x80	; 128
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <__divsf3_pse+0x56>
    17d2:	bb 0b       	sbc	r27, r27
    17d4:	80 2d       	mov	r24, r0
    17d6:	bf 01       	movw	r22, r30
    17d8:	ff 27       	eor	r31, r31
    17da:	93 58       	subi	r25, 0x83	; 131
    17dc:	5f 4f       	sbci	r21, 0xFF	; 255
    17de:	3a f0       	brmi	.+14     	; 0x17ee <__divsf3_pse+0x70>
    17e0:	9e 3f       	cpi	r25, 0xFE	; 254
    17e2:	51 05       	cpc	r21, r1
    17e4:	78 f0       	brcs	.+30     	; 0x1804 <__divsf3_pse+0x86>
    17e6:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    17ea:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    17ee:	5f 3f       	cpi	r21, 0xFF	; 255
    17f0:	e4 f3       	brlt	.-8      	; 0x17ea <__divsf3_pse+0x6c>
    17f2:	98 3e       	cpi	r25, 0xE8	; 232
    17f4:	d4 f3       	brlt	.-12     	; 0x17ea <__divsf3_pse+0x6c>
    17f6:	86 95       	lsr	r24
    17f8:	77 95       	ror	r23
    17fa:	67 95       	ror	r22
    17fc:	b7 95       	ror	r27
    17fe:	f7 95       	ror	r31
    1800:	9f 5f       	subi	r25, 0xFF	; 255
    1802:	c9 f7       	brne	.-14     	; 0x17f6 <__divsf3_pse+0x78>
    1804:	88 0f       	add	r24, r24
    1806:	91 1d       	adc	r25, r1
    1808:	96 95       	lsr	r25
    180a:	87 95       	ror	r24
    180c:	97 f9       	bld	r25, 7
    180e:	08 95       	ret
    1810:	e1 e0       	ldi	r30, 0x01	; 1
    1812:	66 0f       	add	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	bb 1f       	adc	r27, r27
    181a:	62 17       	cp	r22, r18
    181c:	73 07       	cpc	r23, r19
    181e:	84 07       	cpc	r24, r20
    1820:	ba 07       	cpc	r27, r26
    1822:	20 f0       	brcs	.+8      	; 0x182c <__divsf3_pse+0xae>
    1824:	62 1b       	sub	r22, r18
    1826:	73 0b       	sbc	r23, r19
    1828:	84 0b       	sbc	r24, r20
    182a:	ba 0b       	sbc	r27, r26
    182c:	ee 1f       	adc	r30, r30
    182e:	88 f7       	brcc	.-30     	; 0x1812 <__divsf3_pse+0x94>
    1830:	e0 95       	com	r30
    1832:	08 95       	ret

00001834 <__fixsfsi>:
    1834:	0e 94 21 0c 	call	0x1842	; 0x1842 <__fixunssfsi>
    1838:	68 94       	set
    183a:	b1 11       	cpse	r27, r1
    183c:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    1840:	08 95       	ret

00001842 <__fixunssfsi>:
    1842:	0e 94 bd 0c 	call	0x197a	; 0x197a <__fp_splitA>
    1846:	88 f0       	brcs	.+34     	; 0x186a <__fixunssfsi+0x28>
    1848:	9f 57       	subi	r25, 0x7F	; 127
    184a:	98 f0       	brcs	.+38     	; 0x1872 <__fixunssfsi+0x30>
    184c:	b9 2f       	mov	r27, r25
    184e:	99 27       	eor	r25, r25
    1850:	b7 51       	subi	r27, 0x17	; 23
    1852:	b0 f0       	brcs	.+44     	; 0x1880 <__fixunssfsi+0x3e>
    1854:	e1 f0       	breq	.+56     	; 0x188e <__fixunssfsi+0x4c>
    1856:	66 0f       	add	r22, r22
    1858:	77 1f       	adc	r23, r23
    185a:	88 1f       	adc	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	1a f0       	brmi	.+6      	; 0x1866 <__fixunssfsi+0x24>
    1860:	ba 95       	dec	r27
    1862:	c9 f7       	brne	.-14     	; 0x1856 <__fixunssfsi+0x14>
    1864:	14 c0       	rjmp	.+40     	; 0x188e <__fixunssfsi+0x4c>
    1866:	b1 30       	cpi	r27, 0x01	; 1
    1868:	91 f0       	breq	.+36     	; 0x188e <__fixunssfsi+0x4c>
    186a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__fp_zero>
    186e:	b1 e0       	ldi	r27, 0x01	; 1
    1870:	08 95       	ret
    1872:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__fp_zero>
    1876:	67 2f       	mov	r22, r23
    1878:	78 2f       	mov	r23, r24
    187a:	88 27       	eor	r24, r24
    187c:	b8 5f       	subi	r27, 0xF8	; 248
    187e:	39 f0       	breq	.+14     	; 0x188e <__fixunssfsi+0x4c>
    1880:	b9 3f       	cpi	r27, 0xF9	; 249
    1882:	cc f3       	brlt	.-14     	; 0x1876 <__fixunssfsi+0x34>
    1884:	86 95       	lsr	r24
    1886:	77 95       	ror	r23
    1888:	67 95       	ror	r22
    188a:	b3 95       	inc	r27
    188c:	d9 f7       	brne	.-10     	; 0x1884 <__fixunssfsi+0x42>
    188e:	3e f4       	brtc	.+14     	; 0x189e <__fixunssfsi+0x5c>
    1890:	90 95       	com	r25
    1892:	80 95       	com	r24
    1894:	70 95       	com	r23
    1896:	61 95       	neg	r22
    1898:	7f 4f       	sbci	r23, 0xFF	; 255
    189a:	8f 4f       	sbci	r24, 0xFF	; 255
    189c:	9f 4f       	sbci	r25, 0xFF	; 255
    189e:	08 95       	ret

000018a0 <__floatunsisf>:
    18a0:	e8 94       	clt
    18a2:	09 c0       	rjmp	.+18     	; 0x18b6 <__floatsisf+0x12>

000018a4 <__floatsisf>:
    18a4:	97 fb       	bst	r25, 7
    18a6:	3e f4       	brtc	.+14     	; 0x18b6 <__floatsisf+0x12>
    18a8:	90 95       	com	r25
    18aa:	80 95       	com	r24
    18ac:	70 95       	com	r23
    18ae:	61 95       	neg	r22
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    18b2:	8f 4f       	sbci	r24, 0xFF	; 255
    18b4:	9f 4f       	sbci	r25, 0xFF	; 255
    18b6:	99 23       	and	r25, r25
    18b8:	a9 f0       	breq	.+42     	; 0x18e4 <__floatsisf+0x40>
    18ba:	f9 2f       	mov	r31, r25
    18bc:	96 e9       	ldi	r25, 0x96	; 150
    18be:	bb 27       	eor	r27, r27
    18c0:	93 95       	inc	r25
    18c2:	f6 95       	lsr	r31
    18c4:	87 95       	ror	r24
    18c6:	77 95       	ror	r23
    18c8:	67 95       	ror	r22
    18ca:	b7 95       	ror	r27
    18cc:	f1 11       	cpse	r31, r1
    18ce:	f8 cf       	rjmp	.-16     	; 0x18c0 <__floatsisf+0x1c>
    18d0:	fa f4       	brpl	.+62     	; 0x1910 <__floatsisf+0x6c>
    18d2:	bb 0f       	add	r27, r27
    18d4:	11 f4       	brne	.+4      	; 0x18da <__floatsisf+0x36>
    18d6:	60 ff       	sbrs	r22, 0
    18d8:	1b c0       	rjmp	.+54     	; 0x1910 <__floatsisf+0x6c>
    18da:	6f 5f       	subi	r22, 0xFF	; 255
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255
    18de:	8f 4f       	sbci	r24, 0xFF	; 255
    18e0:	9f 4f       	sbci	r25, 0xFF	; 255
    18e2:	16 c0       	rjmp	.+44     	; 0x1910 <__floatsisf+0x6c>
    18e4:	88 23       	and	r24, r24
    18e6:	11 f0       	breq	.+4      	; 0x18ec <__floatsisf+0x48>
    18e8:	96 e9       	ldi	r25, 0x96	; 150
    18ea:	11 c0       	rjmp	.+34     	; 0x190e <__floatsisf+0x6a>
    18ec:	77 23       	and	r23, r23
    18ee:	21 f0       	breq	.+8      	; 0x18f8 <__floatsisf+0x54>
    18f0:	9e e8       	ldi	r25, 0x8E	; 142
    18f2:	87 2f       	mov	r24, r23
    18f4:	76 2f       	mov	r23, r22
    18f6:	05 c0       	rjmp	.+10     	; 0x1902 <__floatsisf+0x5e>
    18f8:	66 23       	and	r22, r22
    18fa:	71 f0       	breq	.+28     	; 0x1918 <__floatsisf+0x74>
    18fc:	96 e8       	ldi	r25, 0x86	; 134
    18fe:	86 2f       	mov	r24, r22
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	2a f0       	brmi	.+10     	; 0x1910 <__floatsisf+0x6c>
    1906:	9a 95       	dec	r25
    1908:	66 0f       	add	r22, r22
    190a:	77 1f       	adc	r23, r23
    190c:	88 1f       	adc	r24, r24
    190e:	da f7       	brpl	.-10     	; 0x1906 <__floatsisf+0x62>
    1910:	88 0f       	add	r24, r24
    1912:	96 95       	lsr	r25
    1914:	87 95       	ror	r24
    1916:	97 f9       	bld	r25, 7
    1918:	08 95       	ret

0000191a <__fp_inf>:
    191a:	97 f9       	bld	r25, 7
    191c:	9f 67       	ori	r25, 0x7F	; 127
    191e:	80 e8       	ldi	r24, 0x80	; 128
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	08 95       	ret

00001926 <__fp_nan>:
    1926:	9f ef       	ldi	r25, 0xFF	; 255
    1928:	80 ec       	ldi	r24, 0xC0	; 192
    192a:	08 95       	ret

0000192c <__fp_pscA>:
    192c:	00 24       	eor	r0, r0
    192e:	0a 94       	dec	r0
    1930:	16 16       	cp	r1, r22
    1932:	17 06       	cpc	r1, r23
    1934:	18 06       	cpc	r1, r24
    1936:	09 06       	cpc	r0, r25
    1938:	08 95       	ret

0000193a <__fp_pscB>:
    193a:	00 24       	eor	r0, r0
    193c:	0a 94       	dec	r0
    193e:	12 16       	cp	r1, r18
    1940:	13 06       	cpc	r1, r19
    1942:	14 06       	cpc	r1, r20
    1944:	05 06       	cpc	r0, r21
    1946:	08 95       	ret

00001948 <__fp_round>:
    1948:	09 2e       	mov	r0, r25
    194a:	03 94       	inc	r0
    194c:	00 0c       	add	r0, r0
    194e:	11 f4       	brne	.+4      	; 0x1954 <__fp_round+0xc>
    1950:	88 23       	and	r24, r24
    1952:	52 f0       	brmi	.+20     	; 0x1968 <__fp_round+0x20>
    1954:	bb 0f       	add	r27, r27
    1956:	40 f4       	brcc	.+16     	; 0x1968 <__fp_round+0x20>
    1958:	bf 2b       	or	r27, r31
    195a:	11 f4       	brne	.+4      	; 0x1960 <__fp_round+0x18>
    195c:	60 ff       	sbrs	r22, 0
    195e:	04 c0       	rjmp	.+8      	; 0x1968 <__fp_round+0x20>
    1960:	6f 5f       	subi	r22, 0xFF	; 255
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	8f 4f       	sbci	r24, 0xFF	; 255
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	08 95       	ret

0000196a <__fp_split3>:
    196a:	57 fd       	sbrc	r21, 7
    196c:	90 58       	subi	r25, 0x80	; 128
    196e:	44 0f       	add	r20, r20
    1970:	55 1f       	adc	r21, r21
    1972:	59 f0       	breq	.+22     	; 0x198a <__fp_splitA+0x10>
    1974:	5f 3f       	cpi	r21, 0xFF	; 255
    1976:	71 f0       	breq	.+28     	; 0x1994 <__fp_splitA+0x1a>
    1978:	47 95       	ror	r20

0000197a <__fp_splitA>:
    197a:	88 0f       	add	r24, r24
    197c:	97 fb       	bst	r25, 7
    197e:	99 1f       	adc	r25, r25
    1980:	61 f0       	breq	.+24     	; 0x199a <__fp_splitA+0x20>
    1982:	9f 3f       	cpi	r25, 0xFF	; 255
    1984:	79 f0       	breq	.+30     	; 0x19a4 <__fp_splitA+0x2a>
    1986:	87 95       	ror	r24
    1988:	08 95       	ret
    198a:	12 16       	cp	r1, r18
    198c:	13 06       	cpc	r1, r19
    198e:	14 06       	cpc	r1, r20
    1990:	55 1f       	adc	r21, r21
    1992:	f2 cf       	rjmp	.-28     	; 0x1978 <__fp_split3+0xe>
    1994:	46 95       	lsr	r20
    1996:	f1 df       	rcall	.-30     	; 0x197a <__fp_splitA>
    1998:	08 c0       	rjmp	.+16     	; 0x19aa <__fp_splitA+0x30>
    199a:	16 16       	cp	r1, r22
    199c:	17 06       	cpc	r1, r23
    199e:	18 06       	cpc	r1, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	f1 cf       	rjmp	.-30     	; 0x1986 <__fp_splitA+0xc>
    19a4:	86 95       	lsr	r24
    19a6:	71 05       	cpc	r23, r1
    19a8:	61 05       	cpc	r22, r1
    19aa:	08 94       	sec
    19ac:	08 95       	ret

000019ae <__fp_zero>:
    19ae:	e8 94       	clt

000019b0 <__fp_szero>:
    19b0:	bb 27       	eor	r27, r27
    19b2:	66 27       	eor	r22, r22
    19b4:	77 27       	eor	r23, r23
    19b6:	cb 01       	movw	r24, r22
    19b8:	97 f9       	bld	r25, 7
    19ba:	08 95       	ret

000019bc <__mulsf3>:
    19bc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__mulsf3x>
    19c0:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__fp_round>
    19c4:	0e 94 96 0c 	call	0x192c	; 0x192c <__fp_pscA>
    19c8:	38 f0       	brcs	.+14     	; 0x19d8 <__mulsf3+0x1c>
    19ca:	0e 94 9d 0c 	call	0x193a	; 0x193a <__fp_pscB>
    19ce:	20 f0       	brcs	.+8      	; 0x19d8 <__mulsf3+0x1c>
    19d0:	95 23       	and	r25, r21
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <__mulsf3+0x1c>
    19d4:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    19d8:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__fp_nan>
    19dc:	11 24       	eor	r1, r1
    19de:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>

000019e2 <__mulsf3x>:
    19e2:	0e 94 b5 0c 	call	0x196a	; 0x196a <__fp_split3>
    19e6:	70 f3       	brcs	.-36     	; 0x19c4 <__mulsf3+0x8>

000019e8 <__mulsf3_pse>:
    19e8:	95 9f       	mul	r25, r21
    19ea:	c1 f3       	breq	.-16     	; 0x19dc <__mulsf3+0x20>
    19ec:	95 0f       	add	r25, r21
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	55 1f       	adc	r21, r21
    19f2:	62 9f       	mul	r22, r18
    19f4:	f0 01       	movw	r30, r0
    19f6:	72 9f       	mul	r23, r18
    19f8:	bb 27       	eor	r27, r27
    19fa:	f0 0d       	add	r31, r0
    19fc:	b1 1d       	adc	r27, r1
    19fe:	63 9f       	mul	r22, r19
    1a00:	aa 27       	eor	r26, r26
    1a02:	f0 0d       	add	r31, r0
    1a04:	b1 1d       	adc	r27, r1
    1a06:	aa 1f       	adc	r26, r26
    1a08:	64 9f       	mul	r22, r20
    1a0a:	66 27       	eor	r22, r22
    1a0c:	b0 0d       	add	r27, r0
    1a0e:	a1 1d       	adc	r26, r1
    1a10:	66 1f       	adc	r22, r22
    1a12:	82 9f       	mul	r24, r18
    1a14:	22 27       	eor	r18, r18
    1a16:	b0 0d       	add	r27, r0
    1a18:	a1 1d       	adc	r26, r1
    1a1a:	62 1f       	adc	r22, r18
    1a1c:	73 9f       	mul	r23, r19
    1a1e:	b0 0d       	add	r27, r0
    1a20:	a1 1d       	adc	r26, r1
    1a22:	62 1f       	adc	r22, r18
    1a24:	83 9f       	mul	r24, r19
    1a26:	a0 0d       	add	r26, r0
    1a28:	61 1d       	adc	r22, r1
    1a2a:	22 1f       	adc	r18, r18
    1a2c:	74 9f       	mul	r23, r20
    1a2e:	33 27       	eor	r19, r19
    1a30:	a0 0d       	add	r26, r0
    1a32:	61 1d       	adc	r22, r1
    1a34:	23 1f       	adc	r18, r19
    1a36:	84 9f       	mul	r24, r20
    1a38:	60 0d       	add	r22, r0
    1a3a:	21 1d       	adc	r18, r1
    1a3c:	82 2f       	mov	r24, r18
    1a3e:	76 2f       	mov	r23, r22
    1a40:	6a 2f       	mov	r22, r26
    1a42:	11 24       	eor	r1, r1
    1a44:	9f 57       	subi	r25, 0x7F	; 127
    1a46:	50 40       	sbci	r21, 0x00	; 0
    1a48:	9a f0       	brmi	.+38     	; 0x1a70 <__mulsf3_pse+0x88>
    1a4a:	f1 f0       	breq	.+60     	; 0x1a88 <__mulsf3_pse+0xa0>
    1a4c:	88 23       	and	r24, r24
    1a4e:	4a f0       	brmi	.+18     	; 0x1a62 <__mulsf3_pse+0x7a>
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	bb 1f       	adc	r27, r27
    1a56:	66 1f       	adc	r22, r22
    1a58:	77 1f       	adc	r23, r23
    1a5a:	88 1f       	adc	r24, r24
    1a5c:	91 50       	subi	r25, 0x01	; 1
    1a5e:	50 40       	sbci	r21, 0x00	; 0
    1a60:	a9 f7       	brne	.-22     	; 0x1a4c <__mulsf3_pse+0x64>
    1a62:	9e 3f       	cpi	r25, 0xFE	; 254
    1a64:	51 05       	cpc	r21, r1
    1a66:	80 f0       	brcs	.+32     	; 0x1a88 <__mulsf3_pse+0xa0>
    1a68:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__fp_inf>
    1a6c:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__fp_szero>
    1a70:	5f 3f       	cpi	r21, 0xFF	; 255
    1a72:	e4 f3       	brlt	.-8      	; 0x1a6c <__mulsf3_pse+0x84>
    1a74:	98 3e       	cpi	r25, 0xE8	; 232
    1a76:	d4 f3       	brlt	.-12     	; 0x1a6c <__mulsf3_pse+0x84>
    1a78:	86 95       	lsr	r24
    1a7a:	77 95       	ror	r23
    1a7c:	67 95       	ror	r22
    1a7e:	b7 95       	ror	r27
    1a80:	f7 95       	ror	r31
    1a82:	e7 95       	ror	r30
    1a84:	9f 5f       	subi	r25, 0xFF	; 255
    1a86:	c1 f7       	brne	.-16     	; 0x1a78 <__mulsf3_pse+0x90>
    1a88:	fe 2b       	or	r31, r30
    1a8a:	88 0f       	add	r24, r24
    1a8c:	91 1d       	adc	r25, r1
    1a8e:	96 95       	lsr	r25
    1a90:	87 95       	ror	r24
    1a92:	97 f9       	bld	r25, 7
    1a94:	08 95       	ret

00001a96 <do_rand>:
    1a96:	8f 92       	push	r8
    1a98:	9f 92       	push	r9
    1a9a:	af 92       	push	r10
    1a9c:	bf 92       	push	r11
    1a9e:	cf 92       	push	r12
    1aa0:	df 92       	push	r13
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	ec 01       	movw	r28, r24
    1aac:	68 81       	ld	r22, Y
    1aae:	79 81       	ldd	r23, Y+1	; 0x01
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab4:	61 15       	cp	r22, r1
    1ab6:	71 05       	cpc	r23, r1
    1ab8:	81 05       	cpc	r24, r1
    1aba:	91 05       	cpc	r25, r1
    1abc:	21 f4       	brne	.+8      	; 0x1ac6 <do_rand+0x30>
    1abe:	64 e2       	ldi	r22, 0x24	; 36
    1ac0:	79 ed       	ldi	r23, 0xD9	; 217
    1ac2:	8b e5       	ldi	r24, 0x5B	; 91
    1ac4:	97 e0       	ldi	r25, 0x07	; 7
    1ac6:	2d e1       	ldi	r18, 0x1D	; 29
    1ac8:	33 ef       	ldi	r19, 0xF3	; 243
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__divmodsi4>
    1ad2:	49 01       	movw	r8, r18
    1ad4:	5a 01       	movw	r10, r20
    1ad6:	9b 01       	movw	r18, r22
    1ad8:	ac 01       	movw	r20, r24
    1ada:	a7 ea       	ldi	r26, 0xA7	; 167
    1adc:	b1 e4       	ldi	r27, 0x41	; 65
    1ade:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__muluhisi3>
    1ae2:	6b 01       	movw	r12, r22
    1ae4:	7c 01       	movw	r14, r24
    1ae6:	ac ee       	ldi	r26, 0xEC	; 236
    1ae8:	b4 ef       	ldi	r27, 0xF4	; 244
    1aea:	a5 01       	movw	r20, r10
    1aec:	94 01       	movw	r18, r8
    1aee:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__mulohisi3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8c 0d       	add	r24, r12
    1af8:	9d 1d       	adc	r25, r13
    1afa:	ae 1d       	adc	r26, r14
    1afc:	bf 1d       	adc	r27, r15
    1afe:	b7 ff       	sbrs	r27, 7
    1b00:	03 c0       	rjmp	.+6      	; 0x1b08 <do_rand+0x72>
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	a1 09       	sbc	r26, r1
    1b06:	b0 48       	sbci	r27, 0x80	; 128
    1b08:	88 83       	st	Y, r24
    1b0a:	99 83       	std	Y+1, r25	; 0x01
    1b0c:	aa 83       	std	Y+2, r26	; 0x02
    1b0e:	bb 83       	std	Y+3, r27	; 0x03
    1b10:	9f 77       	andi	r25, 0x7F	; 127
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	9f 90       	pop	r9
    1b24:	8f 90       	pop	r8
    1b26:	08 95       	ret

00001b28 <rand_r>:
    1b28:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <do_rand>
    1b2c:	08 95       	ret

00001b2e <rand>:
    1b2e:	88 e0       	ldi	r24, 0x08	; 8
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <do_rand>
    1b36:	08 95       	ret

00001b38 <srand>:
    1b38:	a0 e0       	ldi	r26, 0x00	; 0
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next>
    1b40:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x1>
    1b44:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <next+0x2>
    1b48:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <next+0x3>
    1b4c:	08 95       	ret

00001b4e <eeprom_read_byte>:
    1b4e:	f9 99       	sbic	0x1f, 1	; 31
    1b50:	fe cf       	rjmp	.-4      	; 0x1b4e <eeprom_read_byte>
    1b52:	92 bd       	out	0x22, r25	; 34
    1b54:	81 bd       	out	0x21, r24	; 33
    1b56:	f8 9a       	sbi	0x1f, 0	; 31
    1b58:	99 27       	eor	r25, r25
    1b5a:	80 b5       	in	r24, 0x20	; 32
    1b5c:	08 95       	ret

00001b5e <eeprom_write_byte>:
    1b5e:	26 2f       	mov	r18, r22

00001b60 <eeprom_write_r18>:
    1b60:	f9 99       	sbic	0x1f, 1	; 31
    1b62:	fe cf       	rjmp	.-4      	; 0x1b60 <eeprom_write_r18>
    1b64:	1f ba       	out	0x1f, r1	; 31
    1b66:	92 bd       	out	0x22, r25	; 34
    1b68:	81 bd       	out	0x21, r24	; 33
    1b6a:	20 bd       	out	0x20, r18	; 32
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	fa 9a       	sbi	0x1f, 2	; 31
    1b72:	f9 9a       	sbi	0x1f, 1	; 31
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	08 95       	ret

00001b7a <__divmodsi4>:
    1b7a:	05 2e       	mov	r0, r21
    1b7c:	97 fb       	bst	r25, 7
    1b7e:	1e f4       	brtc	.+6      	; 0x1b86 <__divmodsi4+0xc>
    1b80:	00 94       	com	r0
    1b82:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__negsi2>
    1b86:	57 fd       	sbrc	r21, 7
    1b88:	07 d0       	rcall	.+14     	; 0x1b98 <__divmodsi4_neg2>
    1b8a:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <__udivmodsi4>
    1b8e:	07 fc       	sbrc	r0, 7
    1b90:	03 d0       	rcall	.+6      	; 0x1b98 <__divmodsi4_neg2>
    1b92:	4e f4       	brtc	.+18     	; 0x1ba6 <__divmodsi4_exit>
    1b94:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__negsi2>

00001b98 <__divmodsi4_neg2>:
    1b98:	50 95       	com	r21
    1b9a:	40 95       	com	r20
    1b9c:	30 95       	com	r19
    1b9e:	21 95       	neg	r18
    1ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ba4:	5f 4f       	sbci	r21, 0xFF	; 255

00001ba6 <__divmodsi4_exit>:
    1ba6:	08 95       	ret

00001ba8 <__negsi2>:
    1ba8:	90 95       	com	r25
    1baa:	80 95       	com	r24
    1bac:	70 95       	com	r23
    1bae:	61 95       	neg	r22
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb6:	08 95       	ret

00001bb8 <__muluhisi3>:
    1bb8:	0e 94 18 0b 	call	0x1630	; 0x1630 <__umulhisi3>
    1bbc:	a5 9f       	mul	r26, r21
    1bbe:	90 0d       	add	r25, r0
    1bc0:	b4 9f       	mul	r27, r20
    1bc2:	90 0d       	add	r25, r0
    1bc4:	a4 9f       	mul	r26, r20
    1bc6:	80 0d       	add	r24, r0
    1bc8:	91 1d       	adc	r25, r1
    1bca:	11 24       	eor	r1, r1
    1bcc:	08 95       	ret

00001bce <__mulshisi3>:
    1bce:	b7 ff       	sbrs	r27, 7
    1bd0:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <__muluhisi3>

00001bd4 <__mulohisi3>:
    1bd4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__muluhisi3>
    1bd8:	82 1b       	sub	r24, r18
    1bda:	93 0b       	sbc	r25, r19
    1bdc:	08 95       	ret

00001bde <__udivmodsi4>:
    1bde:	a1 e2       	ldi	r26, 0x21	; 33
    1be0:	1a 2e       	mov	r1, r26
    1be2:	aa 1b       	sub	r26, r26
    1be4:	bb 1b       	sub	r27, r27
    1be6:	fd 01       	movw	r30, r26
    1be8:	0d c0       	rjmp	.+26     	; 0x1c04 <__udivmodsi4_ep>

00001bea <__udivmodsi4_loop>:
    1bea:	aa 1f       	adc	r26, r26
    1bec:	bb 1f       	adc	r27, r27
    1bee:	ee 1f       	adc	r30, r30
    1bf0:	ff 1f       	adc	r31, r31
    1bf2:	a2 17       	cp	r26, r18
    1bf4:	b3 07       	cpc	r27, r19
    1bf6:	e4 07       	cpc	r30, r20
    1bf8:	f5 07       	cpc	r31, r21
    1bfa:	20 f0       	brcs	.+8      	; 0x1c04 <__udivmodsi4_ep>
    1bfc:	a2 1b       	sub	r26, r18
    1bfe:	b3 0b       	sbc	r27, r19
    1c00:	e4 0b       	sbc	r30, r20
    1c02:	f5 0b       	sbc	r31, r21

00001c04 <__udivmodsi4_ep>:
    1c04:	66 1f       	adc	r22, r22
    1c06:	77 1f       	adc	r23, r23
    1c08:	88 1f       	adc	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	1a 94       	dec	r1
    1c0e:	69 f7       	brne	.-38     	; 0x1bea <__udivmodsi4_loop>
    1c10:	60 95       	com	r22
    1c12:	70 95       	com	r23
    1c14:	80 95       	com	r24
    1c16:	90 95       	com	r25
    1c18:	9b 01       	movw	r18, r22
    1c1a:	ac 01       	movw	r20, r24
    1c1c:	bd 01       	movw	r22, r26
    1c1e:	cf 01       	movw	r24, r30
    1c20:	08 95       	ret

00001c22 <_exit>:
    1c22:	f8 94       	cli

00001c24 <__stop_program>:
    1c24:	ff cf       	rjmp	.-2      	; 0x1c24 <__stop_program>
