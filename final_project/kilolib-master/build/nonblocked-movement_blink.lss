
build/nonblocked-movement_blink.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	b7 04       	cpc	r11, r7
      6a:	0e 05       	cpc	r16, r14
      6c:	22 05       	cpc	r18, r2
      6e:	53 05       	cpc	r21, r3
      70:	5a 05       	cpc	r21, r10
      72:	39 05       	cpc	r19, r9
      74:	5d 05       	cpc	r21, r13
      76:	bb 06       	cpc	r11, r27
      78:	ac 07       	cpc	r26, r28
      7a:	ac 07       	cpc	r26, r28
      7c:	c4 06       	cpc	r12, r20
      7e:	c7 06       	cpc	r12, r23
      80:	ca 06       	cpc	r12, r26
      82:	cc 06       	cpc	r12, r28
      84:	ce 06       	cpc	r12, r30
      86:	d0 06       	cpc	r13, r16
      88:	81 07       	cpc	r24, r17
      8a:	e2 06       	cpc	r14, r18

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec ef       	ldi	r30, 0xFC	; 252
      b8:	f6 e1       	ldi	r31, 0x16	; 22
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a2 37       	cpi	r26, 0x72	; 114
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <main>
      da:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:


uint32_t last_changed;

void setup()
{
      e2:	08 95       	ret

000000e4 <loop>:
    
}

void loop()
{
    if(kilo_ticks > (last_changed + 64))
      e4:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <kilo_ticks>
      e8:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <kilo_ticks+0x1>
      ec:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <kilo_ticks+0x2>
      f0:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <kilo_ticks+0x3>
      f4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <last_changed>
      f8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <last_changed+0x1>
      fc:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <last_changed+0x2>
     100:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <last_changed+0x3>
     104:	80 5c       	subi	r24, 0xC0	; 192
     106:	9f 4f       	sbci	r25, 0xFF	; 255
     108:	af 4f       	sbci	r26, 0xFF	; 255
     10a:	bf 4f       	sbci	r27, 0xFF	; 255
     10c:	84 17       	cp	r24, r20
     10e:	95 07       	cpc	r25, r21
     110:	a6 07       	cpc	r26, r22
     112:	b7 07       	cpc	r27, r23
     114:	d0 f4       	brcc	.+52     	; 0x14a <loop+0x66>
    {
        last_changed = kilo_ticks; // To remember the current time... I guess?
     116:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <kilo_ticks>
     11a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <kilo_ticks+0x1>
     11e:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <kilo_ticks+0x2>
     122:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <kilo_ticks+0x3>
     126:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <last_changed>
     12a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <last_changed+0x1>
     12e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <last_changed+0x2>
     132:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <last_changed+0x3>
        set_color(RGB(1,1,0));
     136:	85 e0       	ldi	r24, 0x05	; 5
     138:	0e 94 84 04 	call	0x908	; 0x908 <set_color>
        delay(100);
     13c:	84 e6       	ldi	r24, 0x64	; 100
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 a7 01 	call	0x34e	; 0x34e <delay>
        set_color(RGB(0,0,0));
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	0c 94 84 04 	jmp	0x908	; 0x908 <set_color>
     14a:	08 95       	ret

0000014c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     14c:	08 95       	ret

0000014e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	08 95       	ret

00000154 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     154:	08 95       	ret

00000156 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     156:	df 92       	push	r13
     158:	ef 92       	push	r14
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
    cli();
     164:	f8 94       	cli

    ports_off();
     166:	14 b8       	out	0x04, r1	; 4
     168:	17 b8       	out	0x07, r1	; 7
     16a:	1a b8       	out	0x0a, r1	; 10
     16c:	15 b8       	out	0x05, r1	; 5
     16e:	18 b8       	out	0x08, r1	; 8
     170:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     172:	52 9a       	sbi	0x0a, 2	; 10
     174:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     176:	14 bc       	out	0x24, r1	; 36
     178:	85 e0       	ldi	r24, 0x05	; 5
     17a:	85 bd       	out	0x25, r24	; 37
     17c:	8f ef       	ldi	r24, 0xFF	; 255
     17e:	87 bd       	out	0x27, r24	; 39
     180:	82 e0       	ldi	r24, 0x02	; 2
     182:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     186:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     18a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     18e:	2f e8       	ldi	r18, 0x8F	; 143
     190:	3b e0       	ldi	r19, 0x0B	; 11
     192:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     196:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     19a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     19e:	53 98       	cbi	0x0a, 3	; 10
     1a0:	23 98       	cbi	0x04, 3	; 4
     1a2:	91 ea       	ldi	r25, 0xA1	; 161
     1a4:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     1a8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     1ac:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     1b0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     1b4:	8b e0       	ldi	r24, 0x0B	; 11
     1b6:	80 bf       	out	0x30, r24	; 48
     1b8:	83 e0       	ldi	r24, 0x03	; 3
     1ba:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     1be:	86 e0       	ldi	r24, 0x06	; 6
     1c0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     1c4:	83 e8       	ldi	r24, 0x83	; 131
     1c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1ce:	80 64       	ori	r24, 0x40	; 64
     1d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1d8:	86 fd       	sbrc	r24, 6
     1da:	fc cf       	rjmp	.-8      	; 0x1d4 <kilo_init+0x7e>
    adc_trigger_high_gain();
     1dc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     1e0:	83 ea       	ldi	r24, 0xA3	; 163
     1e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
    if (osccal != 0xFF)
     1f4:	8f 3f       	cpi	r24, 0xFF	; 255
     1f6:	11 f0       	breq	.+4      	; 0x1fc <kilo_init+0xa6>
        OSCCAL = osccal;
     1f8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     1fc:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <rx_busy>
    rx_leadingbit = 1;
     200:	c1 e0       	ldi	r28, 0x01	; 1
     202:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <rx_leadingbit>
    rx_leadingbyte = 1;
     206:	c0 93 58 01 	sts	0x0158, r28	; 0x800158 <rx_leadingbyte>
    rx_byteindex = 0;
     20a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <rx_byteindex>
    rx_bytevalue = 0;
     20e:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     212:	80 e9       	ldi	r24, 0x90	; 144
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
     21a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     21e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <tx_mask>
     222:	88 73       	andi	r24, 0x38	; 56
     224:	11 f0       	breq	.+4      	; 0x22a <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     226:	c0 93 31 01 	sts	0x0131, r28	; 0x800131 <tx_mask>
    tx_clock = 0;
     22a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <tx_clock+0x1>
     22e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <tx_clock>
    tx_increment = 255;
     232:	8f ef       	ldi	r24, 0xFF	; 255
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tx_increment+0x1>
     23a:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tx_increment>
    kilo_ticks = 0;
     23e:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <kilo_ticks>
     242:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <kilo_ticks+0x1>
     246:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <kilo_ticks+0x2>
     24a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <kilo_ticks+0x3>
    kilo_state = IDLE;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    kilo_tx_period = 3906;
     254:	82 e4       	ldi	r24, 0x42	; 66
     256:	9f e0       	ldi	r25, 0x0F	; 15
     258:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <kilo_tx_period+0x1>
     25c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     260:	80 eb       	ldi	r24, 0xB0	; 176
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
     268:	c8 2f       	mov	r28, r24
     26a:	81 eb       	ldi	r24, 0xB1	; 177
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
     272:	2c 2f       	mov	r18, r28
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	38 2b       	or	r19, r24
     278:	30 93 6e 01 	sts	0x016E, r19	; 0x80016e <kilo_uid+0x1>
     27c:	20 93 6d 01 	sts	0x016D, r18	; 0x80016d <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     280:	85 e0       	ldi	r24, 0x05	; 5
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
     288:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     28c:	89 e0       	ldi	r24, 0x09	; 9
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
     294:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     298:	8c e0       	ldi	r24, 0x0C	; 12
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
     2a0:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     2a4:	84 e1       	ldi	r24, 0x14	; 20
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
     2ac:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <kilo_straight_right>
     2b0:	0c e3       	ldi	r16, 0x3C	; 60
     2b2:	11 e0       	ldi	r17, 0x01	; 1
     2b4:	55 e1       	ldi	r21, 0x15	; 21
     2b6:	e5 2e       	mov	r14, r21
     2b8:	51 e0       	ldi	r21, 0x01	; 1
     2ba:	f5 2e       	mov	r15, r21
     2bc:	c0 e2       	ldi	r28, 0x20	; 32
     2be:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2c0:	ce 01       	movw	r24, r28
     2c2:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
     2c6:	d8 2e       	mov	r13, r24
     2c8:	ce 01       	movw	r24, r28
     2ca:	01 96       	adiw	r24, 0x01	; 1
     2cc:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
     2d0:	2d 2d       	mov	r18, r13
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	32 2f       	mov	r19, r18
     2d6:	22 27       	eor	r18, r18
     2d8:	28 2b       	or	r18, r24
     2da:	f8 01       	movw	r30, r16
     2dc:	21 93       	st	Z+, r18
     2de:	31 93       	st	Z+, r19
     2e0:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2e2:	ce 01       	movw	r24, r28
     2e4:	c0 96       	adiw	r24, 0x30	; 48
     2e6:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
     2ea:	d8 2e       	mov	r13, r24
     2ec:	ce 01       	movw	r24, r28
     2ee:	c1 96       	adiw	r24, 0x31	; 49
     2f0:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_read_byte>
     2f4:	2d 2d       	mov	r18, r13
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	32 2f       	mov	r19, r18
     2fa:	22 27       	eor	r18, r18
     2fc:	28 2b       	or	r18, r24
     2fe:	f7 01       	movw	r30, r14
     300:	21 93       	st	Z+, r18
     302:	31 93       	st	Z+, r19
     304:	7f 01       	movw	r14, r30
     306:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     308:	cc 33       	cpi	r28, 0x3C	; 60
     30a:	d1 05       	cpc	r29, r1
     30c:	c9 f6       	brne	.-78     	; 0x2c0 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     30e:	78 94       	sei
}
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	08 95       	ret

00000320 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     320:	1f 92       	push	r1
     322:	0f 92       	push	r0
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	0f 92       	push	r0
     328:	11 24       	eor	r1, r1
     32a:	8f 93       	push	r24
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	f8 94       	cli
     330:	a8 95       	wdr
     332:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     336:	88 61       	ori	r24, 0x18	; 24
     338:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     33c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     340:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     342:	8f 91       	pop	r24
     344:	0f 90       	pop	r0
     346:	0f be       	out	0x3f, r0	; 63
     348:	0f 90       	pop	r0
     34a:	1f 90       	pop	r1
     34c:	18 95       	reti

0000034e <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     34e:	00 97       	sbiw	r24, 0x00	; 0
     350:	41 f0       	breq	.+16     	; 0x362 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     352:	ef ec       	ldi	r30, 0xCF	; 207
     354:	f7 e0       	ldi	r31, 0x07	; 7
     356:	31 97       	sbiw	r30, 0x01	; 1
     358:	f1 f7       	brne	.-4      	; 0x356 <delay+0x8>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <delay+0xe>
     35c:	00 00       	nop
        _delay_ms(1);
        ms--;
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f6 cf       	rjmp	.-20     	; 0x34e <delay>
    }
}
     362:	08 95       	ret

00000364 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     364:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     368:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     36c:	08 95       	ret

0000036e <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     36e:	8f ef       	ldi	r24, 0xFF	; 255
     370:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     374:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     378:	8f e0       	ldi	r24, 0x0F	; 15
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <delay>

00000380 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     380:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <rx_busy>
     384:	81 11       	cpse	r24, r1
     386:	1e c0       	rjmp	.+60     	; 0x3c4 <get_ambientlight+0x44>
        cli();
     388:	f8 94       	cli
        adc_setup_conversion(7);
     38a:	87 e0       	ldi	r24, 0x07	; 7
     38c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     390:	83 e8       	ldi	r24, 0x83	; 131
     392:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     396:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     39a:	80 64       	ori	r24, 0x40	; 64
     39c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     3a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3a4:	86 fd       	sbrc	r24, 6
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     3a8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3ac:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3b0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3b4:	23 ea       	ldi	r18, 0xA3	; 163
     3b6:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     3c0:	78 94       	sei
     3c2:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     3c4:	8f ef       	ldi	r24, 0xFF	; 255
     3c6:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     3c8:	08 95       	ret

000003ca <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     3ca:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <rx_busy>
     3ce:	81 11       	cpse	r24, r1
     3d0:	1e c0       	rjmp	.+60     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
        cli();
     3d2:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     3d4:	88 ec       	ldi	r24, 0xC8	; 200
     3d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     3da:	87 e8       	ldi	r24, 0x87	; 135
     3dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     3e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3e4:	80 64       	ori	r24, 0x40	; 64
     3e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     3ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3ee:	86 fd       	sbrc	r24, 6
     3f0:	fc cf       	rjmp	.-8      	; 0x3ea <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     3f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3fa:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3fe:	23 ea       	ldi	r18, 0xA3	; 163
     400:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     40a:	78 94       	sei
     40c:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     40e:	8f ef       	ldi	r24, 0xFF	; 255
     410:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     412:	08 95       	ret

00000414 <rand_hard>:

uint8_t rand_hard() {
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     41c:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     41e:	e3 ea       	ldi	r30, 0xA3	; 163
     420:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     422:	c6 e0       	ldi	r28, 0x06	; 6
     424:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     426:	a1 e0       	ldi	r26, 0x01	; 1
     428:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     42a:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     42c:	f8 94       	cli
            adc_setup_conversion(6);
     42e:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     432:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     436:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     43a:	40 64       	ori	r20, 0x40	; 64
     43c:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     440:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     444:	46 fd       	sbrc	r20, 6
     446:	fc cf       	rjmp	.-8      	; 0x440 <rand_hard+0x2c>
            a = ADCW&0x1;
     448:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     44c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     450:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     452:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     456:	50 64       	ori	r21, 0x40	; 64
     458:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     45c:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     460:	56 fd       	sbrc	r21, 6
     462:	fc cf       	rjmp	.-8      	; 0x45c <rand_hard+0x48>
            b = ADCW&0x1;
     464:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     468:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     46c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     470:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     474:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     478:	78 94       	sei
            tries++;
     47a:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     47c:	61 70       	andi	r22, 0x01	; 1
     47e:	46 17       	cp	r20, r22
     480:	51 f0       	breq	.+20     	; 0x496 <rand_hard+0x82>
        if (a)
     482:	44 23       	and	r20, r20
     484:	59 f0       	breq	.+22     	; 0x49c <rand_hard+0x88>
            num |= (1<<i);
     486:	ad 01       	movw	r20, r26
     488:	02 2e       	mov	r0, r18
     48a:	01 c0       	rjmp	.+2      	; 0x48e <rand_hard+0x7a>
     48c:	44 0f       	add	r20, r20
     48e:	0a 94       	dec	r0
     490:	ea f7       	brpl	.-6      	; 0x48c <rand_hard+0x78>
     492:	84 2b       	or	r24, r20
     494:	03 c0       	rjmp	.+6      	; 0x49c <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     496:	90 38       	cpi	r25, 0x80	; 128
     498:	49 f6       	brne	.-110    	; 0x42c <rand_hard+0x18>
     49a:	f3 cf       	rjmp	.-26     	; 0x482 <rand_hard+0x6e>
     49c:	2f 5f       	subi	r18, 0xFF	; 255
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     4a0:	28 30       	cpi	r18, 0x08	; 8
     4a2:	31 05       	cpc	r19, r1
     4a4:	09 f0       	breq	.+2      	; 0x4a8 <rand_hard+0x94>
     4a6:	c1 cf       	rjmp	.-126    	; 0x42a <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     4ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4b2:	98 e0       	ldi	r25, 0x08	; 8
     4b4:	89 9f       	mul	r24, r25
     4b6:	90 01       	movw	r18, r0
     4b8:	11 24       	eor	r1, r1
     4ba:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     4bc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	89 0f       	add	r24, r25
     4c4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
     4c8:	82 2f       	mov	r24, r18
     4ca:	82 95       	swap	r24
     4cc:	86 95       	lsr	r24
     4ce:	87 70       	andi	r24, 0x07	; 7
     4d0:	28 27       	eor	r18, r24
     4d2:	96 95       	lsr	r25
     4d4:	96 95       	lsr	r25
     4d6:	82 2f       	mov	r24, r18
     4d8:	89 27       	eor	r24, r25
     4da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     4de:	08 95       	ret

000004e0 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     4e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     4e4:	08 95       	ret

000004e6 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     4e6:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <rx_busy>
     4ea:	81 11       	cpse	r24, r1
     4ec:	16 c0       	rjmp	.+44     	; 0x51a <get_voltage+0x34>
        cli();                                    // disable interrupts
     4ee:	f8 94       	cli
        adc_setup_conversion(6);
     4f0:	86 e0       	ldi	r24, 0x06	; 6
     4f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4f6:	83 e8       	ldi	r24, 0x83	; 131
     4f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     4fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     500:	80 64       	ori	r24, 0x40	; 64
     502:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     506:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     50a:	86 fd       	sbrc	r24, 6
     50c:	fc cf       	rjmp	.-8      	; 0x506 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     50e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     512:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     516:	78 94       	sei
     518:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     51e:	08 95       	ret

00000520 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     520:	2f 92       	push	r2
     522:	3f 92       	push	r3
     524:	4f 92       	push	r4
     526:	5f 92       	push	r5
     528:	6f 92       	push	r6
     52a:	7f 92       	push	r7
     52c:	8f 92       	push	r8
     52e:	9f 92       	push	r9
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     546:	fc 01       	movw	r30, r24
     548:	c2 81       	ldd	r28, Z+2	; 0x02
     54a:	d3 81       	ldd	r29, Z+3	; 0x03
     54c:	c4 38       	cpi	r28, 0x84	; 132
     54e:	f3 e0       	ldi	r31, 0x03	; 3
     550:	df 07       	cpc	r29, r31
     552:	0c f0       	brlt	.+2      	; 0x556 <estimate_distance+0x36>
     554:	7e c0       	rjmp	.+252    	; 0x652 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     556:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_irhigh>
     55a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <kilo_irhigh+0x1>
     55e:	8c 17       	cp	r24, r28
     560:	9d 07       	cpc	r25, r29
     562:	08 f4       	brcc	.+2      	; 0x566 <estimate_distance+0x46>
     564:	6f c0       	rjmp	.+222    	; 0x644 <estimate_distance+0x124>
     566:	e7 e1       	ldi	r30, 0x17	; 23
     568:	f1 e0       	ldi	r31, 0x01	; 1
     56a:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     56c:	81 91       	ld	r24, Z+
     56e:	91 91       	ld	r25, Z+
     570:	8c 17       	cp	r24, r28
     572:	9d 07       	cpc	r25, r29
     574:	20 f0       	brcs	.+8      	; 0x57e <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     576:	1f 5f       	subi	r17, 0xFF	; 255
     578:	1e 30       	cpi	r17, 0x0E	; 14
     57a:	c1 f7       	brne	.-16     	; 0x56c <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     57c:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     57e:	81 2f       	mov	r24, r17
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	fc 01       	movw	r30, r24
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	eb 5e       	subi	r30, 0xEB	; 235
     58a:	fe 4f       	sbci	r31, 0xFE	; 254
     58c:	e0 80       	ld	r14, Z
     58e:	f1 80       	ldd	r15, Z+1	; 0x01
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	fc 01       	movw	r30, r24
     596:	ed 5e       	subi	r30, 0xED	; 237
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	80 81       	ld	r24, Z
     59c:	91 81       	ldd	r25, Z+1	; 0x01
     59e:	b7 01       	movw	r22, r14
     5a0:	68 1b       	sub	r22, r24
     5a2:	79 0b       	sbc	r23, r25
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0e 94 bb 09 	call	0x1376	; 0x1376 <__floatunsisf>
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	0e 94 a7 08 	call	0x114e	; 0x114e <__addsf3>
     5b4:	4b 01       	movw	r8, r22
     5b6:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     5b8:	be 01       	movw	r22, r28
     5ba:	0d 2e       	mov	r0, r29
     5bc:	00 0c       	add	r0, r0
     5be:	88 0b       	sbc	r24, r24
     5c0:	99 0b       	sbc	r25, r25
     5c2:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatsisf>
     5c6:	2b 01       	movw	r4, r22
     5c8:	3c 01       	movw	r6, r24
     5ca:	b7 01       	movw	r22, r14
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 bb 09 	call	0x1376	; 0x1376 <__floatunsisf>
     5d4:	6b 01       	movw	r12, r22
     5d6:	7c 01       	movw	r14, r24
     5d8:	61 2f       	mov	r22, r17
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 bb 09 	call	0x1376	; 0x1376 <__floatunsisf>
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	5f e3       	ldi	r21, 0x3F	; 63
     5ec:	0e 94 49 0a 	call	0x1492	; 0x1492 <__mulsf3>
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	a9 01       	movw	r20, r18
     5f6:	0e 94 a7 08 	call	0x114e	; 0x114e <__addsf3>
     5fa:	a5 01       	movw	r20, r10
     5fc:	94 01       	movw	r18, r8
     5fe:	0e 94 49 0a 	call	0x1492	; 0x1492 <__mulsf3>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	c7 01       	movw	r24, r14
     608:	b6 01       	movw	r22, r12
     60a:	0e 94 a6 08 	call	0x114c	; 0x114c <__subsf3>
     60e:	9b 01       	movw	r18, r22
     610:	ac 01       	movw	r20, r24
     612:	c3 01       	movw	r24, r6
     614:	b2 01       	movw	r22, r4
     616:	0e 94 a6 08 	call	0x114c	; 0x114c <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e2       	ldi	r20, 0x20	; 32
     620:	51 e4       	ldi	r21, 0x41	; 65
     622:	0e 94 49 0a 	call	0x1492	; 0x1492 <__mulsf3>
     626:	0e 94 85 09 	call	0x130a	; 0x130a <__fixsfsi>
     62a:	7b 01       	movw	r14, r22
     62c:	c5 01       	movw	r24, r10
     62e:	b4 01       	movw	r22, r8
     630:	0e 94 85 09 	call	0x130a	; 0x130a <__fixsfsi>
     634:	ab 01       	movw	r20, r22
     636:	bc 01       	movw	r22, r24
     638:	c7 01       	movw	r24, r14
     63a:	ba 01       	movw	r22, r20
     63c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__divmodhi4>
     640:	16 2f       	mov	r17, r22
     642:	01 c0       	rjmp	.+2      	; 0x646 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     644:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     646:	cd 3b       	cpi	r28, 0xBD	; 189
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	d8 07       	cpc	r29, r24
     64c:	0c f4       	brge	.+2      	; 0x650 <estimate_distance+0x130>
     64e:	ca c0       	rjmp	.+404    	; 0x7e4 <estimate_distance+0x2c4>
     650:	01 c0       	rjmp	.+2      	; 0x654 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     652:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     654:	f1 01       	movw	r30, r2
     656:	c0 80       	ld	r12, Z
     658:	d1 80       	ldd	r13, Z+1	; 0x01
     65a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <kilo_irlow>
     65e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <kilo_irlow+0x1>
     662:	8c 15       	cp	r24, r12
     664:	9d 05       	cpc	r25, r13
     666:	88 f0       	brcs	.+34     	; 0x68a <estimate_distance+0x16a>
     668:	ee e3       	ldi	r30, 0x3E	; 62
     66a:	f1 e0       	ldi	r31, 0x01	; 1
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     672:	e1 90       	ld	r14, Z+
     674:	f1 90       	ld	r15, Z+
     676:	ec 14       	cp	r14, r12
     678:	fd 04       	cpc	r15, r13
     67a:	08 f4       	brcc	.+2      	; 0x67e <estimate_distance+0x15e>
     67c:	58 c0       	rjmp	.+176    	; 0x72e <estimate_distance+0x20e>
     67e:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     680:	8e 30       	cpi	r24, 0x0E	; 14
     682:	91 05       	cpc	r25, r1
     684:	a9 f7       	brne	.-22     	; 0x670 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     686:	0a e5       	ldi	r16, 0x5A	; 90
     688:	01 c0       	rjmp	.+2      	; 0x68c <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     68a:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     68c:	1f 3f       	cpi	r17, 0xFF	; 255
     68e:	09 f4       	brne	.+2      	; 0x692 <estimate_distance+0x172>
     690:	4b c0       	rjmp	.+150    	; 0x728 <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     692:	be 01       	movw	r22, r28
     694:	dd 0f       	add	r29, r29
     696:	88 0b       	sbc	r24, r24
     698:	99 0b       	sbc	r25, r25
     69a:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatsisf>
     69e:	6b 01       	movw	r12, r22
     6a0:	7c 01       	movw	r14, r24
     6a2:	61 2f       	mov	r22, r17
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 bb 09 	call	0x1376	; 0x1376 <__floatunsisf>
     6ae:	4b 01       	movw	r8, r22
     6b0:	5c 01       	movw	r10, r24
     6b2:	a7 01       	movw	r20, r14
     6b4:	96 01       	movw	r18, r12
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	81 e6       	ldi	r24, 0x61	; 97
     6bc:	94 e4       	ldi	r25, 0x44	; 68
     6be:	0e 94 a6 08 	call	0x114c	; 0x114c <__subsf3>
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
     6c6:	c5 01       	movw	r24, r10
     6c8:	b4 01       	movw	r22, r8
     6ca:	0e 94 49 0a 	call	0x1492	; 0x1492 <__mulsf3>
     6ce:	4b 01       	movw	r8, r22
     6d0:	5c 01       	movw	r10, r24
     6d2:	60 2f       	mov	r22, r16
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 bb 09 	call	0x1376	; 0x1376 <__floatunsisf>
     6de:	2b 01       	movw	r4, r22
     6e0:	3c 01       	movw	r6, r24
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	4f e2       	ldi	r20, 0x2F	; 47
     6e8:	54 e4       	ldi	r21, 0x44	; 68
     6ea:	c7 01       	movw	r24, r14
     6ec:	b6 01       	movw	r22, r12
     6ee:	0e 94 a6 08 	call	0x114c	; 0x114c <__subsf3>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	c3 01       	movw	r24, r6
     6f8:	b2 01       	movw	r22, r4
     6fa:	0e 94 49 0a 	call	0x1492	; 0x1492 <__mulsf3>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	c5 01       	movw	r24, r10
     704:	b4 01       	movw	r22, r8
     706:	0e 94 a7 08 	call	0x114e	; 0x114e <__addsf3>
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	48 e4       	ldi	r20, 0x48	; 72
     710:	53 e4       	ldi	r21, 0x43	; 67
     712:	0e 94 13 09 	call	0x1226	; 0x1226 <__divsf3>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	44 e0       	ldi	r20, 0x04	; 4
     71c:	52 e4       	ldi	r21, 0x42	; 66
     71e:	0e 94 a7 08 	call	0x114e	; 0x114e <__addsf3>
     722:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fixunssfsi>
     726:	60 c0       	rjmp	.+192    	; 0x7e8 <estimate_distance+0x2c8>
        } else {
            return 33 + dist_low;
     728:	61 e2       	ldi	r22, 0x21	; 33
     72a:	60 0f       	add	r22, r16
     72c:	5d c0       	rjmp	.+186    	; 0x7e8 <estimate_distance+0x2c8>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	fc 01       	movw	r30, r24
     734:	e6 5c       	subi	r30, 0xC6	; 198
     736:	fe 4f       	sbci	r31, 0xFE	; 254
     738:	80 81       	ld	r24, Z
     73a:	91 81       	ldd	r25, Z+1	; 0x01
     73c:	b7 01       	movw	r22, r14
     73e:	68 1b       	sub	r22, r24
     740:	79 0b       	sbc	r23, r25
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	0e 94 bb 09 	call	0x1376	; 0x1376 <__floatunsisf>
     74a:	9b 01       	movw	r18, r22
     74c:	ac 01       	movw	r20, r24
     74e:	0e 94 a7 08 	call	0x114e	; 0x114e <__addsf3>
     752:	4b 01       	movw	r8, r22
     754:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     756:	b6 01       	movw	r22, r12
     758:	dd 0c       	add	r13, r13
     75a:	88 0b       	sbc	r24, r24
     75c:	99 0b       	sbc	r25, r25
     75e:	0e 94 bd 09 	call	0x137a	; 0x137a <__floatsisf>
     762:	2b 01       	movw	r4, r22
     764:	3c 01       	movw	r6, r24
     766:	b7 01       	movw	r22, r14
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 bb 09 	call	0x1376	; 0x1376 <__floatunsisf>
     770:	6b 01       	movw	r12, r22
     772:	7c 01       	movw	r14, r24
     774:	63 2d       	mov	r22, r3
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 bb 09 	call	0x1376	; 0x1376 <__floatunsisf>
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	5f e3       	ldi	r21, 0x3F	; 63
     788:	0e 94 49 0a 	call	0x1492	; 0x1492 <__mulsf3>
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	a9 01       	movw	r20, r18
     792:	0e 94 a7 08 	call	0x114e	; 0x114e <__addsf3>
     796:	a5 01       	movw	r20, r10
     798:	94 01       	movw	r18, r8
     79a:	0e 94 49 0a 	call	0x1492	; 0x1492 <__mulsf3>
     79e:	9b 01       	movw	r18, r22
     7a0:	ac 01       	movw	r20, r24
     7a2:	c7 01       	movw	r24, r14
     7a4:	b6 01       	movw	r22, r12
     7a6:	0e 94 a6 08 	call	0x114c	; 0x114c <__subsf3>
     7aa:	9b 01       	movw	r18, r22
     7ac:	ac 01       	movw	r20, r24
     7ae:	c3 01       	movw	r24, r6
     7b0:	b2 01       	movw	r22, r4
     7b2:	0e 94 a6 08 	call	0x114c	; 0x114c <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e2       	ldi	r20, 0x20	; 32
     7bc:	51 e4       	ldi	r21, 0x41	; 65
     7be:	0e 94 49 0a 	call	0x1492	; 0x1492 <__mulsf3>
     7c2:	0e 94 85 09 	call	0x130a	; 0x130a <__fixsfsi>
     7c6:	7b 01       	movw	r14, r22
     7c8:	c5 01       	movw	r24, r10
     7ca:	b4 01       	movw	r22, r8
     7cc:	0e 94 85 09 	call	0x130a	; 0x130a <__fixsfsi>
     7d0:	ab 01       	movw	r20, r22
     7d2:	bc 01       	movw	r22, r24
     7d4:	c7 01       	movw	r24, r14
     7d6:	ba 01       	movw	r22, r20
     7d8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__divmodhi4>
     7dc:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     7de:	6f 3f       	cpi	r22, 0xFF	; 255
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <estimate_distance+0x2c4>
     7e2:	54 cf       	rjmp	.-344    	; 0x68c <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     7e4:	61 e2       	ldi	r22, 0x21	; 33
     7e6:	61 0f       	add	r22, r17
    }
}
     7e8:	86 2f       	mov	r24, r22
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	cf 90       	pop	r12
     7fa:	bf 90       	pop	r11
     7fc:	af 90       	pop	r10
     7fe:	9f 90       	pop	r9
     800:	8f 90       	pop	r8
     802:	7f 90       	pop	r7
     804:	6f 90       	pop	r6
     806:	5f 90       	pop	r5
     808:	4f 90       	pop	r4
     80a:	3f 90       	pop	r3
     80c:	2f 90       	pop	r2
     80e:	08 95       	ret

00000810 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31
    tx_clock += tx_increment;
     832:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <tx_clock>
     836:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <tx_clock+0x1>
     83a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <tx_increment>
     83e:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <tx_increment+0x1>
     842:	82 0f       	add	r24, r18
     844:	93 1f       	adc	r25, r19
     846:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <tx_clock+0x1>
     84a:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <tx_clock>
    tx_increment = 0xFF;
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tx_increment+0x1>
     856:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tx_increment>
    OCR0A = tx_increment;
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     85e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <kilo_ticks>
     862:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <kilo_ticks+0x1>
     866:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <kilo_ticks+0x2>
     86a:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <kilo_ticks+0x3>
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	a1 1d       	adc	r26, r1
     872:	b1 1d       	adc	r27, r1
     874:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <kilo_ticks>
     878:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <kilo_ticks+0x1>
     87c:	a0 93 39 01 	sts	0x0139, r26	; 0x800139 <kilo_ticks+0x2>
     880:	b0 93 3a 01 	sts	0x013A, r27	; 0x80013a <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     884:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <rx_busy>
     888:	81 11       	cpse	r24, r1
     88a:	2d c0       	rjmp	.+90     	; 0x8e6 <__vector_14+0xd6>
     88c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <kilo_tx_period>
     890:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <kilo_tx_period+0x1>
     894:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <tx_clock>
     898:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <tx_clock+0x1>
     89c:	82 17       	cp	r24, r18
     89e:	93 07       	cpc	r25, r19
     8a0:	10 f5       	brcc	.+68     	; 0x8e6 <__vector_14+0xd6>
     8a2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     8a6:	84 30       	cpi	r24, 0x04	; 4
     8a8:	f1 f4       	brne	.+60     	; 0x8e6 <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     8aa:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     8ae:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     8b2:	09 95       	icall
        if (msg) {
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	b9 f0       	breq	.+46     	; 0x8e6 <__vector_14+0xd6>
            if (message_send(msg)) {
     8b8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <message_send>
     8bc:	88 23       	and	r24, r24
     8be:	51 f0       	breq	.+20     	; 0x8d4 <__vector_14+0xc4>
                kilo_message_tx_success();
     8c0:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     8c4:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     8c8:	09 95       	icall
                tx_clock = 0;
     8ca:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <tx_clock+0x1>
     8ce:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <tx_clock>
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     8d4:	0e 94 02 0b 	call	0x1604	; 0x1604 <rand>
     8d8:	9c 01       	movw	r18, r24
     8da:	33 27       	eor	r19, r19
     8dc:	30 93 5a 01 	sts	0x015A, r19	; 0x80015a <tx_increment+0x1>
     8e0:	20 93 59 01 	sts	0x0159, r18	; 0x800159 <tx_increment>
                OCR0A = tx_increment;
     8e4:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     8e6:	ff 91       	pop	r31
     8e8:	ef 91       	pop	r30
     8ea:	bf 91       	pop	r27
     8ec:	af 91       	pop	r26
     8ee:	9f 91       	pop	r25
     8f0:	8f 91       	pop	r24
     8f2:	7f 91       	pop	r23
     8f4:	6f 91       	pop	r22
     8f6:	5f 91       	pop	r21
     8f8:	4f 91       	pop	r20
     8fa:	3f 91       	pop	r19
     8fc:	2f 91       	pop	r18
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     908:	80 ff       	sbrs	r24, 0
     90a:	02 c0       	rjmp	.+4      	; 0x910 <set_color+0x8>
        DDRD |= (1<<5);
     90c:	55 9a       	sbi	0x0a, 5	; 10
     90e:	01 c0       	rjmp	.+2      	; 0x912 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     910:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     912:	81 ff       	sbrs	r24, 1
     914:	02 c0       	rjmp	.+4      	; 0x91a <set_color+0x12>
        DDRD |= (1<<4);
     916:	54 9a       	sbi	0x0a, 4	; 10
     918:	01 c0       	rjmp	.+2      	; 0x91c <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     91a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     91c:	82 ff       	sbrs	r24, 2
     91e:	02 c0       	rjmp	.+4      	; 0x924 <set_color+0x1c>
        DDRC |= (1<<3);
     920:	3b 9a       	sbi	0x07, 3	; 7
     922:	01 c0       	rjmp	.+2      	; 0x926 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     924:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     926:	83 ff       	sbrs	r24, 3
     928:	02 c0       	rjmp	.+4      	; 0x92e <set_color+0x26>
        DDRC |= (1<<2);
     92a:	3a 9a       	sbi	0x07, 2	; 7
     92c:	01 c0       	rjmp	.+2      	; 0x930 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     92e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     930:	84 ff       	sbrs	r24, 4
     932:	02 c0       	rjmp	.+4      	; 0x938 <set_color+0x30>
        DDRC |= (1<<5);
     934:	3d 9a       	sbi	0x07, 5	; 7
     936:	01 c0       	rjmp	.+2      	; 0x93a <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     938:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     93a:	85 ff       	sbrs	r24, 5
     93c:	02 c0       	rjmp	.+4      	; 0x942 <set_color+0x3a>
        DDRC |= (1<<4);
     93e:	3c 9a       	sbi	0x07, 4	; 7
     940:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     942:	3c 98       	cbi	0x07, 4	; 7
     944:	08 95       	ret

00000946 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     946:	8c 01       	movw	r16, r24
     948:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     94a:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     94c:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     94e:	84 e0       	ldi	r24, 0x04	; 4
     950:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     952:	98 e1       	ldi	r25, 0x18	; 24
     954:	c9 2e       	mov	r12, r25
     956:	29 e2       	ldi	r18, 0x29	; 41
     958:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     95a:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <kilo_state>
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	e7 30       	cpi	r30, 0x07	; 7
     962:	f1 05       	cpc	r31, r1
     964:	d0 f7       	brcc	.-12     	; 0x95a <kilo_start+0x14>
     966:	ec 5c       	subi	r30, 0xCC	; 204
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__tablejump2__>
            case SLEEPING:
                cli();
     96e:	f8 94       	cli
                acomp_off();
     970:	80 b7       	in	r24, 0x30	; 48
     972:	87 7f       	andi	r24, 0xF7	; 247
     974:	80 bf       	out	0x30, r24	; 48
                adc_off();
     976:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     97a:	8f 77       	andi	r24, 0x7F	; 127
     97c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     980:	14 b8       	out	0x04, r1	; 4
     982:	17 b8       	out	0x07, r1	; 7
     984:	1a b8       	out	0x0a, r1	; 10
     986:	15 b8       	out	0x05, r1	; 5
     988:	18 b8       	out	0x08, r1	; 8
     98a:	1b b8       	out	0x0b, r1	; 11
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	f8 94       	cli
     990:	a8 95       	wdr
     992:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     996:	0f be       	out	0x3f, r0	; 63
     998:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     99c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     9a0:	80 64       	ori	r24, 0x40	; 64
     9a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     9a6:	83 b7       	in	r24, 0x33	; 51
     9a8:	81 7f       	andi	r24, 0xF1	; 241
     9aa:	84 60       	ori	r24, 0x04	; 4
     9ac:	83 bf       	out	0x33, r24	; 51
                cli();
     9ae:	f8 94       	cli
                sleep_enable();
     9b0:	83 b7       	in	r24, 0x33	; 51
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	83 bf       	out	0x33, r24	; 51
                sei();
     9b6:	78 94       	sei
                sleep_cpu();
     9b8:	88 95       	sleep
                sleep_disable();
     9ba:	83 b7       	in	r24, 0x33	; 51
     9bc:	8e 7f       	andi	r24, 0xFE	; 254
     9be:	83 bf       	out	0x33, r24	; 51
                sei();
     9c0:	78 94       	sei
                rx_busy = 0;
     9c2:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <rx_busy>
                ports_on();
     9c6:	52 9a       	sbi	0x0a, 2	; 10
     9c8:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     9ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9ce:	80 68       	ori	r24, 0x80	; 128
     9d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9d4:	87 e5       	ldi	r24, 0x57	; 87
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	f1 f7       	brne	.-4      	; 0x9d8 <kilo_start+0x92>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <kilo_start+0x98>
     9de:	00 00       	nop
                _delay_us(300);
                acomp_on();
     9e0:	80 b7       	in	r24, 0x30	; 48
     9e2:	88 61       	ori	r24, 0x18	; 24
     9e4:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     9e6:	8f e3       	ldi	r24, 0x3F	; 63
     9e8:	0e 94 84 04 	call	0x908	; 0x908 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ec:	ef e1       	ldi	r30, 0x1F	; 31
     9ee:	fe e4       	ldi	r31, 0x4E	; 78
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <kilo_start+0xaa>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <kilo_start+0xb0>
     9f6:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     9f8:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <rx_busy>
     9fc:	88 23       	and	r24, r24
     9fe:	09 f4       	brne	.+2      	; 0xa02 <kilo_start+0xbc>
     a00:	50 c0       	rjmp	.+160    	; 0xaa2 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     a02:	83 e0       	ldi	r24, 0x03	; 3
     a04:	0e 94 84 04 	call	0x908	; 0x908 <set_color>
     a08:	ff ef       	ldi	r31, 0xFF	; 255
     a0a:	20 e7       	ldi	r18, 0x70	; 112
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	f1 50       	subi	r31, 0x01	; 1
     a10:	20 40       	sbci	r18, 0x00	; 0
     a12:	80 40       	sbci	r24, 0x00	; 0
     a14:	e1 f7       	brne	.-8      	; 0xa0e <kilo_start+0xc8>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <kilo_start+0xd2>
     a18:	00 00       	nop
     a1a:	43 c0       	rjmp	.+134    	; 0xaa2 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     a1c:	8c e0       	ldi	r24, 0x0C	; 12
     a1e:	0e 94 84 04 	call	0x908	; 0x908 <set_color>
     a22:	ef ec       	ldi	r30, 0xCF	; 207
     a24:	f7 e0       	ldi	r31, 0x07	; 7
     a26:	31 97       	sbiw	r30, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <kilo_start+0xe0>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <kilo_start+0xe6>
     a2c:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	0e 94 84 04 	call	0x908	; 0x908 <set_color>
     a34:	ff ef       	ldi	r31, 0xFF	; 255
     a36:	21 ee       	ldi	r18, 0xE1	; 225
     a38:	84 e0       	ldi	r24, 0x04	; 4
     a3a:	f1 50       	subi	r31, 0x01	; 1
     a3c:	20 40       	sbci	r18, 0x00	; 0
     a3e:	80 40       	sbci	r24, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <kilo_start+0xf4>
     a42:	2c c0       	rjmp	.+88     	; 0xa9c <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     a44:	0e 94 73 02 	call	0x4e6	; 0x4e6 <get_voltage>
                if(voltage > 682)
     a48:	8b 3a       	cpi	r24, 0xAB	; 171
     a4a:	e2 e0       	ldi	r30, 0x02	; 2
     a4c:	9e 07       	cpc	r25, r30
     a4e:	24 f0       	brlt	.+8      	; 0xa58 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     a50:	8c e0       	ldi	r24, 0x0C	; 12
     a52:	0e 94 84 04 	call	0x908	; 0x908 <set_color>
     a56:	81 cf       	rjmp	.-254    	; 0x95a <kilo_start+0x14>
                else if(voltage > 648)
     a58:	89 38       	cpi	r24, 0x89	; 137
     a5a:	f2 e0       	ldi	r31, 0x02	; 2
     a5c:	9f 07       	cpc	r25, r31
     a5e:	14 f0       	brlt	.+4      	; 0xa64 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     a60:	80 e3       	ldi	r24, 0x30	; 48
     a62:	f7 cf       	rjmp	.-18     	; 0xa52 <kilo_start+0x10c>
                else if(voltage > 614)
     a64:	87 36       	cpi	r24, 0x67	; 103
     a66:	92 40       	sbci	r25, 0x02	; 2
     a68:	14 f0       	brlt	.+4      	; 0xa6e <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     a6a:	8f e0       	ldi	r24, 0x0F	; 15
     a6c:	f2 cf       	rjmp	.-28     	; 0xa52 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     a6e:	83 e0       	ldi	r24, 0x03	; 3
     a70:	f0 cf       	rjmp	.-32     	; 0xa52 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     a72:	48 99       	sbic	0x09, 0	; 9
     a74:	16 c0       	rjmp	.+44     	; 0xaa2 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0e 94 84 04 	call	0x908	; 0x908 <set_color>
     a7c:	8f ec       	ldi	r24, 0xCF	; 207
     a7e:	97 e0       	ldi	r25, 0x07	; 7
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <kilo_start+0x13a>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <kilo_start+0x140>
     a86:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 84 04 	call	0x908	; 0x908 <set_color>
     a8e:	9f ef       	ldi	r25, 0xFF	; 255
     a90:	e1 ee       	ldi	r30, 0xE1	; 225
     a92:	f4 e0       	ldi	r31, 0x04	; 4
     a94:	91 50       	subi	r25, 0x01	; 1
     a96:	e0 40       	sbci	r30, 0x00	; 0
     a98:	f0 40       	sbci	r31, 0x00	; 0
     a9a:	e1 f7       	brne	.-8      	; 0xa94 <kilo_start+0x14e>
     a9c:	00 c0       	rjmp	.+0      	; 0xa9e <kilo_start+0x158>
     a9e:	00 00       	nop
     aa0:	5c cf       	rjmp	.-328    	; 0x95a <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	d6 cf       	rjmp	.-84     	; 0xa52 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     aa6:	d1 11       	cpse	r29, r1
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <kilo_start+0x168>
                    setup();
     aaa:	f8 01       	movw	r30, r16
     aac:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     aae:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <kilo_state>
     ab2:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     ab4:	f7 01       	movw	r30, r14
     ab6:	09 95       	icall
                break;
     ab8:	50 cf       	rjmp	.-352    	; 0x95a <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     aba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     abe:	81 11       	cpse	r24, r1
     ac0:	07 c0       	rjmp	.+14     	; 0xad0 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ac2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ac6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     aca:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
     ace:	45 cf       	rjmp	.-374    	; 0x95a <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     ad0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     ad4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <prev_motion>
     ad8:	98 17       	cp	r25, r24
     ada:	09 f4       	brne	.+2      	; 0xade <kilo_start+0x198>
     adc:	3e cf       	rjmp	.-388    	; 0x95a <kilo_start+0x14>
                        prev_motion = cur_motion;
     ade:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     ae2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     ae6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	89 f4       	brne	.+34     	; 0xb10 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     aee:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     af2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     af6:	8f e2       	ldi	r24, 0x2F	; 47
     af8:	95 e7       	ldi	r25, 0x75	; 117
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <kilo_start+0x1b4>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <kilo_start+0x1ba>
     b00:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     b02:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b06:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b0a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b0e:	25 cf       	rjmp	.-438    	; 0x95a <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b10:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b14:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b18:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	59 f4       	brne	.+22     	; 0xb36 <kilo_start+0x1f0>
     b20:	ef e2       	ldi	r30, 0x2F	; 47
     b22:	f5 e7       	ldi	r31, 0x75	; 117
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <kilo_start+0x1de>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <kilo_start+0x1e4>
     b2a:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     b2c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b30:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     b34:	10 c0       	rjmp	.+32     	; 0xb56 <kilo_start+0x210>
     b36:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b3a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b3e:	8f e2       	ldi	r24, 0x2F	; 47
     b40:	95 e7       	ldi	r25, 0x75	; 117
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	f1 f7       	brne	.-4      	; 0xb42 <kilo_start+0x1fc>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <kilo_start+0x202>
     b48:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     b4a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <kilo_straight_right>
     b4e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b52:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b56:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b5a:	ff ce       	rjmp	.-514    	; 0x95a <kilo_start+0x14>

00000b5c <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	8f 93       	push	r24
     b68:	9f 93       	push	r25
    rx_timer_off();
     b6a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     b6e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     b72:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <rx_leadingbit>
    rx_leadingbyte = 1;
     b7c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <rx_leadingbyte>
    rx_busy = 0;
     b80:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <rx_busy>
    adc_trigger_high_gain();
     b84:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     b88:	93 ea       	ldi	r25, 0xA3	; 163
     b8a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b8e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	0f 90       	pop	r0
     b9c:	1f 90       	pop	r1
     b9e:	18 95       	reti

00000ba0 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	2f 93       	push	r18
     bb0:	3f 93       	push	r19
     bb2:	4f 93       	push	r20
     bb4:	5f 93       	push	r21
     bb6:	6f 93       	push	r22
     bb8:	7f 93       	push	r23
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     bc6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     bca:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     bce:	41 e0       	ldi	r20, 0x01	; 1
     bd0:	40 93 3b 01 	sts	0x013B, r20	; 0x80013b <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     bd4:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <rx_leadingbit>
     bd8:	88 23       	and	r24, r24
     bda:	21 f1       	breq	.+72     	; 0xc24 <__vector_23+0x84>
        rx_timer_on();
     bdc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     be0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     be4:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     be8:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <rx_bytevalue>
        rx_leadingbit = 0;
     bec:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <rx_leadingbit>
        if (rx_leadingbyte) {
     bf0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <rx_leadingbyte>
     bf4:	88 23       	and	r24, r24
     bf6:	09 f4       	brne	.+2      	; 0xbfa <__vector_23+0x5a>
     bf8:	af c1       	rjmp	.+862    	; 0xf58 <__vector_23+0x3b8>
            adc_finish_conversion();
     bfa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bfe:	86 fd       	sbrc	r24, 6
     c00:	fc cf       	rjmp	.-8      	; 0xbfa <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     c02:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c06:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c0a:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <rx_dist+0x3>
     c0e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <rx_dist+0x2>
            adc_trigger_low_gain();
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c18:	93 ea       	ldi	r25, 0xA3	; 163
     c1a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c1e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c22:	9a c1       	rjmp	.+820    	; 0xf58 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     c24:	c9 01       	movw	r24, r18
     c26:	87 58       	subi	r24, 0x87	; 135
     c28:	91 09       	sbc	r25, r1
     c2a:	84 37       	cpi	r24, 0x74	; 116
     c2c:	99 40       	sbci	r25, 0x09	; 9
     c2e:	a0 f0       	brcs	.+40     	; 0xc58 <__vector_23+0xb8>
            rx_timer_off();
     c30:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c34:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c38:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     c3c:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <rx_leadingbit>
            rx_leadingbyte = 1;
     c40:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <rx_leadingbyte>
            rx_busy = 0;
     c44:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <rx_busy>
            adc_trigger_high_gain();
     c48:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c4c:	83 ea       	ldi	r24, 0xA3	; 163
     c4e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c52:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c56:	80 c1       	rjmp	.+768    	; 0xf58 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     c58:	26 58       	subi	r18, 0x86	; 134
     c5a:	31 09       	sbc	r19, r1
     c5c:	a4 ef       	ldi	r26, 0xF4	; 244
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	0e 94 83 08 	call	0x1106	; 0x1106 <__umulhisi3>
     c64:	8c 01       	movw	r16, r24
     c66:	22 27       	eor	r18, r18
     c68:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     c6a:	08 30       	cpi	r16, 0x08	; 8
     c6c:	60 f4       	brcc	.+24     	; 0xc86 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <__vector_23+0xd6>
     c74:	88 0f       	add	r24, r24
     c76:	0a 95       	dec	r16
     c78:	ea f7       	brpl	.-6      	; 0xc74 <__vector_23+0xd4>
     c7a:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <rx_bytevalue>
     c7e:	89 2b       	or	r24, r25
     c80:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <rx_bytevalue>
     c84:	69 c1       	rjmp	.+722    	; 0xf58 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     c86:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <rx_leadingbit>
                if (rx_leadingbyte) {
     c8a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <rx_leadingbyte>
     c8e:	88 23       	and	r24, r24
     c90:	41 f1       	breq	.+80     	; 0xce2 <__vector_23+0x142>
                    adc_finish_conversion();
     c92:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c96:	86 fd       	sbrc	r24, 6
     c98:	fc cf       	rjmp	.-8      	; 0xc92 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     c9a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c9e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     ca2:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <rx_dist+0x1>
     ca6:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <rx_dist>
                    adc_trigger_high_gain();
     caa:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cae:	83 ea       	ldi	r24, 0xA3	; 163
     cb0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     cba:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <rx_bytevalue>
     cbe:	99 23       	and	r25, r25
     cc0:	59 f0       	breq	.+22     	; 0xcd8 <__vector_23+0x138>
                        rx_timer_off();
     cc2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     cc6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     cce:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <rx_leadingbyte>
                        rx_busy = 0;
     cd2:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <rx_busy>
     cd6:	40 c1       	rjmp	.+640    	; 0xf58 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     cd8:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <rx_leadingbyte>
                        rx_byteindex = 0;
     cdc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <rx_byteindex>
     ce0:	3b c1       	rjmp	.+630    	; 0xf58 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     ce2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rx_byteindex>
     ce6:	e8 2f       	mov	r30, r24
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	e2 5a       	subi	r30, 0xA2	; 162
     cec:	fe 4f       	sbci	r31, 0xFE	; 254
     cee:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <rx_bytevalue>
     cf2:	90 83       	st	Z, r25
                    rx_byteindex++;
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     cfa:	8c 30       	cpi	r24, 0x0C	; 12
     cfc:	09 f0       	breq	.+2      	; 0xd00 <__vector_23+0x160>
     cfe:	2c c1       	rjmp	.+600    	; 0xf58 <__vector_23+0x3b8>
                        rx_timer_off();
     d00:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d04:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d08:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d0c:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <rx_leadingbyte>
                        rx_busy = 0;
     d10:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     d14:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <rx_msg+0xa>
     d18:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <rx_msg+0xb>
     d1c:	8e e5       	ldi	r24, 0x5E	; 94
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e 94 bf 07 	call	0xf7e	; 0xf7e <message_crc>
     d24:	08 17       	cp	r16, r24
     d26:	19 07       	cpc	r17, r25
     d28:	09 f0       	breq	.+2      	; 0xd2c <__vector_23+0x18c>
     d2a:	16 c1       	rjmp	.+556    	; 0xf58 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     d2c:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <rx_msg+0x9>
     d30:	e7 fd       	sbrc	r30, 7
     d32:	0a c0       	rjmp	.+20     	; 0xd48 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     d34:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     d38:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     d3c:	63 e3       	ldi	r22, 0x33	; 51
     d3e:	71 e0       	ldi	r23, 0x01	; 1
     d40:	8e e5       	ldi	r24, 0x5E	; 94
     d42:	91 e0       	ldi	r25, 0x01	; 1
     d44:	09 95       	icall
     d46:	08 c1       	rjmp	.+528    	; 0xf58 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     d48:	88 e7       	ldi	r24, 0x78	; 120
     d4a:	8e 0f       	add	r24, r30
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	30 f0       	brcs	.+12     	; 0xd5c <__vector_23+0x1bc>
        motors_off();
     d50:	53 98       	cbi	0x0a, 3	; 10
     d52:	23 98       	cbi	0x04, 3	; 4
     d54:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d58:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     d5c:	8e 2f       	mov	r24, r30
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	fc 01       	movw	r30, r24
     d62:	e0 58       	subi	r30, 0x80	; 128
     d64:	f1 09       	sbc	r31, r1
     d66:	eb 30       	cpi	r30, 0x0B	; 11
     d68:	f1 05       	cpc	r31, r1
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <__vector_23+0x1ce>
     d6c:	f5 c0       	rjmp	.+490    	; 0xf58 <__vector_23+0x3b8>
     d6e:	e5 5c       	subi	r30, 0xC5	; 197
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__tablejump2__>
        case BOOT:
            tx_timer_off();
     d76:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d7a:	8d 7f       	andi	r24, 0xFD	; 253
     d7c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d80:	16 bc       	out	0x26, r1	; 38
            bootload();
     d82:	e0 e0       	ldi	r30, 0x00	; 0
     d84:	f0 e7       	ldi	r31, 0x70	; 112
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     d88:	e0 e0       	ldi	r30, 0x00	; 0
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     d8e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <kilo_state>
     d92:	e2 c0       	rjmp	.+452    	; 0xf58 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	b2 c0       	rjmp	.+356    	; 0xefc <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     d98:	85 e0       	ldi	r24, 0x05	; 5
     d9a:	b0 c0       	rjmp	.+352    	; 0xefc <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	ae c0       	rjmp	.+348    	; 0xefc <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     da0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     da4:	83 30       	cpi	r24, 0x03	; 3
     da6:	09 f4       	brne	.+2      	; 0xdaa <__vector_23+0x20a>
     da8:	d7 c0       	rjmp	.+430    	; 0xf58 <__vector_23+0x3b8>
     daa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     dae:	84 30       	cpi	r24, 0x04	; 4
     db0:	09 f4       	brne	.+2      	; 0xdb4 <__vector_23+0x214>
     db2:	d2 c0       	rjmp	.+420    	; 0xf58 <__vector_23+0x3b8>
                motors_on();
     db4:	53 9a       	sbi	0x0a, 3	; 10
     db6:	23 9a       	sbi	0x04, 3	; 4
     db8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     dbc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	9c c0       	rjmp	.+312    	; 0xefc <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     dc4:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_msg>
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	09 f4       	brne	.+2      	; 0xdce <__vector_23+0x22e>
     dcc:	4b c0       	rjmp	.+150    	; 0xe64 <__vector_23+0x2c4>
     dce:	80 f4       	brcc	.+32     	; 0xdf0 <__vector_23+0x250>
     dd0:	88 23       	and	r24, r24
     dd2:	a9 f0       	breq	.+42     	; 0xdfe <__vector_23+0x25e>
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	09 f0       	breq	.+2      	; 0xdda <__vector_23+0x23a>
     dd8:	82 c0       	rjmp	.+260    	; 0xede <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     dda:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_msg+0x1>
     dde:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <rx_msg+0x2>
     de2:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <kilo_uid+0x1>
     de6:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_uid>
                    cur_motion = MOVE_STOP;
     dea:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
     dee:	77 c0       	rjmp	.+238    	; 0xede <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     df0:	83 30       	cpi	r24, 0x03	; 3
     df2:	09 f4       	brne	.+2      	; 0xdf6 <__vector_23+0x256>
     df4:	49 c0       	rjmp	.+146    	; 0xe88 <__vector_23+0x2e8>
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	09 f4       	brne	.+2      	; 0xdfc <__vector_23+0x25c>
     dfa:	58 c0       	rjmp	.+176    	; 0xeac <__vector_23+0x30c>
     dfc:	70 c0       	rjmp	.+224    	; 0xede <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     dfe:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     e02:	86 30       	cpi	r24, 0x06	; 6
     e04:	09 f0       	breq	.+2      	; 0xe08 <__vector_23+0x268>
     e06:	6b c0       	rjmp	.+214    	; 0xede <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     e08:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <kilo_uid>
     e0c:	80 eb       	ldi	r24, 0xB0	; 176
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     e14:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <kilo_uid+0x1>
     e18:	81 eb       	ldi	r24, 0xB1	; 177
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     e20:	60 91 71 01 	lds	r22, 0x0171	; 0x800171 <kilo_turn_left>
     e24:	85 e0       	ldi	r24, 0x05	; 5
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     e2c:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <kilo_turn_right>
     e30:	89 e0       	ldi	r24, 0x09	; 9
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     e38:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <kilo_straight_left>
     e3c:	8c e0       	ldi	r24, 0x0C	; 12
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     e44:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <kilo_straight_right>
     e48:	84 e1       	ldi	r24, 0x14	; 20
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeprom_write_byte>
                        motors_off();
     e50:	53 98       	cbi	0x0a, 3	; 10
     e52:	23 98       	cbi	0x04, 3	; 4
     e54:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e58:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
     e62:	3d c0       	rjmp	.+122    	; 0xede <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     e64:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     e68:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <rx_msg+0x3>
     e6c:	91 30       	cpi	r25, 0x01	; 1
     e6e:	21 f4       	brne	.+8      	; 0xe78 <__vector_23+0x2d8>
     e70:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <kilo_turn_left>
     e74:	89 17       	cp	r24, r25
     e76:	99 f1       	breq	.+102    	; 0xede <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e78:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_LEFT;
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     e82:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <kilo_turn_left>
     e86:	2b c0       	rjmp	.+86     	; 0xede <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     e88:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     e8c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_msg+0x4>
     e90:	92 30       	cpi	r25, 0x02	; 2
     e92:	21 f4       	brne	.+8      	; 0xe9c <__vector_23+0x2fc>
     e94:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <kilo_turn_right>
     e98:	89 17       	cp	r24, r25
     e9a:	09 f1       	breq	.+66     	; 0xede <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e9c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_RIGHT;
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     ea6:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <kilo_turn_right>
     eaa:	19 c0       	rjmp	.+50     	; 0xede <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     eac:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <cur_motion>
     eb0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rx_msg+0x6>
     eb4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <rx_msg+0x5>
     eb8:	23 30       	cpi	r18, 0x03	; 3
     eba:	41 f4       	brne	.+16     	; 0xecc <__vector_23+0x32c>
     ebc:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <kilo_straight_right>
     ec0:	82 13       	cpse	r24, r18
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <__vector_23+0x32c>
     ec4:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <kilo_straight_left>
     ec8:	92 17       	cp	r25, r18
     eca:	49 f0       	breq	.+18     	; 0xede <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     ecc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     ed0:	23 e0       	ldi	r18, 0x03	; 3
     ed2:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     ed6:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     eda:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     ede:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_msg>
     ee2:	88 23       	and	r24, r24
     ee4:	c9 f1       	breq	.+114    	; 0xf58 <__vector_23+0x3b8>
     ee6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     eea:	86 30       	cpi	r24, 0x06	; 6
     eec:	a9 f1       	breq	.+106    	; 0xf58 <__vector_23+0x3b8>
                motors_on();
     eee:	53 9a       	sbi	0x0a, 3	; 10
     ef0:	23 9a       	sbi	0x04, 3	; 4
     ef2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ef6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     efa:	86 e0       	ldi	r24, 0x06	; 6
     efc:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
     f00:	2b c0       	rjmp	.+86     	; 0xf58 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     f02:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     f06:	86 30       	cpi	r24, 0x06	; 6
     f08:	81 f0       	breq	.+32     	; 0xf2a <__vector_23+0x38a>
                motors_on();
     f0a:	53 9a       	sbi	0x0a, 3	; 10
     f0c:	23 9a       	sbi	0x04, 3	; 4
     f0e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f12:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	0e 94 84 04 	call	0x908	; 0x908 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     f1c:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
     f20:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                kilo_state = MOVING;
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	00 90 5e 01 	lds	r0, 0x015E	; 0x80015e <rx_msg>
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <__vector_23+0x398>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <__vector_23+0x394>
     f3c:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <kilo_uid>
     f40:	30 91 6e 01 	lds	r19, 0x016E	; 0x80016e <kilo_uid+0x1>
     f44:	82 23       	and	r24, r18
     f46:	93 23       	and	r25, r19
     f48:	89 2b       	or	r24, r25
     f4a:	21 f0       	breq	.+8      	; 0xf54 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cur_motion>
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     f54:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
                    }
                }
            }
        }
    }
}
     f58:	ff 91       	pop	r31
     f5a:	ef 91       	pop	r30
     f5c:	bf 91       	pop	r27
     f5e:	af 91       	pop	r26
     f60:	9f 91       	pop	r25
     f62:	8f 91       	pop	r24
     f64:	7f 91       	pop	r23
     f66:	6f 91       	pop	r22
     f68:	5f 91       	pop	r21
     f6a:	4f 91       	pop	r20
     f6c:	3f 91       	pop	r19
     f6e:	2f 91       	pop	r18
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     f7e:	fc 01       	movw	r30, r24
     f80:	9c 01       	movw	r18, r24
     f82:	26 5f       	subi	r18, 0xF6	; 246
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     f86:	8f ef       	ldi	r24, 0xFF	; 255
     f88:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     f8a:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     f8c:	84 27       	eor	r24, r20
     f8e:	08 2e       	mov	r0, r24
     f90:	82 95       	swap	r24
     f92:	80 7f       	andi	r24, 0xF0	; 240
     f94:	80 25       	eor	r24, r0
     f96:	09 2e       	mov	r0, r25
     f98:	98 2f       	mov	r25, r24
     f9a:	82 95       	swap	r24
     f9c:	8f 70       	andi	r24, 0x0F	; 15
     f9e:	08 26       	eor	r0, r24
     fa0:	86 95       	lsr	r24
     fa2:	98 27       	eor	r25, r24
     fa4:	89 27       	eor	r24, r25
     fa6:	88 0f       	add	r24, r24
     fa8:	88 0f       	add	r24, r24
     faa:	88 0f       	add	r24, r24
     fac:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
     fae:	e2 17       	cp	r30, r18
     fb0:	f3 07       	cpc	r31, r19
     fb2:	59 f7       	brne	.-42     	; 0xf8a <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
     fb4:	08 95       	ret

00000fb6 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
     fb6:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
     fb8:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
     fba:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
     fbc:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <tx_mask>
    or tmpreg1, ddrreg
     fc0:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
     fc2:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
     fc4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     fc6:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <tx_mask>
     fca:	20 30       	cpi	r18, 0x00	; 0
     fcc:	29 f0       	breq	.+10     	; 0xfd8 <message_send+0x22>
     fce:	00 00       	nop
     fd0:	25 b1       	in	r18, 0x05	; 5
     fd2:	23 2b       	or	r18, r19
     fd4:	25 b9       	out	0x05, r18	; 5
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <message_send+0x2a>
     fd8:	00 00       	nop
     fda:	00 00       	nop
     fdc:	00 00       	nop
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <message_send+0x2a>
     fe0:	00 00       	nop
     fe2:	00 00       	nop
     fe4:	00 00       	nop
     fe6:	30 95       	com	r19
     fe8:	25 b1       	in	r18, 0x05	; 5
     fea:	23 23       	and	r18, r19
     fec:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
     fee:	2e ea       	ldi	r18, 0xAE	; 174
     ff0:	2a 95       	dec	r18
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
     ff4:	2b ee       	ldi	r18, 0xEB	; 235

00000ff6 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
     ff6:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
     ff8:	35 ff       	sbrs	r19, 5
    rjmp nocollision
     ffa:	0a c0       	rjmp	.+20     	; 0x1010 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
     ffc:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
     ffe:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <tx_mask>
    com tmpreg2
    1002:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1004:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1006:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1008:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    100a:	0f be       	out	0x3f, r0	; 63
    return 0
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	08 95       	ret

00001010 <nocollision>:
nocollision:
    nop
    1010:	00 00       	nop
    dec tmpreg1
    1012:	2a 95       	dec	r18
    brne checkcollision
    1014:	81 f7       	brne	.-32     	; 0xff6 <checkcollision>

    ldi tmpreg1, 0x01
    1016:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1018:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <tx_mask>
    101c:	20 30       	cpi	r18, 0x00	; 0
    101e:	29 f0       	breq	.+10     	; 0x102a <nocollision+0x1a>
    1020:	00 00       	nop
    1022:	25 b1       	in	r18, 0x05	; 5
    1024:	23 2b       	or	r18, r19
    1026:	25 b9       	out	0x05, r18	; 5
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <nocollision+0x22>
    102a:	00 00       	nop
    102c:	00 00       	nop
    102e:	00 00       	nop
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <nocollision+0x22>
    1032:	00 00       	nop
    1034:	00 00       	nop
    1036:	00 00       	nop
    1038:	30 95       	com	r19
    103a:	25 b1       	in	r18, 0x05	; 5
    103c:	23 23       	and	r18, r19
    103e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1040:	00 00       	nop
    1042:	24 e5       	ldi	r18, 0x54	; 84
    1044:	2a 95       	dec	r18
    1046:	f1 f7       	brne	.-4      	; 0x1044 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1048:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    104a:	8c e0       	ldi	r24, 0x0C	; 12

0000104c <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    104c:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    104e:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1050:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1052:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1054:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1056:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1058:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    105a:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    105c:	50 e0       	ldi	r21, 0x00	; 0

0000105e <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    105e:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1060:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1062:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1064:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1066:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <tx_mask>
    106a:	20 30       	cpi	r18, 0x00	; 0
    106c:	29 f0       	breq	.+10     	; 0x1078 <sendbit+0x1a>
    106e:	00 00       	nop
    1070:	25 b1       	in	r18, 0x05	; 5
    1072:	23 2b       	or	r18, r19
    1074:	25 b9       	out	0x05, r18	; 5
    1076:	04 c0       	rjmp	.+8      	; 0x1080 <sendbit+0x22>
    1078:	00 00       	nop
    107a:	00 00       	nop
    107c:	00 00       	nop
    107e:	00 c0       	rjmp	.+0      	; 0x1080 <sendbit+0x22>
    1080:	00 00       	nop
    1082:	00 00       	nop
    1084:	00 00       	nop
    1086:	30 95       	com	r19
    1088:	25 b1       	in	r18, 0x05	; 5
    108a:	23 23       	and	r18, r19
    108c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    108e:	00 00       	nop
    1090:	21 e5       	ldi	r18, 0x51	; 81
    1092:	2a 95       	dec	r18
    1094:	f1 f7       	brne	.-4      	; 0x1092 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1096:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1098:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    109a:	9a 95       	dec	r25
    brne sendbit
    109c:	01 f7       	brne	.-64     	; 0x105e <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    109e:	8a 95       	dec	r24
    brne sendbyte
    10a0:	a9 f6       	brne	.-86     	; 0x104c <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    10a2:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    10a4:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    10a6:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    10a8:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    10aa:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <tx_mask>
    com tmpreg2
    10ae:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10b0:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10b2:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10b4:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10b6:	0f be       	out	0x3f, r0	; 63
    return 1
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	08 95       	ret

000010bc <main>:
    }
}

int main()
{
    kilo_init();
    10bc:	0e 94 ab 00 	call	0x156	; 0x156 <kilo_init>
    kilo_start(setup, loop);
    10c0:	62 e7       	ldi	r22, 0x72	; 114
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	81 e7       	ldi	r24, 0x71	; 113
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 a3 04 	call	0x946	; 0x946 <kilo_start>

    return 0;
}
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	08 95       	ret

000010d2 <__divmodhi4>:
    10d2:	97 fb       	bst	r25, 7
    10d4:	07 2e       	mov	r0, r23
    10d6:	16 f4       	brtc	.+4      	; 0x10dc <__divmodhi4+0xa>
    10d8:	00 94       	com	r0
    10da:	07 d0       	rcall	.+14     	; 0x10ea <__divmodhi4_neg1>
    10dc:	77 fd       	sbrc	r23, 7
    10de:	09 d0       	rcall	.+18     	; 0x10f2 <__divmodhi4_neg2>
    10e0:	0e 94 92 08 	call	0x1124	; 0x1124 <__udivmodhi4>
    10e4:	07 fc       	sbrc	r0, 7
    10e6:	05 d0       	rcall	.+10     	; 0x10f2 <__divmodhi4_neg2>
    10e8:	3e f4       	brtc	.+14     	; 0x10f8 <__divmodhi4_exit>

000010ea <__divmodhi4_neg1>:
    10ea:	90 95       	com	r25
    10ec:	81 95       	neg	r24
    10ee:	9f 4f       	sbci	r25, 0xFF	; 255
    10f0:	08 95       	ret

000010f2 <__divmodhi4_neg2>:
    10f2:	70 95       	com	r23
    10f4:	61 95       	neg	r22
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255

000010f8 <__divmodhi4_exit>:
    10f8:	08 95       	ret

000010fa <__tablejump2__>:
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	05 90       	lpm	r0, Z+
    1100:	f4 91       	lpm	r31, Z
    1102:	e0 2d       	mov	r30, r0
    1104:	09 94       	ijmp

00001106 <__umulhisi3>:
    1106:	a2 9f       	mul	r26, r18
    1108:	b0 01       	movw	r22, r0
    110a:	b3 9f       	mul	r27, r19
    110c:	c0 01       	movw	r24, r0
    110e:	a3 9f       	mul	r26, r19
    1110:	70 0d       	add	r23, r0
    1112:	81 1d       	adc	r24, r1
    1114:	11 24       	eor	r1, r1
    1116:	91 1d       	adc	r25, r1
    1118:	b2 9f       	mul	r27, r18
    111a:	70 0d       	add	r23, r0
    111c:	81 1d       	adc	r24, r1
    111e:	11 24       	eor	r1, r1
    1120:	91 1d       	adc	r25, r1
    1122:	08 95       	ret

00001124 <__udivmodhi4>:
    1124:	aa 1b       	sub	r26, r26
    1126:	bb 1b       	sub	r27, r27
    1128:	51 e1       	ldi	r21, 0x11	; 17
    112a:	07 c0       	rjmp	.+14     	; 0x113a <__udivmodhi4_ep>

0000112c <__udivmodhi4_loop>:
    112c:	aa 1f       	adc	r26, r26
    112e:	bb 1f       	adc	r27, r27
    1130:	a6 17       	cp	r26, r22
    1132:	b7 07       	cpc	r27, r23
    1134:	10 f0       	brcs	.+4      	; 0x113a <__udivmodhi4_ep>
    1136:	a6 1b       	sub	r26, r22
    1138:	b7 0b       	sbc	r27, r23

0000113a <__udivmodhi4_ep>:
    113a:	88 1f       	adc	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	5a 95       	dec	r21
    1140:	a9 f7       	brne	.-22     	; 0x112c <__udivmodhi4_loop>
    1142:	80 95       	com	r24
    1144:	90 95       	com	r25
    1146:	bc 01       	movw	r22, r24
    1148:	cd 01       	movw	r24, r26
    114a:	08 95       	ret

0000114c <__subsf3>:
    114c:	50 58       	subi	r21, 0x80	; 128

0000114e <__addsf3>:
    114e:	bb 27       	eor	r27, r27
    1150:	aa 27       	eor	r26, r26
    1152:	0e 94 be 08 	call	0x117c	; 0x117c <__addsf3x>
    1156:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__fp_round>
    115a:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_pscA>
    115e:	38 f0       	brcs	.+14     	; 0x116e <__addsf3+0x20>
    1160:	0e 94 08 0a 	call	0x1410	; 0x1410 <__fp_pscB>
    1164:	20 f0       	brcs	.+8      	; 0x116e <__addsf3+0x20>
    1166:	39 f4       	brne	.+14     	; 0x1176 <__addsf3+0x28>
    1168:	9f 3f       	cpi	r25, 0xFF	; 255
    116a:	19 f4       	brne	.+6      	; 0x1172 <__addsf3+0x24>
    116c:	26 f4       	brtc	.+8      	; 0x1176 <__addsf3+0x28>
    116e:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__fp_nan>
    1172:	0e f4       	brtc	.+2      	; 0x1176 <__addsf3+0x28>
    1174:	e0 95       	com	r30
    1176:	e7 fb       	bst	r30, 7
    1178:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_inf>

0000117c <__addsf3x>:
    117c:	e9 2f       	mov	r30, r25
    117e:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fp_split3>
    1182:	58 f3       	brcs	.-42     	; 0x115a <__addsf3+0xc>
    1184:	ba 17       	cp	r27, r26
    1186:	62 07       	cpc	r22, r18
    1188:	73 07       	cpc	r23, r19
    118a:	84 07       	cpc	r24, r20
    118c:	95 07       	cpc	r25, r21
    118e:	20 f0       	brcs	.+8      	; 0x1198 <__addsf3x+0x1c>
    1190:	79 f4       	brne	.+30     	; 0x11b0 <__addsf3x+0x34>
    1192:	a6 f5       	brtc	.+104    	; 0x11fc <__addsf3x+0x80>
    1194:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__fp_zero>
    1198:	0e f4       	brtc	.+2      	; 0x119c <__addsf3x+0x20>
    119a:	e0 95       	com	r30
    119c:	0b 2e       	mov	r0, r27
    119e:	ba 2f       	mov	r27, r26
    11a0:	a0 2d       	mov	r26, r0
    11a2:	0b 01       	movw	r0, r22
    11a4:	b9 01       	movw	r22, r18
    11a6:	90 01       	movw	r18, r0
    11a8:	0c 01       	movw	r0, r24
    11aa:	ca 01       	movw	r24, r20
    11ac:	a0 01       	movw	r20, r0
    11ae:	11 24       	eor	r1, r1
    11b0:	ff 27       	eor	r31, r31
    11b2:	59 1b       	sub	r21, r25
    11b4:	99 f0       	breq	.+38     	; 0x11dc <__addsf3x+0x60>
    11b6:	59 3f       	cpi	r21, 0xF9	; 249
    11b8:	50 f4       	brcc	.+20     	; 0x11ce <__addsf3x+0x52>
    11ba:	50 3e       	cpi	r21, 0xE0	; 224
    11bc:	68 f1       	brcs	.+90     	; 0x1218 <__addsf3x+0x9c>
    11be:	1a 16       	cp	r1, r26
    11c0:	f0 40       	sbci	r31, 0x00	; 0
    11c2:	a2 2f       	mov	r26, r18
    11c4:	23 2f       	mov	r18, r19
    11c6:	34 2f       	mov	r19, r20
    11c8:	44 27       	eor	r20, r20
    11ca:	58 5f       	subi	r21, 0xF8	; 248
    11cc:	f3 cf       	rjmp	.-26     	; 0x11b4 <__addsf3x+0x38>
    11ce:	46 95       	lsr	r20
    11d0:	37 95       	ror	r19
    11d2:	27 95       	ror	r18
    11d4:	a7 95       	ror	r26
    11d6:	f0 40       	sbci	r31, 0x00	; 0
    11d8:	53 95       	inc	r21
    11da:	c9 f7       	brne	.-14     	; 0x11ce <__addsf3x+0x52>
    11dc:	7e f4       	brtc	.+30     	; 0x11fc <__addsf3x+0x80>
    11de:	1f 16       	cp	r1, r31
    11e0:	ba 0b       	sbc	r27, r26
    11e2:	62 0b       	sbc	r22, r18
    11e4:	73 0b       	sbc	r23, r19
    11e6:	84 0b       	sbc	r24, r20
    11e8:	ba f0       	brmi	.+46     	; 0x1218 <__addsf3x+0x9c>
    11ea:	91 50       	subi	r25, 0x01	; 1
    11ec:	a1 f0       	breq	.+40     	; 0x1216 <__addsf3x+0x9a>
    11ee:	ff 0f       	add	r31, r31
    11f0:	bb 1f       	adc	r27, r27
    11f2:	66 1f       	adc	r22, r22
    11f4:	77 1f       	adc	r23, r23
    11f6:	88 1f       	adc	r24, r24
    11f8:	c2 f7       	brpl	.-16     	; 0x11ea <__addsf3x+0x6e>
    11fa:	0e c0       	rjmp	.+28     	; 0x1218 <__addsf3x+0x9c>
    11fc:	ba 0f       	add	r27, r26
    11fe:	62 1f       	adc	r22, r18
    1200:	73 1f       	adc	r23, r19
    1202:	84 1f       	adc	r24, r20
    1204:	48 f4       	brcc	.+18     	; 0x1218 <__addsf3x+0x9c>
    1206:	87 95       	ror	r24
    1208:	77 95       	ror	r23
    120a:	67 95       	ror	r22
    120c:	b7 95       	ror	r27
    120e:	f7 95       	ror	r31
    1210:	9e 3f       	cpi	r25, 0xFE	; 254
    1212:	08 f0       	brcs	.+2      	; 0x1216 <__addsf3x+0x9a>
    1214:	b0 cf       	rjmp	.-160    	; 0x1176 <__addsf3+0x28>
    1216:	93 95       	inc	r25
    1218:	88 0f       	add	r24, r24
    121a:	08 f0       	brcs	.+2      	; 0x121e <__addsf3x+0xa2>
    121c:	99 27       	eor	r25, r25
    121e:	ee 0f       	add	r30, r30
    1220:	97 95       	ror	r25
    1222:	87 95       	ror	r24
    1224:	08 95       	ret

00001226 <__divsf3>:
    1226:	0e 94 27 09 	call	0x124e	; 0x124e <__divsf3x>
    122a:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__fp_round>
    122e:	0e 94 08 0a 	call	0x1410	; 0x1410 <__fp_pscB>
    1232:	58 f0       	brcs	.+22     	; 0x124a <__divsf3+0x24>
    1234:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_pscA>
    1238:	40 f0       	brcs	.+16     	; 0x124a <__divsf3+0x24>
    123a:	29 f4       	brne	.+10     	; 0x1246 <__divsf3+0x20>
    123c:	5f 3f       	cpi	r21, 0xFF	; 255
    123e:	29 f0       	breq	.+10     	; 0x124a <__divsf3+0x24>
    1240:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_inf>
    1244:	51 11       	cpse	r21, r1
    1246:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__fp_szero>
    124a:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__fp_nan>

0000124e <__divsf3x>:
    124e:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fp_split3>
    1252:	68 f3       	brcs	.-38     	; 0x122e <__divsf3+0x8>

00001254 <__divsf3_pse>:
    1254:	99 23       	and	r25, r25
    1256:	b1 f3       	breq	.-20     	; 0x1244 <__divsf3+0x1e>
    1258:	55 23       	and	r21, r21
    125a:	91 f3       	breq	.-28     	; 0x1240 <__divsf3+0x1a>
    125c:	95 1b       	sub	r25, r21
    125e:	55 0b       	sbc	r21, r21
    1260:	bb 27       	eor	r27, r27
    1262:	aa 27       	eor	r26, r26
    1264:	62 17       	cp	r22, r18
    1266:	73 07       	cpc	r23, r19
    1268:	84 07       	cpc	r24, r20
    126a:	38 f0       	brcs	.+14     	; 0x127a <__divsf3_pse+0x26>
    126c:	9f 5f       	subi	r25, 0xFF	; 255
    126e:	5f 4f       	sbci	r21, 0xFF	; 255
    1270:	22 0f       	add	r18, r18
    1272:	33 1f       	adc	r19, r19
    1274:	44 1f       	adc	r20, r20
    1276:	aa 1f       	adc	r26, r26
    1278:	a9 f3       	breq	.-22     	; 0x1264 <__divsf3_pse+0x10>
    127a:	35 d0       	rcall	.+106    	; 0x12e6 <__divsf3_pse+0x92>
    127c:	0e 2e       	mov	r0, r30
    127e:	3a f0       	brmi	.+14     	; 0x128e <__divsf3_pse+0x3a>
    1280:	e0 e8       	ldi	r30, 0x80	; 128
    1282:	32 d0       	rcall	.+100    	; 0x12e8 <__divsf3_pse+0x94>
    1284:	91 50       	subi	r25, 0x01	; 1
    1286:	50 40       	sbci	r21, 0x00	; 0
    1288:	e6 95       	lsr	r30
    128a:	00 1c       	adc	r0, r0
    128c:	ca f7       	brpl	.-14     	; 0x1280 <__divsf3_pse+0x2c>
    128e:	2b d0       	rcall	.+86     	; 0x12e6 <__divsf3_pse+0x92>
    1290:	fe 2f       	mov	r31, r30
    1292:	29 d0       	rcall	.+82     	; 0x12e6 <__divsf3_pse+0x92>
    1294:	66 0f       	add	r22, r22
    1296:	77 1f       	adc	r23, r23
    1298:	88 1f       	adc	r24, r24
    129a:	bb 1f       	adc	r27, r27
    129c:	26 17       	cp	r18, r22
    129e:	37 07       	cpc	r19, r23
    12a0:	48 07       	cpc	r20, r24
    12a2:	ab 07       	cpc	r26, r27
    12a4:	b0 e8       	ldi	r27, 0x80	; 128
    12a6:	09 f0       	breq	.+2      	; 0x12aa <__divsf3_pse+0x56>
    12a8:	bb 0b       	sbc	r27, r27
    12aa:	80 2d       	mov	r24, r0
    12ac:	bf 01       	movw	r22, r30
    12ae:	ff 27       	eor	r31, r31
    12b0:	93 58       	subi	r25, 0x83	; 131
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	3a f0       	brmi	.+14     	; 0x12c4 <__divsf3_pse+0x70>
    12b6:	9e 3f       	cpi	r25, 0xFE	; 254
    12b8:	51 05       	cpc	r21, r1
    12ba:	78 f0       	brcs	.+30     	; 0x12da <__divsf3_pse+0x86>
    12bc:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_inf>
    12c0:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__fp_szero>
    12c4:	5f 3f       	cpi	r21, 0xFF	; 255
    12c6:	e4 f3       	brlt	.-8      	; 0x12c0 <__divsf3_pse+0x6c>
    12c8:	98 3e       	cpi	r25, 0xE8	; 232
    12ca:	d4 f3       	brlt	.-12     	; 0x12c0 <__divsf3_pse+0x6c>
    12cc:	86 95       	lsr	r24
    12ce:	77 95       	ror	r23
    12d0:	67 95       	ror	r22
    12d2:	b7 95       	ror	r27
    12d4:	f7 95       	ror	r31
    12d6:	9f 5f       	subi	r25, 0xFF	; 255
    12d8:	c9 f7       	brne	.-14     	; 0x12cc <__divsf3_pse+0x78>
    12da:	88 0f       	add	r24, r24
    12dc:	91 1d       	adc	r25, r1
    12de:	96 95       	lsr	r25
    12e0:	87 95       	ror	r24
    12e2:	97 f9       	bld	r25, 7
    12e4:	08 95       	ret
    12e6:	e1 e0       	ldi	r30, 0x01	; 1
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	bb 1f       	adc	r27, r27
    12f0:	62 17       	cp	r22, r18
    12f2:	73 07       	cpc	r23, r19
    12f4:	84 07       	cpc	r24, r20
    12f6:	ba 07       	cpc	r27, r26
    12f8:	20 f0       	brcs	.+8      	; 0x1302 <__divsf3_pse+0xae>
    12fa:	62 1b       	sub	r22, r18
    12fc:	73 0b       	sbc	r23, r19
    12fe:	84 0b       	sbc	r24, r20
    1300:	ba 0b       	sbc	r27, r26
    1302:	ee 1f       	adc	r30, r30
    1304:	88 f7       	brcc	.-30     	; 0x12e8 <__divsf3_pse+0x94>
    1306:	e0 95       	com	r30
    1308:	08 95       	ret

0000130a <__fixsfsi>:
    130a:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fixunssfsi>
    130e:	68 94       	set
    1310:	b1 11       	cpse	r27, r1
    1312:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__fp_szero>
    1316:	08 95       	ret

00001318 <__fixunssfsi>:
    1318:	0e 94 28 0a 	call	0x1450	; 0x1450 <__fp_splitA>
    131c:	88 f0       	brcs	.+34     	; 0x1340 <__fixunssfsi+0x28>
    131e:	9f 57       	subi	r25, 0x7F	; 127
    1320:	98 f0       	brcs	.+38     	; 0x1348 <__fixunssfsi+0x30>
    1322:	b9 2f       	mov	r27, r25
    1324:	99 27       	eor	r25, r25
    1326:	b7 51       	subi	r27, 0x17	; 23
    1328:	b0 f0       	brcs	.+44     	; 0x1356 <__fixunssfsi+0x3e>
    132a:	e1 f0       	breq	.+56     	; 0x1364 <__fixunssfsi+0x4c>
    132c:	66 0f       	add	r22, r22
    132e:	77 1f       	adc	r23, r23
    1330:	88 1f       	adc	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	1a f0       	brmi	.+6      	; 0x133c <__fixunssfsi+0x24>
    1336:	ba 95       	dec	r27
    1338:	c9 f7       	brne	.-14     	; 0x132c <__fixunssfsi+0x14>
    133a:	14 c0       	rjmp	.+40     	; 0x1364 <__fixunssfsi+0x4c>
    133c:	b1 30       	cpi	r27, 0x01	; 1
    133e:	91 f0       	breq	.+36     	; 0x1364 <__fixunssfsi+0x4c>
    1340:	0e 94 42 0a 	call	0x1484	; 0x1484 <__fp_zero>
    1344:	b1 e0       	ldi	r27, 0x01	; 1
    1346:	08 95       	ret
    1348:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__fp_zero>
    134c:	67 2f       	mov	r22, r23
    134e:	78 2f       	mov	r23, r24
    1350:	88 27       	eor	r24, r24
    1352:	b8 5f       	subi	r27, 0xF8	; 248
    1354:	39 f0       	breq	.+14     	; 0x1364 <__fixunssfsi+0x4c>
    1356:	b9 3f       	cpi	r27, 0xF9	; 249
    1358:	cc f3       	brlt	.-14     	; 0x134c <__fixunssfsi+0x34>
    135a:	86 95       	lsr	r24
    135c:	77 95       	ror	r23
    135e:	67 95       	ror	r22
    1360:	b3 95       	inc	r27
    1362:	d9 f7       	brne	.-10     	; 0x135a <__fixunssfsi+0x42>
    1364:	3e f4       	brtc	.+14     	; 0x1374 <__fixunssfsi+0x5c>
    1366:	90 95       	com	r25
    1368:	80 95       	com	r24
    136a:	70 95       	com	r23
    136c:	61 95       	neg	r22
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	08 95       	ret

00001376 <__floatunsisf>:
    1376:	e8 94       	clt
    1378:	09 c0       	rjmp	.+18     	; 0x138c <__floatsisf+0x12>

0000137a <__floatsisf>:
    137a:	97 fb       	bst	r25, 7
    137c:	3e f4       	brtc	.+14     	; 0x138c <__floatsisf+0x12>
    137e:	90 95       	com	r25
    1380:	80 95       	com	r24
    1382:	70 95       	com	r23
    1384:	61 95       	neg	r22
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	8f 4f       	sbci	r24, 0xFF	; 255
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	99 23       	and	r25, r25
    138e:	a9 f0       	breq	.+42     	; 0x13ba <__floatsisf+0x40>
    1390:	f9 2f       	mov	r31, r25
    1392:	96 e9       	ldi	r25, 0x96	; 150
    1394:	bb 27       	eor	r27, r27
    1396:	93 95       	inc	r25
    1398:	f6 95       	lsr	r31
    139a:	87 95       	ror	r24
    139c:	77 95       	ror	r23
    139e:	67 95       	ror	r22
    13a0:	b7 95       	ror	r27
    13a2:	f1 11       	cpse	r31, r1
    13a4:	f8 cf       	rjmp	.-16     	; 0x1396 <__floatsisf+0x1c>
    13a6:	fa f4       	brpl	.+62     	; 0x13e6 <__floatsisf+0x6c>
    13a8:	bb 0f       	add	r27, r27
    13aa:	11 f4       	brne	.+4      	; 0x13b0 <__floatsisf+0x36>
    13ac:	60 ff       	sbrs	r22, 0
    13ae:	1b c0       	rjmp	.+54     	; 0x13e6 <__floatsisf+0x6c>
    13b0:	6f 5f       	subi	r22, 0xFF	; 255
    13b2:	7f 4f       	sbci	r23, 0xFF	; 255
    13b4:	8f 4f       	sbci	r24, 0xFF	; 255
    13b6:	9f 4f       	sbci	r25, 0xFF	; 255
    13b8:	16 c0       	rjmp	.+44     	; 0x13e6 <__floatsisf+0x6c>
    13ba:	88 23       	and	r24, r24
    13bc:	11 f0       	breq	.+4      	; 0x13c2 <__floatsisf+0x48>
    13be:	96 e9       	ldi	r25, 0x96	; 150
    13c0:	11 c0       	rjmp	.+34     	; 0x13e4 <__floatsisf+0x6a>
    13c2:	77 23       	and	r23, r23
    13c4:	21 f0       	breq	.+8      	; 0x13ce <__floatsisf+0x54>
    13c6:	9e e8       	ldi	r25, 0x8E	; 142
    13c8:	87 2f       	mov	r24, r23
    13ca:	76 2f       	mov	r23, r22
    13cc:	05 c0       	rjmp	.+10     	; 0x13d8 <__floatsisf+0x5e>
    13ce:	66 23       	and	r22, r22
    13d0:	71 f0       	breq	.+28     	; 0x13ee <__floatsisf+0x74>
    13d2:	96 e8       	ldi	r25, 0x86	; 134
    13d4:	86 2f       	mov	r24, r22
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	2a f0       	brmi	.+10     	; 0x13e6 <__floatsisf+0x6c>
    13dc:	9a 95       	dec	r25
    13de:	66 0f       	add	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	88 1f       	adc	r24, r24
    13e4:	da f7       	brpl	.-10     	; 0x13dc <__floatsisf+0x62>
    13e6:	88 0f       	add	r24, r24
    13e8:	96 95       	lsr	r25
    13ea:	87 95       	ror	r24
    13ec:	97 f9       	bld	r25, 7
    13ee:	08 95       	ret

000013f0 <__fp_inf>:
    13f0:	97 f9       	bld	r25, 7
    13f2:	9f 67       	ori	r25, 0x7F	; 127
    13f4:	80 e8       	ldi	r24, 0x80	; 128
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	08 95       	ret

000013fc <__fp_nan>:
    13fc:	9f ef       	ldi	r25, 0xFF	; 255
    13fe:	80 ec       	ldi	r24, 0xC0	; 192
    1400:	08 95       	ret

00001402 <__fp_pscA>:
    1402:	00 24       	eor	r0, r0
    1404:	0a 94       	dec	r0
    1406:	16 16       	cp	r1, r22
    1408:	17 06       	cpc	r1, r23
    140a:	18 06       	cpc	r1, r24
    140c:	09 06       	cpc	r0, r25
    140e:	08 95       	ret

00001410 <__fp_pscB>:
    1410:	00 24       	eor	r0, r0
    1412:	0a 94       	dec	r0
    1414:	12 16       	cp	r1, r18
    1416:	13 06       	cpc	r1, r19
    1418:	14 06       	cpc	r1, r20
    141a:	05 06       	cpc	r0, r21
    141c:	08 95       	ret

0000141e <__fp_round>:
    141e:	09 2e       	mov	r0, r25
    1420:	03 94       	inc	r0
    1422:	00 0c       	add	r0, r0
    1424:	11 f4       	brne	.+4      	; 0x142a <__fp_round+0xc>
    1426:	88 23       	and	r24, r24
    1428:	52 f0       	brmi	.+20     	; 0x143e <__fp_round+0x20>
    142a:	bb 0f       	add	r27, r27
    142c:	40 f4       	brcc	.+16     	; 0x143e <__fp_round+0x20>
    142e:	bf 2b       	or	r27, r31
    1430:	11 f4       	brne	.+4      	; 0x1436 <__fp_round+0x18>
    1432:	60 ff       	sbrs	r22, 0
    1434:	04 c0       	rjmp	.+8      	; 0x143e <__fp_round+0x20>
    1436:	6f 5f       	subi	r22, 0xFF	; 255
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	8f 4f       	sbci	r24, 0xFF	; 255
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	08 95       	ret

00001440 <__fp_split3>:
    1440:	57 fd       	sbrc	r21, 7
    1442:	90 58       	subi	r25, 0x80	; 128
    1444:	44 0f       	add	r20, r20
    1446:	55 1f       	adc	r21, r21
    1448:	59 f0       	breq	.+22     	; 0x1460 <__fp_splitA+0x10>
    144a:	5f 3f       	cpi	r21, 0xFF	; 255
    144c:	71 f0       	breq	.+28     	; 0x146a <__fp_splitA+0x1a>
    144e:	47 95       	ror	r20

00001450 <__fp_splitA>:
    1450:	88 0f       	add	r24, r24
    1452:	97 fb       	bst	r25, 7
    1454:	99 1f       	adc	r25, r25
    1456:	61 f0       	breq	.+24     	; 0x1470 <__fp_splitA+0x20>
    1458:	9f 3f       	cpi	r25, 0xFF	; 255
    145a:	79 f0       	breq	.+30     	; 0x147a <__fp_splitA+0x2a>
    145c:	87 95       	ror	r24
    145e:	08 95       	ret
    1460:	12 16       	cp	r1, r18
    1462:	13 06       	cpc	r1, r19
    1464:	14 06       	cpc	r1, r20
    1466:	55 1f       	adc	r21, r21
    1468:	f2 cf       	rjmp	.-28     	; 0x144e <__fp_split3+0xe>
    146a:	46 95       	lsr	r20
    146c:	f1 df       	rcall	.-30     	; 0x1450 <__fp_splitA>
    146e:	08 c0       	rjmp	.+16     	; 0x1480 <__fp_splitA+0x30>
    1470:	16 16       	cp	r1, r22
    1472:	17 06       	cpc	r1, r23
    1474:	18 06       	cpc	r1, r24
    1476:	99 1f       	adc	r25, r25
    1478:	f1 cf       	rjmp	.-30     	; 0x145c <__fp_splitA+0xc>
    147a:	86 95       	lsr	r24
    147c:	71 05       	cpc	r23, r1
    147e:	61 05       	cpc	r22, r1
    1480:	08 94       	sec
    1482:	08 95       	ret

00001484 <__fp_zero>:
    1484:	e8 94       	clt

00001486 <__fp_szero>:
    1486:	bb 27       	eor	r27, r27
    1488:	66 27       	eor	r22, r22
    148a:	77 27       	eor	r23, r23
    148c:	cb 01       	movw	r24, r22
    148e:	97 f9       	bld	r25, 7
    1490:	08 95       	ret

00001492 <__mulsf3>:
    1492:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <__mulsf3x>
    1496:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__fp_round>
    149a:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fp_pscA>
    149e:	38 f0       	brcs	.+14     	; 0x14ae <__mulsf3+0x1c>
    14a0:	0e 94 08 0a 	call	0x1410	; 0x1410 <__fp_pscB>
    14a4:	20 f0       	brcs	.+8      	; 0x14ae <__mulsf3+0x1c>
    14a6:	95 23       	and	r25, r21
    14a8:	11 f0       	breq	.+4      	; 0x14ae <__mulsf3+0x1c>
    14aa:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_inf>
    14ae:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__fp_nan>
    14b2:	11 24       	eor	r1, r1
    14b4:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__fp_szero>

000014b8 <__mulsf3x>:
    14b8:	0e 94 20 0a 	call	0x1440	; 0x1440 <__fp_split3>
    14bc:	70 f3       	brcs	.-36     	; 0x149a <__mulsf3+0x8>

000014be <__mulsf3_pse>:
    14be:	95 9f       	mul	r25, r21
    14c0:	c1 f3       	breq	.-16     	; 0x14b2 <__mulsf3+0x20>
    14c2:	95 0f       	add	r25, r21
    14c4:	50 e0       	ldi	r21, 0x00	; 0
    14c6:	55 1f       	adc	r21, r21
    14c8:	62 9f       	mul	r22, r18
    14ca:	f0 01       	movw	r30, r0
    14cc:	72 9f       	mul	r23, r18
    14ce:	bb 27       	eor	r27, r27
    14d0:	f0 0d       	add	r31, r0
    14d2:	b1 1d       	adc	r27, r1
    14d4:	63 9f       	mul	r22, r19
    14d6:	aa 27       	eor	r26, r26
    14d8:	f0 0d       	add	r31, r0
    14da:	b1 1d       	adc	r27, r1
    14dc:	aa 1f       	adc	r26, r26
    14de:	64 9f       	mul	r22, r20
    14e0:	66 27       	eor	r22, r22
    14e2:	b0 0d       	add	r27, r0
    14e4:	a1 1d       	adc	r26, r1
    14e6:	66 1f       	adc	r22, r22
    14e8:	82 9f       	mul	r24, r18
    14ea:	22 27       	eor	r18, r18
    14ec:	b0 0d       	add	r27, r0
    14ee:	a1 1d       	adc	r26, r1
    14f0:	62 1f       	adc	r22, r18
    14f2:	73 9f       	mul	r23, r19
    14f4:	b0 0d       	add	r27, r0
    14f6:	a1 1d       	adc	r26, r1
    14f8:	62 1f       	adc	r22, r18
    14fa:	83 9f       	mul	r24, r19
    14fc:	a0 0d       	add	r26, r0
    14fe:	61 1d       	adc	r22, r1
    1500:	22 1f       	adc	r18, r18
    1502:	74 9f       	mul	r23, r20
    1504:	33 27       	eor	r19, r19
    1506:	a0 0d       	add	r26, r0
    1508:	61 1d       	adc	r22, r1
    150a:	23 1f       	adc	r18, r19
    150c:	84 9f       	mul	r24, r20
    150e:	60 0d       	add	r22, r0
    1510:	21 1d       	adc	r18, r1
    1512:	82 2f       	mov	r24, r18
    1514:	76 2f       	mov	r23, r22
    1516:	6a 2f       	mov	r22, r26
    1518:	11 24       	eor	r1, r1
    151a:	9f 57       	subi	r25, 0x7F	; 127
    151c:	50 40       	sbci	r21, 0x00	; 0
    151e:	9a f0       	brmi	.+38     	; 0x1546 <__mulsf3_pse+0x88>
    1520:	f1 f0       	breq	.+60     	; 0x155e <__mulsf3_pse+0xa0>
    1522:	88 23       	and	r24, r24
    1524:	4a f0       	brmi	.+18     	; 0x1538 <__mulsf3_pse+0x7a>
    1526:	ee 0f       	add	r30, r30
    1528:	ff 1f       	adc	r31, r31
    152a:	bb 1f       	adc	r27, r27
    152c:	66 1f       	adc	r22, r22
    152e:	77 1f       	adc	r23, r23
    1530:	88 1f       	adc	r24, r24
    1532:	91 50       	subi	r25, 0x01	; 1
    1534:	50 40       	sbci	r21, 0x00	; 0
    1536:	a9 f7       	brne	.-22     	; 0x1522 <__mulsf3_pse+0x64>
    1538:	9e 3f       	cpi	r25, 0xFE	; 254
    153a:	51 05       	cpc	r21, r1
    153c:	80 f0       	brcs	.+32     	; 0x155e <__mulsf3_pse+0xa0>
    153e:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__fp_inf>
    1542:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__fp_szero>
    1546:	5f 3f       	cpi	r21, 0xFF	; 255
    1548:	e4 f3       	brlt	.-8      	; 0x1542 <__mulsf3_pse+0x84>
    154a:	98 3e       	cpi	r25, 0xE8	; 232
    154c:	d4 f3       	brlt	.-12     	; 0x1542 <__mulsf3_pse+0x84>
    154e:	86 95       	lsr	r24
    1550:	77 95       	ror	r23
    1552:	67 95       	ror	r22
    1554:	b7 95       	ror	r27
    1556:	f7 95       	ror	r31
    1558:	e7 95       	ror	r30
    155a:	9f 5f       	subi	r25, 0xFF	; 255
    155c:	c1 f7       	brne	.-16     	; 0x154e <__mulsf3_pse+0x90>
    155e:	fe 2b       	or	r31, r30
    1560:	88 0f       	add	r24, r24
    1562:	91 1d       	adc	r25, r1
    1564:	96 95       	lsr	r25
    1566:	87 95       	ror	r24
    1568:	97 f9       	bld	r25, 7
    156a:	08 95       	ret

0000156c <do_rand>:
    156c:	8f 92       	push	r8
    156e:	9f 92       	push	r9
    1570:	af 92       	push	r10
    1572:	bf 92       	push	r11
    1574:	cf 92       	push	r12
    1576:	df 92       	push	r13
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	ec 01       	movw	r28, r24
    1582:	68 81       	ld	r22, Y
    1584:	79 81       	ldd	r23, Y+1	; 0x01
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	9b 81       	ldd	r25, Y+3	; 0x03
    158a:	61 15       	cp	r22, r1
    158c:	71 05       	cpc	r23, r1
    158e:	81 05       	cpc	r24, r1
    1590:	91 05       	cpc	r25, r1
    1592:	21 f4       	brne	.+8      	; 0x159c <do_rand+0x30>
    1594:	64 e2       	ldi	r22, 0x24	; 36
    1596:	79 ed       	ldi	r23, 0xD9	; 217
    1598:	8b e5       	ldi	r24, 0x5B	; 91
    159a:	97 e0       	ldi	r25, 0x07	; 7
    159c:	2d e1       	ldi	r18, 0x1D	; 29
    159e:	33 ef       	ldi	r19, 0xF3	; 243
    15a0:	41 e0       	ldi	r20, 0x01	; 1
    15a2:	50 e0       	ldi	r21, 0x00	; 0
    15a4:	0e 94 28 0b 	call	0x1650	; 0x1650 <__divmodsi4>
    15a8:	49 01       	movw	r8, r18
    15aa:	5a 01       	movw	r10, r20
    15ac:	9b 01       	movw	r18, r22
    15ae:	ac 01       	movw	r20, r24
    15b0:	a7 ea       	ldi	r26, 0xA7	; 167
    15b2:	b1 e4       	ldi	r27, 0x41	; 65
    15b4:	0e 94 47 0b 	call	0x168e	; 0x168e <__muluhisi3>
    15b8:	6b 01       	movw	r12, r22
    15ba:	7c 01       	movw	r14, r24
    15bc:	ac ee       	ldi	r26, 0xEC	; 236
    15be:	b4 ef       	ldi	r27, 0xF4	; 244
    15c0:	a5 01       	movw	r20, r10
    15c2:	94 01       	movw	r18, r8
    15c4:	0e 94 55 0b 	call	0x16aa	; 0x16aa <__mulohisi3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	8c 0d       	add	r24, r12
    15ce:	9d 1d       	adc	r25, r13
    15d0:	ae 1d       	adc	r26, r14
    15d2:	bf 1d       	adc	r27, r15
    15d4:	b7 ff       	sbrs	r27, 7
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <do_rand+0x72>
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	a1 09       	sbc	r26, r1
    15dc:	b0 48       	sbci	r27, 0x80	; 128
    15de:	88 83       	st	Y, r24
    15e0:	99 83       	std	Y+1, r25	; 0x01
    15e2:	aa 83       	std	Y+2, r26	; 0x02
    15e4:	bb 83       	std	Y+3, r27	; 0x03
    15e6:	9f 77       	andi	r25, 0x7F	; 127
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	df 90       	pop	r13
    15f2:	cf 90       	pop	r12
    15f4:	bf 90       	pop	r11
    15f6:	af 90       	pop	r10
    15f8:	9f 90       	pop	r9
    15fa:	8f 90       	pop	r8
    15fc:	08 95       	ret

000015fe <rand_r>:
    15fe:	0e 94 b6 0a 	call	0x156c	; 0x156c <do_rand>
    1602:	08 95       	ret

00001604 <rand>:
    1604:	87 e0       	ldi	r24, 0x07	; 7
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	0e 94 b6 0a 	call	0x156c	; 0x156c <do_rand>
    160c:	08 95       	ret

0000160e <srand>:
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    1616:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    161a:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    161e:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    1622:	08 95       	ret

00001624 <eeprom_read_byte>:
    1624:	f9 99       	sbic	0x1f, 1	; 31
    1626:	fe cf       	rjmp	.-4      	; 0x1624 <eeprom_read_byte>
    1628:	92 bd       	out	0x22, r25	; 34
    162a:	81 bd       	out	0x21, r24	; 33
    162c:	f8 9a       	sbi	0x1f, 0	; 31
    162e:	99 27       	eor	r25, r25
    1630:	80 b5       	in	r24, 0x20	; 32
    1632:	08 95       	ret

00001634 <eeprom_write_byte>:
    1634:	26 2f       	mov	r18, r22

00001636 <eeprom_write_r18>:
    1636:	f9 99       	sbic	0x1f, 1	; 31
    1638:	fe cf       	rjmp	.-4      	; 0x1636 <eeprom_write_r18>
    163a:	1f ba       	out	0x1f, r1	; 31
    163c:	92 bd       	out	0x22, r25	; 34
    163e:	81 bd       	out	0x21, r24	; 33
    1640:	20 bd       	out	0x20, r18	; 32
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	fa 9a       	sbi	0x1f, 2	; 31
    1648:	f9 9a       	sbi	0x1f, 1	; 31
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	08 95       	ret

00001650 <__divmodsi4>:
    1650:	05 2e       	mov	r0, r21
    1652:	97 fb       	bst	r25, 7
    1654:	1e f4       	brtc	.+6      	; 0x165c <__divmodsi4+0xc>
    1656:	00 94       	com	r0
    1658:	0e 94 3f 0b 	call	0x167e	; 0x167e <__negsi2>
    165c:	57 fd       	sbrc	r21, 7
    165e:	07 d0       	rcall	.+14     	; 0x166e <__divmodsi4_neg2>
    1660:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <__udivmodsi4>
    1664:	07 fc       	sbrc	r0, 7
    1666:	03 d0       	rcall	.+6      	; 0x166e <__divmodsi4_neg2>
    1668:	4e f4       	brtc	.+18     	; 0x167c <__divmodsi4_exit>
    166a:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <__negsi2>

0000166e <__divmodsi4_neg2>:
    166e:	50 95       	com	r21
    1670:	40 95       	com	r20
    1672:	30 95       	com	r19
    1674:	21 95       	neg	r18
    1676:	3f 4f       	sbci	r19, 0xFF	; 255
    1678:	4f 4f       	sbci	r20, 0xFF	; 255
    167a:	5f 4f       	sbci	r21, 0xFF	; 255

0000167c <__divmodsi4_exit>:
    167c:	08 95       	ret

0000167e <__negsi2>:
    167e:	90 95       	com	r25
    1680:	80 95       	com	r24
    1682:	70 95       	com	r23
    1684:	61 95       	neg	r22
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	8f 4f       	sbci	r24, 0xFF	; 255
    168a:	9f 4f       	sbci	r25, 0xFF	; 255
    168c:	08 95       	ret

0000168e <__muluhisi3>:
    168e:	0e 94 83 08 	call	0x1106	; 0x1106 <__umulhisi3>
    1692:	a5 9f       	mul	r26, r21
    1694:	90 0d       	add	r25, r0
    1696:	b4 9f       	mul	r27, r20
    1698:	90 0d       	add	r25, r0
    169a:	a4 9f       	mul	r26, r20
    169c:	80 0d       	add	r24, r0
    169e:	91 1d       	adc	r25, r1
    16a0:	11 24       	eor	r1, r1
    16a2:	08 95       	ret

000016a4 <__mulshisi3>:
    16a4:	b7 ff       	sbrs	r27, 7
    16a6:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__muluhisi3>

000016aa <__mulohisi3>:
    16aa:	0e 94 47 0b 	call	0x168e	; 0x168e <__muluhisi3>
    16ae:	82 1b       	sub	r24, r18
    16b0:	93 0b       	sbc	r25, r19
    16b2:	08 95       	ret

000016b4 <__udivmodsi4>:
    16b4:	a1 e2       	ldi	r26, 0x21	; 33
    16b6:	1a 2e       	mov	r1, r26
    16b8:	aa 1b       	sub	r26, r26
    16ba:	bb 1b       	sub	r27, r27
    16bc:	fd 01       	movw	r30, r26
    16be:	0d c0       	rjmp	.+26     	; 0x16da <__udivmodsi4_ep>

000016c0 <__udivmodsi4_loop>:
    16c0:	aa 1f       	adc	r26, r26
    16c2:	bb 1f       	adc	r27, r27
    16c4:	ee 1f       	adc	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	a2 17       	cp	r26, r18
    16ca:	b3 07       	cpc	r27, r19
    16cc:	e4 07       	cpc	r30, r20
    16ce:	f5 07       	cpc	r31, r21
    16d0:	20 f0       	brcs	.+8      	; 0x16da <__udivmodsi4_ep>
    16d2:	a2 1b       	sub	r26, r18
    16d4:	b3 0b       	sbc	r27, r19
    16d6:	e4 0b       	sbc	r30, r20
    16d8:	f5 0b       	sbc	r31, r21

000016da <__udivmodsi4_ep>:
    16da:	66 1f       	adc	r22, r22
    16dc:	77 1f       	adc	r23, r23
    16de:	88 1f       	adc	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	1a 94       	dec	r1
    16e4:	69 f7       	brne	.-38     	; 0x16c0 <__udivmodsi4_loop>
    16e6:	60 95       	com	r22
    16e8:	70 95       	com	r23
    16ea:	80 95       	com	r24
    16ec:	90 95       	com	r25
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
    16f2:	bd 01       	movw	r22, r26
    16f4:	cf 01       	movw	r24, r30
    16f6:	08 95       	ret

000016f8 <_exit>:
    16f8:	f8 94       	cli

000016fa <__stop_program>:
    16fa:	ff cf       	rjmp	.-2      	; 0x16fa <__stop_program>
