
build/final_proj_part1.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	99 05       	cpc	r25, r9
      6a:	f0 05       	cpc	r31, r0
      6c:	04 06       	cpc	r0, r20
      6e:	35 06       	cpc	r3, r21
      70:	3c 06       	cpc	r3, r28
      72:	1b 06       	cpc	r1, r27
      74:	3f 06       	cpc	r3, r31
      76:	9d 07       	cpc	r25, r29
      78:	8e 08       	sbc	r8, r14
      7a:	8e 08       	sbc	r8, r14
      7c:	a6 07       	cpc	r26, r22
      7e:	a9 07       	cpc	r26, r25
      80:	ac 07       	cpc	r26, r28
      82:	ae 07       	cpc	r26, r30
      84:	b0 07       	cpc	r27, r16
      86:	b2 07       	cpc	r27, r18
      88:	63 08       	sbc	r6, r3
      8a:	c4 07       	cpc	r28, r20

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 ee       	ldi	r30, 0xE4	; 228
      b8:	f8 e1       	ldi	r31, 0x18	; 24
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	a2 31       	cpi	r26, 0x12	; 18
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	a2 e1       	ldi	r26, 0x12	; 18
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ad 38       	cpi	r26, 0x8D	; 141
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 40 09 	call	0x1280	; 0x1280 <main>
      da:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_tx_success>:
}

// message transmit success callback 
void message_tx_success() {
    // set message tx flag
    message_sent = 1; 
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <message_sent>
      e8:	08 95       	ret

000000ea <message_rx>:

    // check sender UID for updating local neighbors
    uint8_t sender_UID = m->data[0]; 

    // update local & global neighbor array if sender UID not already accounted for
    if (local_neighbors[sender_UID] == 0) {
      ea:	fc 01       	movw	r30, r24
      ec:	20 81       	ld	r18, Z
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	f9 01       	movw	r30, r18
      f2:	e6 5d       	subi	r30, 0xD6	; 214
      f4:	fe 4f       	sbci	r31, 0xFE	; 254
      f6:	40 81       	ld	r20, Z
      f8:	41 11       	cpse	r20, r1
      fa:	06 c0       	rjmp	.+12     	; 0x108 <message_rx+0x1e>
        local_neighbors[sender_UID] = 1;
      fc:	41 e0       	ldi	r20, 0x01	; 1
      fe:	40 83       	st	Z, r20
        global_neighbors[sender_UID] = 1;
     100:	f9 01       	movw	r30, r18
     102:	eb 5d       	subi	r30, 0xDB	; 219
     104:	fe 4f       	sbci	r31, 0xFE	; 254
     106:	40 83       	st	Z, r20
     108:	dc 01       	movw	r26, r24
     10a:	11 96       	adiw	r26, 0x01	; 1
     10c:	e5 e2       	ldi	r30, 0x25	; 37
     10e:	f1 e0       	ldi	r31, 0x01	; 1
    // and update receiver's global neighbor array if sender has a robot
    // in it's global neighbor array that the receiver does not
    uint8_t sender_global_neighbors[MAX_NEIGHBORS];
    int i;
    for (i=0; i < MAX_NEIGHBORS; i++) {
        sender_global_neighbors[i] = m->data[i+1];
     110:	8d 91       	ld	r24, X+
        if (sender_global_neighbors[i] == 1 && global_neighbors[i] != 1) {
     112:	81 30       	cpi	r24, 0x01	; 1
     114:	21 f4       	brne	.+8      	; 0x11e <message_rx+0x34>
     116:	90 81       	ld	r25, Z
     118:	91 30       	cpi	r25, 0x01	; 1
     11a:	09 f0       	breq	.+2      	; 0x11e <message_rx+0x34>
            global_neighbors[i] = 1;
     11c:	80 83       	st	Z, r24
     11e:	31 96       	adiw	r30, 0x01	; 1
    // store sender's global neighbors in temp array (just for clarity)  
    // and update receiver's global neighbor array if sender has a robot
    // in it's global neighbor array that the receiver does not
    uint8_t sender_global_neighbors[MAX_NEIGHBORS];
    int i;
    for (i=0; i < MAX_NEIGHBORS; i++) {
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	ea 32       	cpi	r30, 0x2A	; 42
     124:	f8 07       	cpc	r31, r24
     126:	a1 f7       	brne	.-24     	; 0x110 <message_rx+0x26>
            global_neighbors[i] = 1;
        } 
    }

    // message rx flag
    new_message = 1;
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <new_message>
     12e:	08 95       	ret

00000130 <setup>:
    }
    return sum;
}

void setup(){
    message.type = NORMAL;
     130:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <message+0x9>

    // initialize global & local neighbor array sorted by UID
    int i;
    for (i = 0; i < MAX_NEIGHBORS; i++){
        if (i == kilo_uid){
     134:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <kilo_uid>
     138:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <kilo_uid+0x1>
     13c:	a5 e2       	ldi	r26, 0x25	; 37
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	ea e2       	ldi	r30, 0x2A	; 42
     142:	f1 e0       	ldi	r31, 0x01	; 1
void setup(){
    message.type = NORMAL;

    // initialize global & local neighbor array sorted by UID
    int i;
    for (i = 0; i < MAX_NEIGHBORS; i++){
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	90 e0       	ldi	r25, 0x00	; 0
        if (i == kilo_uid){
            global_neighbors[i] = 1;
     148:	41 e0       	ldi	r20, 0x01	; 1
    message.type = NORMAL;

    // initialize global & local neighbor array sorted by UID
    int i;
    for (i = 0; i < MAX_NEIGHBORS; i++){
        if (i == kilo_uid){
     14a:	28 17       	cp	r18, r24
     14c:	39 07       	cpc	r19, r25
     14e:	19 f4       	brne	.+6      	; 0x156 <setup+0x26>
            global_neighbors[i] = 1;
     150:	4c 93       	st	X, r20
            local_neighbors[i] = 1;
     152:	40 83       	st	Z, r20
     154:	02 c0       	rjmp	.+4      	; 0x15a <setup+0x2a>
        }
        else{
            global_neighbors[i] = 0;
     156:	1c 92       	st	X, r1
            local_neighbors[i] = 0;
     158:	10 82       	st	Z, r1
void setup(){
    message.type = NORMAL;

    // initialize global & local neighbor array sorted by UID
    int i;
    for (i = 0; i < MAX_NEIGHBORS; i++){
     15a:	01 96       	adiw	r24, 0x01	; 1
     15c:	11 96       	adiw	r26, 0x01	; 1
     15e:	31 96       	adiw	r30, 0x01	; 1
     160:	85 30       	cpi	r24, 0x05	; 5
     162:	91 05       	cpc	r25, r1
     164:	91 f7       	brne	.-28     	; 0x14a <setup+0x1a>
            local_neighbors[i] = 0;
        }
    }

    // store this robots UID and global neighbors in message
    message.data[0] = (uint8_t) kilo_uid;
     166:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <message>
    message.data[1] = (uint8_t) global_neighbors[0];
     16a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <global_neighbors>
     16e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <message+0x1>
    message.data[2] = (uint8_t) global_neighbors[1];
     172:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <global_neighbors+0x1>
     176:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <message+0x2>
    message.data[3] = (uint8_t) global_neighbors[2];
     17a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <global_neighbors+0x2>
     17e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <message+0x3>
    message.data[4] = (uint8_t) global_neighbors[3];
     182:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <global_neighbors+0x3>
     186:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <message+0x4>
    message.data[5] = (uint8_t) global_neighbors[4];
     18a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <global_neighbors+0x4>
     18e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <message+0x5>

    // zero out the rest of the data
    for(i = 7; i < 9; i++)
    {
      message.data[i] = 0;
     192:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <message+0x7>
     196:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <message+0x8>
    }

    // It's important that the CRC is computed after the data has been set;
    // otherwise it would be wrong.
    message.crc = message_crc(&message);
     19a:	89 e1       	ldi	r24, 0x19	; 25
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	0e 94 a1 08 	call	0x1142	; 0x1142 <message_crc>
     1a2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <message+0xb>
     1a6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <message+0xa>
     1aa:	08 95       	ret

000001ac <message_tx>:

}


// message transmit callback
message_t *message_tx() {
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
    // message type always normal
    message.type = NORMAL;
     1b0:	c9 e1       	ldi	r28, 0x19	; 25
     1b2:	d1 e0       	ldi	r29, 0x01	; 1
     1b4:	19 86       	std	Y+9, r1	; 0x09

    // store this robots UID and T/F values of it's global neighbor array in message
    message.data[0] = (uint8_t) kilo_uid;
     1b6:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <kilo_uid>
     1ba:	88 83       	st	Y, r24
    message.data[1] = (uint8_t) global_neighbors[0];
     1bc:	e5 e2       	ldi	r30, 0x25	; 37
     1be:	f1 e0       	ldi	r31, 0x01	; 1
     1c0:	80 81       	ld	r24, Z
     1c2:	89 83       	std	Y+1, r24	; 0x01
    message.data[2] = (uint8_t) global_neighbors[1];
     1c4:	81 81       	ldd	r24, Z+1	; 0x01
     1c6:	8a 83       	std	Y+2, r24	; 0x02
    message.data[3] = (uint8_t) global_neighbors[2];
     1c8:	82 81       	ldd	r24, Z+2	; 0x02
     1ca:	8b 83       	std	Y+3, r24	; 0x03
    message.data[4] = (uint8_t) global_neighbors[3];
     1cc:	83 81       	ldd	r24, Z+3	; 0x03
     1ce:	8c 83       	std	Y+4, r24	; 0x04
    message.data[5] = (uint8_t) global_neighbors[4];
     1d0:	84 81       	ldd	r24, Z+4	; 0x04
     1d2:	8d 83       	std	Y+5, r24	; 0x05

    // compute checksum
    message.crc = message_crc(&message);
     1d4:	ce 01       	movw	r24, r28
     1d6:	0e 94 a1 08 	call	0x1142	; 0x1142 <message_crc>
     1da:	9b 87       	std	Y+11, r25	; 0x0b
     1dc:	8a 87       	std	Y+10, r24	; 0x0a

    // send message
    return &message;
}
     1de:	ce 01       	movw	r24, r28
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <sum_array>:
    RGB(0,3,0),  //4 - green
    RGB(0,0,3)   //5 - blue
};

// array sum function
uint8_t sum_array(uint8_t arr[], size_t size) {
     1e6:	fc 01       	movw	r30, r24
     1e8:	68 0f       	add	r22, r24
     1ea:	79 1f       	adc	r23, r25
    uint8_t sum = 0;
     1ec:	80 e0       	ldi	r24, 0x00	; 0
    for (size_t i = 0; i < size; i++) {
     1ee:	e6 17       	cp	r30, r22
     1f0:	f7 07       	cpc	r31, r23
     1f2:	19 f0       	breq	.+6      	; 0x1fa <sum_array+0x14>
        sum += arr[i];
     1f4:	91 91       	ld	r25, Z+
     1f6:	89 0f       	add	r24, r25
     1f8:	fa cf       	rjmp	.-12     	; 0x1ee <sum_array+0x8>
    }
    return sum;
}
     1fa:	08 95       	ret

000001fc <set_color_based_on_global_neighbors>:
    // message rx flag
    new_message = 1;
}

void set_color_based_on_global_neighbors(uint8_t gn_count) {
    switch(gn_count) {
     1fc:	83 30       	cpi	r24, 0x03	; 3
     1fe:	89 f0       	breq	.+34     	; 0x222 <set_color_based_on_global_neighbors+0x26>
     200:	28 f4       	brcc	.+10     	; 0x20c <set_color_based_on_global_neighbors+0x10>
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	41 f0       	breq	.+16     	; 0x216 <set_color_based_on_global_neighbors+0x1a>
     206:	82 30       	cpi	r24, 0x02	; 2
     208:	49 f0       	breq	.+18     	; 0x21c <set_color_based_on_global_neighbors+0x20>
     20a:	08 95       	ret
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	61 f0       	breq	.+24     	; 0x228 <set_color_based_on_global_neighbors+0x2c>
     210:	85 30       	cpi	r24, 0x05	; 5
     212:	69 f0       	breq	.+26     	; 0x22e <set_color_based_on_global_neighbors+0x32>
     214:	08 95       	ret
        case 1: set_color(colors[0]); break;
     216:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     21a:	0b c0       	rjmp	.+22     	; 0x232 <set_color_based_on_global_neighbors+0x36>
        case 2: set_color(colors[1]); break;
     21c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     220:	08 c0       	rjmp	.+16     	; 0x232 <set_color_based_on_global_neighbors+0x36>
        case 3: set_color(colors[2]); break;
     222:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     226:	05 c0       	rjmp	.+10     	; 0x232 <set_color_based_on_global_neighbors+0x36>
        case 4: set_color(colors[3]); break;
     228:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     22c:	02 c0       	rjmp	.+4      	; 0x232 <set_color_based_on_global_neighbors+0x36>
        case 5: set_color(colors[4]); break;
     22e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     232:	0c 94 66 05 	jmp	0xacc	; 0xacc <set_color>

00000236 <loop>:
void loop() {
    
        // ***** CHANGE THIS IF SHIT BREAKS ******************
    // periodically re-initialize global & local neighbor arrays 
    // (for re-checking if a previously present neighbor has left)
    if (kilo_ticks - ticks_since_last_update > ticks_per_update) {
     236:	40 91 52 01 	lds	r20, 0x0152	; 0x800152 <kilo_ticks>
     23a:	50 91 53 01 	lds	r21, 0x0153	; 0x800153 <kilo_ticks+0x1>
     23e:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <kilo_ticks+0x2>
     242:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <kilo_ticks+0x3>
     246:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     24a:	48 1b       	sub	r20, r24
     24c:	51 09       	sbc	r21, r1
     24e:	61 09       	sbc	r22, r1
     250:	71 09       	sbc	r23, r1
     252:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ticks_per_update>
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	a0 e0       	ldi	r26, 0x00	; 0
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	84 17       	cp	r24, r20
     25e:	95 07       	cpc	r25, r21
     260:	a6 07       	cpc	r26, r22
     262:	b7 07       	cpc	r27, r23
     264:	08 f0       	brcs	.+2      	; 0x268 <loop+0x32>
     266:	45 c0       	rjmp	.+138    	; 0x2f2 <loop+0xbc>
        
        int i;
        for (i = 0; i < MAX_NEIGHBORS; i++){
            if (i == kilo_uid) {
     268:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <kilo_uid>
     26c:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <kilo_uid+0x1>
     270:	a5 e2       	ldi	r26, 0x25	; 37
     272:	b1 e0       	ldi	r27, 0x01	; 1
     274:	ea e2       	ldi	r30, 0x2A	; 42
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
                global_neighbors[i] = 1;
     27c:	41 e0       	ldi	r20, 0x01	; 1
    // (for re-checking if a previously present neighbor has left)
    if (kilo_ticks - ticks_since_last_update > ticks_per_update) {
        
        int i;
        for (i = 0; i < MAX_NEIGHBORS; i++){
            if (i == kilo_uid) {
     27e:	28 17       	cp	r18, r24
     280:	39 07       	cpc	r19, r25
     282:	19 f4       	brne	.+6      	; 0x28a <loop+0x54>
                global_neighbors[i] = 1;
     284:	4c 93       	st	X, r20
                local_neighbors[i] = 1;
     286:	40 83       	st	Z, r20
     288:	02 c0       	rjmp	.+4      	; 0x28e <loop+0x58>
            }
            else {
                global_neighbors[i] = 0;
     28a:	1c 92       	st	X, r1
                local_neighbors[i] = 0;
     28c:	10 82       	st	Z, r1
    // periodically re-initialize global & local neighbor arrays 
    // (for re-checking if a previously present neighbor has left)
    if (kilo_ticks - ticks_since_last_update > ticks_per_update) {
        
        int i;
        for (i = 0; i < MAX_NEIGHBORS; i++){
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	11 96       	adiw	r26, 0x01	; 1
     292:	31 96       	adiw	r30, 0x01	; 1
     294:	85 30       	cpi	r24, 0x05	; 5
     296:	91 05       	cpc	r25, r1
     298:	91 f7       	brne	.-28     	; 0x27e <loop+0x48>
            else {
                global_neighbors[i] = 0;
                local_neighbors[i] = 0;
            }
        }
        ticks_since_last_update = kilo_ticks;
     29a:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <kilo_ticks>
     29e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <kilo_ticks+0x1>
     2a2:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <kilo_ticks+0x2>
     2a6:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <kilo_ticks+0x3>
     2aa:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>

        // store this robots UID and global neighbors in message
        message.data[0] = (uint8_t) kilo_uid;
     2ae:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <message>
        message.data[1] = (uint8_t) global_neighbors[0];
     2b2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <global_neighbors>
     2b6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <message+0x1>
        message.data[2] = (uint8_t) global_neighbors[1];
     2ba:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <global_neighbors+0x1>
     2be:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <message+0x2>
        message.data[3] = (uint8_t) global_neighbors[2];
     2c2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <global_neighbors+0x2>
     2c6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <message+0x3>
        message.data[4] = (uint8_t) global_neighbors[3];
     2ca:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <global_neighbors+0x3>
     2ce:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <message+0x4>
        message.data[5] = (uint8_t) global_neighbors[4];
     2d2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <global_neighbors+0x4>
     2d6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <message+0x5>

        // zero out the rest of the data
        for(i = 7; i < 9; i++)
        {
        message.data[i] = 0;
     2da:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <message+0x7>
     2de:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <message+0x8>
        }

        // It's important that the CRC is computed after the data has been set;
        // otherwise it would be wrong.
        message.crc = message_crc(&message);
     2e2:	89 e1       	ldi	r24, 0x19	; 25
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	0e 94 a1 08 	call	0x1142	; 0x1142 <message_crc>
     2ea:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <message+0xb>
     2ee:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <message+0xa>
    }
    // ************************************************

    // sum global_neighbors array elements (only either 1 or 0) to get neighbor count
    size_t array_size = sizeof(global_neighbors) / sizeof(global_neighbors[0]); // computes array size by dividing total bytes of array by the bytes in the first index
    global_neighbor_count = sum_array(global_neighbors, array_size);
     2f2:	65 e0       	ldi	r22, 0x05	; 5
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	85 e2       	ldi	r24, 0x25	; 37
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <sum_array>
     2fe:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <global_neighbor_count>

    // display color based on global neighbor count
    set_color_based_on_global_neighbors(global_neighbor_count);
     302:	0e 94 fe 00 	call	0x1fc	; 0x1fc <set_color_based_on_global_neighbors>

    // reset message flags
    message_sent = 0;
     306:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <message_sent>
    new_message = 0;
     30a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <new_message>
     30e:	08 95       	ret

00000310 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     310:	08 95       	ret

00000312 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	08 95       	ret

00000318 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     318:	08 95       	ret

0000031a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     31a:	df 92       	push	r13
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
    cli();
     328:	f8 94       	cli

    ports_off();
     32a:	14 b8       	out	0x04, r1	; 4
     32c:	17 b8       	out	0x07, r1	; 7
     32e:	1a b8       	out	0x0a, r1	; 10
     330:	15 b8       	out	0x05, r1	; 5
     332:	18 b8       	out	0x08, r1	; 8
     334:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     336:	52 9a       	sbi	0x0a, 2	; 10
     338:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     33a:	14 bc       	out	0x24, r1	; 36
     33c:	85 e0       	ldi	r24, 0x05	; 5
     33e:	85 bd       	out	0x25, r24	; 37
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	87 bd       	out	0x27, r24	; 39
     344:	82 e0       	ldi	r24, 0x02	; 2
     346:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     34a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     34e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     352:	2f e8       	ldi	r18, 0x8F	; 143
     354:	3b e0       	ldi	r19, 0x0B	; 11
     356:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     35a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     35e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     362:	53 98       	cbi	0x0a, 3	; 10
     364:	23 98       	cbi	0x04, 3	; 4
     366:	91 ea       	ldi	r25, 0xA1	; 161
     368:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     36c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     370:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     374:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     378:	8b e0       	ldi	r24, 0x0B	; 11
     37a:	80 bf       	out	0x30, r24	; 48
     37c:	83 e0       	ldi	r24, 0x03	; 3
     37e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     382:	86 e0       	ldi	r24, 0x06	; 6
     384:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     388:	83 e8       	ldi	r24, 0x83	; 131
     38a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     38e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     392:	80 64       	ori	r24, 0x40	; 64
     394:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     398:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     39c:	86 fd       	sbrc	r24, 6
     39e:	fc cf       	rjmp	.-8      	; 0x398 <kilo_init+0x7e>
    adc_trigger_high_gain();
     3a0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3a4:	83 ea       	ldi	r24, 0xA3	; 163
     3a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
    if (osccal != 0xFF)
     3b8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ba:	11 f0       	breq	.+4      	; 0x3c0 <kilo_init+0xa6>
        OSCCAL = osccal;
     3bc:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     3c0:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_busy>
    rx_leadingbit = 1;
     3c4:	c1 e0       	ldi	r28, 0x01	; 1
     3c6:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <rx_leadingbit>
    rx_leadingbyte = 1;
     3ca:	c0 93 73 01 	sts	0x0173, r28	; 0x800173 <rx_leadingbyte>
    rx_byteindex = 0;
     3ce:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <rx_byteindex>
    rx_bytevalue = 0;
     3d2:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     3d6:	80 e9       	ldi	r24, 0x90	; 144
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     3de:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     3e2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tx_mask>
     3e6:	88 73       	andi	r24, 0x38	; 56
     3e8:	11 f0       	breq	.+4      	; 0x3ee <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     3ea:	c0 93 4c 01 	sts	0x014C, r28	; 0x80014c <tx_mask>
    tx_clock = 0;
     3ee:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <tx_clock+0x1>
     3f2:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <tx_clock>
    tx_increment = 255;
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <tx_increment+0x1>
     3fe:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <tx_increment>
    kilo_ticks = 0;
     402:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <kilo_ticks>
     406:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <kilo_ticks+0x1>
     40a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <kilo_ticks+0x2>
     40e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <kilo_ticks+0x3>
    kilo_state = IDLE;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <kilo_state>
    kilo_tx_period = 3906;
     418:	82 e4       	ldi	r24, 0x42	; 66
     41a:	9f e0       	ldi	r25, 0x0F	; 15
     41c:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <kilo_tx_period+0x1>
     420:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     424:	80 eb       	ldi	r24, 0xB0	; 176
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     42c:	c8 2f       	mov	r28, r24
     42e:	81 eb       	ldi	r24, 0xB1	; 177
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     436:	2c 2f       	mov	r18, r28
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	38 2b       	or	r19, r24
     43c:	30 93 89 01 	sts	0x0189, r19	; 0x800189 <kilo_uid+0x1>
     440:	20 93 88 01 	sts	0x0188, r18	; 0x800188 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     444:	85 e0       	ldi	r24, 0x05	; 5
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     44c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     450:	89 e0       	ldi	r24, 0x09	; 9
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     458:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     45c:	8c e0       	ldi	r24, 0x0C	; 12
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     464:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     468:	84 e1       	ldi	r24, 0x14	; 20
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     470:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <kilo_straight_right>
     474:	07 e5       	ldi	r16, 0x57	; 87
     476:	11 e0       	ldi	r17, 0x01	; 1
     478:	50 e3       	ldi	r21, 0x30	; 48
     47a:	e5 2e       	mov	r14, r21
     47c:	51 e0       	ldi	r21, 0x01	; 1
     47e:	f5 2e       	mov	r15, r21
     480:	c0 e2       	ldi	r28, 0x20	; 32
     482:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     484:	ce 01       	movw	r24, r28
     486:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     48a:	d8 2e       	mov	r13, r24
     48c:	ce 01       	movw	r24, r28
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     494:	2d 2d       	mov	r18, r13
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	32 2f       	mov	r19, r18
     49a:	22 27       	eor	r18, r18
     49c:	28 2b       	or	r18, r24
     49e:	f8 01       	movw	r30, r16
     4a0:	21 93       	st	Z+, r18
     4a2:	31 93       	st	Z+, r19
     4a4:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     4a6:	ce 01       	movw	r24, r28
     4a8:	c0 96       	adiw	r24, 0x30	; 48
     4aa:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     4ae:	d8 2e       	mov	r13, r24
     4b0:	ce 01       	movw	r24, r28
     4b2:	c1 96       	adiw	r24, 0x31	; 49
     4b4:	0e 94 06 0c 	call	0x180c	; 0x180c <eeprom_read_byte>
     4b8:	2d 2d       	mov	r18, r13
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	32 2f       	mov	r19, r18
     4be:	22 27       	eor	r18, r18
     4c0:	28 2b       	or	r18, r24
     4c2:	f7 01       	movw	r30, r14
     4c4:	21 93       	st	Z+, r18
     4c6:	31 93       	st	Z+, r19
     4c8:	7f 01       	movw	r14, r30
     4ca:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     4cc:	cc 33       	cpi	r28, 0x3C	; 60
     4ce:	d1 05       	cpc	r29, r1
     4d0:	c9 f6       	brne	.-78     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     4d2:	78 94       	sei
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	ff 90       	pop	r15
     4de:	ef 90       	pop	r14
     4e0:	df 90       	pop	r13
     4e2:	08 95       	ret

000004e4 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     4e4:	1f 92       	push	r1
     4e6:	0f 92       	push	r0
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	0f 92       	push	r0
     4ec:	11 24       	eor	r1, r1
     4ee:	8f 93       	push	r24
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	a8 95       	wdr
     4f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     4fa:	88 61       	ori	r24, 0x18	; 24
     4fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     500:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     504:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     506:	8f 91       	pop	r24
     508:	0f 90       	pop	r0
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	0f 90       	pop	r0
     50e:	1f 90       	pop	r1
     510:	18 95       	reti

00000512 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     512:	00 97       	sbiw	r24, 0x00	; 0
     514:	41 f0       	breq	.+16     	; 0x526 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     516:	ef ec       	ldi	r30, 0xCF	; 207
     518:	f7 e0       	ldi	r31, 0x07	; 7
     51a:	31 97       	sbiw	r30, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <delay+0x8>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <delay+0xe>
     520:	00 00       	nop
        _delay_ms(1);
        ms--;
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f6 cf       	rjmp	.-20     	; 0x512 <delay>
    }
}
     526:	08 95       	ret

00000528 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     528:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     52c:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     530:	08 95       	ret

00000532 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     538:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     53c:	8f e0       	ldi	r24, 0x0F	; 15
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0c 94 89 02 	jmp	0x512	; 0x512 <delay>

00000544 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     544:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_busy>
     548:	81 11       	cpse	r24, r1
     54a:	1e c0       	rjmp	.+60     	; 0x588 <get_ambientlight+0x44>
        cli();
     54c:	f8 94       	cli
        adc_setup_conversion(7);
     54e:	87 e0       	ldi	r24, 0x07	; 7
     550:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     554:	83 e8       	ldi	r24, 0x83	; 131
     556:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     55a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     55e:	80 64       	ori	r24, 0x40	; 64
     560:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     564:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     568:	86 fd       	sbrc	r24, 6
     56a:	fc cf       	rjmp	.-8      	; 0x564 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     56c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     570:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     574:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     578:	23 ea       	ldi	r18, 0xA3	; 163
     57a:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     584:	78 94       	sei
     586:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     58c:	08 95       	ret

0000058e <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     58e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_busy>
     592:	81 11       	cpse	r24, r1
     594:	1e c0       	rjmp	.+60     	; 0x5d2 <get_temperature+0x44>
        cli();
     596:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     598:	88 ec       	ldi	r24, 0xC8	; 200
     59a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     59e:	87 e8       	ldi	r24, 0x87	; 135
     5a0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     5a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5a8:	80 64       	ori	r24, 0x40	; 64
     5aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5b2:	86 fd       	sbrc	r24, 6
     5b4:	fc cf       	rjmp	.-8      	; 0x5ae <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     5b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     5ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     5be:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5c2:	23 ea       	ldi	r18, 0xA3	; 163
     5c4:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5c8:	21 e0       	ldi	r18, 0x01	; 1
     5ca:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     5ce:	78 94       	sei
     5d0:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     5d2:	8f ef       	ldi	r24, 0xFF	; 255
     5d4:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     5d6:	08 95       	ret

000005d8 <rand_hard>:

uint8_t rand_hard() {
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     5e0:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     5e2:	e3 ea       	ldi	r30, 0xA3	; 163
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     5e6:	c6 e0       	ldi	r28, 0x06	; 6
     5e8:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     5ea:	a1 e0       	ldi	r26, 0x01	; 1
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     5ee:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     5f0:	f8 94       	cli
            adc_setup_conversion(6);
     5f2:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5f6:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     5fa:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5fe:	40 64       	ori	r20, 0x40	; 64
     600:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     604:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     608:	46 fd       	sbrc	r20, 6
     60a:	fc cf       	rjmp	.-8      	; 0x604 <rand_hard+0x2c>
            a = ADCW&0x1;
     60c:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     610:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     614:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     616:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     61a:	50 64       	ori	r21, 0x40	; 64
     61c:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     620:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     624:	56 fd       	sbrc	r21, 6
     626:	fc cf       	rjmp	.-8      	; 0x620 <rand_hard+0x48>
            b = ADCW&0x1;
     628:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     62c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     630:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     634:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     638:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     63c:	78 94       	sei
            tries++;
     63e:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     640:	61 70       	andi	r22, 0x01	; 1
     642:	46 17       	cp	r20, r22
     644:	51 f0       	breq	.+20     	; 0x65a <rand_hard+0x82>
        if (a)
     646:	44 23       	and	r20, r20
     648:	59 f0       	breq	.+22     	; 0x660 <rand_hard+0x88>
            num |= (1<<i);
     64a:	ad 01       	movw	r20, r26
     64c:	02 2e       	mov	r0, r18
     64e:	01 c0       	rjmp	.+2      	; 0x652 <rand_hard+0x7a>
     650:	44 0f       	add	r20, r20
     652:	0a 94       	dec	r0
     654:	ea f7       	brpl	.-6      	; 0x650 <rand_hard+0x78>
     656:	84 2b       	or	r24, r20
     658:	03 c0       	rjmp	.+6      	; 0x660 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     65a:	90 38       	cpi	r25, 0x80	; 128
     65c:	49 f6       	brne	.-110    	; 0x5f0 <rand_hard+0x18>
     65e:	f3 cf       	rjmp	.-26     	; 0x646 <rand_hard+0x6e>
     660:	2f 5f       	subi	r18, 0xFF	; 255
     662:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     664:	28 30       	cpi	r18, 0x08	; 8
     666:	31 05       	cpc	r19, r1
     668:	09 f0       	breq	.+2      	; 0x66c <rand_hard+0x94>
     66a:	c1 cf       	rjmp	.-126    	; 0x5ee <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     672:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seed>
     676:	98 e0       	ldi	r25, 0x08	; 8
     678:	89 9f       	mul	r24, r25
     67a:	90 01       	movw	r18, r0
     67c:	11 24       	eor	r1, r1
     67e:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     680:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <accumulator>
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	89 0f       	add	r24, r25
     688:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <accumulator>
     68c:	82 2f       	mov	r24, r18
     68e:	82 95       	swap	r24
     690:	86 95       	lsr	r24
     692:	87 70       	andi	r24, 0x07	; 7
     694:	28 27       	eor	r18, r24
     696:	96 95       	lsr	r25
     698:	96 95       	lsr	r25
     69a:	82 2f       	mov	r24, r18
     69c:	89 27       	eor	r24, r25
     69e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <seed>
    return seed;
}
     6a2:	08 95       	ret

000006a4 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     6a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <seed>
     6a8:	08 95       	ret

000006aa <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     6aa:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_busy>
     6ae:	81 11       	cpse	r24, r1
     6b0:	16 c0       	rjmp	.+44     	; 0x6de <get_voltage+0x34>
        cli();                                    // disable interrupts
     6b2:	f8 94       	cli
        adc_setup_conversion(6);
     6b4:	86 e0       	ldi	r24, 0x06	; 6
     6b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     6ba:	83 e8       	ldi	r24, 0x83	; 131
     6bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     6c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6c4:	80 64       	ori	r24, 0x40	; 64
     6c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     6ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     6ce:	86 fd       	sbrc	r24, 6
     6d0:	fc cf       	rjmp	.-8      	; 0x6ca <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     6d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     6d6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     6da:	78 94       	sei
     6dc:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     6e2:	08 95       	ret

000006e4 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     6e4:	2f 92       	push	r2
     6e6:	3f 92       	push	r3
     6e8:	4f 92       	push	r4
     6ea:	5f 92       	push	r5
     6ec:	6f 92       	push	r6
     6ee:	7f 92       	push	r7
     6f0:	8f 92       	push	r8
     6f2:	9f 92       	push	r9
     6f4:	af 92       	push	r10
     6f6:	bf 92       	push	r11
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     70a:	fc 01       	movw	r30, r24
     70c:	c2 81       	ldd	r28, Z+2	; 0x02
     70e:	d3 81       	ldd	r29, Z+3	; 0x03
     710:	c4 38       	cpi	r28, 0x84	; 132
     712:	f3 e0       	ldi	r31, 0x03	; 3
     714:	df 07       	cpc	r29, r31
     716:	0c f0       	brlt	.+2      	; 0x71a <estimate_distance+0x36>
     718:	7e c0       	rjmp	.+252    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
        if (dist->high_gain > kilo_irhigh[0]) {
     71a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <kilo_irhigh>
     71e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <kilo_irhigh+0x1>
     722:	8c 17       	cp	r24, r28
     724:	9d 07       	cpc	r25, r29
     726:	08 f4       	brcc	.+2      	; 0x72a <estimate_distance+0x46>
     728:	6f c0       	rjmp	.+222    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     72a:	e2 e3       	ldi	r30, 0x32	; 50
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     730:	81 91       	ld	r24, Z+
     732:	91 91       	ld	r25, Z+
     734:	8c 17       	cp	r24, r28
     736:	9d 07       	cpc	r25, r29
     738:	20 f0       	brcs	.+8      	; 0x742 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     73a:	1f 5f       	subi	r17, 0xFF	; 255
     73c:	1e 30       	cpi	r17, 0x0E	; 14
     73e:	c1 f7       	brne	.-16     	; 0x730 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     740:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     742:	81 2f       	mov	r24, r17
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	fc 01       	movw	r30, r24
     748:	ee 0f       	add	r30, r30
     74a:	ff 1f       	adc	r31, r31
     74c:	e0 5d       	subi	r30, 0xD0	; 208
     74e:	fe 4f       	sbci	r31, 0xFE	; 254
     750:	e0 80       	ld	r14, Z
     752:	f1 80       	ldd	r15, Z+1	; 0x01
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	fc 01       	movw	r30, r24
     75a:	e2 5d       	subi	r30, 0xD2	; 210
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	80 81       	ld	r24, Z
     760:	91 81       	ldd	r25, Z+1	; 0x01
     762:	b7 01       	movw	r22, r14
     764:	68 1b       	sub	r22, r24
     766:	79 0b       	sbc	r23, r25
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 af 0a 	call	0x155e	; 0x155e <__floatunsisf>
     770:	9b 01       	movw	r18, r22
     772:	ac 01       	movw	r20, r24
     774:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     778:	4b 01       	movw	r8, r22
     77a:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     77c:	be 01       	movw	r22, r28
     77e:	0d 2e       	mov	r0, r29
     780:	00 0c       	add	r0, r0
     782:	88 0b       	sbc	r24, r24
     784:	99 0b       	sbc	r25, r25
     786:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__floatsisf>
     78a:	2b 01       	movw	r4, r22
     78c:	3c 01       	movw	r6, r24
     78e:	b7 01       	movw	r22, r14
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 af 0a 	call	0x155e	; 0x155e <__floatunsisf>
     798:	6b 01       	movw	r12, r22
     79a:	7c 01       	movw	r14, r24
     79c:	61 2f       	mov	r22, r17
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 af 0a 	call	0x155e	; 0x155e <__floatunsisf>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	5f e3       	ldi	r21, 0x3F	; 63
     7b0:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	a9 01       	movw	r20, r18
     7ba:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     7be:	a5 01       	movw	r20, r10
     7c0:	94 01       	movw	r18, r8
     7c2:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     7c6:	9b 01       	movw	r18, r22
     7c8:	ac 01       	movw	r20, r24
     7ca:	c7 01       	movw	r24, r14
     7cc:	b6 01       	movw	r22, r12
     7ce:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
     7d2:	9b 01       	movw	r18, r22
     7d4:	ac 01       	movw	r20, r24
     7d6:	c3 01       	movw	r24, r6
     7d8:	b2 01       	movw	r22, r4
     7da:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 e2       	ldi	r20, 0x20	; 32
     7e4:	51 e4       	ldi	r21, 0x41	; 65
     7e6:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     7ea:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fixsfsi>
     7ee:	7b 01       	movw	r14, r22
     7f0:	c5 01       	movw	r24, r10
     7f2:	b4 01       	movw	r22, r8
     7f4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fixsfsi>
     7f8:	ab 01       	movw	r20, r22
     7fa:	bc 01       	movw	r22, r24
     7fc:	c7 01       	movw	r24, r14
     7fe:	ba 01       	movw	r22, r20
     800:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__divmodhi4>
     804:	16 2f       	mov	r17, r22
     806:	01 c0       	rjmp	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     808:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     80a:	cd 3b       	cpi	r28, 0xBD	; 189
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	d8 07       	cpc	r29, r24
     810:	0c f4       	brge	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     812:	ca c0       	rjmp	.+404    	; 0x9a8 <__stack+0xa9>
     814:	01 c0       	rjmp	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     816:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     818:	f1 01       	movw	r30, r2
     81a:	c0 80       	ld	r12, Z
     81c:	d1 80       	ldd	r13, Z+1	; 0x01
     81e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <kilo_irlow>
     822:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <kilo_irlow+0x1>
     826:	8c 15       	cp	r24, r12
     828:	9d 05       	cpc	r25, r13
     82a:	88 f0       	brcs	.+34     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     82c:	e9 e5       	ldi	r30, 0x59	; 89
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     836:	e1 90       	ld	r14, Z+
     838:	f1 90       	ld	r15, Z+
     83a:	ec 14       	cp	r14, r12
     83c:	fd 04       	cpc	r15, r13
     83e:	08 f4       	brcc	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     840:	58 c0       	rjmp	.+176    	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
     842:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     844:	8e 30       	cpi	r24, 0x0E	; 14
     846:	91 05       	cpc	r25, r1
     848:	a9 f7       	brne	.-22     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     84a:	0a e5       	ldi	r16, 0x5A	; 90
     84c:	01 c0       	rjmp	.+2      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     84e:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     850:	1f 3f       	cpi	r17, 0xFF	; 255
     852:	09 f4       	brne	.+2      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     854:	4b c0       	rjmp	.+150    	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     856:	be 01       	movw	r22, r28
     858:	dd 0f       	add	r29, r29
     85a:	88 0b       	sbc	r24, r24
     85c:	99 0b       	sbc	r25, r25
     85e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__floatsisf>
     862:	6b 01       	movw	r12, r22
     864:	7c 01       	movw	r14, r24
     866:	61 2f       	mov	r22, r17
     868:	70 e0       	ldi	r23, 0x00	; 0
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 af 0a 	call	0x155e	; 0x155e <__floatunsisf>
     872:	4b 01       	movw	r8, r22
     874:	5c 01       	movw	r10, r24
     876:	a7 01       	movw	r20, r14
     878:	96 01       	movw	r18, r12
     87a:	60 e0       	ldi	r22, 0x00	; 0
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	81 e6       	ldi	r24, 0x61	; 97
     880:	94 e4       	ldi	r25, 0x44	; 68
     882:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
     886:	9b 01       	movw	r18, r22
     888:	ac 01       	movw	r20, r24
     88a:	c5 01       	movw	r24, r10
     88c:	b4 01       	movw	r22, r8
     88e:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     892:	4b 01       	movw	r8, r22
     894:	5c 01       	movw	r10, r24
     896:	60 2f       	mov	r22, r16
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 af 0a 	call	0x155e	; 0x155e <__floatunsisf>
     8a2:	2b 01       	movw	r4, r22
     8a4:	3c 01       	movw	r6, r24
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	4f e2       	ldi	r20, 0x2F	; 47
     8ac:	54 e4       	ldi	r21, 0x44	; 68
     8ae:	c7 01       	movw	r24, r14
     8b0:	b6 01       	movw	r22, r12
     8b2:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	c3 01       	movw	r24, r6
     8bc:	b2 01       	movw	r22, r4
     8be:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     8c2:	9b 01       	movw	r18, r22
     8c4:	ac 01       	movw	r20, r24
     8c6:	c5 01       	movw	r24, r10
     8c8:	b4 01       	movw	r22, r8
     8ca:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	48 e4       	ldi	r20, 0x48	; 72
     8d4:	53 e4       	ldi	r21, 0x43	; 67
     8d6:	0e 94 07 0a 	call	0x140e	; 0x140e <__divsf3>
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	44 e0       	ldi	r20, 0x04	; 4
     8e0:	52 e4       	ldi	r21, 0x42	; 66
     8e2:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     8e6:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixunssfsi>
     8ea:	60 c0       	rjmp	.+192    	; 0x9ac <__stack+0xad>
        } else {
            return 33 + dist_low;
     8ec:	61 e2       	ldi	r22, 0x21	; 33
     8ee:	60 0f       	add	r22, r16
     8f0:	5d c0       	rjmp	.+186    	; 0x9ac <__stack+0xad>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	fc 01       	movw	r30, r24
     8f8:	eb 5a       	subi	r30, 0xAB	; 171
     8fa:	fe 4f       	sbci	r31, 0xFE	; 254
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	b7 01       	movw	r22, r14
     902:	68 1b       	sub	r22, r24
     904:	79 0b       	sbc	r23, r25
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 af 0a 	call	0x155e	; 0x155e <__floatunsisf>
     90e:	9b 01       	movw	r18, r22
     910:	ac 01       	movw	r20, r24
     912:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     916:	4b 01       	movw	r8, r22
     918:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     91a:	b6 01       	movw	r22, r12
     91c:	dd 0c       	add	r13, r13
     91e:	88 0b       	sbc	r24, r24
     920:	99 0b       	sbc	r25, r25
     922:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__floatsisf>
     926:	2b 01       	movw	r4, r22
     928:	3c 01       	movw	r6, r24
     92a:	b7 01       	movw	r22, r14
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 af 0a 	call	0x155e	; 0x155e <__floatunsisf>
     934:	6b 01       	movw	r12, r22
     936:	7c 01       	movw	r14, r24
     938:	63 2d       	mov	r22, r3
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 af 0a 	call	0x155e	; 0x155e <__floatunsisf>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e0       	ldi	r20, 0x00	; 0
     94a:	5f e3       	ldi	r21, 0x3F	; 63
     94c:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	a9 01       	movw	r20, r18
     956:	0e 94 9b 09 	call	0x1336	; 0x1336 <__addsf3>
     95a:	a5 01       	movw	r20, r10
     95c:	94 01       	movw	r18, r8
     95e:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     962:	9b 01       	movw	r18, r22
     964:	ac 01       	movw	r20, r24
     966:	c7 01       	movw	r24, r14
     968:	b6 01       	movw	r22, r12
     96a:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
     96e:	9b 01       	movw	r18, r22
     970:	ac 01       	movw	r20, r24
     972:	c3 01       	movw	r24, r6
     974:	b2 01       	movw	r22, r4
     976:	0e 94 9a 09 	call	0x1334	; 0x1334 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 3d 0b 	call	0x167a	; 0x167a <__mulsf3>
     986:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fixsfsi>
     98a:	7b 01       	movw	r14, r22
     98c:	c5 01       	movw	r24, r10
     98e:	b4 01       	movw	r22, r8
     990:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__fixsfsi>
     994:	ab 01       	movw	r20, r22
     996:	bc 01       	movw	r22, r24
     998:	c7 01       	movw	r24, r14
     99a:	ba 01       	movw	r22, r20
     99c:	0e 94 5d 09 	call	0x12ba	; 0x12ba <__divmodhi4>
     9a0:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     9a2:	6f 3f       	cpi	r22, 0xFF	; 255
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <__stack+0xa9>
     9a6:	54 cf       	rjmp	.-344    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     9a8:	61 e2       	ldi	r22, 0x21	; 33
     9aa:	61 0f       	add	r22, r17
    }
}
     9ac:	86 2f       	mov	r24, r22
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	7f 90       	pop	r7
     9c8:	6f 90       	pop	r6
     9ca:	5f 90       	pop	r5
     9cc:	4f 90       	pop	r4
     9ce:	3f 90       	pop	r3
     9d0:	2f 90       	pop	r2
     9d2:	08 95       	ret

000009d4 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     9d4:	1f 92       	push	r1
     9d6:	0f 92       	push	r0
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	0f 92       	push	r0
     9dc:	11 24       	eor	r1, r1
     9de:	2f 93       	push	r18
     9e0:	3f 93       	push	r19
     9e2:	4f 93       	push	r20
     9e4:	5f 93       	push	r21
     9e6:	6f 93       	push	r22
     9e8:	7f 93       	push	r23
     9ea:	8f 93       	push	r24
     9ec:	9f 93       	push	r25
     9ee:	af 93       	push	r26
     9f0:	bf 93       	push	r27
     9f2:	ef 93       	push	r30
     9f4:	ff 93       	push	r31
    tx_clock += tx_increment;
     9f6:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <tx_clock>
     9fa:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <tx_clock+0x1>
     9fe:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <tx_increment>
     a02:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <tx_increment+0x1>
     a06:	82 0f       	add	r24, r18
     a08:	93 1f       	adc	r25, r19
     a0a:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <tx_clock+0x1>
     a0e:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <tx_clock>
    tx_increment = 0xFF;
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <tx_increment+0x1>
     a1a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <tx_increment>
    OCR0A = tx_increment;
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     a22:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <kilo_ticks>
     a26:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <kilo_ticks+0x1>
     a2a:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <kilo_ticks+0x2>
     a2e:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <kilo_ticks+0x3>
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	a1 1d       	adc	r26, r1
     a36:	b1 1d       	adc	r27, r1
     a38:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <kilo_ticks>
     a3c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <kilo_ticks+0x1>
     a40:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <kilo_ticks+0x2>
     a44:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     a48:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_busy>
     a4c:	81 11       	cpse	r24, r1
     a4e:	2d c0       	rjmp	.+90     	; 0xaaa <__vector_14+0xd6>
     a50:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <kilo_tx_period>
     a54:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <kilo_tx_period+0x1>
     a58:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <tx_clock>
     a5c:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <tx_clock+0x1>
     a60:	82 17       	cp	r24, r18
     a62:	93 07       	cpc	r25, r19
     a64:	10 f5       	brcc	.+68     	; 0xaaa <__vector_14+0xd6>
     a66:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <kilo_state>
     a6a:	84 30       	cpi	r24, 0x04	; 4
     a6c:	f1 f4       	brne	.+60     	; 0xaaa <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     a6e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <kilo_message_tx>
     a72:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <kilo_message_tx+0x1>
     a76:	09 95       	icall
        if (msg) {
     a78:	00 97       	sbiw	r24, 0x00	; 0
     a7a:	b9 f0       	breq	.+46     	; 0xaaa <__vector_14+0xd6>
            if (message_send(msg)) {
     a7c:	0e 94 bd 08 	call	0x117a	; 0x117a <message_send>
     a80:	88 23       	and	r24, r24
     a82:	51 f0       	breq	.+20     	; 0xa98 <__vector_14+0xc4>
                kilo_message_tx_success();
     a84:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <kilo_message_tx_success>
     a88:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <kilo_message_tx_success+0x1>
     a8c:	09 95       	icall
                tx_clock = 0;
     a8e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <tx_clock+0x1>
     a92:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <tx_clock>
     a96:	09 c0       	rjmp	.+18     	; 0xaaa <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     a98:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <rand>
     a9c:	9c 01       	movw	r18, r24
     a9e:	33 27       	eor	r19, r19
     aa0:	30 93 75 01 	sts	0x0175, r19	; 0x800175 <tx_increment+0x1>
     aa4:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <tx_increment>
                OCR0A = tx_increment;
     aa8:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     aaa:	ff 91       	pop	r31
     aac:	ef 91       	pop	r30
     aae:	bf 91       	pop	r27
     ab0:	af 91       	pop	r26
     ab2:	9f 91       	pop	r25
     ab4:	8f 91       	pop	r24
     ab6:	7f 91       	pop	r23
     ab8:	6f 91       	pop	r22
     aba:	5f 91       	pop	r21
     abc:	4f 91       	pop	r20
     abe:	3f 91       	pop	r19
     ac0:	2f 91       	pop	r18
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     acc:	80 ff       	sbrs	r24, 0
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <set_color+0x8>
        DDRD |= (1<<5);
     ad0:	55 9a       	sbi	0x0a, 5	; 10
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     ad4:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     ad6:	81 ff       	sbrs	r24, 1
     ad8:	02 c0       	rjmp	.+4      	; 0xade <set_color+0x12>
        DDRD |= (1<<4);
     ada:	54 9a       	sbi	0x0a, 4	; 10
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     ade:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     ae0:	82 ff       	sbrs	r24, 2
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <set_color+0x1c>
        DDRC |= (1<<3);
     ae4:	3b 9a       	sbi	0x07, 3	; 7
     ae6:	01 c0       	rjmp	.+2      	; 0xaea <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     ae8:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     aea:	83 ff       	sbrs	r24, 3
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <set_color+0x26>
        DDRC |= (1<<2);
     aee:	3a 9a       	sbi	0x07, 2	; 7
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     af2:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     af4:	84 ff       	sbrs	r24, 4
     af6:	02 c0       	rjmp	.+4      	; 0xafc <set_color+0x30>
        DDRC |= (1<<5);
     af8:	3d 9a       	sbi	0x07, 5	; 7
     afa:	01 c0       	rjmp	.+2      	; 0xafe <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     afc:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     afe:	85 ff       	sbrs	r24, 5
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <set_color+0x3a>
        DDRC |= (1<<4);
     b02:	3c 9a       	sbi	0x07, 4	; 7
     b04:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     b06:	3c 98       	cbi	0x07, 4	; 7
     b08:	08 95       	ret

00000b0a <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     b0a:	8c 01       	movw	r16, r24
     b0c:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     b0e:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     b10:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     b12:	84 e0       	ldi	r24, 0x04	; 4
     b14:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     b16:	98 e1       	ldi	r25, 0x18	; 24
     b18:	c9 2e       	mov	r12, r25
     b1a:	29 e2       	ldi	r18, 0x29	; 41
     b1c:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     b1e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <kilo_state>
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	e7 30       	cpi	r30, 0x07	; 7
     b26:	f1 05       	cpc	r31, r1
     b28:	d0 f7       	brcc	.-12     	; 0xb1e <kilo_start+0x14>
     b2a:	ec 5c       	subi	r30, 0xCC	; 204
     b2c:	ff 4f       	sbci	r31, 0xFF	; 255
     b2e:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__tablejump2__>
            case SLEEPING:
                cli();
     b32:	f8 94       	cli
                acomp_off();
     b34:	80 b7       	in	r24, 0x30	; 48
     b36:	87 7f       	andi	r24, 0xF7	; 247
     b38:	80 bf       	out	0x30, r24	; 48
                adc_off();
     b3a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b3e:	8f 77       	andi	r24, 0x7F	; 127
     b40:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     b44:	14 b8       	out	0x04, r1	; 4
     b46:	17 b8       	out	0x07, r1	; 7
     b48:	1a b8       	out	0x0a, r1	; 10
     b4a:	15 b8       	out	0x05, r1	; 5
     b4c:	18 b8       	out	0x08, r1	; 8
     b4e:	1b b8       	out	0x0b, r1	; 11
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	a8 95       	wdr
     b56:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     b60:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     b64:	80 64       	ori	r24, 0x40	; 64
     b66:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     b6a:	83 b7       	in	r24, 0x33	; 51
     b6c:	81 7f       	andi	r24, 0xF1	; 241
     b6e:	84 60       	ori	r24, 0x04	; 4
     b70:	83 bf       	out	0x33, r24	; 51
                cli();
     b72:	f8 94       	cli
                sleep_enable();
     b74:	83 b7       	in	r24, 0x33	; 51
     b76:	81 60       	ori	r24, 0x01	; 1
     b78:	83 bf       	out	0x33, r24	; 51
                sei();
     b7a:	78 94       	sei
                sleep_cpu();
     b7c:	88 95       	sleep
                sleep_disable();
     b7e:	83 b7       	in	r24, 0x33	; 51
     b80:	8e 7f       	andi	r24, 0xFE	; 254
     b82:	83 bf       	out	0x33, r24	; 51
                sei();
     b84:	78 94       	sei
                rx_busy = 0;
     b86:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_busy>
                ports_on();
     b8a:	52 9a       	sbi	0x0a, 2	; 10
     b8c:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     b8e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b92:	80 68       	ori	r24, 0x80	; 128
     b94:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b98:	87 e5       	ldi	r24, 0x57	; 87
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <kilo_start+0x92>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <kilo_start+0x98>
     ba2:	00 00       	nop
                _delay_us(300);
                acomp_on();
     ba4:	80 b7       	in	r24, 0x30	; 48
     ba6:	88 61       	ori	r24, 0x18	; 24
     ba8:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     baa:	8f e3       	ldi	r24, 0x3F	; 63
     bac:	0e 94 66 05 	call	0xacc	; 0xacc <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bb0:	ef e1       	ldi	r30, 0x1F	; 31
     bb2:	fe e4       	ldi	r31, 0x4E	; 78
     bb4:	31 97       	sbiw	r30, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <kilo_start+0xaa>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <kilo_start+0xb0>
     bba:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     bbc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_busy>
     bc0:	88 23       	and	r24, r24
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <kilo_start+0xbc>
     bc4:	50 c0       	rjmp	.+160    	; 0xc66 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	0e 94 66 05 	call	0xacc	; 0xacc <set_color>
     bcc:	ff ef       	ldi	r31, 0xFF	; 255
     bce:	20 e7       	ldi	r18, 0x70	; 112
     bd0:	82 e0       	ldi	r24, 0x02	; 2
     bd2:	f1 50       	subi	r31, 0x01	; 1
     bd4:	20 40       	sbci	r18, 0x00	; 0
     bd6:	80 40       	sbci	r24, 0x00	; 0
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <kilo_start+0xc8>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <kilo_start+0xd2>
     bdc:	00 00       	nop
     bde:	43 c0       	rjmp	.+134    	; 0xc66 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     be0:	8c e0       	ldi	r24, 0x0C	; 12
     be2:	0e 94 66 05 	call	0xacc	; 0xacc <set_color>
     be6:	ef ec       	ldi	r30, 0xCF	; 207
     be8:	f7 e0       	ldi	r31, 0x07	; 7
     bea:	31 97       	sbiw	r30, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <kilo_start+0xe0>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <kilo_start+0xe6>
     bf0:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	0e 94 66 05 	call	0xacc	; 0xacc <set_color>
     bf8:	ff ef       	ldi	r31, 0xFF	; 255
     bfa:	21 ee       	ldi	r18, 0xE1	; 225
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	f1 50       	subi	r31, 0x01	; 1
     c00:	20 40       	sbci	r18, 0x00	; 0
     c02:	80 40       	sbci	r24, 0x00	; 0
     c04:	e1 f7       	brne	.-8      	; 0xbfe <kilo_start+0xf4>
     c06:	2c c0       	rjmp	.+88     	; 0xc60 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     c08:	0e 94 55 03 	call	0x6aa	; 0x6aa <get_voltage>
                if(voltage > 682)
     c0c:	8b 3a       	cpi	r24, 0xAB	; 171
     c0e:	e2 e0       	ldi	r30, 0x02	; 2
     c10:	9e 07       	cpc	r25, r30
     c12:	24 f0       	brlt	.+8      	; 0xc1c <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     c14:	8c e0       	ldi	r24, 0x0C	; 12
     c16:	0e 94 66 05 	call	0xacc	; 0xacc <set_color>
     c1a:	81 cf       	rjmp	.-254    	; 0xb1e <kilo_start+0x14>
                else if(voltage > 648)
     c1c:	89 38       	cpi	r24, 0x89	; 137
     c1e:	f2 e0       	ldi	r31, 0x02	; 2
     c20:	9f 07       	cpc	r25, r31
     c22:	14 f0       	brlt	.+4      	; 0xc28 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     c24:	80 e3       	ldi	r24, 0x30	; 48
     c26:	f7 cf       	rjmp	.-18     	; 0xc16 <kilo_start+0x10c>
                else if(voltage > 614)
     c28:	87 36       	cpi	r24, 0x67	; 103
     c2a:	92 40       	sbci	r25, 0x02	; 2
     c2c:	14 f0       	brlt	.+4      	; 0xc32 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     c2e:	8f e0       	ldi	r24, 0x0F	; 15
     c30:	f2 cf       	rjmp	.-28     	; 0xc16 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	f0 cf       	rjmp	.-32     	; 0xc16 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     c36:	48 99       	sbic	0x09, 0	; 9
     c38:	16 c0       	rjmp	.+44     	; 0xc66 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	0e 94 66 05 	call	0xacc	; 0xacc <set_color>
     c40:	8f ec       	ldi	r24, 0xCF	; 207
     c42:	97 e0       	ldi	r25, 0x07	; 7
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <kilo_start+0x13a>
     c48:	00 c0       	rjmp	.+0      	; 0xc4a <kilo_start+0x140>
     c4a:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 66 05 	call	0xacc	; 0xacc <set_color>
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	e1 ee       	ldi	r30, 0xE1	; 225
     c56:	f4 e0       	ldi	r31, 0x04	; 4
     c58:	91 50       	subi	r25, 0x01	; 1
     c5a:	e0 40       	sbci	r30, 0x00	; 0
     c5c:	f0 40       	sbci	r31, 0x00	; 0
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <kilo_start+0x14e>
     c60:	00 c0       	rjmp	.+0      	; 0xc62 <kilo_start+0x158>
     c62:	00 00       	nop
     c64:	5c cf       	rjmp	.-328    	; 0xb1e <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	d6 cf       	rjmp	.-84     	; 0xc16 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     c6a:	d1 11       	cpse	r29, r1
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <kilo_start+0x168>
                    setup();
     c6e:	f8 01       	movw	r30, r16
     c70:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     c72:	d0 92 18 01 	sts	0x0118, r13	; 0x800118 <kilo_state>
     c76:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     c78:	f7 01       	movw	r30, r14
     c7a:	09 95       	icall
                break;
     c7c:	50 cf       	rjmp	.-352    	; 0xb1e <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     c7e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cur_motion>
     c82:	81 11       	cpse	r24, r1
     c84:	07 c0       	rjmp	.+14     	; 0xc94 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c86:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c8a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     c8e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <prev_motion>
     c92:	45 cf       	rjmp	.-374    	; 0xb1e <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     c94:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <cur_motion>
     c98:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <prev_motion>
     c9c:	98 17       	cp	r25, r24
     c9e:	09 f4       	brne	.+2      	; 0xca2 <kilo_start+0x198>
     ca0:	3e cf       	rjmp	.-388    	; 0xb1e <kilo_start+0x14>
                        prev_motion = cur_motion;
     ca2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cur_motion>
     ca6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     caa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cur_motion>
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	89 f4       	brne	.+34     	; 0xcd4 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cb2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cb6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     cba:	8f e2       	ldi	r24, 0x2F	; 47
     cbc:	95 e7       	ldi	r25, 0x75	; 117
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <kilo_start+0x1b4>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <kilo_start+0x1ba>
     cc4:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     cc6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cca:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cce:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     cd2:	25 cf       	rjmp	.-438    	; 0xb1e <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     cd4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cd8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cdc:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	59 f4       	brne	.+22     	; 0xcfa <kilo_start+0x1f0>
     ce4:	ef e2       	ldi	r30, 0x2F	; 47
     ce6:	f5 e7       	ldi	r31, 0x75	; 117
     ce8:	31 97       	sbiw	r30, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <kilo_start+0x1de>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <kilo_start+0x1e4>
     cee:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     cf0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     cf4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     cf8:	10 c0       	rjmp	.+32     	; 0xd1a <kilo_start+0x210>
     cfa:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     cfe:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d02:	8f e2       	ldi	r24, 0x2F	; 47
     d04:	95 e7       	ldi	r25, 0x75	; 117
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <kilo_start+0x1fc>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <kilo_start+0x202>
     d0c:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     d0e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <kilo_straight_right>
     d12:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     d16:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     d1a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d1e:	ff ce       	rjmp	.-514    	; 0xb1e <kilo_start+0x14>

00000d20 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
    rx_timer_off();
     d2e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d32:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d36:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rx_leadingbit>
    rx_leadingbyte = 1;
     d40:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <rx_leadingbyte>
    rx_busy = 0;
     d44:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_busy>
    adc_trigger_high_gain();
     d48:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d4c:	93 ea       	ldi	r25, 0xA3	; 163
     d4e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d52:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	0f 90       	pop	r0
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	0f 90       	pop	r0
     d60:	1f 90       	pop	r1
     d62:	18 95       	reti

00000d64 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     d64:	1f 92       	push	r1
     d66:	0f 92       	push	r0
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	0f 92       	push	r0
     d6c:	11 24       	eor	r1, r1
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     d8a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d8e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     d98:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rx_leadingbit>
     d9c:	88 23       	and	r24, r24
     d9e:	21 f1       	breq	.+72     	; 0xde8 <__vector_23+0x84>
        rx_timer_on();
     da0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     da4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     da8:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     dac:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <rx_bytevalue>
        rx_leadingbit = 0;
     db0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <rx_leadingbit>
        if (rx_leadingbyte) {
     db4:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <rx_leadingbyte>
     db8:	88 23       	and	r24, r24
     dba:	09 f4       	brne	.+2      	; 0xdbe <__vector_23+0x5a>
     dbc:	af c1       	rjmp	.+862    	; 0x111c <__vector_23+0x3b8>
            adc_finish_conversion();
     dbe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dc2:	86 fd       	sbrc	r24, 6
     dc4:	fc cf       	rjmp	.-8      	; 0xdbe <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     dc6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     dca:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     dce:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <rx_dist+0x3>
     dd2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <rx_dist+0x2>
            adc_trigger_low_gain();
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     ddc:	93 ea       	ldi	r25, 0xA3	; 163
     dde:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     de2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     de6:	9a c1       	rjmp	.+820    	; 0x111c <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     de8:	c9 01       	movw	r24, r18
     dea:	87 58       	subi	r24, 0x87	; 135
     dec:	91 09       	sbc	r25, r1
     dee:	84 37       	cpi	r24, 0x74	; 116
     df0:	99 40       	sbci	r25, 0x09	; 9
     df2:	a0 f0       	brcs	.+40     	; 0xe1c <__vector_23+0xb8>
            rx_timer_off();
     df4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     df8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     dfc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     e00:	40 93 2f 01 	sts	0x012F, r20	; 0x80012f <rx_leadingbit>
            rx_leadingbyte = 1;
     e04:	40 93 73 01 	sts	0x0173, r20	; 0x800173 <rx_leadingbyte>
            rx_busy = 0;
     e08:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_busy>
            adc_trigger_high_gain();
     e0c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e10:	83 ea       	ldi	r24, 0xA3	; 163
     e12:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e16:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     e1a:	80 c1       	rjmp	.+768    	; 0x111c <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     e1c:	26 58       	subi	r18, 0x86	; 134
     e1e:	31 09       	sbc	r19, r1
     e20:	a4 ef       	ldi	r26, 0xF4	; 244
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	0e 94 77 09 	call	0x12ee	; 0x12ee <__umulhisi3>
     e28:	8c 01       	movw	r16, r24
     e2a:	22 27       	eor	r18, r18
     e2c:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     e2e:	08 30       	cpi	r16, 0x08	; 8
     e30:	60 f4       	brcc	.+24     	; 0xe4a <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <__vector_23+0xd6>
     e38:	88 0f       	add	r24, r24
     e3a:	0a 95       	dec	r16
     e3c:	ea f7       	brpl	.-6      	; 0xe38 <__vector_23+0xd4>
     e3e:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <rx_bytevalue>
     e42:	89 2b       	or	r24, r25
     e44:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <rx_bytevalue>
     e48:	69 c1       	rjmp	.+722    	; 0x111c <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     e4a:	40 93 2f 01 	sts	0x012F, r20	; 0x80012f <rx_leadingbit>
                if (rx_leadingbyte) {
     e4e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <rx_leadingbyte>
     e52:	88 23       	and	r24, r24
     e54:	41 f1       	breq	.+80     	; 0xea6 <__vector_23+0x142>
                    adc_finish_conversion();
     e56:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e5a:	86 fd       	sbrc	r24, 6
     e5c:	fc cf       	rjmp	.-8      	; 0xe56 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     e5e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     e62:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     e66:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <rx_dist+0x1>
     e6a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <rx_dist>
                    adc_trigger_high_gain();
     e6e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     e72:	83 ea       	ldi	r24, 0xA3	; 163
     e74:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     e7e:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <rx_bytevalue>
     e82:	99 23       	and	r25, r25
     e84:	59 f0       	breq	.+22     	; 0xe9c <__vector_23+0x138>
                        rx_timer_off();
     e86:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e8a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e8e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     e92:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <rx_leadingbyte>
                        rx_busy = 0;
     e96:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_busy>
     e9a:	40 c1       	rjmp	.+640    	; 0x111c <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     e9c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <rx_leadingbyte>
                        rx_byteindex = 0;
     ea0:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <rx_byteindex>
     ea4:	3b c1       	rjmp	.+630    	; 0x111c <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     ea6:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <rx_byteindex>
     eaa:	e8 2f       	mov	r30, r24
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	e7 58       	subi	r30, 0x87	; 135
     eb0:	fe 4f       	sbci	r31, 0xFE	; 254
     eb2:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <rx_bytevalue>
     eb6:	90 83       	st	Z, r25
                    rx_byteindex++;
     eb8:	8f 5f       	subi	r24, 0xFF	; 255
     eba:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     ebe:	8c 30       	cpi	r24, 0x0C	; 12
     ec0:	09 f0       	breq	.+2      	; 0xec4 <__vector_23+0x160>
     ec2:	2c c1       	rjmp	.+600    	; 0x111c <__vector_23+0x3b8>
                        rx_timer_off();
     ec4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ec8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     ecc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     ed0:	40 93 73 01 	sts	0x0173, r20	; 0x800173 <rx_leadingbyte>
                        rx_busy = 0;
     ed4:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     ed8:	00 91 83 01 	lds	r16, 0x0183	; 0x800183 <rx_msg+0xa>
     edc:	10 91 84 01 	lds	r17, 0x0184	; 0x800184 <rx_msg+0xb>
     ee0:	89 e7       	ldi	r24, 0x79	; 121
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 a1 08 	call	0x1142	; 0x1142 <message_crc>
     ee8:	08 17       	cp	r16, r24
     eea:	19 07       	cpc	r17, r25
     eec:	09 f0       	breq	.+2      	; 0xef0 <__vector_23+0x18c>
     eee:	16 c1       	rjmp	.+556    	; 0x111c <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     ef0:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <rx_msg+0x9>
     ef4:	e7 fd       	sbrc	r30, 7
     ef6:	0a c0       	rjmp	.+20     	; 0xf0c <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     ef8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <kilo_message_rx>
     efc:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <kilo_message_rx+0x1>
     f00:	6e e4       	ldi	r22, 0x4E	; 78
     f02:	71 e0       	ldi	r23, 0x01	; 1
     f04:	89 e7       	ldi	r24, 0x79	; 121
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	09 95       	icall
     f0a:	08 c1       	rjmp	.+528    	; 0x111c <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     f0c:	88 e7       	ldi	r24, 0x78	; 120
     f0e:	8e 0f       	add	r24, r30
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	30 f0       	brcs	.+12     	; 0xf20 <__vector_23+0x1bc>
        motors_off();
     f14:	53 98       	cbi	0x0a, 3	; 10
     f16:	23 98       	cbi	0x04, 3	; 4
     f18:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f1c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     f20:	8e 2f       	mov	r24, r30
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	fc 01       	movw	r30, r24
     f26:	e0 58       	subi	r30, 0x80	; 128
     f28:	f1 09       	sbc	r31, r1
     f2a:	eb 30       	cpi	r30, 0x0B	; 11
     f2c:	f1 05       	cpc	r31, r1
     f2e:	08 f0       	brcs	.+2      	; 0xf32 <__vector_23+0x1ce>
     f30:	f5 c0       	rjmp	.+490    	; 0x111c <__vector_23+0x3b8>
     f32:	e5 5c       	subi	r30, 0xC5	; 197
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     f3a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     f3e:	8d 7f       	andi	r24, 0xFD	; 253
     f40:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     f44:	16 bc       	out	0x26, r1	; 38
            bootload();
     f46:	e0 e0       	ldi	r30, 0x00	; 0
     f48:	f0 e7       	ldi	r31, 0x70	; 112
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     f4c:	e0 e0       	ldi	r30, 0x00	; 0
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     f52:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <kilo_state>
     f56:	e2 c0       	rjmp	.+452    	; 0x111c <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	b2 c0       	rjmp	.+356    	; 0x10c0 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     f5c:	85 e0       	ldi	r24, 0x05	; 5
     f5e:	b0 c0       	rjmp	.+352    	; 0x10c0 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	ae c0       	rjmp	.+348    	; 0x10c0 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     f64:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <kilo_state>
     f68:	83 30       	cpi	r24, 0x03	; 3
     f6a:	09 f4       	brne	.+2      	; 0xf6e <__vector_23+0x20a>
     f6c:	d7 c0       	rjmp	.+430    	; 0x111c <__vector_23+0x3b8>
     f6e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <kilo_state>
     f72:	84 30       	cpi	r24, 0x04	; 4
     f74:	09 f4       	brne	.+2      	; 0xf78 <__vector_23+0x214>
     f76:	d2 c0       	rjmp	.+420    	; 0x111c <__vector_23+0x3b8>
                motors_on();
     f78:	53 9a       	sbi	0x0a, 3	; 10
     f7a:	23 9a       	sbi	0x04, 3	; 4
     f7c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f80:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     f84:	83 e0       	ldi	r24, 0x03	; 3
     f86:	9c c0       	rjmp	.+312    	; 0x10c0 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     f88:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <rx_msg>
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	09 f4       	brne	.+2      	; 0xf92 <__vector_23+0x22e>
     f90:	4b c0       	rjmp	.+150    	; 0x1028 <__vector_23+0x2c4>
     f92:	80 f4       	brcc	.+32     	; 0xfb4 <__vector_23+0x250>
     f94:	88 23       	and	r24, r24
     f96:	a9 f0       	breq	.+42     	; 0xfc2 <__vector_23+0x25e>
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	09 f0       	breq	.+2      	; 0xf9e <__vector_23+0x23a>
     f9c:	82 c0       	rjmp	.+260    	; 0x10a2 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     f9e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <rx_msg+0x1>
     fa2:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <rx_msg+0x2>
     fa6:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <kilo_uid+0x1>
     faa:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <kilo_uid>
                    cur_motion = MOVE_STOP;
     fae:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cur_motion>
     fb2:	77 c0       	rjmp	.+238    	; 0x10a2 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     fb4:	83 30       	cpi	r24, 0x03	; 3
     fb6:	09 f4       	brne	.+2      	; 0xfba <__vector_23+0x256>
     fb8:	49 c0       	rjmp	.+146    	; 0x104c <__vector_23+0x2e8>
     fba:	84 30       	cpi	r24, 0x04	; 4
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <__vector_23+0x25c>
     fbe:	58 c0       	rjmp	.+176    	; 0x1070 <__vector_23+0x30c>
     fc0:	70 c0       	rjmp	.+224    	; 0x10a2 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     fc2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <kilo_state>
     fc6:	86 30       	cpi	r24, 0x06	; 6
     fc8:	09 f0       	breq	.+2      	; 0xfcc <__vector_23+0x268>
     fca:	6b c0       	rjmp	.+214    	; 0x10a2 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     fcc:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <kilo_uid>
     fd0:	80 eb       	ldi	r24, 0xB0	; 176
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     fd8:	60 91 89 01 	lds	r22, 0x0189	; 0x800189 <kilo_uid+0x1>
     fdc:	81 eb       	ldi	r24, 0xB1	; 177
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     fe4:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <kilo_turn_left>
     fe8:	85 e0       	ldi	r24, 0x05	; 5
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     ff0:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <kilo_turn_right>
     ff4:	89 e0       	ldi	r24, 0x09	; 9
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     ffc:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <kilo_straight_left>
    1000:	8c e0       	ldi	r24, 0x0C	; 12
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1008:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <kilo_straight_right>
    100c:	84 e1       	ldi	r24, 0x14	; 20
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 0e 0c 	call	0x181c	; 0x181c <eeprom_write_byte>
                        motors_off();
    1014:	53 98       	cbi	0x0a, 3	; 10
    1016:	23 98       	cbi	0x04, 3	; 4
    1018:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    101c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <kilo_state>
    1026:	3d c0       	rjmp	.+122    	; 0x10a2 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1028:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <cur_motion>
    102c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <rx_msg+0x3>
    1030:	91 30       	cpi	r25, 0x01	; 1
    1032:	21 f4       	brne	.+8      	; 0x103c <__vector_23+0x2d8>
    1034:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <kilo_turn_left>
    1038:	89 17       	cp	r24, r25
    103a:	99 f1       	breq	.+102    	; 0x10a2 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    103c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <prev_motion>
                        cur_motion = MOVE_LEFT;
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    1046:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <kilo_turn_left>
    104a:	2b c0       	rjmp	.+86     	; 0x10a2 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    104c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <cur_motion>
    1050:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <rx_msg+0x4>
    1054:	92 30       	cpi	r25, 0x02	; 2
    1056:	21 f4       	brne	.+8      	; 0x1060 <__vector_23+0x2fc>
    1058:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <kilo_turn_right>
    105c:	89 17       	cp	r24, r25
    105e:	09 f1       	breq	.+66     	; 0x10a2 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1060:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <prev_motion>
                        cur_motion = MOVE_RIGHT;
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    106a:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <kilo_turn_right>
    106e:	19 c0       	rjmp	.+50     	; 0x10a2 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1070:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <cur_motion>
    1074:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <rx_msg+0x6>
    1078:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <rx_msg+0x5>
    107c:	23 30       	cpi	r18, 0x03	; 3
    107e:	41 f4       	brne	.+16     	; 0x1090 <__vector_23+0x32c>
    1080:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <kilo_straight_right>
    1084:	82 13       	cpse	r24, r18
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <__vector_23+0x32c>
    1088:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <kilo_straight_left>
    108c:	92 17       	cp	r25, r18
    108e:	49 f0       	breq	.+18     	; 0x10a2 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
    1090:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    1094:	23 e0       	ldi	r18, 0x03	; 3
    1096:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    109a:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    109e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    10a2:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <rx_msg>
    10a6:	88 23       	and	r24, r24
    10a8:	c9 f1       	breq	.+114    	; 0x111c <__vector_23+0x3b8>
    10aa:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <kilo_state>
    10ae:	86 30       	cpi	r24, 0x06	; 6
    10b0:	a9 f1       	breq	.+106    	; 0x111c <__vector_23+0x3b8>
                motors_on();
    10b2:	53 9a       	sbi	0x0a, 3	; 10
    10b4:	23 9a       	sbi	0x04, 3	; 4
    10b6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10ba:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
    10be:	86 e0       	ldi	r24, 0x06	; 6
    10c0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <kilo_state>
    10c4:	2b c0       	rjmp	.+86     	; 0x111c <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    10c6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <kilo_state>
    10ca:	86 30       	cpi	r24, 0x06	; 6
    10cc:	81 f0       	breq	.+32     	; 0x10ee <__vector_23+0x38a>
                motors_on();
    10ce:	53 9a       	sbi	0x0a, 3	; 10
    10d0:	23 9a       	sbi	0x04, 3	; 4
    10d2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    10d6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	0e 94 66 05 	call	0xacc	; 0xacc <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    10e0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cur_motion>
    10e4:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <prev_motion>
                kilo_state = MOVING;
    10e8:	86 e0       	ldi	r24, 0x06	; 6
    10ea:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	00 90 79 01 	lds	r0, 0x0179	; 0x800179 <rx_msg>
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <__vector_23+0x398>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <__vector_23+0x394>
    1100:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <kilo_uid>
    1104:	30 91 89 01 	lds	r19, 0x0189	; 0x800189 <kilo_uid+0x1>
    1108:	82 23       	and	r24, r18
    110a:	93 23       	and	r25, r19
    110c:	89 2b       	or	r24, r25
    110e:	21 f0       	breq	.+8      	; 0x1118 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <cur_motion>
    1116:	02 c0       	rjmp	.+4      	; 0x111c <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    1118:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <cur_motion>
                    }
                }
            }
        }
    }
}
    111c:	ff 91       	pop	r31
    111e:	ef 91       	pop	r30
    1120:	bf 91       	pop	r27
    1122:	af 91       	pop	r26
    1124:	9f 91       	pop	r25
    1126:	8f 91       	pop	r24
    1128:	7f 91       	pop	r23
    112a:	6f 91       	pop	r22
    112c:	5f 91       	pop	r21
    112e:	4f 91       	pop	r20
    1130:	3f 91       	pop	r19
    1132:	2f 91       	pop	r18
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1142:	fc 01       	movw	r30, r24
    1144:	9c 01       	movw	r18, r24
    1146:	26 5f       	subi	r18, 0xF6	; 246
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    114e:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1150:	84 27       	eor	r24, r20
    1152:	08 2e       	mov	r0, r24
    1154:	82 95       	swap	r24
    1156:	80 7f       	andi	r24, 0xF0	; 240
    1158:	80 25       	eor	r24, r0
    115a:	09 2e       	mov	r0, r25
    115c:	98 2f       	mov	r25, r24
    115e:	82 95       	swap	r24
    1160:	8f 70       	andi	r24, 0x0F	; 15
    1162:	08 26       	eor	r0, r24
    1164:	86 95       	lsr	r24
    1166:	98 27       	eor	r25, r24
    1168:	89 27       	eor	r24, r25
    116a:	88 0f       	add	r24, r24
    116c:	88 0f       	add	r24, r24
    116e:	88 0f       	add	r24, r24
    1170:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    1172:	e2 17       	cp	r30, r18
    1174:	f3 07       	cpc	r31, r19
    1176:	59 f7       	brne	.-42     	; 0x114e <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    1178:	08 95       	ret

0000117a <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    117a:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    117c:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    117e:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1180:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <tx_mask>
    or tmpreg1, ddrreg
    1184:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1186:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1188:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    118a:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <tx_mask>
    118e:	20 30       	cpi	r18, 0x00	; 0
    1190:	29 f0       	breq	.+10     	; 0x119c <message_send+0x22>
    1192:	00 00       	nop
    1194:	25 b1       	in	r18, 0x05	; 5
    1196:	23 2b       	or	r18, r19
    1198:	25 b9       	out	0x05, r18	; 5
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <message_send+0x2a>
    119c:	00 00       	nop
    119e:	00 00       	nop
    11a0:	00 00       	nop
    11a2:	00 c0       	rjmp	.+0      	; 0x11a4 <message_send+0x2a>
    11a4:	00 00       	nop
    11a6:	00 00       	nop
    11a8:	00 00       	nop
    11aa:	30 95       	com	r19
    11ac:	25 b1       	in	r18, 0x05	; 5
    11ae:	23 23       	and	r18, r19
    11b0:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    11b2:	2e ea       	ldi	r18, 0xAE	; 174
    11b4:	2a 95       	dec	r18
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    11b8:	2b ee       	ldi	r18, 0xEB	; 235

000011ba <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    11ba:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    11bc:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    11be:	0a c0       	rjmp	.+20     	; 0x11d4 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    11c0:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    11c2:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <tx_mask>
    com tmpreg2
    11c6:	30 95       	com	r19
    in tmpreg1, IR_PORT
    11c8:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    11ca:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    11cc:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    11ce:	0f be       	out	0x3f, r0	; 63
    return 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	08 95       	ret

000011d4 <nocollision>:
nocollision:
    nop
    11d4:	00 00       	nop
    dec tmpreg1
    11d6:	2a 95       	dec	r18
    brne checkcollision
    11d8:	81 f7       	brne	.-32     	; 0x11ba <checkcollision>

    ldi tmpreg1, 0x01
    11da:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    11dc:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <tx_mask>
    11e0:	20 30       	cpi	r18, 0x00	; 0
    11e2:	29 f0       	breq	.+10     	; 0x11ee <nocollision+0x1a>
    11e4:	00 00       	nop
    11e6:	25 b1       	in	r18, 0x05	; 5
    11e8:	23 2b       	or	r18, r19
    11ea:	25 b9       	out	0x05, r18	; 5
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <nocollision+0x22>
    11ee:	00 00       	nop
    11f0:	00 00       	nop
    11f2:	00 00       	nop
    11f4:	00 c0       	rjmp	.+0      	; 0x11f6 <nocollision+0x22>
    11f6:	00 00       	nop
    11f8:	00 00       	nop
    11fa:	00 00       	nop
    11fc:	30 95       	com	r19
    11fe:	25 b1       	in	r18, 0x05	; 5
    1200:	23 23       	and	r18, r19
    1202:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1204:	00 00       	nop
    1206:	24 e5       	ldi	r18, 0x54	; 84
    1208:	2a 95       	dec	r18
    120a:	f1 f7       	brne	.-4      	; 0x1208 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    120c:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    120e:	8c e0       	ldi	r24, 0x0C	; 12

00001210 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1210:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1212:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1214:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1216:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1218:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    121a:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    121c:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    121e:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1220:	50 e0       	ldi	r21, 0x00	; 0

00001222 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1222:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1224:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1226:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1228:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    122a:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <tx_mask>
    122e:	20 30       	cpi	r18, 0x00	; 0
    1230:	29 f0       	breq	.+10     	; 0x123c <sendbit+0x1a>
    1232:	00 00       	nop
    1234:	25 b1       	in	r18, 0x05	; 5
    1236:	23 2b       	or	r18, r19
    1238:	25 b9       	out	0x05, r18	; 5
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <sendbit+0x22>
    123c:	00 00       	nop
    123e:	00 00       	nop
    1240:	00 00       	nop
    1242:	00 c0       	rjmp	.+0      	; 0x1244 <sendbit+0x22>
    1244:	00 00       	nop
    1246:	00 00       	nop
    1248:	00 00       	nop
    124a:	30 95       	com	r19
    124c:	25 b1       	in	r18, 0x05	; 5
    124e:	23 23       	and	r18, r19
    1250:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1252:	00 00       	nop
    1254:	21 e5       	ldi	r18, 0x51	; 81
    1256:	2a 95       	dec	r18
    1258:	f1 f7       	brne	.-4      	; 0x1256 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    125a:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    125c:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    125e:	9a 95       	dec	r25
    brne sendbit
    1260:	01 f7       	brne	.-64     	; 0x1222 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1262:	8a 95       	dec	r24
    brne sendbyte
    1264:	a9 f6       	brne	.-86     	; 0x1210 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1266:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1268:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    126a:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    126c:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    126e:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <tx_mask>
    com tmpreg2
    1272:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1274:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1276:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1278:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    127a:	0f be       	out	0x3f, r0	; 63
    return 1
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	08 95       	ret

00001280 <main>:
}


int main()
{
    kilo_init();
    1280:	0e 94 8d 01 	call	0x31a	; 0x31a <kilo_init>
    // Register the message_tx callback function.
    kilo_message_tx = message_tx;
    1284:	86 ed       	ldi	r24, 0xD6	; 214
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <kilo_message_tx+0x1>
    128c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <kilo_message_tx>

    // Register the message_tx_success callback function.
    kilo_message_tx_success = message_tx_success;
    1290:	81 e7       	ldi	r24, 0x71	; 113
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <kilo_message_tx_success+0x1>
    1298:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <kilo_message_tx_success>

    // Register the message_tx_success callback function.
    kilo_message_rx = message_rx;
    129c:	85 e7       	ldi	r24, 0x75	; 117
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <kilo_message_rx+0x1>
    12a4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <kilo_message_rx>

    kilo_start(setup, loop);
    12a8:	6b e1       	ldi	r22, 0x1B	; 27
    12aa:	71 e0       	ldi	r23, 0x01	; 1
    12ac:	88 e9       	ldi	r24, 0x98	; 152
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 85 05 	call	0xb0a	; 0xb0a <kilo_start>
    
    return 0;
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	08 95       	ret

000012ba <__divmodhi4>:
    12ba:	97 fb       	bst	r25, 7
    12bc:	07 2e       	mov	r0, r23
    12be:	16 f4       	brtc	.+4      	; 0x12c4 <__divmodhi4+0xa>
    12c0:	00 94       	com	r0
    12c2:	07 d0       	rcall	.+14     	; 0x12d2 <__divmodhi4_neg1>
    12c4:	77 fd       	sbrc	r23, 7
    12c6:	09 d0       	rcall	.+18     	; 0x12da <__divmodhi4_neg2>
    12c8:	0e 94 86 09 	call	0x130c	; 0x130c <__udivmodhi4>
    12cc:	07 fc       	sbrc	r0, 7
    12ce:	05 d0       	rcall	.+10     	; 0x12da <__divmodhi4_neg2>
    12d0:	3e f4       	brtc	.+14     	; 0x12e0 <__divmodhi4_exit>

000012d2 <__divmodhi4_neg1>:
    12d2:	90 95       	com	r25
    12d4:	81 95       	neg	r24
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	08 95       	ret

000012da <__divmodhi4_neg2>:
    12da:	70 95       	com	r23
    12dc:	61 95       	neg	r22
    12de:	7f 4f       	sbci	r23, 0xFF	; 255

000012e0 <__divmodhi4_exit>:
    12e0:	08 95       	ret

000012e2 <__tablejump2__>:
    12e2:	ee 0f       	add	r30, r30
    12e4:	ff 1f       	adc	r31, r31
    12e6:	05 90       	lpm	r0, Z+
    12e8:	f4 91       	lpm	r31, Z
    12ea:	e0 2d       	mov	r30, r0
    12ec:	09 94       	ijmp

000012ee <__umulhisi3>:
    12ee:	a2 9f       	mul	r26, r18
    12f0:	b0 01       	movw	r22, r0
    12f2:	b3 9f       	mul	r27, r19
    12f4:	c0 01       	movw	r24, r0
    12f6:	a3 9f       	mul	r26, r19
    12f8:	70 0d       	add	r23, r0
    12fa:	81 1d       	adc	r24, r1
    12fc:	11 24       	eor	r1, r1
    12fe:	91 1d       	adc	r25, r1
    1300:	b2 9f       	mul	r27, r18
    1302:	70 0d       	add	r23, r0
    1304:	81 1d       	adc	r24, r1
    1306:	11 24       	eor	r1, r1
    1308:	91 1d       	adc	r25, r1
    130a:	08 95       	ret

0000130c <__udivmodhi4>:
    130c:	aa 1b       	sub	r26, r26
    130e:	bb 1b       	sub	r27, r27
    1310:	51 e1       	ldi	r21, 0x11	; 17
    1312:	07 c0       	rjmp	.+14     	; 0x1322 <__udivmodhi4_ep>

00001314 <__udivmodhi4_loop>:
    1314:	aa 1f       	adc	r26, r26
    1316:	bb 1f       	adc	r27, r27
    1318:	a6 17       	cp	r26, r22
    131a:	b7 07       	cpc	r27, r23
    131c:	10 f0       	brcs	.+4      	; 0x1322 <__udivmodhi4_ep>
    131e:	a6 1b       	sub	r26, r22
    1320:	b7 0b       	sbc	r27, r23

00001322 <__udivmodhi4_ep>:
    1322:	88 1f       	adc	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	5a 95       	dec	r21
    1328:	a9 f7       	brne	.-22     	; 0x1314 <__udivmodhi4_loop>
    132a:	80 95       	com	r24
    132c:	90 95       	com	r25
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	08 95       	ret

00001334 <__subsf3>:
    1334:	50 58       	subi	r21, 0x80	; 128

00001336 <__addsf3>:
    1336:	bb 27       	eor	r27, r27
    1338:	aa 27       	eor	r26, r26
    133a:	0e 94 b2 09 	call	0x1364	; 0x1364 <__addsf3x>
    133e:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__fp_round>
    1342:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__fp_pscA>
    1346:	38 f0       	brcs	.+14     	; 0x1356 <__addsf3+0x20>
    1348:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fp_pscB>
    134c:	20 f0       	brcs	.+8      	; 0x1356 <__addsf3+0x20>
    134e:	39 f4       	brne	.+14     	; 0x135e <__addsf3+0x28>
    1350:	9f 3f       	cpi	r25, 0xFF	; 255
    1352:	19 f4       	brne	.+6      	; 0x135a <__addsf3+0x24>
    1354:	26 f4       	brtc	.+8      	; 0x135e <__addsf3+0x28>
    1356:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_nan>
    135a:	0e f4       	brtc	.+2      	; 0x135e <__addsf3+0x28>
    135c:	e0 95       	com	r30
    135e:	e7 fb       	bst	r30, 7
    1360:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_inf>

00001364 <__addsf3x>:
    1364:	e9 2f       	mov	r30, r25
    1366:	0e 94 14 0b 	call	0x1628	; 0x1628 <__fp_split3>
    136a:	58 f3       	brcs	.-42     	; 0x1342 <__addsf3+0xc>
    136c:	ba 17       	cp	r27, r26
    136e:	62 07       	cpc	r22, r18
    1370:	73 07       	cpc	r23, r19
    1372:	84 07       	cpc	r24, r20
    1374:	95 07       	cpc	r25, r21
    1376:	20 f0       	brcs	.+8      	; 0x1380 <__addsf3x+0x1c>
    1378:	79 f4       	brne	.+30     	; 0x1398 <__addsf3x+0x34>
    137a:	a6 f5       	brtc	.+104    	; 0x13e4 <__addsf3x+0x80>
    137c:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_zero>
    1380:	0e f4       	brtc	.+2      	; 0x1384 <__addsf3x+0x20>
    1382:	e0 95       	com	r30
    1384:	0b 2e       	mov	r0, r27
    1386:	ba 2f       	mov	r27, r26
    1388:	a0 2d       	mov	r26, r0
    138a:	0b 01       	movw	r0, r22
    138c:	b9 01       	movw	r22, r18
    138e:	90 01       	movw	r18, r0
    1390:	0c 01       	movw	r0, r24
    1392:	ca 01       	movw	r24, r20
    1394:	a0 01       	movw	r20, r0
    1396:	11 24       	eor	r1, r1
    1398:	ff 27       	eor	r31, r31
    139a:	59 1b       	sub	r21, r25
    139c:	99 f0       	breq	.+38     	; 0x13c4 <__addsf3x+0x60>
    139e:	59 3f       	cpi	r21, 0xF9	; 249
    13a0:	50 f4       	brcc	.+20     	; 0x13b6 <__addsf3x+0x52>
    13a2:	50 3e       	cpi	r21, 0xE0	; 224
    13a4:	68 f1       	brcs	.+90     	; 0x1400 <__addsf3x+0x9c>
    13a6:	1a 16       	cp	r1, r26
    13a8:	f0 40       	sbci	r31, 0x00	; 0
    13aa:	a2 2f       	mov	r26, r18
    13ac:	23 2f       	mov	r18, r19
    13ae:	34 2f       	mov	r19, r20
    13b0:	44 27       	eor	r20, r20
    13b2:	58 5f       	subi	r21, 0xF8	; 248
    13b4:	f3 cf       	rjmp	.-26     	; 0x139c <__addsf3x+0x38>
    13b6:	46 95       	lsr	r20
    13b8:	37 95       	ror	r19
    13ba:	27 95       	ror	r18
    13bc:	a7 95       	ror	r26
    13be:	f0 40       	sbci	r31, 0x00	; 0
    13c0:	53 95       	inc	r21
    13c2:	c9 f7       	brne	.-14     	; 0x13b6 <__addsf3x+0x52>
    13c4:	7e f4       	brtc	.+30     	; 0x13e4 <__addsf3x+0x80>
    13c6:	1f 16       	cp	r1, r31
    13c8:	ba 0b       	sbc	r27, r26
    13ca:	62 0b       	sbc	r22, r18
    13cc:	73 0b       	sbc	r23, r19
    13ce:	84 0b       	sbc	r24, r20
    13d0:	ba f0       	brmi	.+46     	; 0x1400 <__addsf3x+0x9c>
    13d2:	91 50       	subi	r25, 0x01	; 1
    13d4:	a1 f0       	breq	.+40     	; 0x13fe <__addsf3x+0x9a>
    13d6:	ff 0f       	add	r31, r31
    13d8:	bb 1f       	adc	r27, r27
    13da:	66 1f       	adc	r22, r22
    13dc:	77 1f       	adc	r23, r23
    13de:	88 1f       	adc	r24, r24
    13e0:	c2 f7       	brpl	.-16     	; 0x13d2 <__addsf3x+0x6e>
    13e2:	0e c0       	rjmp	.+28     	; 0x1400 <__addsf3x+0x9c>
    13e4:	ba 0f       	add	r27, r26
    13e6:	62 1f       	adc	r22, r18
    13e8:	73 1f       	adc	r23, r19
    13ea:	84 1f       	adc	r24, r20
    13ec:	48 f4       	brcc	.+18     	; 0x1400 <__addsf3x+0x9c>
    13ee:	87 95       	ror	r24
    13f0:	77 95       	ror	r23
    13f2:	67 95       	ror	r22
    13f4:	b7 95       	ror	r27
    13f6:	f7 95       	ror	r31
    13f8:	9e 3f       	cpi	r25, 0xFE	; 254
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <__addsf3x+0x9a>
    13fc:	b0 cf       	rjmp	.-160    	; 0x135e <__addsf3+0x28>
    13fe:	93 95       	inc	r25
    1400:	88 0f       	add	r24, r24
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__addsf3x+0xa2>
    1404:	99 27       	eor	r25, r25
    1406:	ee 0f       	add	r30, r30
    1408:	97 95       	ror	r25
    140a:	87 95       	ror	r24
    140c:	08 95       	ret

0000140e <__divsf3>:
    140e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__divsf3x>
    1412:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__fp_round>
    1416:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fp_pscB>
    141a:	58 f0       	brcs	.+22     	; 0x1432 <__divsf3+0x24>
    141c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__fp_pscA>
    1420:	40 f0       	brcs	.+16     	; 0x1432 <__divsf3+0x24>
    1422:	29 f4       	brne	.+10     	; 0x142e <__divsf3+0x20>
    1424:	5f 3f       	cpi	r21, 0xFF	; 255
    1426:	29 f0       	breq	.+10     	; 0x1432 <__divsf3+0x24>
    1428:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_inf>
    142c:	51 11       	cpse	r21, r1
    142e:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__fp_szero>
    1432:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_nan>

00001436 <__divsf3x>:
    1436:	0e 94 14 0b 	call	0x1628	; 0x1628 <__fp_split3>
    143a:	68 f3       	brcs	.-38     	; 0x1416 <__divsf3+0x8>

0000143c <__divsf3_pse>:
    143c:	99 23       	and	r25, r25
    143e:	b1 f3       	breq	.-20     	; 0x142c <__divsf3+0x1e>
    1440:	55 23       	and	r21, r21
    1442:	91 f3       	breq	.-28     	; 0x1428 <__divsf3+0x1a>
    1444:	95 1b       	sub	r25, r21
    1446:	55 0b       	sbc	r21, r21
    1448:	bb 27       	eor	r27, r27
    144a:	aa 27       	eor	r26, r26
    144c:	62 17       	cp	r22, r18
    144e:	73 07       	cpc	r23, r19
    1450:	84 07       	cpc	r24, r20
    1452:	38 f0       	brcs	.+14     	; 0x1462 <__divsf3_pse+0x26>
    1454:	9f 5f       	subi	r25, 0xFF	; 255
    1456:	5f 4f       	sbci	r21, 0xFF	; 255
    1458:	22 0f       	add	r18, r18
    145a:	33 1f       	adc	r19, r19
    145c:	44 1f       	adc	r20, r20
    145e:	aa 1f       	adc	r26, r26
    1460:	a9 f3       	breq	.-22     	; 0x144c <__divsf3_pse+0x10>
    1462:	35 d0       	rcall	.+106    	; 0x14ce <__divsf3_pse+0x92>
    1464:	0e 2e       	mov	r0, r30
    1466:	3a f0       	brmi	.+14     	; 0x1476 <__divsf3_pse+0x3a>
    1468:	e0 e8       	ldi	r30, 0x80	; 128
    146a:	32 d0       	rcall	.+100    	; 0x14d0 <__divsf3_pse+0x94>
    146c:	91 50       	subi	r25, 0x01	; 1
    146e:	50 40       	sbci	r21, 0x00	; 0
    1470:	e6 95       	lsr	r30
    1472:	00 1c       	adc	r0, r0
    1474:	ca f7       	brpl	.-14     	; 0x1468 <__divsf3_pse+0x2c>
    1476:	2b d0       	rcall	.+86     	; 0x14ce <__divsf3_pse+0x92>
    1478:	fe 2f       	mov	r31, r30
    147a:	29 d0       	rcall	.+82     	; 0x14ce <__divsf3_pse+0x92>
    147c:	66 0f       	add	r22, r22
    147e:	77 1f       	adc	r23, r23
    1480:	88 1f       	adc	r24, r24
    1482:	bb 1f       	adc	r27, r27
    1484:	26 17       	cp	r18, r22
    1486:	37 07       	cpc	r19, r23
    1488:	48 07       	cpc	r20, r24
    148a:	ab 07       	cpc	r26, r27
    148c:	b0 e8       	ldi	r27, 0x80	; 128
    148e:	09 f0       	breq	.+2      	; 0x1492 <__divsf3_pse+0x56>
    1490:	bb 0b       	sbc	r27, r27
    1492:	80 2d       	mov	r24, r0
    1494:	bf 01       	movw	r22, r30
    1496:	ff 27       	eor	r31, r31
    1498:	93 58       	subi	r25, 0x83	; 131
    149a:	5f 4f       	sbci	r21, 0xFF	; 255
    149c:	3a f0       	brmi	.+14     	; 0x14ac <__divsf3_pse+0x70>
    149e:	9e 3f       	cpi	r25, 0xFE	; 254
    14a0:	51 05       	cpc	r21, r1
    14a2:	78 f0       	brcs	.+30     	; 0x14c2 <__divsf3_pse+0x86>
    14a4:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_inf>
    14a8:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__fp_szero>
    14ac:	5f 3f       	cpi	r21, 0xFF	; 255
    14ae:	e4 f3       	brlt	.-8      	; 0x14a8 <__divsf3_pse+0x6c>
    14b0:	98 3e       	cpi	r25, 0xE8	; 232
    14b2:	d4 f3       	brlt	.-12     	; 0x14a8 <__divsf3_pse+0x6c>
    14b4:	86 95       	lsr	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b7 95       	ror	r27
    14bc:	f7 95       	ror	r31
    14be:	9f 5f       	subi	r25, 0xFF	; 255
    14c0:	c9 f7       	brne	.-14     	; 0x14b4 <__divsf3_pse+0x78>
    14c2:	88 0f       	add	r24, r24
    14c4:	91 1d       	adc	r25, r1
    14c6:	96 95       	lsr	r25
    14c8:	87 95       	ror	r24
    14ca:	97 f9       	bld	r25, 7
    14cc:	08 95       	ret
    14ce:	e1 e0       	ldi	r30, 0x01	; 1
    14d0:	66 0f       	add	r22, r22
    14d2:	77 1f       	adc	r23, r23
    14d4:	88 1f       	adc	r24, r24
    14d6:	bb 1f       	adc	r27, r27
    14d8:	62 17       	cp	r22, r18
    14da:	73 07       	cpc	r23, r19
    14dc:	84 07       	cpc	r24, r20
    14de:	ba 07       	cpc	r27, r26
    14e0:	20 f0       	brcs	.+8      	; 0x14ea <__divsf3_pse+0xae>
    14e2:	62 1b       	sub	r22, r18
    14e4:	73 0b       	sbc	r23, r19
    14e6:	84 0b       	sbc	r24, r20
    14e8:	ba 0b       	sbc	r27, r26
    14ea:	ee 1f       	adc	r30, r30
    14ec:	88 f7       	brcc	.-30     	; 0x14d0 <__divsf3_pse+0x94>
    14ee:	e0 95       	com	r30
    14f0:	08 95       	ret

000014f2 <__fixsfsi>:
    14f2:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixunssfsi>
    14f6:	68 94       	set
    14f8:	b1 11       	cpse	r27, r1
    14fa:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__fp_szero>
    14fe:	08 95       	ret

00001500 <__fixunssfsi>:
    1500:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__fp_splitA>
    1504:	88 f0       	brcs	.+34     	; 0x1528 <__fixunssfsi+0x28>
    1506:	9f 57       	subi	r25, 0x7F	; 127
    1508:	98 f0       	brcs	.+38     	; 0x1530 <__fixunssfsi+0x30>
    150a:	b9 2f       	mov	r27, r25
    150c:	99 27       	eor	r25, r25
    150e:	b7 51       	subi	r27, 0x17	; 23
    1510:	b0 f0       	brcs	.+44     	; 0x153e <__fixunssfsi+0x3e>
    1512:	e1 f0       	breq	.+56     	; 0x154c <__fixunssfsi+0x4c>
    1514:	66 0f       	add	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	88 1f       	adc	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	1a f0       	brmi	.+6      	; 0x1524 <__fixunssfsi+0x24>
    151e:	ba 95       	dec	r27
    1520:	c9 f7       	brne	.-14     	; 0x1514 <__fixunssfsi+0x14>
    1522:	14 c0       	rjmp	.+40     	; 0x154c <__fixunssfsi+0x4c>
    1524:	b1 30       	cpi	r27, 0x01	; 1
    1526:	91 f0       	breq	.+36     	; 0x154c <__fixunssfsi+0x4c>
    1528:	0e 94 36 0b 	call	0x166c	; 0x166c <__fp_zero>
    152c:	b1 e0       	ldi	r27, 0x01	; 1
    152e:	08 95       	ret
    1530:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_zero>
    1534:	67 2f       	mov	r22, r23
    1536:	78 2f       	mov	r23, r24
    1538:	88 27       	eor	r24, r24
    153a:	b8 5f       	subi	r27, 0xF8	; 248
    153c:	39 f0       	breq	.+14     	; 0x154c <__fixunssfsi+0x4c>
    153e:	b9 3f       	cpi	r27, 0xF9	; 249
    1540:	cc f3       	brlt	.-14     	; 0x1534 <__fixunssfsi+0x34>
    1542:	86 95       	lsr	r24
    1544:	77 95       	ror	r23
    1546:	67 95       	ror	r22
    1548:	b3 95       	inc	r27
    154a:	d9 f7       	brne	.-10     	; 0x1542 <__fixunssfsi+0x42>
    154c:	3e f4       	brtc	.+14     	; 0x155c <__fixunssfsi+0x5c>
    154e:	90 95       	com	r25
    1550:	80 95       	com	r24
    1552:	70 95       	com	r23
    1554:	61 95       	neg	r22
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	8f 4f       	sbci	r24, 0xFF	; 255
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	08 95       	ret

0000155e <__floatunsisf>:
    155e:	e8 94       	clt
    1560:	09 c0       	rjmp	.+18     	; 0x1574 <__floatsisf+0x12>

00001562 <__floatsisf>:
    1562:	97 fb       	bst	r25, 7
    1564:	3e f4       	brtc	.+14     	; 0x1574 <__floatsisf+0x12>
    1566:	90 95       	com	r25
    1568:	80 95       	com	r24
    156a:	70 95       	com	r23
    156c:	61 95       	neg	r22
    156e:	7f 4f       	sbci	r23, 0xFF	; 255
    1570:	8f 4f       	sbci	r24, 0xFF	; 255
    1572:	9f 4f       	sbci	r25, 0xFF	; 255
    1574:	99 23       	and	r25, r25
    1576:	a9 f0       	breq	.+42     	; 0x15a2 <__floatsisf+0x40>
    1578:	f9 2f       	mov	r31, r25
    157a:	96 e9       	ldi	r25, 0x96	; 150
    157c:	bb 27       	eor	r27, r27
    157e:	93 95       	inc	r25
    1580:	f6 95       	lsr	r31
    1582:	87 95       	ror	r24
    1584:	77 95       	ror	r23
    1586:	67 95       	ror	r22
    1588:	b7 95       	ror	r27
    158a:	f1 11       	cpse	r31, r1
    158c:	f8 cf       	rjmp	.-16     	; 0x157e <__floatsisf+0x1c>
    158e:	fa f4       	brpl	.+62     	; 0x15ce <__floatsisf+0x6c>
    1590:	bb 0f       	add	r27, r27
    1592:	11 f4       	brne	.+4      	; 0x1598 <__floatsisf+0x36>
    1594:	60 ff       	sbrs	r22, 0
    1596:	1b c0       	rjmp	.+54     	; 0x15ce <__floatsisf+0x6c>
    1598:	6f 5f       	subi	r22, 0xFF	; 255
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	8f 4f       	sbci	r24, 0xFF	; 255
    159e:	9f 4f       	sbci	r25, 0xFF	; 255
    15a0:	16 c0       	rjmp	.+44     	; 0x15ce <__floatsisf+0x6c>
    15a2:	88 23       	and	r24, r24
    15a4:	11 f0       	breq	.+4      	; 0x15aa <__floatsisf+0x48>
    15a6:	96 e9       	ldi	r25, 0x96	; 150
    15a8:	11 c0       	rjmp	.+34     	; 0x15cc <__floatsisf+0x6a>
    15aa:	77 23       	and	r23, r23
    15ac:	21 f0       	breq	.+8      	; 0x15b6 <__floatsisf+0x54>
    15ae:	9e e8       	ldi	r25, 0x8E	; 142
    15b0:	87 2f       	mov	r24, r23
    15b2:	76 2f       	mov	r23, r22
    15b4:	05 c0       	rjmp	.+10     	; 0x15c0 <__floatsisf+0x5e>
    15b6:	66 23       	and	r22, r22
    15b8:	71 f0       	breq	.+28     	; 0x15d6 <__floatsisf+0x74>
    15ba:	96 e8       	ldi	r25, 0x86	; 134
    15bc:	86 2f       	mov	r24, r22
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	2a f0       	brmi	.+10     	; 0x15ce <__floatsisf+0x6c>
    15c4:	9a 95       	dec	r25
    15c6:	66 0f       	add	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	88 1f       	adc	r24, r24
    15cc:	da f7       	brpl	.-10     	; 0x15c4 <__floatsisf+0x62>
    15ce:	88 0f       	add	r24, r24
    15d0:	96 95       	lsr	r25
    15d2:	87 95       	ror	r24
    15d4:	97 f9       	bld	r25, 7
    15d6:	08 95       	ret

000015d8 <__fp_inf>:
    15d8:	97 f9       	bld	r25, 7
    15da:	9f 67       	ori	r25, 0x7F	; 127
    15dc:	80 e8       	ldi	r24, 0x80	; 128
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	08 95       	ret

000015e4 <__fp_nan>:
    15e4:	9f ef       	ldi	r25, 0xFF	; 255
    15e6:	80 ec       	ldi	r24, 0xC0	; 192
    15e8:	08 95       	ret

000015ea <__fp_pscA>:
    15ea:	00 24       	eor	r0, r0
    15ec:	0a 94       	dec	r0
    15ee:	16 16       	cp	r1, r22
    15f0:	17 06       	cpc	r1, r23
    15f2:	18 06       	cpc	r1, r24
    15f4:	09 06       	cpc	r0, r25
    15f6:	08 95       	ret

000015f8 <__fp_pscB>:
    15f8:	00 24       	eor	r0, r0
    15fa:	0a 94       	dec	r0
    15fc:	12 16       	cp	r1, r18
    15fe:	13 06       	cpc	r1, r19
    1600:	14 06       	cpc	r1, r20
    1602:	05 06       	cpc	r0, r21
    1604:	08 95       	ret

00001606 <__fp_round>:
    1606:	09 2e       	mov	r0, r25
    1608:	03 94       	inc	r0
    160a:	00 0c       	add	r0, r0
    160c:	11 f4       	brne	.+4      	; 0x1612 <__fp_round+0xc>
    160e:	88 23       	and	r24, r24
    1610:	52 f0       	brmi	.+20     	; 0x1626 <__fp_round+0x20>
    1612:	bb 0f       	add	r27, r27
    1614:	40 f4       	brcc	.+16     	; 0x1626 <__fp_round+0x20>
    1616:	bf 2b       	or	r27, r31
    1618:	11 f4       	brne	.+4      	; 0x161e <__fp_round+0x18>
    161a:	60 ff       	sbrs	r22, 0
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <__fp_round+0x20>
    161e:	6f 5f       	subi	r22, 0xFF	; 255
    1620:	7f 4f       	sbci	r23, 0xFF	; 255
    1622:	8f 4f       	sbci	r24, 0xFF	; 255
    1624:	9f 4f       	sbci	r25, 0xFF	; 255
    1626:	08 95       	ret

00001628 <__fp_split3>:
    1628:	57 fd       	sbrc	r21, 7
    162a:	90 58       	subi	r25, 0x80	; 128
    162c:	44 0f       	add	r20, r20
    162e:	55 1f       	adc	r21, r21
    1630:	59 f0       	breq	.+22     	; 0x1648 <__fp_splitA+0x10>
    1632:	5f 3f       	cpi	r21, 0xFF	; 255
    1634:	71 f0       	breq	.+28     	; 0x1652 <__fp_splitA+0x1a>
    1636:	47 95       	ror	r20

00001638 <__fp_splitA>:
    1638:	88 0f       	add	r24, r24
    163a:	97 fb       	bst	r25, 7
    163c:	99 1f       	adc	r25, r25
    163e:	61 f0       	breq	.+24     	; 0x1658 <__fp_splitA+0x20>
    1640:	9f 3f       	cpi	r25, 0xFF	; 255
    1642:	79 f0       	breq	.+30     	; 0x1662 <__fp_splitA+0x2a>
    1644:	87 95       	ror	r24
    1646:	08 95       	ret
    1648:	12 16       	cp	r1, r18
    164a:	13 06       	cpc	r1, r19
    164c:	14 06       	cpc	r1, r20
    164e:	55 1f       	adc	r21, r21
    1650:	f2 cf       	rjmp	.-28     	; 0x1636 <__fp_split3+0xe>
    1652:	46 95       	lsr	r20
    1654:	f1 df       	rcall	.-30     	; 0x1638 <__fp_splitA>
    1656:	08 c0       	rjmp	.+16     	; 0x1668 <__fp_splitA+0x30>
    1658:	16 16       	cp	r1, r22
    165a:	17 06       	cpc	r1, r23
    165c:	18 06       	cpc	r1, r24
    165e:	99 1f       	adc	r25, r25
    1660:	f1 cf       	rjmp	.-30     	; 0x1644 <__fp_splitA+0xc>
    1662:	86 95       	lsr	r24
    1664:	71 05       	cpc	r23, r1
    1666:	61 05       	cpc	r22, r1
    1668:	08 94       	sec
    166a:	08 95       	ret

0000166c <__fp_zero>:
    166c:	e8 94       	clt

0000166e <__fp_szero>:
    166e:	bb 27       	eor	r27, r27
    1670:	66 27       	eor	r22, r22
    1672:	77 27       	eor	r23, r23
    1674:	cb 01       	movw	r24, r22
    1676:	97 f9       	bld	r25, 7
    1678:	08 95       	ret

0000167a <__mulsf3>:
    167a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__mulsf3x>
    167e:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__fp_round>
    1682:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__fp_pscA>
    1686:	38 f0       	brcs	.+14     	; 0x1696 <__mulsf3+0x1c>
    1688:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <__fp_pscB>
    168c:	20 f0       	brcs	.+8      	; 0x1696 <__mulsf3+0x1c>
    168e:	95 23       	and	r25, r21
    1690:	11 f0       	breq	.+4      	; 0x1696 <__mulsf3+0x1c>
    1692:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_inf>
    1696:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__fp_nan>
    169a:	11 24       	eor	r1, r1
    169c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__fp_szero>

000016a0 <__mulsf3x>:
    16a0:	0e 94 14 0b 	call	0x1628	; 0x1628 <__fp_split3>
    16a4:	70 f3       	brcs	.-36     	; 0x1682 <__mulsf3+0x8>

000016a6 <__mulsf3_pse>:
    16a6:	95 9f       	mul	r25, r21
    16a8:	c1 f3       	breq	.-16     	; 0x169a <__mulsf3+0x20>
    16aa:	95 0f       	add	r25, r21
    16ac:	50 e0       	ldi	r21, 0x00	; 0
    16ae:	55 1f       	adc	r21, r21
    16b0:	62 9f       	mul	r22, r18
    16b2:	f0 01       	movw	r30, r0
    16b4:	72 9f       	mul	r23, r18
    16b6:	bb 27       	eor	r27, r27
    16b8:	f0 0d       	add	r31, r0
    16ba:	b1 1d       	adc	r27, r1
    16bc:	63 9f       	mul	r22, r19
    16be:	aa 27       	eor	r26, r26
    16c0:	f0 0d       	add	r31, r0
    16c2:	b1 1d       	adc	r27, r1
    16c4:	aa 1f       	adc	r26, r26
    16c6:	64 9f       	mul	r22, r20
    16c8:	66 27       	eor	r22, r22
    16ca:	b0 0d       	add	r27, r0
    16cc:	a1 1d       	adc	r26, r1
    16ce:	66 1f       	adc	r22, r22
    16d0:	82 9f       	mul	r24, r18
    16d2:	22 27       	eor	r18, r18
    16d4:	b0 0d       	add	r27, r0
    16d6:	a1 1d       	adc	r26, r1
    16d8:	62 1f       	adc	r22, r18
    16da:	73 9f       	mul	r23, r19
    16dc:	b0 0d       	add	r27, r0
    16de:	a1 1d       	adc	r26, r1
    16e0:	62 1f       	adc	r22, r18
    16e2:	83 9f       	mul	r24, r19
    16e4:	a0 0d       	add	r26, r0
    16e6:	61 1d       	adc	r22, r1
    16e8:	22 1f       	adc	r18, r18
    16ea:	74 9f       	mul	r23, r20
    16ec:	33 27       	eor	r19, r19
    16ee:	a0 0d       	add	r26, r0
    16f0:	61 1d       	adc	r22, r1
    16f2:	23 1f       	adc	r18, r19
    16f4:	84 9f       	mul	r24, r20
    16f6:	60 0d       	add	r22, r0
    16f8:	21 1d       	adc	r18, r1
    16fa:	82 2f       	mov	r24, r18
    16fc:	76 2f       	mov	r23, r22
    16fe:	6a 2f       	mov	r22, r26
    1700:	11 24       	eor	r1, r1
    1702:	9f 57       	subi	r25, 0x7F	; 127
    1704:	50 40       	sbci	r21, 0x00	; 0
    1706:	9a f0       	brmi	.+38     	; 0x172e <__mulsf3_pse+0x88>
    1708:	f1 f0       	breq	.+60     	; 0x1746 <__mulsf3_pse+0xa0>
    170a:	88 23       	and	r24, r24
    170c:	4a f0       	brmi	.+18     	; 0x1720 <__mulsf3_pse+0x7a>
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	bb 1f       	adc	r27, r27
    1714:	66 1f       	adc	r22, r22
    1716:	77 1f       	adc	r23, r23
    1718:	88 1f       	adc	r24, r24
    171a:	91 50       	subi	r25, 0x01	; 1
    171c:	50 40       	sbci	r21, 0x00	; 0
    171e:	a9 f7       	brne	.-22     	; 0x170a <__mulsf3_pse+0x64>
    1720:	9e 3f       	cpi	r25, 0xFE	; 254
    1722:	51 05       	cpc	r21, r1
    1724:	80 f0       	brcs	.+32     	; 0x1746 <__mulsf3_pse+0xa0>
    1726:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__fp_inf>
    172a:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__fp_szero>
    172e:	5f 3f       	cpi	r21, 0xFF	; 255
    1730:	e4 f3       	brlt	.-8      	; 0x172a <__mulsf3_pse+0x84>
    1732:	98 3e       	cpi	r25, 0xE8	; 232
    1734:	d4 f3       	brlt	.-12     	; 0x172a <__mulsf3_pse+0x84>
    1736:	86 95       	lsr	r24
    1738:	77 95       	ror	r23
    173a:	67 95       	ror	r22
    173c:	b7 95       	ror	r27
    173e:	f7 95       	ror	r31
    1740:	e7 95       	ror	r30
    1742:	9f 5f       	subi	r25, 0xFF	; 255
    1744:	c1 f7       	brne	.-16     	; 0x1736 <__mulsf3_pse+0x90>
    1746:	fe 2b       	or	r31, r30
    1748:	88 0f       	add	r24, r24
    174a:	91 1d       	adc	r25, r1
    174c:	96 95       	lsr	r25
    174e:	87 95       	ror	r24
    1750:	97 f9       	bld	r25, 7
    1752:	08 95       	ret

00001754 <do_rand>:
    1754:	8f 92       	push	r8
    1756:	9f 92       	push	r9
    1758:	af 92       	push	r10
    175a:	bf 92       	push	r11
    175c:	cf 92       	push	r12
    175e:	df 92       	push	r13
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	ec 01       	movw	r28, r24
    176a:	68 81       	ld	r22, Y
    176c:	79 81       	ldd	r23, Y+1	; 0x01
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	9b 81       	ldd	r25, Y+3	; 0x03
    1772:	61 15       	cp	r22, r1
    1774:	71 05       	cpc	r23, r1
    1776:	81 05       	cpc	r24, r1
    1778:	91 05       	cpc	r25, r1
    177a:	21 f4       	brne	.+8      	; 0x1784 <do_rand+0x30>
    177c:	64 e2       	ldi	r22, 0x24	; 36
    177e:	79 ed       	ldi	r23, 0xD9	; 217
    1780:	8b e5       	ldi	r24, 0x5B	; 91
    1782:	97 e0       	ldi	r25, 0x07	; 7
    1784:	2d e1       	ldi	r18, 0x1D	; 29
    1786:	33 ef       	ldi	r19, 0xF3	; 243
    1788:	41 e0       	ldi	r20, 0x01	; 1
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__divmodsi4>
    1790:	49 01       	movw	r8, r18
    1792:	5a 01       	movw	r10, r20
    1794:	9b 01       	movw	r18, r22
    1796:	ac 01       	movw	r20, r24
    1798:	a7 ea       	ldi	r26, 0xA7	; 167
    179a:	b1 e4       	ldi	r27, 0x41	; 65
    179c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__muluhisi3>
    17a0:	6b 01       	movw	r12, r22
    17a2:	7c 01       	movw	r14, r24
    17a4:	ac ee       	ldi	r26, 0xEC	; 236
    17a6:	b4 ef       	ldi	r27, 0xF4	; 244
    17a8:	a5 01       	movw	r20, r10
    17aa:	94 01       	movw	r18, r8
    17ac:	0e 94 49 0c 	call	0x1892	; 0x1892 <__mulohisi3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	8c 0d       	add	r24, r12
    17b6:	9d 1d       	adc	r25, r13
    17b8:	ae 1d       	adc	r26, r14
    17ba:	bf 1d       	adc	r27, r15
    17bc:	b7 ff       	sbrs	r27, 7
    17be:	03 c0       	rjmp	.+6      	; 0x17c6 <do_rand+0x72>
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	a1 09       	sbc	r26, r1
    17c4:	b0 48       	sbci	r27, 0x80	; 128
    17c6:	88 83       	st	Y, r24
    17c8:	99 83       	std	Y+1, r25	; 0x01
    17ca:	aa 83       	std	Y+2, r26	; 0x02
    17cc:	bb 83       	std	Y+3, r27	; 0x03
    17ce:	9f 77       	andi	r25, 0x7F	; 127
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	ff 90       	pop	r15
    17d6:	ef 90       	pop	r14
    17d8:	df 90       	pop	r13
    17da:	cf 90       	pop	r12
    17dc:	bf 90       	pop	r11
    17de:	af 90       	pop	r10
    17e0:	9f 90       	pop	r9
    17e2:	8f 90       	pop	r8
    17e4:	08 95       	ret

000017e6 <rand_r>:
    17e6:	0e 94 aa 0b 	call	0x1754	; 0x1754 <do_rand>
    17ea:	08 95       	ret

000017ec <rand>:
    17ec:	8e e0       	ldi	r24, 0x0E	; 14
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <do_rand>
    17f4:	08 95       	ret

000017f6 <srand>:
    17f6:	a0 e0       	ldi	r26, 0x00	; 0
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <next>
    17fe:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <next+0x1>
    1802:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <next+0x2>
    1806:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <next+0x3>
    180a:	08 95       	ret

0000180c <eeprom_read_byte>:
    180c:	f9 99       	sbic	0x1f, 1	; 31
    180e:	fe cf       	rjmp	.-4      	; 0x180c <eeprom_read_byte>
    1810:	92 bd       	out	0x22, r25	; 34
    1812:	81 bd       	out	0x21, r24	; 33
    1814:	f8 9a       	sbi	0x1f, 0	; 31
    1816:	99 27       	eor	r25, r25
    1818:	80 b5       	in	r24, 0x20	; 32
    181a:	08 95       	ret

0000181c <eeprom_write_byte>:
    181c:	26 2f       	mov	r18, r22

0000181e <eeprom_write_r18>:
    181e:	f9 99       	sbic	0x1f, 1	; 31
    1820:	fe cf       	rjmp	.-4      	; 0x181e <eeprom_write_r18>
    1822:	1f ba       	out	0x1f, r1	; 31
    1824:	92 bd       	out	0x22, r25	; 34
    1826:	81 bd       	out	0x21, r24	; 33
    1828:	20 bd       	out	0x20, r18	; 32
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	fa 9a       	sbi	0x1f, 2	; 31
    1830:	f9 9a       	sbi	0x1f, 1	; 31
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	01 96       	adiw	r24, 0x01	; 1
    1836:	08 95       	ret

00001838 <__divmodsi4>:
    1838:	05 2e       	mov	r0, r21
    183a:	97 fb       	bst	r25, 7
    183c:	1e f4       	brtc	.+6      	; 0x1844 <__divmodsi4+0xc>
    183e:	00 94       	com	r0
    1840:	0e 94 33 0c 	call	0x1866	; 0x1866 <__negsi2>
    1844:	57 fd       	sbrc	r21, 7
    1846:	07 d0       	rcall	.+14     	; 0x1856 <__divmodsi4_neg2>
    1848:	0e 94 4e 0c 	call	0x189c	; 0x189c <__udivmodsi4>
    184c:	07 fc       	sbrc	r0, 7
    184e:	03 d0       	rcall	.+6      	; 0x1856 <__divmodsi4_neg2>
    1850:	4e f4       	brtc	.+18     	; 0x1864 <__divmodsi4_exit>
    1852:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__negsi2>

00001856 <__divmodsi4_neg2>:
    1856:	50 95       	com	r21
    1858:	40 95       	com	r20
    185a:	30 95       	com	r19
    185c:	21 95       	neg	r18
    185e:	3f 4f       	sbci	r19, 0xFF	; 255
    1860:	4f 4f       	sbci	r20, 0xFF	; 255
    1862:	5f 4f       	sbci	r21, 0xFF	; 255

00001864 <__divmodsi4_exit>:
    1864:	08 95       	ret

00001866 <__negsi2>:
    1866:	90 95       	com	r25
    1868:	80 95       	com	r24
    186a:	70 95       	com	r23
    186c:	61 95       	neg	r22
    186e:	7f 4f       	sbci	r23, 0xFF	; 255
    1870:	8f 4f       	sbci	r24, 0xFF	; 255
    1872:	9f 4f       	sbci	r25, 0xFF	; 255
    1874:	08 95       	ret

00001876 <__muluhisi3>:
    1876:	0e 94 77 09 	call	0x12ee	; 0x12ee <__umulhisi3>
    187a:	a5 9f       	mul	r26, r21
    187c:	90 0d       	add	r25, r0
    187e:	b4 9f       	mul	r27, r20
    1880:	90 0d       	add	r25, r0
    1882:	a4 9f       	mul	r26, r20
    1884:	80 0d       	add	r24, r0
    1886:	91 1d       	adc	r25, r1
    1888:	11 24       	eor	r1, r1
    188a:	08 95       	ret

0000188c <__mulshisi3>:
    188c:	b7 ff       	sbrs	r27, 7
    188e:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__muluhisi3>

00001892 <__mulohisi3>:
    1892:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__muluhisi3>
    1896:	82 1b       	sub	r24, r18
    1898:	93 0b       	sbc	r25, r19
    189a:	08 95       	ret

0000189c <__udivmodsi4>:
    189c:	a1 e2       	ldi	r26, 0x21	; 33
    189e:	1a 2e       	mov	r1, r26
    18a0:	aa 1b       	sub	r26, r26
    18a2:	bb 1b       	sub	r27, r27
    18a4:	fd 01       	movw	r30, r26
    18a6:	0d c0       	rjmp	.+26     	; 0x18c2 <__udivmodsi4_ep>

000018a8 <__udivmodsi4_loop>:
    18a8:	aa 1f       	adc	r26, r26
    18aa:	bb 1f       	adc	r27, r27
    18ac:	ee 1f       	adc	r30, r30
    18ae:	ff 1f       	adc	r31, r31
    18b0:	a2 17       	cp	r26, r18
    18b2:	b3 07       	cpc	r27, r19
    18b4:	e4 07       	cpc	r30, r20
    18b6:	f5 07       	cpc	r31, r21
    18b8:	20 f0       	brcs	.+8      	; 0x18c2 <__udivmodsi4_ep>
    18ba:	a2 1b       	sub	r26, r18
    18bc:	b3 0b       	sbc	r27, r19
    18be:	e4 0b       	sbc	r30, r20
    18c0:	f5 0b       	sbc	r31, r21

000018c2 <__udivmodsi4_ep>:
    18c2:	66 1f       	adc	r22, r22
    18c4:	77 1f       	adc	r23, r23
    18c6:	88 1f       	adc	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	1a 94       	dec	r1
    18cc:	69 f7       	brne	.-38     	; 0x18a8 <__udivmodsi4_loop>
    18ce:	60 95       	com	r22
    18d0:	70 95       	com	r23
    18d2:	80 95       	com	r24
    18d4:	90 95       	com	r25
    18d6:	9b 01       	movw	r18, r22
    18d8:	ac 01       	movw	r20, r24
    18da:	bd 01       	movw	r22, r26
    18dc:	cf 01       	movw	r24, r30
    18de:	08 95       	ret

000018e0 <_exit>:
    18e0:	f8 94       	cli

000018e2 <__stop_program>:
    18e2:	ff cf       	rjmp	.-2      	; 0x18e2 <__stop_program>
