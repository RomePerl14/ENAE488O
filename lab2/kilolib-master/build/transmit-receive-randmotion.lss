
build/transmit-receive-randmotion.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	d5 04       	cpc	r13, r5
      6a:	2c 05       	cpc	r18, r12
      6c:	40 05       	cpc	r20, r0
      6e:	71 05       	cpc	r23, r1
      70:	78 05       	cpc	r23, r8
      72:	57 05       	cpc	r21, r7
      74:	7b 05       	cpc	r23, r11
      76:	d9 06       	cpc	r13, r25
      78:	ca 07       	cpc	r28, r26
      7a:	ca 07       	cpc	r28, r26
      7c:	e2 06       	cpc	r14, r18
      7e:	e5 06       	cpc	r14, r21
      80:	e8 06       	cpc	r14, r24
      82:	ea 06       	cpc	r14, r26
      84:	ec 06       	cpc	r14, r28
      86:	ee 06       	cpc	r14, r30
      88:	9f 07       	cpc	r25, r31
      8a:	00 07       	cpc	r16, r16

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e0 e5       	ldi	r30, 0x50	; 80
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ac 37       	cpi	r26, 0x7C	; 124
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <main>
      da:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <message_rx>:
  }
}

void message_rx(message_t *m, distance_measurement_t *d) 
{
  new_message = 1;
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
      e8:	08 95       	ret

000000ea <message_tx>:
}

message_t *message_tx() 
{
  return &msg;
}
      ea:	82 e1       	ldi	r24, 0x12	; 18
      ec:	91 e0       	ldi	r25, 0x01	; 1
      ee:	08 95       	ret

000000f0 <setup>:
}


// initialize empty message
void setup()
{
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
  msg.type = NORMAL;
      f4:	c2 e1       	ldi	r28, 0x12	; 18
      f6:	d1 e0       	ldi	r29, 0x01	; 1
      f8:	19 86       	std	Y+9, r1	; 0x09
  msg.crc = message_crc(&msg);
      fa:	ce 01       	movw	r24, r28
      fc:	0e 94 dd 07 	call	0xfba	; 0xfba <message_crc>
     100:	9b 87       	std	Y+11, r25	; 0x0b
     102:	8a 87       	std	Y+10, r24	; 0x0a
}
     104:	df 91       	pop	r29
     106:	cf 91       	pop	r28
     108:	08 95       	ret

0000010a <set_motion>:


// function to set new motion
void set_motion(uint8_t new_motion) 
{
  if (cur_motion != new_motion)
     10a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     10e:	98 17       	cp	r25, r24
     110:	01 f1       	breq	.+64     	; 0x152 <set_motion+0x48>
  {
    cur_motion = new_motion;
     112:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cur_motion>
    switch(cur_motion) 
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	41 f0       	breq	.+16     	; 0x12a <set_motion+0x20>
     11a:	28 f0       	brcs	.+10     	; 0x126 <set_motion+0x1c>
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	61 f0       	breq	.+24     	; 0x138 <set_motion+0x2e>
     120:	83 30       	cpi	r24, 0x03	; 3
     122:	81 f0       	breq	.+32     	; 0x144 <set_motion+0x3a>
     124:	08 95       	ret
    {
      case STOP:
        set_motors(0,0);
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	11 c0       	rjmp	.+34     	; 0x14c <set_motion+0x42>
        break;
      case FORWARD:
        spinup_motors();
     12a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spinup_motors>
        set_motors(kilo_straight_left, kilo_straight_right);
     12e:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <kilo_straight_right>
     132:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <kilo_straight_left>
     136:	0b c0       	rjmp	.+22     	; 0x14e <set_motion+0x44>
        break;
      case LEFT:
        spinup_motors();
     138:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spinup_motors>
        set_motors(kilo_turn_left, 0);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <kilo_turn_left>
     142:	05 c0       	rjmp	.+10     	; 0x14e <set_motion+0x44>
        break;
      case RIGHT:
        spinup_motors();
     144:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spinup_motors>
        set_motors(0, kilo_turn_right);
     148:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <kilo_turn_right>
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <set_motors>
     152:	08 95       	ret

00000154 <loop>:
  msg.crc = message_crc(&msg);
}

void loop() 
{
  if (new_message) 
     154:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     158:	88 23       	and	r24, r24
     15a:	a9 f0       	breq	.+42     	; 0x186 <loop+0x32>
  {
    // generate random 8-bit number, and extract random 2-bit number
    const uint8_t twobit_mask = 0b00000011;
    uint8_t rand_direction = rand_soft()&twobit_mask;
     15c:	0e 94 75 02 	call	0x4ea	; 0x4ea <rand_soft>
     160:	83 70       	andi	r24, 0x03	; 3

    if (rand_direction == 0 || rand_direction == 1)
     162:	82 30       	cpi	r24, 0x02	; 2
     164:	10 f4       	brcc	.+4      	; 0x16a <loop+0x16>
    {
      set_motion(FORWARD);
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	03 c0       	rjmp	.+6      	; 0x170 <loop+0x1c>
    }
    else if (rand_direction == 2)
     16a:	82 30       	cpi	r24, 0x02	; 2
     16c:	09 f0       	breq	.+2      	; 0x170 <loop+0x1c>
    {
      set_motion(LEFT);
    }
    else if (rand_direction == 3)
    {
      set_motion(RIGHT);
     16e:	83 e0       	ldi	r24, 0x03	; 3
     170:	0e 94 85 00 	call	0x10a	; 0x10a <set_motion>
    }

    delay(1000);
     174:	88 ee       	ldi	r24, 0xE8	; 232
     176:	93 e0       	ldi	r25, 0x03	; 3
     178:	0e 94 c5 01 	call	0x38a	; 0x38a <delay>
    set_motion(STOP);
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	0e 94 85 00 	call	0x10a	; 0x10a <set_motion>
    new_message = 0;
     182:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
     186:	08 95       	ret

00000188 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     188:	08 95       	ret

0000018a <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	08 95       	ret

00000190 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     190:	08 95       	ret

00000192 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     192:	df 92       	push	r13
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
     198:	0f 93       	push	r16
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
    cli();
     1a0:	f8 94       	cli

    ports_off();
     1a2:	14 b8       	out	0x04, r1	; 4
     1a4:	17 b8       	out	0x07, r1	; 7
     1a6:	1a b8       	out	0x0a, r1	; 10
     1a8:	15 b8       	out	0x05, r1	; 5
     1aa:	18 b8       	out	0x08, r1	; 8
     1ac:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     1ae:	52 9a       	sbi	0x0a, 2	; 10
     1b0:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     1b2:	14 bc       	out	0x24, r1	; 36
     1b4:	85 e0       	ldi	r24, 0x05	; 5
     1b6:	85 bd       	out	0x25, r24	; 37
     1b8:	8f ef       	ldi	r24, 0xFF	; 255
     1ba:	87 bd       	out	0x27, r24	; 39
     1bc:	82 e0       	ldi	r24, 0x02	; 2
     1be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     1c2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     1c6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     1ca:	2f e8       	ldi	r18, 0x8F	; 143
     1cc:	3b e0       	ldi	r19, 0x0B	; 11
     1ce:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     1d2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     1d6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     1da:	53 98       	cbi	0x0a, 3	; 10
     1dc:	23 98       	cbi	0x04, 3	; 4
     1de:	91 ea       	ldi	r25, 0xA1	; 161
     1e0:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     1e4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     1e8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     1ec:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     1f0:	8b e0       	ldi	r24, 0x0B	; 11
     1f2:	80 bf       	out	0x30, r24	; 48
     1f4:	83 e0       	ldi	r24, 0x03	; 3
     1f6:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     200:	83 e8       	ldi	r24, 0x83	; 131
     202:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     206:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     20a:	80 64       	ori	r24, 0x40	; 64
     20c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     210:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     214:	86 fd       	sbrc	r24, 6
     216:	fc cf       	rjmp	.-8      	; 0x210 <kilo_init+0x7e>
    adc_trigger_high_gain();
     218:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     21c:	83 ea       	ldi	r24, 0xA3	; 163
     21e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
    if (osccal != 0xFF)
     230:	8f 3f       	cpi	r24, 0xFF	; 255
     232:	11 f0       	breq	.+4      	; 0x238 <kilo_init+0xa6>
        OSCCAL = osccal;
     234:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     238:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
    rx_leadingbit = 1;
     23c:	c1 e0       	ldi	r28, 0x01	; 1
     23e:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <rx_leadingbit>
    rx_leadingbyte = 1;
     242:	c0 93 62 01 	sts	0x0162, r28	; 0x800162 <rx_leadingbyte>
    rx_byteindex = 0;
     246:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <rx_byteindex>
    rx_bytevalue = 0;
     24a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     24e:	80 e9       	ldi	r24, 0x90	; 144
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
     256:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     25a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <tx_mask>
     25e:	88 73       	andi	r24, 0x38	; 56
     260:	11 f0       	breq	.+4      	; 0x266 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     262:	c0 93 3b 01 	sts	0x013B, r28	; 0x80013b <tx_mask>
    tx_clock = 0;
     266:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <tx_clock+0x1>
     26a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <tx_clock>
    tx_increment = 255;
     26e:	8f ef       	ldi	r24, 0xFF	; 255
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <tx_increment+0x1>
     276:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <tx_increment>
    kilo_ticks = 0;
     27a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <kilo_ticks>
     27e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <kilo_ticks+0x1>
     282:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <kilo_ticks+0x2>
     286:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <kilo_ticks+0x3>
    kilo_state = IDLE;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    kilo_tx_period = 3906;
     290:	82 e4       	ldi	r24, 0x42	; 66
     292:	9f e0       	ldi	r25, 0x0F	; 15
     294:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <kilo_tx_period+0x1>
     298:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     29c:	80 eb       	ldi	r24, 0xB0	; 176
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
     2a4:	c8 2f       	mov	r28, r24
     2a6:	81 eb       	ldi	r24, 0xB1	; 177
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
     2ae:	2c 2f       	mov	r18, r28
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	38 2b       	or	r19, r24
     2b4:	30 93 78 01 	sts	0x0178, r19	; 0x800178 <kilo_uid+0x1>
     2b8:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     2bc:	85 e0       	ldi	r24, 0x05	; 5
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
     2c4:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     2c8:	89 e0       	ldi	r24, 0x09	; 9
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
     2d0:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     2d4:	8c e0       	ldi	r24, 0x0C	; 12
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
     2dc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     2e0:	84 e1       	ldi	r24, 0x14	; 20
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
     2e8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <kilo_straight_right>
     2ec:	06 e4       	ldi	r16, 0x46	; 70
     2ee:	11 e0       	ldi	r17, 0x01	; 1
     2f0:	5f e1       	ldi	r21, 0x1F	; 31
     2f2:	e5 2e       	mov	r14, r21
     2f4:	51 e0       	ldi	r21, 0x01	; 1
     2f6:	f5 2e       	mov	r15, r21
     2f8:	c0 e2       	ldi	r28, 0x20	; 32
     2fa:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2fc:	ce 01       	movw	r24, r28
     2fe:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
     302:	d8 2e       	mov	r13, r24
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
     30c:	2d 2d       	mov	r18, r13
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	32 2f       	mov	r19, r18
     312:	22 27       	eor	r18, r18
     314:	28 2b       	or	r18, r24
     316:	f8 01       	movw	r30, r16
     318:	21 93       	st	Z+, r18
     31a:	31 93       	st	Z+, r19
     31c:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     31e:	ce 01       	movw	r24, r28
     320:	c0 96       	adiw	r24, 0x30	; 48
     322:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
     326:	d8 2e       	mov	r13, r24
     328:	ce 01       	movw	r24, r28
     32a:	c1 96       	adiw	r24, 0x31	; 49
     32c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <eeprom_read_byte>
     330:	2d 2d       	mov	r18, r13
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	32 2f       	mov	r19, r18
     336:	22 27       	eor	r18, r18
     338:	28 2b       	or	r18, r24
     33a:	f7 01       	movw	r30, r14
     33c:	21 93       	st	Z+, r18
     33e:	31 93       	st	Z+, r19
     340:	7f 01       	movw	r14, r30
     342:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     344:	cc 33       	cpi	r28, 0x3C	; 60
     346:	d1 05       	cpc	r29, r1
     348:	c9 f6       	brne	.-78     	; 0x2fc <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     34a:	78 94       	sei
}
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	08 95       	ret

0000035c <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     35c:	1f 92       	push	r1
     35e:	0f 92       	push	r0
     360:	0f b6       	in	r0, 0x3f	; 63
     362:	0f 92       	push	r0
     364:	11 24       	eor	r1, r1
     366:	8f 93       	push	r24
     368:	0f b6       	in	r0, 0x3f	; 63
     36a:	f8 94       	cli
     36c:	a8 95       	wdr
     36e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     372:	88 61       	ori	r24, 0x18	; 24
     374:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     378:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     37c:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     37e:	8f 91       	pop	r24
     380:	0f 90       	pop	r0
     382:	0f be       	out	0x3f, r0	; 63
     384:	0f 90       	pop	r0
     386:	1f 90       	pop	r1
     388:	18 95       	reti

0000038a <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     38a:	00 97       	sbiw	r24, 0x00	; 0
     38c:	41 f0       	breq	.+16     	; 0x39e <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     38e:	ef ec       	ldi	r30, 0xCF	; 207
     390:	f7 e0       	ldi	r31, 0x07	; 7
     392:	31 97       	sbiw	r30, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <delay+0x8>
     396:	00 c0       	rjmp	.+0      	; 0x398 <delay+0xe>
     398:	00 00       	nop
        _delay_ms(1);
        ms--;
     39a:	01 97       	sbiw	r24, 0x01	; 1
     39c:	f6 cf       	rjmp	.-20     	; 0x38a <delay>
    }
}
     39e:	08 95       	ret

000003a0 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     3a0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     3a4:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     3a8:	08 95       	ret

000003aa <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     3b0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     3b4:	8f e0       	ldi	r24, 0x0F	; 15
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0c 94 c5 01 	jmp	0x38a	; 0x38a <delay>

000003bc <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     3bc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     3c0:	81 11       	cpse	r24, r1
     3c2:	1e c0       	rjmp	.+60     	; 0x400 <__EEPROM_REGION_LENGTH__>
        cli();
     3c4:	f8 94       	cli
        adc_setup_conversion(7);
     3c6:	87 e0       	ldi	r24, 0x07	; 7
     3c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3cc:	83 e8       	ldi	r24, 0x83	; 131
     3ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     3d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3d6:	80 64       	ori	r24, 0x40	; 64
     3d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     3dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3e0:	86 fd       	sbrc	r24, 6
     3e2:	fc cf       	rjmp	.-8      	; 0x3dc <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     3e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3ec:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3f0:	23 ea       	ldi	r18, 0xA3	; 163
     3f2:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     3fc:	78 94       	sei
     3fe:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     404:	08 95       	ret

00000406 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     406:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     40a:	81 11       	cpse	r24, r1
     40c:	1e c0       	rjmp	.+60     	; 0x44a <get_temperature+0x44>
        cli();
     40e:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     410:	88 ec       	ldi	r24, 0xC8	; 200
     412:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     416:	87 e8       	ldi	r24, 0x87	; 135
     418:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     41c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     420:	80 64       	ori	r24, 0x40	; 64
     422:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     426:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     42a:	86 fd       	sbrc	r24, 6
     42c:	fc cf       	rjmp	.-8      	; 0x426 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     42e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     432:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     436:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     43a:	23 ea       	ldi	r18, 0xA3	; 163
     43c:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     440:	21 e0       	ldi	r18, 0x01	; 1
     442:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     446:	78 94       	sei
     448:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     44e:	08 95       	ret

00000450 <rand_hard>:

uint8_t rand_hard() {
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	20 e0       	ldi	r18, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     458:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     45a:	e3 ea       	ldi	r30, 0xA3	; 163
     45c:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     45e:	c6 e0       	ldi	r28, 0x06	; 6
     460:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     462:	a1 e0       	ldi	r26, 0x01	; 1
     464:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     466:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     468:	f8 94       	cli
            adc_setup_conversion(6);
     46a:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     46e:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     472:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     476:	40 64       	ori	r20, 0x40	; 64
     478:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     47c:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     480:	46 fd       	sbrc	r20, 6
     482:	fc cf       	rjmp	.-8      	; 0x47c <rand_hard+0x2c>
            a = ADCW&0x1;
     484:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     488:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     48c:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     48e:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     492:	50 64       	ori	r21, 0x40	; 64
     494:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     498:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     49c:	56 fd       	sbrc	r21, 6
     49e:	fc cf       	rjmp	.-8      	; 0x498 <rand_hard+0x48>
            b = ADCW&0x1;
     4a0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4a4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     4a8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4ac:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4b0:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     4b4:	78 94       	sei
            tries++;
     4b6:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     4b8:	61 70       	andi	r22, 0x01	; 1
     4ba:	46 17       	cp	r20, r22
     4bc:	51 f0       	breq	.+20     	; 0x4d2 <rand_hard+0x82>
        if (a)
     4be:	44 23       	and	r20, r20
     4c0:	59 f0       	breq	.+22     	; 0x4d8 <rand_hard+0x88>
            num |= (1<<i);
     4c2:	ad 01       	movw	r20, r26
     4c4:	02 2e       	mov	r0, r18
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <rand_hard+0x7a>
     4c8:	44 0f       	add	r20, r20
     4ca:	0a 94       	dec	r0
     4cc:	ea f7       	brpl	.-6      	; 0x4c8 <rand_hard+0x78>
     4ce:	84 2b       	or	r24, r20
     4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     4d2:	90 38       	cpi	r25, 0x80	; 128
     4d4:	49 f6       	brne	.-110    	; 0x468 <rand_hard+0x18>
     4d6:	f3 cf       	rjmp	.-26     	; 0x4be <rand_hard+0x6e>
     4d8:	2f 5f       	subi	r18, 0xFF	; 255
     4da:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     4dc:	28 30       	cpi	r18, 0x08	; 8
     4de:	31 05       	cpc	r19, r1
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <rand_hard+0x94>
     4e2:	c1 cf       	rjmp	.-126    	; 0x466 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     4ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4ee:	98 e0       	ldi	r25, 0x08	; 8
     4f0:	89 9f       	mul	r24, r25
     4f2:	90 01       	movw	r18, r0
     4f4:	11 24       	eor	r1, r1
     4f6:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     4f8:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <accumulator>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	89 0f       	add	r24, r25
     500:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <accumulator>
     504:	82 2f       	mov	r24, r18
     506:	82 95       	swap	r24
     508:	86 95       	lsr	r24
     50a:	87 70       	andi	r24, 0x07	; 7
     50c:	28 27       	eor	r18, r24
     50e:	96 95       	lsr	r25
     510:	96 95       	lsr	r25
     512:	82 2f       	mov	r24, r18
     514:	89 27       	eor	r24, r25
     516:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     51a:	08 95       	ret

0000051c <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     51c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     520:	08 95       	ret

00000522 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     522:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     526:	81 11       	cpse	r24, r1
     528:	16 c0       	rjmp	.+44     	; 0x556 <get_voltage+0x34>
        cli();                                    // disable interrupts
     52a:	f8 94       	cli
        adc_setup_conversion(6);
     52c:	86 e0       	ldi	r24, 0x06	; 6
     52e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     532:	83 e8       	ldi	r24, 0x83	; 131
     534:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     538:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     53c:	80 64       	ori	r24, 0x40	; 64
     53e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     542:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     546:	86 fd       	sbrc	r24, 6
     548:	fc cf       	rjmp	.-8      	; 0x542 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     54a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     54e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     552:	78 94       	sei
     554:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     556:	8f ef       	ldi	r24, 0xFF	; 255
     558:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     55a:	08 95       	ret

0000055c <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     55c:	2f 92       	push	r2
     55e:	3f 92       	push	r3
     560:	4f 92       	push	r4
     562:	5f 92       	push	r5
     564:	6f 92       	push	r6
     566:	7f 92       	push	r7
     568:	8f 92       	push	r8
     56a:	9f 92       	push	r9
     56c:	af 92       	push	r10
     56e:	bf 92       	push	r11
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     582:	fc 01       	movw	r30, r24
     584:	c2 81       	ldd	r28, Z+2	; 0x02
     586:	d3 81       	ldd	r29, Z+3	; 0x03
     588:	c4 38       	cpi	r28, 0x84	; 132
     58a:	f3 e0       	ldi	r31, 0x03	; 3
     58c:	df 07       	cpc	r29, r31
     58e:	0c f0       	brlt	.+2      	; 0x592 <estimate_distance+0x36>
     590:	7e c0       	rjmp	.+252    	; 0x68e <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     592:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <kilo_irhigh>
     596:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <kilo_irhigh+0x1>
     59a:	8c 17       	cp	r24, r28
     59c:	9d 07       	cpc	r25, r29
     59e:	08 f4       	brcc	.+2      	; 0x5a2 <estimate_distance+0x46>
     5a0:	6f c0       	rjmp	.+222    	; 0x680 <estimate_distance+0x124>
     5a2:	e1 e2       	ldi	r30, 0x21	; 33
     5a4:	f1 e0       	ldi	r31, 0x01	; 1
     5a6:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     5a8:	81 91       	ld	r24, Z+
     5aa:	91 91       	ld	r25, Z+
     5ac:	8c 17       	cp	r24, r28
     5ae:	9d 07       	cpc	r25, r29
     5b0:	20 f0       	brcs	.+8      	; 0x5ba <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     5b2:	1f 5f       	subi	r17, 0xFF	; 255
     5b4:	1e 30       	cpi	r17, 0x0E	; 14
     5b6:	c1 f7       	brne	.-16     	; 0x5a8 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     5b8:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     5ba:	81 2f       	mov	r24, r17
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	fc 01       	movw	r30, r24
     5c0:	ee 0f       	add	r30, r30
     5c2:	ff 1f       	adc	r31, r31
     5c4:	e1 5e       	subi	r30, 0xE1	; 225
     5c6:	fe 4f       	sbci	r31, 0xFE	; 254
     5c8:	e0 80       	ld	r14, Z
     5ca:	f1 80       	ldd	r15, Z+1	; 0x01
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	fc 01       	movw	r30, r24
     5d2:	e3 5e       	subi	r30, 0xE3	; 227
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	80 81       	ld	r24, Z
     5d8:	91 81       	ldd	r25, Z+1	; 0x01
     5da:	b7 01       	movw	r22, r14
     5dc:	68 1b       	sub	r22, r24
     5de:	79 0b       	sbc	r23, r25
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__floatunsisf>
     5e8:	9b 01       	movw	r18, r22
     5ea:	ac 01       	movw	r20, r24
     5ec:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__addsf3>
     5f0:	4b 01       	movw	r8, r22
     5f2:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     5f4:	be 01       	movw	r22, r28
     5f6:	0d 2e       	mov	r0, r29
     5f8:	00 0c       	add	r0, r0
     5fa:	88 0b       	sbc	r24, r24
     5fc:	99 0b       	sbc	r25, r25
     5fe:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__floatsisf>
     602:	2b 01       	movw	r4, r22
     604:	3c 01       	movw	r6, r24
     606:	b7 01       	movw	r22, r14
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__floatunsisf>
     610:	6b 01       	movw	r12, r22
     612:	7c 01       	movw	r14, r24
     614:	61 2f       	mov	r22, r17
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__floatunsisf>
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	5f e3       	ldi	r21, 0x3F	; 63
     628:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__mulsf3>
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	a9 01       	movw	r20, r18
     632:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__addsf3>
     636:	a5 01       	movw	r20, r10
     638:	94 01       	movw	r18, r8
     63a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__mulsf3>
     63e:	9b 01       	movw	r18, r22
     640:	ac 01       	movw	r20, r24
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__subsf3>
     64a:	9b 01       	movw	r18, r22
     64c:	ac 01       	movw	r20, r24
     64e:	c3 01       	movw	r24, r6
     650:	b2 01       	movw	r22, r4
     652:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e2       	ldi	r20, 0x20	; 32
     65c:	51 e4       	ldi	r21, 0x41	; 65
     65e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__mulsf3>
     662:	0e 94 af 09 	call	0x135e	; 0x135e <__fixsfsi>
     666:	7b 01       	movw	r14, r22
     668:	c5 01       	movw	r24, r10
     66a:	b4 01       	movw	r22, r8
     66c:	0e 94 af 09 	call	0x135e	; 0x135e <__fixsfsi>
     670:	ab 01       	movw	r20, r22
     672:	bc 01       	movw	r22, r24
     674:	c7 01       	movw	r24, r14
     676:	ba 01       	movw	r22, r20
     678:	0e 94 93 08 	call	0x1126	; 0x1126 <__divmodhi4>
     67c:	16 2f       	mov	r17, r22
     67e:	01 c0       	rjmp	.+2      	; 0x682 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     680:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     682:	cd 3b       	cpi	r28, 0xBD	; 189
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	d8 07       	cpc	r29, r24
     688:	0c f4       	brge	.+2      	; 0x68c <estimate_distance+0x130>
     68a:	ca c0       	rjmp	.+404    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     68c:	01 c0       	rjmp	.+2      	; 0x690 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     68e:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     690:	f1 01       	movw	r30, r2
     692:	c0 80       	ld	r12, Z
     694:	d1 80       	ldd	r13, Z+1	; 0x01
     696:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <kilo_irlow>
     69a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <kilo_irlow+0x1>
     69e:	8c 15       	cp	r24, r12
     6a0:	9d 05       	cpc	r25, r13
     6a2:	88 f0       	brcs	.+34     	; 0x6c6 <estimate_distance+0x16a>
     6a4:	e8 e4       	ldi	r30, 0x48	; 72
     6a6:	f1 e0       	ldi	r31, 0x01	; 1
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     6ae:	e1 90       	ld	r14, Z+
     6b0:	f1 90       	ld	r15, Z+
     6b2:	ec 14       	cp	r14, r12
     6b4:	fd 04       	cpc	r15, r13
     6b6:	08 f4       	brcc	.+2      	; 0x6ba <estimate_distance+0x15e>
     6b8:	58 c0       	rjmp	.+176    	; 0x76a <estimate_distance+0x20e>
     6ba:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     6bc:	8e 30       	cpi	r24, 0x0E	; 14
     6be:	91 05       	cpc	r25, r1
     6c0:	a9 f7       	brne	.-22     	; 0x6ac <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     6c2:	0a e5       	ldi	r16, 0x5A	; 90
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     6c6:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     6c8:	1f 3f       	cpi	r17, 0xFF	; 255
     6ca:	09 f4       	brne	.+2      	; 0x6ce <estimate_distance+0x172>
     6cc:	4b c0       	rjmp	.+150    	; 0x764 <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     6ce:	be 01       	movw	r22, r28
     6d0:	dd 0f       	add	r29, r29
     6d2:	88 0b       	sbc	r24, r24
     6d4:	99 0b       	sbc	r25, r25
     6d6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__floatsisf>
     6da:	6b 01       	movw	r12, r22
     6dc:	7c 01       	movw	r14, r24
     6de:	61 2f       	mov	r22, r17
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__floatunsisf>
     6ea:	4b 01       	movw	r8, r22
     6ec:	5c 01       	movw	r10, r24
     6ee:	a7 01       	movw	r20, r14
     6f0:	96 01       	movw	r18, r12
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	70 e0       	ldi	r23, 0x00	; 0
     6f6:	81 e6       	ldi	r24, 0x61	; 97
     6f8:	94 e4       	ldi	r25, 0x44	; 68
     6fa:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__subsf3>
     6fe:	9b 01       	movw	r18, r22
     700:	ac 01       	movw	r20, r24
     702:	c5 01       	movw	r24, r10
     704:	b4 01       	movw	r22, r8
     706:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__mulsf3>
     70a:	4b 01       	movw	r8, r22
     70c:	5c 01       	movw	r10, r24
     70e:	60 2f       	mov	r22, r16
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__floatunsisf>
     71a:	2b 01       	movw	r4, r22
     71c:	3c 01       	movw	r6, r24
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	4f e2       	ldi	r20, 0x2F	; 47
     724:	54 e4       	ldi	r21, 0x44	; 68
     726:	c7 01       	movw	r24, r14
     728:	b6 01       	movw	r22, r12
     72a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__subsf3>
     72e:	9b 01       	movw	r18, r22
     730:	ac 01       	movw	r20, r24
     732:	c3 01       	movw	r24, r6
     734:	b2 01       	movw	r22, r4
     736:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__mulsf3>
     73a:	9b 01       	movw	r18, r22
     73c:	ac 01       	movw	r20, r24
     73e:	c5 01       	movw	r24, r10
     740:	b4 01       	movw	r22, r8
     742:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__addsf3>
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	48 e4       	ldi	r20, 0x48	; 72
     74c:	53 e4       	ldi	r21, 0x43	; 67
     74e:	0e 94 3d 09 	call	0x127a	; 0x127a <__divsf3>
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	44 e0       	ldi	r20, 0x04	; 4
     758:	52 e4       	ldi	r21, 0x42	; 66
     75a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__addsf3>
     75e:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>
     762:	60 c0       	rjmp	.+192    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
        } else {
            return 33 + dist_low;
     764:	61 e2       	ldi	r22, 0x21	; 33
     766:	60 0f       	add	r22, r16
     768:	5d c0       	rjmp	.+186    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	fc 01       	movw	r30, r24
     770:	ec 5b       	subi	r30, 0xBC	; 188
     772:	fe 4f       	sbci	r31, 0xFE	; 254
     774:	80 81       	ld	r24, Z
     776:	91 81       	ldd	r25, Z+1	; 0x01
     778:	b7 01       	movw	r22, r14
     77a:	68 1b       	sub	r22, r24
     77c:	79 0b       	sbc	r23, r25
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__floatunsisf>
     786:	9b 01       	movw	r18, r22
     788:	ac 01       	movw	r20, r24
     78a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__addsf3>
     78e:	4b 01       	movw	r8, r22
     790:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     792:	b6 01       	movw	r22, r12
     794:	dd 0c       	add	r13, r13
     796:	88 0b       	sbc	r24, r24
     798:	99 0b       	sbc	r25, r25
     79a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__floatsisf>
     79e:	2b 01       	movw	r4, r22
     7a0:	3c 01       	movw	r6, r24
     7a2:	b7 01       	movw	r22, r14
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__floatunsisf>
     7ac:	6b 01       	movw	r12, r22
     7ae:	7c 01       	movw	r14, r24
     7b0:	63 2d       	mov	r22, r3
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__floatunsisf>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e0       	ldi	r20, 0x00	; 0
     7c2:	5f e3       	ldi	r21, 0x3F	; 63
     7c4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__mulsf3>
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	a9 01       	movw	r20, r18
     7ce:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__addsf3>
     7d2:	a5 01       	movw	r20, r10
     7d4:	94 01       	movw	r18, r8
     7d6:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__mulsf3>
     7da:	9b 01       	movw	r18, r22
     7dc:	ac 01       	movw	r20, r24
     7de:	c7 01       	movw	r24, r14
     7e0:	b6 01       	movw	r22, r12
     7e2:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__subsf3>
     7e6:	9b 01       	movw	r18, r22
     7e8:	ac 01       	movw	r20, r24
     7ea:	c3 01       	movw	r24, r6
     7ec:	b2 01       	movw	r22, r4
     7ee:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e2       	ldi	r20, 0x20	; 32
     7f8:	51 e4       	ldi	r21, 0x41	; 65
     7fa:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__mulsf3>
     7fe:	0e 94 af 09 	call	0x135e	; 0x135e <__fixsfsi>
     802:	7b 01       	movw	r14, r22
     804:	c5 01       	movw	r24, r10
     806:	b4 01       	movw	r22, r8
     808:	0e 94 af 09 	call	0x135e	; 0x135e <__fixsfsi>
     80c:	ab 01       	movw	r20, r22
     80e:	bc 01       	movw	r22, r24
     810:	c7 01       	movw	r24, r14
     812:	ba 01       	movw	r22, r20
     814:	0e 94 93 08 	call	0x1126	; 0x1126 <__divmodhi4>
     818:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     81a:	6f 3f       	cpi	r22, 0xFF	; 255
     81c:	09 f0       	breq	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81e:	54 cf       	rjmp	.-344    	; 0x6c8 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     820:	61 e2       	ldi	r22, 0x21	; 33
     822:	61 0f       	add	r22, r17
    }
}
     824:	86 2f       	mov	r24, r22
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	cf 90       	pop	r12
     836:	bf 90       	pop	r11
     838:	af 90       	pop	r10
     83a:	9f 90       	pop	r9
     83c:	8f 90       	pop	r8
     83e:	7f 90       	pop	r7
     840:	6f 90       	pop	r6
     842:	5f 90       	pop	r5
     844:	4f 90       	pop	r4
     846:	3f 90       	pop	r3
     848:	2f 90       	pop	r2
     84a:	08 95       	ret

0000084c <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     84c:	1f 92       	push	r1
     84e:	0f 92       	push	r0
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	0f 92       	push	r0
     854:	11 24       	eor	r1, r1
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	ef 93       	push	r30
     86c:	ff 93       	push	r31
    tx_clock += tx_increment;
     86e:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <tx_clock>
     872:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <tx_clock+0x1>
     876:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <tx_increment>
     87a:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <tx_increment+0x1>
     87e:	82 0f       	add	r24, r18
     880:	93 1f       	adc	r25, r19
     882:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <tx_clock+0x1>
     886:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <tx_clock>
    tx_increment = 0xFF;
     88a:	8f ef       	ldi	r24, 0xFF	; 255
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <tx_increment+0x1>
     892:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <tx_increment>
    OCR0A = tx_increment;
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     89a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <kilo_ticks>
     89e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <kilo_ticks+0x1>
     8a2:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <kilo_ticks+0x2>
     8a6:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <kilo_ticks+0x3>
     8aa:	01 96       	adiw	r24, 0x01	; 1
     8ac:	a1 1d       	adc	r26, r1
     8ae:	b1 1d       	adc	r27, r1
     8b0:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <kilo_ticks>
     8b4:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <kilo_ticks+0x1>
     8b8:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <kilo_ticks+0x2>
     8bc:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     8c0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     8c4:	81 11       	cpse	r24, r1
     8c6:	2d c0       	rjmp	.+90     	; 0x922 <__stack+0x23>
     8c8:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <kilo_tx_period>
     8cc:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <kilo_tx_period+0x1>
     8d0:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <tx_clock>
     8d4:	30 91 66 01 	lds	r19, 0x0166	; 0x800166 <tx_clock+0x1>
     8d8:	82 17       	cp	r24, r18
     8da:	93 07       	cpc	r25, r19
     8dc:	10 f5       	brcc	.+68     	; 0x922 <__stack+0x23>
     8de:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     8e2:	84 30       	cpi	r24, 0x04	; 4
     8e4:	f1 f4       	brne	.+60     	; 0x922 <__stack+0x23>
        message_t *msg = kilo_message_tx();
     8e6:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     8ea:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     8ee:	09 95       	icall
        if (msg) {
     8f0:	00 97       	sbiw	r24, 0x00	; 0
     8f2:	b9 f0       	breq	.+46     	; 0x922 <__stack+0x23>
            if (message_send(msg)) {
     8f4:	0e 94 f9 07 	call	0xff2	; 0xff2 <message_send>
     8f8:	88 23       	and	r24, r24
     8fa:	51 f0       	breq	.+20     	; 0x910 <__stack+0x11>
                kilo_message_tx_success();
     8fc:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     900:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     904:	09 95       	icall
                tx_clock = 0;
     906:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <tx_clock+0x1>
     90a:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <tx_clock>
     90e:	09 c0       	rjmp	.+18     	; 0x922 <__stack+0x23>
            } else {
                tx_increment = rand()&0xFF;
     910:	0e 94 2c 0b 	call	0x1658	; 0x1658 <rand>
     914:	9c 01       	movw	r18, r24
     916:	33 27       	eor	r19, r19
     918:	30 93 64 01 	sts	0x0164, r19	; 0x800164 <tx_increment+0x1>
     91c:	20 93 63 01 	sts	0x0163, r18	; 0x800163 <tx_increment>
                OCR0A = tx_increment;
     920:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     922:	ff 91       	pop	r31
     924:	ef 91       	pop	r30
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     944:	80 ff       	sbrs	r24, 0
     946:	02 c0       	rjmp	.+4      	; 0x94c <set_color+0x8>
        DDRD |= (1<<5);
     948:	55 9a       	sbi	0x0a, 5	; 10
     94a:	01 c0       	rjmp	.+2      	; 0x94e <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     94c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     94e:	81 ff       	sbrs	r24, 1
     950:	02 c0       	rjmp	.+4      	; 0x956 <set_color+0x12>
        DDRD |= (1<<4);
     952:	54 9a       	sbi	0x0a, 4	; 10
     954:	01 c0       	rjmp	.+2      	; 0x958 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     956:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     958:	82 ff       	sbrs	r24, 2
     95a:	02 c0       	rjmp	.+4      	; 0x960 <set_color+0x1c>
        DDRC |= (1<<3);
     95c:	3b 9a       	sbi	0x07, 3	; 7
     95e:	01 c0       	rjmp	.+2      	; 0x962 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     960:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     962:	83 ff       	sbrs	r24, 3
     964:	02 c0       	rjmp	.+4      	; 0x96a <set_color+0x26>
        DDRC |= (1<<2);
     966:	3a 9a       	sbi	0x07, 2	; 7
     968:	01 c0       	rjmp	.+2      	; 0x96c <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     96a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     96c:	84 ff       	sbrs	r24, 4
     96e:	02 c0       	rjmp	.+4      	; 0x974 <set_color+0x30>
        DDRC |= (1<<5);
     970:	3d 9a       	sbi	0x07, 5	; 7
     972:	01 c0       	rjmp	.+2      	; 0x976 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     974:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     976:	85 ff       	sbrs	r24, 5
     978:	02 c0       	rjmp	.+4      	; 0x97e <set_color+0x3a>
        DDRC |= (1<<4);
     97a:	3c 9a       	sbi	0x07, 4	; 7
     97c:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     97e:	3c 98       	cbi	0x07, 4	; 7
     980:	08 95       	ret

00000982 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     982:	8c 01       	movw	r16, r24
     984:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     986:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     988:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     98e:	98 e1       	ldi	r25, 0x18	; 24
     990:	c9 2e       	mov	r12, r25
     992:	29 e2       	ldi	r18, 0x29	; 41
     994:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     996:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <kilo_state>
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	e7 30       	cpi	r30, 0x07	; 7
     99e:	f1 05       	cpc	r31, r1
     9a0:	d0 f7       	brcc	.-12     	; 0x996 <kilo_start+0x14>
     9a2:	ec 5c       	subi	r30, 0xCC	; 204
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__tablejump2__>
            case SLEEPING:
                cli();
     9aa:	f8 94       	cli
                acomp_off();
     9ac:	80 b7       	in	r24, 0x30	; 48
     9ae:	87 7f       	andi	r24, 0xF7	; 247
     9b0:	80 bf       	out	0x30, r24	; 48
                adc_off();
     9b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9b6:	8f 77       	andi	r24, 0x7F	; 127
     9b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     9bc:	14 b8       	out	0x04, r1	; 4
     9be:	17 b8       	out	0x07, r1	; 7
     9c0:	1a b8       	out	0x0a, r1	; 10
     9c2:	15 b8       	out	0x05, r1	; 5
     9c4:	18 b8       	out	0x08, r1	; 8
     9c6:	1b b8       	out	0x0b, r1	; 11
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	a8 95       	wdr
     9ce:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     9d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     9dc:	80 64       	ori	r24, 0x40	; 64
     9de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     9e2:	83 b7       	in	r24, 0x33	; 51
     9e4:	81 7f       	andi	r24, 0xF1	; 241
     9e6:	84 60       	ori	r24, 0x04	; 4
     9e8:	83 bf       	out	0x33, r24	; 51
                cli();
     9ea:	f8 94       	cli
                sleep_enable();
     9ec:	83 b7       	in	r24, 0x33	; 51
     9ee:	81 60       	ori	r24, 0x01	; 1
     9f0:	83 bf       	out	0x33, r24	; 51
                sei();
     9f2:	78 94       	sei
                sleep_cpu();
     9f4:	88 95       	sleep
                sleep_disable();
     9f6:	83 b7       	in	r24, 0x33	; 51
     9f8:	8e 7f       	andi	r24, 0xFE	; 254
     9fa:	83 bf       	out	0x33, r24	; 51
                sei();
     9fc:	78 94       	sei
                rx_busy = 0;
     9fe:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
                ports_on();
     a02:	52 9a       	sbi	0x0a, 2	; 10
     a04:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     a06:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a0a:	80 68       	ori	r24, 0x80	; 128
     a0c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a10:	87 e5       	ldi	r24, 0x57	; 87
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <kilo_start+0x92>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <kilo_start+0x98>
     a1a:	00 00       	nop
                _delay_us(300);
                acomp_on();
     a1c:	80 b7       	in	r24, 0x30	; 48
     a1e:	88 61       	ori	r24, 0x18	; 24
     a20:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     a22:	8f e3       	ldi	r24, 0x3F	; 63
     a24:	0e 94 a2 04 	call	0x944	; 0x944 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a28:	ef e1       	ldi	r30, 0x1F	; 31
     a2a:	fe e4       	ldi	r31, 0x4E	; 78
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <kilo_start+0xaa>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <kilo_start+0xb0>
     a32:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     a34:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rx_busy>
     a38:	88 23       	and	r24, r24
     a3a:	09 f4       	brne	.+2      	; 0xa3e <kilo_start+0xbc>
     a3c:	50 c0       	rjmp	.+160    	; 0xade <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	0e 94 a2 04 	call	0x944	; 0x944 <set_color>
     a44:	ff ef       	ldi	r31, 0xFF	; 255
     a46:	20 e7       	ldi	r18, 0x70	; 112
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	f1 50       	subi	r31, 0x01	; 1
     a4c:	20 40       	sbci	r18, 0x00	; 0
     a4e:	80 40       	sbci	r24, 0x00	; 0
     a50:	e1 f7       	brne	.-8      	; 0xa4a <kilo_start+0xc8>
     a52:	00 c0       	rjmp	.+0      	; 0xa54 <kilo_start+0xd2>
     a54:	00 00       	nop
     a56:	43 c0       	rjmp	.+134    	; 0xade <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     a58:	8c e0       	ldi	r24, 0x0C	; 12
     a5a:	0e 94 a2 04 	call	0x944	; 0x944 <set_color>
     a5e:	ef ec       	ldi	r30, 0xCF	; 207
     a60:	f7 e0       	ldi	r31, 0x07	; 7
     a62:	31 97       	sbiw	r30, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <kilo_start+0xe0>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <kilo_start+0xe6>
     a68:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 a2 04 	call	0x944	; 0x944 <set_color>
     a70:	ff ef       	ldi	r31, 0xFF	; 255
     a72:	21 ee       	ldi	r18, 0xE1	; 225
     a74:	84 e0       	ldi	r24, 0x04	; 4
     a76:	f1 50       	subi	r31, 0x01	; 1
     a78:	20 40       	sbci	r18, 0x00	; 0
     a7a:	80 40       	sbci	r24, 0x00	; 0
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <kilo_start+0xf4>
     a7e:	2c c0       	rjmp	.+88     	; 0xad8 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     a80:	0e 94 91 02 	call	0x522	; 0x522 <get_voltage>
                if(voltage > 682)
     a84:	8b 3a       	cpi	r24, 0xAB	; 171
     a86:	e2 e0       	ldi	r30, 0x02	; 2
     a88:	9e 07       	cpc	r25, r30
     a8a:	24 f0       	brlt	.+8      	; 0xa94 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     a8c:	8c e0       	ldi	r24, 0x0C	; 12
     a8e:	0e 94 a2 04 	call	0x944	; 0x944 <set_color>
     a92:	81 cf       	rjmp	.-254    	; 0x996 <kilo_start+0x14>
                else if(voltage > 648)
     a94:	89 38       	cpi	r24, 0x89	; 137
     a96:	f2 e0       	ldi	r31, 0x02	; 2
     a98:	9f 07       	cpc	r25, r31
     a9a:	14 f0       	brlt	.+4      	; 0xaa0 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     a9c:	80 e3       	ldi	r24, 0x30	; 48
     a9e:	f7 cf       	rjmp	.-18     	; 0xa8e <kilo_start+0x10c>
                else if(voltage > 614)
     aa0:	87 36       	cpi	r24, 0x67	; 103
     aa2:	92 40       	sbci	r25, 0x02	; 2
     aa4:	14 f0       	brlt	.+4      	; 0xaaa <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     aa6:	8f e0       	ldi	r24, 0x0F	; 15
     aa8:	f2 cf       	rjmp	.-28     	; 0xa8e <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	f0 cf       	rjmp	.-32     	; 0xa8e <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     aae:	48 99       	sbic	0x09, 0	; 9
     ab0:	16 c0       	rjmp	.+44     	; 0xade <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	0e 94 a2 04 	call	0x944	; 0x944 <set_color>
     ab8:	8f ec       	ldi	r24, 0xCF	; 207
     aba:	97 e0       	ldi	r25, 0x07	; 7
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <kilo_start+0x13a>
     ac0:	00 c0       	rjmp	.+0      	; 0xac2 <kilo_start+0x140>
     ac2:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	0e 94 a2 04 	call	0x944	; 0x944 <set_color>
     aca:	9f ef       	ldi	r25, 0xFF	; 255
     acc:	e1 ee       	ldi	r30, 0xE1	; 225
     ace:	f4 e0       	ldi	r31, 0x04	; 4
     ad0:	91 50       	subi	r25, 0x01	; 1
     ad2:	e0 40       	sbci	r30, 0x00	; 0
     ad4:	f0 40       	sbci	r31, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <kilo_start+0x14e>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <kilo_start+0x158>
     ada:	00 00       	nop
     adc:	5c cf       	rjmp	.-328    	; 0x996 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	d6 cf       	rjmp	.-84     	; 0xa8e <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     ae2:	d1 11       	cpse	r29, r1
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <kilo_start+0x168>
                    setup();
     ae6:	f8 01       	movw	r30, r16
     ae8:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     aea:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <kilo_state>
     aee:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     af0:	f7 01       	movw	r30, r14
     af2:	09 95       	icall
                break;
     af4:	50 cf       	rjmp	.-352    	; 0x996 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     af6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     afa:	81 11       	cpse	r24, r1
     afc:	07 c0       	rjmp	.+14     	; 0xb0c <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     afe:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b02:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     b06:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
     b0a:	45 cf       	rjmp	.-374    	; 0x996 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     b0c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     b10:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prev_motion>
     b14:	98 17       	cp	r25, r24
     b16:	09 f4       	brne	.+2      	; 0xb1a <kilo_start+0x198>
     b18:	3e cf       	rjmp	.-388    	; 0x996 <kilo_start+0x14>
                        prev_motion = cur_motion;
     b1a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     b1e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     b22:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	89 f4       	brne	.+34     	; 0xb4c <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b2a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b2e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b32:	8f e2       	ldi	r24, 0x2F	; 47
     b34:	95 e7       	ldi	r25, 0x75	; 117
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <kilo_start+0x1b4>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <kilo_start+0x1ba>
     b3c:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     b3e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b42:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b46:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b4a:	25 cf       	rjmp	.-438    	; 0x996 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b4c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b50:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b54:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     b58:	82 30       	cpi	r24, 0x02	; 2
     b5a:	59 f4       	brne	.+22     	; 0xb72 <kilo_start+0x1f0>
     b5c:	ef e2       	ldi	r30, 0x2F	; 47
     b5e:	f5 e7       	ldi	r31, 0x75	; 117
     b60:	31 97       	sbiw	r30, 0x01	; 1
     b62:	f1 f7       	brne	.-4      	; 0xb60 <kilo_start+0x1de>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <kilo_start+0x1e4>
     b66:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     b68:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b6c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     b70:	10 c0       	rjmp	.+32     	; 0xb92 <kilo_start+0x210>
     b72:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b76:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b7a:	8f e2       	ldi	r24, 0x2F	; 47
     b7c:	95 e7       	ldi	r25, 0x75	; 117
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <kilo_start+0x1fc>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <kilo_start+0x202>
     b84:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     b86:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <kilo_straight_right>
     b8a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b8e:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b92:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b96:	ff ce       	rjmp	.-514    	; 0x996 <kilo_start+0x14>

00000b98 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     b98:	1f 92       	push	r1
     b9a:	0f 92       	push	r0
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	8f 93       	push	r24
     ba4:	9f 93       	push	r25
    rx_timer_off();
     ba6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     baa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     bae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <rx_leadingbit>
    rx_leadingbyte = 1;
     bb8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rx_leadingbyte>
    rx_busy = 0;
     bbc:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
    adc_trigger_high_gain();
     bc0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     bc4:	93 ea       	ldi	r25, 0xA3	; 163
     bc6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bca:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     bce:	9f 91       	pop	r25
     bd0:	8f 91       	pop	r24
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	0f 90       	pop	r0
     bd8:	1f 90       	pop	r1
     bda:	18 95       	reti

00000bdc <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     c02:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c06:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     c0a:	41 e0       	ldi	r20, 0x01	; 1
     c0c:	40 93 45 01 	sts	0x0145, r20	; 0x800145 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     c10:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <rx_leadingbit>
     c14:	88 23       	and	r24, r24
     c16:	21 f1       	breq	.+72     	; 0xc60 <__vector_23+0x84>
        rx_timer_on();
     c18:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c1c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     c20:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     c24:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <rx_bytevalue>
        rx_leadingbit = 0;
     c28:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <rx_leadingbit>
        if (rx_leadingbyte) {
     c2c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_leadingbyte>
     c30:	88 23       	and	r24, r24
     c32:	09 f4       	brne	.+2      	; 0xc36 <__vector_23+0x5a>
     c34:	af c1       	rjmp	.+862    	; 0xf94 <__vector_23+0x3b8>
            adc_finish_conversion();
     c36:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c3a:	86 fd       	sbrc	r24, 6
     c3c:	fc cf       	rjmp	.-8      	; 0xc36 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     c3e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c42:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c46:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <rx_dist+0x3>
     c4a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <rx_dist+0x2>
            adc_trigger_low_gain();
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c54:	93 ea       	ldi	r25, 0xA3	; 163
     c56:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c5a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c5e:	9a c1       	rjmp	.+820    	; 0xf94 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     c60:	c9 01       	movw	r24, r18
     c62:	87 58       	subi	r24, 0x87	; 135
     c64:	91 09       	sbc	r25, r1
     c66:	84 37       	cpi	r24, 0x74	; 116
     c68:	99 40       	sbci	r25, 0x09	; 9
     c6a:	a0 f0       	brcs	.+40     	; 0xc94 <__vector_23+0xb8>
            rx_timer_off();
     c6c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c70:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c74:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     c78:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <rx_leadingbit>
            rx_leadingbyte = 1;
     c7c:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <rx_leadingbyte>
            rx_busy = 0;
     c80:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
            adc_trigger_high_gain();
     c84:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c88:	83 ea       	ldi	r24, 0xA3	; 163
     c8a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c8e:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c92:	80 c1       	rjmp	.+768    	; 0xf94 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     c94:	26 58       	subi	r18, 0x86	; 134
     c96:	31 09       	sbc	r19, r1
     c98:	a4 ef       	ldi	r26, 0xF4	; 244
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	0e 94 ad 08 	call	0x115a	; 0x115a <__umulhisi3>
     ca0:	8c 01       	movw	r16, r24
     ca2:	22 27       	eor	r18, r18
     ca4:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     ca6:	08 30       	cpi	r16, 0x08	; 8
     ca8:	60 f4       	brcc	.+24     	; 0xcc2 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <__vector_23+0xd6>
     cb0:	88 0f       	add	r24, r24
     cb2:	0a 95       	dec	r16
     cb4:	ea f7       	brpl	.-6      	; 0xcb0 <__vector_23+0xd4>
     cb6:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <rx_bytevalue>
     cba:	89 2b       	or	r24, r25
     cbc:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <rx_bytevalue>
     cc0:	69 c1       	rjmp	.+722    	; 0xf94 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     cc2:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <rx_leadingbit>
                if (rx_leadingbyte) {
     cc6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_leadingbyte>
     cca:	88 23       	and	r24, r24
     ccc:	41 f1       	breq	.+80     	; 0xd1e <__vector_23+0x142>
                    adc_finish_conversion();
     cce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cd2:	86 fd       	sbrc	r24, 6
     cd4:	fc cf       	rjmp	.-8      	; 0xcce <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     cd6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     cda:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     cde:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <rx_dist+0x1>
     ce2:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <rx_dist>
                    adc_trigger_high_gain();
     ce6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     cea:	83 ea       	ldi	r24, 0xA3	; 163
     cec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     cf6:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <rx_bytevalue>
     cfa:	99 23       	and	r25, r25
     cfc:	59 f0       	breq	.+22     	; 0xd14 <__vector_23+0x138>
                        rx_timer_off();
     cfe:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d02:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d06:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d0a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <rx_leadingbyte>
                        rx_busy = 0;
     d0e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>
     d12:	40 c1       	rjmp	.+640    	; 0xf94 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     d14:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <rx_leadingbyte>
                        rx_byteindex = 0;
     d18:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <rx_byteindex>
     d1c:	3b c1       	rjmp	.+630    	; 0xf94 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     d1e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <rx_byteindex>
     d22:	e8 2f       	mov	r30, r24
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	e8 59       	subi	r30, 0x98	; 152
     d28:	fe 4f       	sbci	r31, 0xFE	; 254
     d2a:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <rx_bytevalue>
     d2e:	90 83       	st	Z, r25
                    rx_byteindex++;
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     d36:	8c 30       	cpi	r24, 0x0C	; 12
     d38:	09 f0       	breq	.+2      	; 0xd3c <__vector_23+0x160>
     d3a:	2c c1       	rjmp	.+600    	; 0xf94 <__vector_23+0x3b8>
                        rx_timer_off();
     d3c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d40:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d44:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     d48:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <rx_leadingbyte>
                        rx_busy = 0;
     d4c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     d50:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <rx_msg+0xa>
     d54:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <rx_msg+0xb>
     d58:	88 e6       	ldi	r24, 0x68	; 104
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 dd 07 	call	0xfba	; 0xfba <message_crc>
     d60:	08 17       	cp	r16, r24
     d62:	19 07       	cpc	r17, r25
     d64:	09 f0       	breq	.+2      	; 0xd68 <__vector_23+0x18c>
     d66:	16 c1       	rjmp	.+556    	; 0xf94 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     d68:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <rx_msg+0x9>
     d6c:	e7 fd       	sbrc	r30, 7
     d6e:	0a c0       	rjmp	.+20     	; 0xd84 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     d70:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     d74:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     d78:	6d e3       	ldi	r22, 0x3D	; 61
     d7a:	71 e0       	ldi	r23, 0x01	; 1
     d7c:	88 e6       	ldi	r24, 0x68	; 104
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	09 95       	icall
     d82:	08 c1       	rjmp	.+528    	; 0xf94 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     d84:	88 e7       	ldi	r24, 0x78	; 120
     d86:	8e 0f       	add	r24, r30
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	30 f0       	brcs	.+12     	; 0xd98 <__vector_23+0x1bc>
        motors_off();
     d8c:	53 98       	cbi	0x0a, 3	; 10
     d8e:	23 98       	cbi	0x04, 3	; 4
     d90:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d94:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     d98:	8e 2f       	mov	r24, r30
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	fc 01       	movw	r30, r24
     d9e:	e0 58       	subi	r30, 0x80	; 128
     da0:	f1 09       	sbc	r31, r1
     da2:	eb 30       	cpi	r30, 0x0B	; 11
     da4:	f1 05       	cpc	r31, r1
     da6:	08 f0       	brcs	.+2      	; 0xdaa <__vector_23+0x1ce>
     da8:	f5 c0       	rjmp	.+490    	; 0xf94 <__vector_23+0x3b8>
     daa:	e5 5c       	subi	r30, 0xC5	; 197
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__tablejump2__>
        case BOOT:
            tx_timer_off();
     db2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     db6:	8d 7f       	andi	r24, 0xFD	; 253
     db8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     dbc:	16 bc       	out	0x26, r1	; 38
            bootload();
     dbe:	e0 e0       	ldi	r30, 0x00	; 0
     dc0:	f0 e7       	ldi	r31, 0x70	; 112
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     dc4:	e0 e0       	ldi	r30, 0x00	; 0
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     dca:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <kilo_state>
     dce:	e2 c0       	rjmp	.+452    	; 0xf94 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	b2 c0       	rjmp	.+356    	; 0xf38 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     dd4:	85 e0       	ldi	r24, 0x05	; 5
     dd6:	b0 c0       	rjmp	.+352    	; 0xf38 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     dd8:	82 e0       	ldi	r24, 0x02	; 2
     dda:	ae c0       	rjmp	.+348    	; 0xf38 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     ddc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	09 f4       	brne	.+2      	; 0xde6 <__vector_23+0x20a>
     de4:	d7 c0       	rjmp	.+430    	; 0xf94 <__vector_23+0x3b8>
     de6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	09 f4       	brne	.+2      	; 0xdf0 <__vector_23+0x214>
     dee:	d2 c0       	rjmp	.+420    	; 0xf94 <__vector_23+0x3b8>
                motors_on();
     df0:	53 9a       	sbi	0x0a, 3	; 10
     df2:	23 9a       	sbi	0x04, 3	; 4
     df4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     df8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	9c c0       	rjmp	.+312    	; 0xf38 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e00:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_msg>
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	09 f4       	brne	.+2      	; 0xe0a <__vector_23+0x22e>
     e08:	4b c0       	rjmp	.+150    	; 0xea0 <__vector_23+0x2c4>
     e0a:	80 f4       	brcc	.+32     	; 0xe2c <__vector_23+0x250>
     e0c:	88 23       	and	r24, r24
     e0e:	a9 f0       	breq	.+42     	; 0xe3a <__vector_23+0x25e>
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	09 f0       	breq	.+2      	; 0xe16 <__vector_23+0x23a>
     e14:	82 c0       	rjmp	.+260    	; 0xf1a <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     e16:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_msg+0x1>
     e1a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_msg+0x2>
     e1e:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <kilo_uid+0x1>
     e22:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_uid>
                    cur_motion = MOVE_STOP;
     e26:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
     e2a:	77 c0       	rjmp	.+238    	; 0xf1a <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     e2c:	83 30       	cpi	r24, 0x03	; 3
     e2e:	09 f4       	brne	.+2      	; 0xe32 <__vector_23+0x256>
     e30:	49 c0       	rjmp	.+146    	; 0xec4 <__vector_23+0x2e8>
     e32:	84 30       	cpi	r24, 0x04	; 4
     e34:	09 f4       	brne	.+2      	; 0xe38 <__vector_23+0x25c>
     e36:	58 c0       	rjmp	.+176    	; 0xee8 <__vector_23+0x30c>
     e38:	70 c0       	rjmp	.+224    	; 0xf1a <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     e3a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     e3e:	86 30       	cpi	r24, 0x06	; 6
     e40:	09 f0       	breq	.+2      	; 0xe44 <__vector_23+0x268>
     e42:	6b c0       	rjmp	.+214    	; 0xf1a <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     e44:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <kilo_uid>
     e48:	80 eb       	ldi	r24, 0xB0	; 176
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 44 0b 	call	0x1688	; 0x1688 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     e50:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <kilo_uid+0x1>
     e54:	81 eb       	ldi	r24, 0xB1	; 177
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 44 0b 	call	0x1688	; 0x1688 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     e5c:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <kilo_turn_left>
     e60:	85 e0       	ldi	r24, 0x05	; 5
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 44 0b 	call	0x1688	; 0x1688 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     e68:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <kilo_turn_right>
     e6c:	89 e0       	ldi	r24, 0x09	; 9
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 44 0b 	call	0x1688	; 0x1688 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     e74:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <kilo_straight_left>
     e78:	8c e0       	ldi	r24, 0x0C	; 12
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 44 0b 	call	0x1688	; 0x1688 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     e80:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <kilo_straight_right>
     e84:	84 e1       	ldi	r24, 0x14	; 20
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 44 0b 	call	0x1688	; 0x1688 <eeprom_write_byte>
                        motors_off();
     e8c:	53 98       	cbi	0x0a, 3	; 10
     e8e:	23 98       	cbi	0x04, 3	; 4
     e90:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e94:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
     e9e:	3d c0       	rjmp	.+122    	; 0xf1a <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     ea0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     ea4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <rx_msg+0x3>
     ea8:	91 30       	cpi	r25, 0x01	; 1
     eaa:	21 f4       	brne	.+8      	; 0xeb4 <__vector_23+0x2d8>
     eac:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <kilo_turn_left>
     eb0:	89 17       	cp	r24, r25
     eb2:	99 f1       	breq	.+102    	; 0xf1a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     eb4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_LEFT;
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     ebe:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <kilo_turn_left>
     ec2:	2b c0       	rjmp	.+86     	; 0xf1a <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     ec4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     ec8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <rx_msg+0x4>
     ecc:	92 30       	cpi	r25, 0x02	; 2
     ece:	21 f4       	brne	.+8      	; 0xed8 <__vector_23+0x2fc>
     ed0:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <kilo_turn_right>
     ed4:	89 17       	cp	r24, r25
     ed6:	09 f1       	breq	.+66     	; 0xf1a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     ed8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     ee2:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <kilo_turn_right>
     ee6:	19 c0       	rjmp	.+50     	; 0xf1a <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     ee8:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <cur_motion>
     eec:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <rx_msg+0x6>
     ef0:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <rx_msg+0x5>
     ef4:	23 30       	cpi	r18, 0x03	; 3
     ef6:	41 f4       	brne	.+16     	; 0xf08 <__vector_23+0x32c>
     ef8:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <kilo_straight_right>
     efc:	82 13       	cpse	r24, r18
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <__vector_23+0x32c>
     f00:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <kilo_straight_left>
     f04:	92 17       	cp	r25, r18
     f06:	49 f0       	breq	.+18     	; 0xf1a <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f08:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     f0c:	23 e0       	ldi	r18, 0x03	; 3
     f0e:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     f12:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     f16:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     f1a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_msg>
     f1e:	88 23       	and	r24, r24
     f20:	c9 f1       	breq	.+114    	; 0xf94 <__vector_23+0x3b8>
     f22:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     f26:	86 30       	cpi	r24, 0x06	; 6
     f28:	a9 f1       	breq	.+106    	; 0xf94 <__vector_23+0x3b8>
                motors_on();
     f2a:	53 9a       	sbi	0x0a, 3	; 10
     f2c:	23 9a       	sbi	0x04, 3	; 4
     f2e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f32:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     f36:	86 e0       	ldi	r24, 0x06	; 6
     f38:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
     f3c:	2b c0       	rjmp	.+86     	; 0xf94 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     f3e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     f42:	86 30       	cpi	r24, 0x06	; 6
     f44:	81 f0       	breq	.+32     	; 0xf66 <__vector_23+0x38a>
                motors_on();
     f46:	53 9a       	sbi	0x0a, 3	; 10
     f48:	23 9a       	sbi	0x04, 3	; 4
     f4a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f4e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	0e 94 a2 04 	call	0x944	; 0x944 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     f58:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
     f5c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                kilo_state = MOVING;
     f60:	86 e0       	ldi	r24, 0x06	; 6
     f62:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	00 90 68 01 	lds	r0, 0x0168	; 0x800168 <rx_msg>
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <__vector_23+0x398>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <__vector_23+0x394>
     f78:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <kilo_uid>
     f7c:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <kilo_uid+0x1>
     f80:	82 23       	and	r24, r18
     f82:	93 23       	and	r25, r19
     f84:	89 2b       	or	r24, r25
     f86:	21 f0       	breq	.+8      	; 0xf90 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cur_motion>
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     f90:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
                    }
                }
            }
        }
    }
}
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	7f 91       	pop	r23
     fa2:	6f 91       	pop	r22
     fa4:	5f 91       	pop	r21
     fa6:	4f 91       	pop	r20
     fa8:	3f 91       	pop	r19
     faa:	2f 91       	pop	r18
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     fba:	fc 01       	movw	r30, r24
     fbc:	9c 01       	movw	r18, r24
     fbe:	26 5f       	subi	r18, 0xF6	; 246
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     fc6:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     fc8:	84 27       	eor	r24, r20
     fca:	08 2e       	mov	r0, r24
     fcc:	82 95       	swap	r24
     fce:	80 7f       	andi	r24, 0xF0	; 240
     fd0:	80 25       	eor	r24, r0
     fd2:	09 2e       	mov	r0, r25
     fd4:	98 2f       	mov	r25, r24
     fd6:	82 95       	swap	r24
     fd8:	8f 70       	andi	r24, 0x0F	; 15
     fda:	08 26       	eor	r0, r24
     fdc:	86 95       	lsr	r24
     fde:	98 27       	eor	r25, r24
     fe0:	89 27       	eor	r24, r25
     fe2:	88 0f       	add	r24, r24
     fe4:	88 0f       	add	r24, r24
     fe6:	88 0f       	add	r24, r24
     fe8:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
     fea:	e2 17       	cp	r30, r18
     fec:	f3 07       	cpc	r31, r19
     fee:	59 f7       	brne	.-42     	; 0xfc6 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
     ff0:	08 95       	ret

00000ff2 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
     ff2:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
     ff4:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
     ff6:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
     ff8:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <tx_mask>
    or tmpreg1, ddrreg
     ffc:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
     ffe:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    1000:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1002:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    1006:	20 30       	cpi	r18, 0x00	; 0
    1008:	29 f0       	breq	.+10     	; 0x1014 <message_send+0x22>
    100a:	00 00       	nop
    100c:	25 b1       	in	r18, 0x05	; 5
    100e:	23 2b       	or	r18, r19
    1010:	25 b9       	out	0x05, r18	; 5
    1012:	04 c0       	rjmp	.+8      	; 0x101c <message_send+0x2a>
    1014:	00 00       	nop
    1016:	00 00       	nop
    1018:	00 00       	nop
    101a:	00 c0       	rjmp	.+0      	; 0x101c <message_send+0x2a>
    101c:	00 00       	nop
    101e:	00 00       	nop
    1020:	00 00       	nop
    1022:	30 95       	com	r19
    1024:	25 b1       	in	r18, 0x05	; 5
    1026:	23 23       	and	r18, r19
    1028:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    102a:	2e ea       	ldi	r18, 0xAE	; 174
    102c:	2a 95       	dec	r18
    102e:	f1 f7       	brne	.-4      	; 0x102c <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    1030:	2b ee       	ldi	r18, 0xEB	; 235

00001032 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    1032:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1034:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1036:	0a c0       	rjmp	.+20     	; 0x104c <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1038:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    103a:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    com tmpreg2
    103e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1040:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1042:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1044:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1046:	0f be       	out	0x3f, r0	; 63
    return 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	08 95       	ret

0000104c <nocollision>:
nocollision:
    nop
    104c:	00 00       	nop
    dec tmpreg1
    104e:	2a 95       	dec	r18
    brne checkcollision
    1050:	81 f7       	brne	.-32     	; 0x1032 <checkcollision>

    ldi tmpreg1, 0x01
    1052:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1054:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    1058:	20 30       	cpi	r18, 0x00	; 0
    105a:	29 f0       	breq	.+10     	; 0x1066 <nocollision+0x1a>
    105c:	00 00       	nop
    105e:	25 b1       	in	r18, 0x05	; 5
    1060:	23 2b       	or	r18, r19
    1062:	25 b9       	out	0x05, r18	; 5
    1064:	04 c0       	rjmp	.+8      	; 0x106e <nocollision+0x22>
    1066:	00 00       	nop
    1068:	00 00       	nop
    106a:	00 00       	nop
    106c:	00 c0       	rjmp	.+0      	; 0x106e <nocollision+0x22>
    106e:	00 00       	nop
    1070:	00 00       	nop
    1072:	00 00       	nop
    1074:	30 95       	com	r19
    1076:	25 b1       	in	r18, 0x05	; 5
    1078:	23 23       	and	r18, r19
    107a:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    107c:	00 00       	nop
    107e:	24 e5       	ldi	r18, 0x54	; 84
    1080:	2a 95       	dec	r18
    1082:	f1 f7       	brne	.-4      	; 0x1080 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1084:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1086:	8c e0       	ldi	r24, 0x0C	; 12

00001088 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1088:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    108a:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    108c:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    108e:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1090:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1092:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1094:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1096:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1098:	50 e0       	ldi	r21, 0x00	; 0

0000109a <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    109a:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    109c:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    109e:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    10a0:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    10a2:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    10a6:	20 30       	cpi	r18, 0x00	; 0
    10a8:	29 f0       	breq	.+10     	; 0x10b4 <sendbit+0x1a>
    10aa:	00 00       	nop
    10ac:	25 b1       	in	r18, 0x05	; 5
    10ae:	23 2b       	or	r18, r19
    10b0:	25 b9       	out	0x05, r18	; 5
    10b2:	04 c0       	rjmp	.+8      	; 0x10bc <sendbit+0x22>
    10b4:	00 00       	nop
    10b6:	00 00       	nop
    10b8:	00 00       	nop
    10ba:	00 c0       	rjmp	.+0      	; 0x10bc <sendbit+0x22>
    10bc:	00 00       	nop
    10be:	00 00       	nop
    10c0:	00 00       	nop
    10c2:	30 95       	com	r19
    10c4:	25 b1       	in	r18, 0x05	; 5
    10c6:	23 23       	and	r18, r19
    10c8:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    10ca:	00 00       	nop
    10cc:	21 e5       	ldi	r18, 0x51	; 81
    10ce:	2a 95       	dec	r18
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    10d2:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    10d4:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    10d6:	9a 95       	dec	r25
    brne sendbit
    10d8:	01 f7       	brne	.-64     	; 0x109a <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    10da:	8a 95       	dec	r24
    brne sendbyte
    10dc:	a9 f6       	brne	.-86     	; 0x1088 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    10de:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    10e0:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    10e2:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    10e4:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    10e6:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <tx_mask>
    com tmpreg2
    10ea:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10ec:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10ee:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    10f0:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    10f2:	0f be       	out	0x3f, r0	; 63
    return 1
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	08 95       	ret

000010f8 <main>:
  return &msg;
}

int main() 
{
  kilo_init();
    10f8:	0e 94 c9 00 	call	0x192	; 0x192 <kilo_init>
  kilo_message_rx = message_rx;
    10fc:	81 e7       	ldi	r24, 0x71	; 113
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <kilo_message_rx+0x1>
    1104:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <kilo_message_rx>
  kilo_message_tx = message_tx;
    1108:	85 e7       	ldi	r24, 0x75	; 117
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <kilo_message_tx+0x1>
    1110:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <kilo_message_tx>
  kilo_start(setup, loop);
    1114:	6a ea       	ldi	r22, 0xAA	; 170
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	88 e7       	ldi	r24, 0x78	; 120
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 c1 04 	call	0x982	; 0x982 <kilo_start>
  return 0;
}
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	08 95       	ret

00001126 <__divmodhi4>:
    1126:	97 fb       	bst	r25, 7
    1128:	07 2e       	mov	r0, r23
    112a:	16 f4       	brtc	.+4      	; 0x1130 <__divmodhi4+0xa>
    112c:	00 94       	com	r0
    112e:	07 d0       	rcall	.+14     	; 0x113e <__divmodhi4_neg1>
    1130:	77 fd       	sbrc	r23, 7
    1132:	09 d0       	rcall	.+18     	; 0x1146 <__divmodhi4_neg2>
    1134:	0e 94 bc 08 	call	0x1178	; 0x1178 <__udivmodhi4>
    1138:	07 fc       	sbrc	r0, 7
    113a:	05 d0       	rcall	.+10     	; 0x1146 <__divmodhi4_neg2>
    113c:	3e f4       	brtc	.+14     	; 0x114c <__divmodhi4_exit>

0000113e <__divmodhi4_neg1>:
    113e:	90 95       	com	r25
    1140:	81 95       	neg	r24
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	08 95       	ret

00001146 <__divmodhi4_neg2>:
    1146:	70 95       	com	r23
    1148:	61 95       	neg	r22
    114a:	7f 4f       	sbci	r23, 0xFF	; 255

0000114c <__divmodhi4_exit>:
    114c:	08 95       	ret

0000114e <__tablejump2__>:
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	05 90       	lpm	r0, Z+
    1154:	f4 91       	lpm	r31, Z
    1156:	e0 2d       	mov	r30, r0
    1158:	09 94       	ijmp

0000115a <__umulhisi3>:
    115a:	a2 9f       	mul	r26, r18
    115c:	b0 01       	movw	r22, r0
    115e:	b3 9f       	mul	r27, r19
    1160:	c0 01       	movw	r24, r0
    1162:	a3 9f       	mul	r26, r19
    1164:	70 0d       	add	r23, r0
    1166:	81 1d       	adc	r24, r1
    1168:	11 24       	eor	r1, r1
    116a:	91 1d       	adc	r25, r1
    116c:	b2 9f       	mul	r27, r18
    116e:	70 0d       	add	r23, r0
    1170:	81 1d       	adc	r24, r1
    1172:	11 24       	eor	r1, r1
    1174:	91 1d       	adc	r25, r1
    1176:	08 95       	ret

00001178 <__udivmodhi4>:
    1178:	aa 1b       	sub	r26, r26
    117a:	bb 1b       	sub	r27, r27
    117c:	51 e1       	ldi	r21, 0x11	; 17
    117e:	07 c0       	rjmp	.+14     	; 0x118e <__udivmodhi4_ep>

00001180 <__udivmodhi4_loop>:
    1180:	aa 1f       	adc	r26, r26
    1182:	bb 1f       	adc	r27, r27
    1184:	a6 17       	cp	r26, r22
    1186:	b7 07       	cpc	r27, r23
    1188:	10 f0       	brcs	.+4      	; 0x118e <__udivmodhi4_ep>
    118a:	a6 1b       	sub	r26, r22
    118c:	b7 0b       	sbc	r27, r23

0000118e <__udivmodhi4_ep>:
    118e:	88 1f       	adc	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	5a 95       	dec	r21
    1194:	a9 f7       	brne	.-22     	; 0x1180 <__udivmodhi4_loop>
    1196:	80 95       	com	r24
    1198:	90 95       	com	r25
    119a:	bc 01       	movw	r22, r24
    119c:	cd 01       	movw	r24, r26
    119e:	08 95       	ret

000011a0 <__subsf3>:
    11a0:	50 58       	subi	r21, 0x80	; 128

000011a2 <__addsf3>:
    11a2:	bb 27       	eor	r27, r27
    11a4:	aa 27       	eor	r26, r26
    11a6:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__addsf3x>
    11aa:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__fp_round>
    11ae:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__fp_pscA>
    11b2:	38 f0       	brcs	.+14     	; 0x11c2 <__addsf3+0x20>
    11b4:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_pscB>
    11b8:	20 f0       	brcs	.+8      	; 0x11c2 <__addsf3+0x20>
    11ba:	39 f4       	brne	.+14     	; 0x11ca <__addsf3+0x28>
    11bc:	9f 3f       	cpi	r25, 0xFF	; 255
    11be:	19 f4       	brne	.+6      	; 0x11c6 <__addsf3+0x24>
    11c0:	26 f4       	brtc	.+8      	; 0x11ca <__addsf3+0x28>
    11c2:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__fp_nan>
    11c6:	0e f4       	brtc	.+2      	; 0x11ca <__addsf3+0x28>
    11c8:	e0 95       	com	r30
    11ca:	e7 fb       	bst	r30, 7
    11cc:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_inf>

000011d0 <__addsf3x>:
    11d0:	e9 2f       	mov	r30, r25
    11d2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fp_split3>
    11d6:	58 f3       	brcs	.-42     	; 0x11ae <__addsf3+0xc>
    11d8:	ba 17       	cp	r27, r26
    11da:	62 07       	cpc	r22, r18
    11dc:	73 07       	cpc	r23, r19
    11de:	84 07       	cpc	r24, r20
    11e0:	95 07       	cpc	r25, r21
    11e2:	20 f0       	brcs	.+8      	; 0x11ec <__addsf3x+0x1c>
    11e4:	79 f4       	brne	.+30     	; 0x1204 <__addsf3x+0x34>
    11e6:	a6 f5       	brtc	.+104    	; 0x1250 <__addsf3x+0x80>
    11e8:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_zero>
    11ec:	0e f4       	brtc	.+2      	; 0x11f0 <__addsf3x+0x20>
    11ee:	e0 95       	com	r30
    11f0:	0b 2e       	mov	r0, r27
    11f2:	ba 2f       	mov	r27, r26
    11f4:	a0 2d       	mov	r26, r0
    11f6:	0b 01       	movw	r0, r22
    11f8:	b9 01       	movw	r22, r18
    11fa:	90 01       	movw	r18, r0
    11fc:	0c 01       	movw	r0, r24
    11fe:	ca 01       	movw	r24, r20
    1200:	a0 01       	movw	r20, r0
    1202:	11 24       	eor	r1, r1
    1204:	ff 27       	eor	r31, r31
    1206:	59 1b       	sub	r21, r25
    1208:	99 f0       	breq	.+38     	; 0x1230 <__addsf3x+0x60>
    120a:	59 3f       	cpi	r21, 0xF9	; 249
    120c:	50 f4       	brcc	.+20     	; 0x1222 <__addsf3x+0x52>
    120e:	50 3e       	cpi	r21, 0xE0	; 224
    1210:	68 f1       	brcs	.+90     	; 0x126c <__addsf3x+0x9c>
    1212:	1a 16       	cp	r1, r26
    1214:	f0 40       	sbci	r31, 0x00	; 0
    1216:	a2 2f       	mov	r26, r18
    1218:	23 2f       	mov	r18, r19
    121a:	34 2f       	mov	r19, r20
    121c:	44 27       	eor	r20, r20
    121e:	58 5f       	subi	r21, 0xF8	; 248
    1220:	f3 cf       	rjmp	.-26     	; 0x1208 <__addsf3x+0x38>
    1222:	46 95       	lsr	r20
    1224:	37 95       	ror	r19
    1226:	27 95       	ror	r18
    1228:	a7 95       	ror	r26
    122a:	f0 40       	sbci	r31, 0x00	; 0
    122c:	53 95       	inc	r21
    122e:	c9 f7       	brne	.-14     	; 0x1222 <__addsf3x+0x52>
    1230:	7e f4       	brtc	.+30     	; 0x1250 <__addsf3x+0x80>
    1232:	1f 16       	cp	r1, r31
    1234:	ba 0b       	sbc	r27, r26
    1236:	62 0b       	sbc	r22, r18
    1238:	73 0b       	sbc	r23, r19
    123a:	84 0b       	sbc	r24, r20
    123c:	ba f0       	brmi	.+46     	; 0x126c <__addsf3x+0x9c>
    123e:	91 50       	subi	r25, 0x01	; 1
    1240:	a1 f0       	breq	.+40     	; 0x126a <__addsf3x+0x9a>
    1242:	ff 0f       	add	r31, r31
    1244:	bb 1f       	adc	r27, r27
    1246:	66 1f       	adc	r22, r22
    1248:	77 1f       	adc	r23, r23
    124a:	88 1f       	adc	r24, r24
    124c:	c2 f7       	brpl	.-16     	; 0x123e <__addsf3x+0x6e>
    124e:	0e c0       	rjmp	.+28     	; 0x126c <__addsf3x+0x9c>
    1250:	ba 0f       	add	r27, r26
    1252:	62 1f       	adc	r22, r18
    1254:	73 1f       	adc	r23, r19
    1256:	84 1f       	adc	r24, r20
    1258:	48 f4       	brcc	.+18     	; 0x126c <__addsf3x+0x9c>
    125a:	87 95       	ror	r24
    125c:	77 95       	ror	r23
    125e:	67 95       	ror	r22
    1260:	b7 95       	ror	r27
    1262:	f7 95       	ror	r31
    1264:	9e 3f       	cpi	r25, 0xFE	; 254
    1266:	08 f0       	brcs	.+2      	; 0x126a <__addsf3x+0x9a>
    1268:	b0 cf       	rjmp	.-160    	; 0x11ca <__addsf3+0x28>
    126a:	93 95       	inc	r25
    126c:	88 0f       	add	r24, r24
    126e:	08 f0       	brcs	.+2      	; 0x1272 <__addsf3x+0xa2>
    1270:	99 27       	eor	r25, r25
    1272:	ee 0f       	add	r30, r30
    1274:	97 95       	ror	r25
    1276:	87 95       	ror	r24
    1278:	08 95       	ret

0000127a <__divsf3>:
    127a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__divsf3x>
    127e:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__fp_round>
    1282:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_pscB>
    1286:	58 f0       	brcs	.+22     	; 0x129e <__divsf3+0x24>
    1288:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__fp_pscA>
    128c:	40 f0       	brcs	.+16     	; 0x129e <__divsf3+0x24>
    128e:	29 f4       	brne	.+10     	; 0x129a <__divsf3+0x20>
    1290:	5f 3f       	cpi	r21, 0xFF	; 255
    1292:	29 f0       	breq	.+10     	; 0x129e <__divsf3+0x24>
    1294:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_inf>
    1298:	51 11       	cpse	r21, r1
    129a:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_szero>
    129e:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__fp_nan>

000012a2 <__divsf3x>:
    12a2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fp_split3>
    12a6:	68 f3       	brcs	.-38     	; 0x1282 <__divsf3+0x8>

000012a8 <__divsf3_pse>:
    12a8:	99 23       	and	r25, r25
    12aa:	b1 f3       	breq	.-20     	; 0x1298 <__divsf3+0x1e>
    12ac:	55 23       	and	r21, r21
    12ae:	91 f3       	breq	.-28     	; 0x1294 <__divsf3+0x1a>
    12b0:	95 1b       	sub	r25, r21
    12b2:	55 0b       	sbc	r21, r21
    12b4:	bb 27       	eor	r27, r27
    12b6:	aa 27       	eor	r26, r26
    12b8:	62 17       	cp	r22, r18
    12ba:	73 07       	cpc	r23, r19
    12bc:	84 07       	cpc	r24, r20
    12be:	38 f0       	brcs	.+14     	; 0x12ce <__divsf3_pse+0x26>
    12c0:	9f 5f       	subi	r25, 0xFF	; 255
    12c2:	5f 4f       	sbci	r21, 0xFF	; 255
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	44 1f       	adc	r20, r20
    12ca:	aa 1f       	adc	r26, r26
    12cc:	a9 f3       	breq	.-22     	; 0x12b8 <__divsf3_pse+0x10>
    12ce:	35 d0       	rcall	.+106    	; 0x133a <__divsf3_pse+0x92>
    12d0:	0e 2e       	mov	r0, r30
    12d2:	3a f0       	brmi	.+14     	; 0x12e2 <__divsf3_pse+0x3a>
    12d4:	e0 e8       	ldi	r30, 0x80	; 128
    12d6:	32 d0       	rcall	.+100    	; 0x133c <__divsf3_pse+0x94>
    12d8:	91 50       	subi	r25, 0x01	; 1
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	e6 95       	lsr	r30
    12de:	00 1c       	adc	r0, r0
    12e0:	ca f7       	brpl	.-14     	; 0x12d4 <__divsf3_pse+0x2c>
    12e2:	2b d0       	rcall	.+86     	; 0x133a <__divsf3_pse+0x92>
    12e4:	fe 2f       	mov	r31, r30
    12e6:	29 d0       	rcall	.+82     	; 0x133a <__divsf3_pse+0x92>
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	bb 1f       	adc	r27, r27
    12f0:	26 17       	cp	r18, r22
    12f2:	37 07       	cpc	r19, r23
    12f4:	48 07       	cpc	r20, r24
    12f6:	ab 07       	cpc	r26, r27
    12f8:	b0 e8       	ldi	r27, 0x80	; 128
    12fa:	09 f0       	breq	.+2      	; 0x12fe <__divsf3_pse+0x56>
    12fc:	bb 0b       	sbc	r27, r27
    12fe:	80 2d       	mov	r24, r0
    1300:	bf 01       	movw	r22, r30
    1302:	ff 27       	eor	r31, r31
    1304:	93 58       	subi	r25, 0x83	; 131
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	3a f0       	brmi	.+14     	; 0x1318 <__divsf3_pse+0x70>
    130a:	9e 3f       	cpi	r25, 0xFE	; 254
    130c:	51 05       	cpc	r21, r1
    130e:	78 f0       	brcs	.+30     	; 0x132e <__divsf3_pse+0x86>
    1310:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_inf>
    1314:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_szero>
    1318:	5f 3f       	cpi	r21, 0xFF	; 255
    131a:	e4 f3       	brlt	.-8      	; 0x1314 <__divsf3_pse+0x6c>
    131c:	98 3e       	cpi	r25, 0xE8	; 232
    131e:	d4 f3       	brlt	.-12     	; 0x1314 <__divsf3_pse+0x6c>
    1320:	86 95       	lsr	r24
    1322:	77 95       	ror	r23
    1324:	67 95       	ror	r22
    1326:	b7 95       	ror	r27
    1328:	f7 95       	ror	r31
    132a:	9f 5f       	subi	r25, 0xFF	; 255
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__divsf3_pse+0x78>
    132e:	88 0f       	add	r24, r24
    1330:	91 1d       	adc	r25, r1
    1332:	96 95       	lsr	r25
    1334:	87 95       	ror	r24
    1336:	97 f9       	bld	r25, 7
    1338:	08 95       	ret
    133a:	e1 e0       	ldi	r30, 0x01	; 1
    133c:	66 0f       	add	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	88 1f       	adc	r24, r24
    1342:	bb 1f       	adc	r27, r27
    1344:	62 17       	cp	r22, r18
    1346:	73 07       	cpc	r23, r19
    1348:	84 07       	cpc	r24, r20
    134a:	ba 07       	cpc	r27, r26
    134c:	20 f0       	brcs	.+8      	; 0x1356 <__divsf3_pse+0xae>
    134e:	62 1b       	sub	r22, r18
    1350:	73 0b       	sbc	r23, r19
    1352:	84 0b       	sbc	r24, r20
    1354:	ba 0b       	sbc	r27, r26
    1356:	ee 1f       	adc	r30, r30
    1358:	88 f7       	brcc	.-30     	; 0x133c <__divsf3_pse+0x94>
    135a:	e0 95       	com	r30
    135c:	08 95       	ret

0000135e <__fixsfsi>:
    135e:	0e 94 b6 09 	call	0x136c	; 0x136c <__fixunssfsi>
    1362:	68 94       	set
    1364:	b1 11       	cpse	r27, r1
    1366:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_szero>
    136a:	08 95       	ret

0000136c <__fixunssfsi>:
    136c:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fp_splitA>
    1370:	88 f0       	brcs	.+34     	; 0x1394 <__fixunssfsi+0x28>
    1372:	9f 57       	subi	r25, 0x7F	; 127
    1374:	98 f0       	brcs	.+38     	; 0x139c <__fixunssfsi+0x30>
    1376:	b9 2f       	mov	r27, r25
    1378:	99 27       	eor	r25, r25
    137a:	b7 51       	subi	r27, 0x17	; 23
    137c:	b0 f0       	brcs	.+44     	; 0x13aa <__fixunssfsi+0x3e>
    137e:	e1 f0       	breq	.+56     	; 0x13b8 <__fixunssfsi+0x4c>
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	1a f0       	brmi	.+6      	; 0x1390 <__fixunssfsi+0x24>
    138a:	ba 95       	dec	r27
    138c:	c9 f7       	brne	.-14     	; 0x1380 <__fixunssfsi+0x14>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <__fixunssfsi+0x4c>
    1390:	b1 30       	cpi	r27, 0x01	; 1
    1392:	91 f0       	breq	.+36     	; 0x13b8 <__fixunssfsi+0x4c>
    1394:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__fp_zero>
    1398:	b1 e0       	ldi	r27, 0x01	; 1
    139a:	08 95       	ret
    139c:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__fp_zero>
    13a0:	67 2f       	mov	r22, r23
    13a2:	78 2f       	mov	r23, r24
    13a4:	88 27       	eor	r24, r24
    13a6:	b8 5f       	subi	r27, 0xF8	; 248
    13a8:	39 f0       	breq	.+14     	; 0x13b8 <__fixunssfsi+0x4c>
    13aa:	b9 3f       	cpi	r27, 0xF9	; 249
    13ac:	cc f3       	brlt	.-14     	; 0x13a0 <__fixunssfsi+0x34>
    13ae:	86 95       	lsr	r24
    13b0:	77 95       	ror	r23
    13b2:	67 95       	ror	r22
    13b4:	b3 95       	inc	r27
    13b6:	d9 f7       	brne	.-10     	; 0x13ae <__fixunssfsi+0x42>
    13b8:	3e f4       	brtc	.+14     	; 0x13c8 <__fixunssfsi+0x5c>
    13ba:	90 95       	com	r25
    13bc:	80 95       	com	r24
    13be:	70 95       	com	r23
    13c0:	61 95       	neg	r22
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	08 95       	ret

000013ca <__floatunsisf>:
    13ca:	e8 94       	clt
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <__floatsisf+0x12>

000013ce <__floatsisf>:
    13ce:	97 fb       	bst	r25, 7
    13d0:	3e f4       	brtc	.+14     	; 0x13e0 <__floatsisf+0x12>
    13d2:	90 95       	com	r25
    13d4:	80 95       	com	r24
    13d6:	70 95       	com	r23
    13d8:	61 95       	neg	r22
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	8f 4f       	sbci	r24, 0xFF	; 255
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	99 23       	and	r25, r25
    13e2:	a9 f0       	breq	.+42     	; 0x140e <__floatsisf+0x40>
    13e4:	f9 2f       	mov	r31, r25
    13e6:	96 e9       	ldi	r25, 0x96	; 150
    13e8:	bb 27       	eor	r27, r27
    13ea:	93 95       	inc	r25
    13ec:	f6 95       	lsr	r31
    13ee:	87 95       	ror	r24
    13f0:	77 95       	ror	r23
    13f2:	67 95       	ror	r22
    13f4:	b7 95       	ror	r27
    13f6:	f1 11       	cpse	r31, r1
    13f8:	f8 cf       	rjmp	.-16     	; 0x13ea <__floatsisf+0x1c>
    13fa:	fa f4       	brpl	.+62     	; 0x143a <__floatsisf+0x6c>
    13fc:	bb 0f       	add	r27, r27
    13fe:	11 f4       	brne	.+4      	; 0x1404 <__floatsisf+0x36>
    1400:	60 ff       	sbrs	r22, 0
    1402:	1b c0       	rjmp	.+54     	; 0x143a <__floatsisf+0x6c>
    1404:	6f 5f       	subi	r22, 0xFF	; 255
    1406:	7f 4f       	sbci	r23, 0xFF	; 255
    1408:	8f 4f       	sbci	r24, 0xFF	; 255
    140a:	9f 4f       	sbci	r25, 0xFF	; 255
    140c:	16 c0       	rjmp	.+44     	; 0x143a <__floatsisf+0x6c>
    140e:	88 23       	and	r24, r24
    1410:	11 f0       	breq	.+4      	; 0x1416 <__floatsisf+0x48>
    1412:	96 e9       	ldi	r25, 0x96	; 150
    1414:	11 c0       	rjmp	.+34     	; 0x1438 <__floatsisf+0x6a>
    1416:	77 23       	and	r23, r23
    1418:	21 f0       	breq	.+8      	; 0x1422 <__floatsisf+0x54>
    141a:	9e e8       	ldi	r25, 0x8E	; 142
    141c:	87 2f       	mov	r24, r23
    141e:	76 2f       	mov	r23, r22
    1420:	05 c0       	rjmp	.+10     	; 0x142c <__floatsisf+0x5e>
    1422:	66 23       	and	r22, r22
    1424:	71 f0       	breq	.+28     	; 0x1442 <__floatsisf+0x74>
    1426:	96 e8       	ldi	r25, 0x86	; 134
    1428:	86 2f       	mov	r24, r22
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	2a f0       	brmi	.+10     	; 0x143a <__floatsisf+0x6c>
    1430:	9a 95       	dec	r25
    1432:	66 0f       	add	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	da f7       	brpl	.-10     	; 0x1430 <__floatsisf+0x62>
    143a:	88 0f       	add	r24, r24
    143c:	96 95       	lsr	r25
    143e:	87 95       	ror	r24
    1440:	97 f9       	bld	r25, 7
    1442:	08 95       	ret

00001444 <__fp_inf>:
    1444:	97 f9       	bld	r25, 7
    1446:	9f 67       	ori	r25, 0x7F	; 127
    1448:	80 e8       	ldi	r24, 0x80	; 128
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	08 95       	ret

00001450 <__fp_nan>:
    1450:	9f ef       	ldi	r25, 0xFF	; 255
    1452:	80 ec       	ldi	r24, 0xC0	; 192
    1454:	08 95       	ret

00001456 <__fp_pscA>:
    1456:	00 24       	eor	r0, r0
    1458:	0a 94       	dec	r0
    145a:	16 16       	cp	r1, r22
    145c:	17 06       	cpc	r1, r23
    145e:	18 06       	cpc	r1, r24
    1460:	09 06       	cpc	r0, r25
    1462:	08 95       	ret

00001464 <__fp_pscB>:
    1464:	00 24       	eor	r0, r0
    1466:	0a 94       	dec	r0
    1468:	12 16       	cp	r1, r18
    146a:	13 06       	cpc	r1, r19
    146c:	14 06       	cpc	r1, r20
    146e:	05 06       	cpc	r0, r21
    1470:	08 95       	ret

00001472 <__fp_round>:
    1472:	09 2e       	mov	r0, r25
    1474:	03 94       	inc	r0
    1476:	00 0c       	add	r0, r0
    1478:	11 f4       	brne	.+4      	; 0x147e <__fp_round+0xc>
    147a:	88 23       	and	r24, r24
    147c:	52 f0       	brmi	.+20     	; 0x1492 <__fp_round+0x20>
    147e:	bb 0f       	add	r27, r27
    1480:	40 f4       	brcc	.+16     	; 0x1492 <__fp_round+0x20>
    1482:	bf 2b       	or	r27, r31
    1484:	11 f4       	brne	.+4      	; 0x148a <__fp_round+0x18>
    1486:	60 ff       	sbrs	r22, 0
    1488:	04 c0       	rjmp	.+8      	; 0x1492 <__fp_round+0x20>
    148a:	6f 5f       	subi	r22, 0xFF	; 255
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8f 4f       	sbci	r24, 0xFF	; 255
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	08 95       	ret

00001494 <__fp_split3>:
    1494:	57 fd       	sbrc	r21, 7
    1496:	90 58       	subi	r25, 0x80	; 128
    1498:	44 0f       	add	r20, r20
    149a:	55 1f       	adc	r21, r21
    149c:	59 f0       	breq	.+22     	; 0x14b4 <__fp_splitA+0x10>
    149e:	5f 3f       	cpi	r21, 0xFF	; 255
    14a0:	71 f0       	breq	.+28     	; 0x14be <__fp_splitA+0x1a>
    14a2:	47 95       	ror	r20

000014a4 <__fp_splitA>:
    14a4:	88 0f       	add	r24, r24
    14a6:	97 fb       	bst	r25, 7
    14a8:	99 1f       	adc	r25, r25
    14aa:	61 f0       	breq	.+24     	; 0x14c4 <__fp_splitA+0x20>
    14ac:	9f 3f       	cpi	r25, 0xFF	; 255
    14ae:	79 f0       	breq	.+30     	; 0x14ce <__fp_splitA+0x2a>
    14b0:	87 95       	ror	r24
    14b2:	08 95       	ret
    14b4:	12 16       	cp	r1, r18
    14b6:	13 06       	cpc	r1, r19
    14b8:	14 06       	cpc	r1, r20
    14ba:	55 1f       	adc	r21, r21
    14bc:	f2 cf       	rjmp	.-28     	; 0x14a2 <__fp_split3+0xe>
    14be:	46 95       	lsr	r20
    14c0:	f1 df       	rcall	.-30     	; 0x14a4 <__fp_splitA>
    14c2:	08 c0       	rjmp	.+16     	; 0x14d4 <__fp_splitA+0x30>
    14c4:	16 16       	cp	r1, r22
    14c6:	17 06       	cpc	r1, r23
    14c8:	18 06       	cpc	r1, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	f1 cf       	rjmp	.-30     	; 0x14b0 <__fp_splitA+0xc>
    14ce:	86 95       	lsr	r24
    14d0:	71 05       	cpc	r23, r1
    14d2:	61 05       	cpc	r22, r1
    14d4:	08 94       	sec
    14d6:	08 95       	ret

000014d8 <__fp_zero>:
    14d8:	e8 94       	clt

000014da <__fp_szero>:
    14da:	bb 27       	eor	r27, r27
    14dc:	66 27       	eor	r22, r22
    14de:	77 27       	eor	r23, r23
    14e0:	cb 01       	movw	r24, r22
    14e2:	97 f9       	bld	r25, 7
    14e4:	08 95       	ret

000014e6 <__mulsf3>:
    14e6:	0e 94 86 0a 	call	0x150c	; 0x150c <__mulsf3x>
    14ea:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__fp_round>
    14ee:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__fp_pscA>
    14f2:	38 f0       	brcs	.+14     	; 0x1502 <__mulsf3+0x1c>
    14f4:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_pscB>
    14f8:	20 f0       	brcs	.+8      	; 0x1502 <__mulsf3+0x1c>
    14fa:	95 23       	and	r25, r21
    14fc:	11 f0       	breq	.+4      	; 0x1502 <__mulsf3+0x1c>
    14fe:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_inf>
    1502:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__fp_nan>
    1506:	11 24       	eor	r1, r1
    1508:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_szero>

0000150c <__mulsf3x>:
    150c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fp_split3>
    1510:	70 f3       	brcs	.-36     	; 0x14ee <__mulsf3+0x8>

00001512 <__mulsf3_pse>:
    1512:	95 9f       	mul	r25, r21
    1514:	c1 f3       	breq	.-16     	; 0x1506 <__mulsf3+0x20>
    1516:	95 0f       	add	r25, r21
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	55 1f       	adc	r21, r21
    151c:	62 9f       	mul	r22, r18
    151e:	f0 01       	movw	r30, r0
    1520:	72 9f       	mul	r23, r18
    1522:	bb 27       	eor	r27, r27
    1524:	f0 0d       	add	r31, r0
    1526:	b1 1d       	adc	r27, r1
    1528:	63 9f       	mul	r22, r19
    152a:	aa 27       	eor	r26, r26
    152c:	f0 0d       	add	r31, r0
    152e:	b1 1d       	adc	r27, r1
    1530:	aa 1f       	adc	r26, r26
    1532:	64 9f       	mul	r22, r20
    1534:	66 27       	eor	r22, r22
    1536:	b0 0d       	add	r27, r0
    1538:	a1 1d       	adc	r26, r1
    153a:	66 1f       	adc	r22, r22
    153c:	82 9f       	mul	r24, r18
    153e:	22 27       	eor	r18, r18
    1540:	b0 0d       	add	r27, r0
    1542:	a1 1d       	adc	r26, r1
    1544:	62 1f       	adc	r22, r18
    1546:	73 9f       	mul	r23, r19
    1548:	b0 0d       	add	r27, r0
    154a:	a1 1d       	adc	r26, r1
    154c:	62 1f       	adc	r22, r18
    154e:	83 9f       	mul	r24, r19
    1550:	a0 0d       	add	r26, r0
    1552:	61 1d       	adc	r22, r1
    1554:	22 1f       	adc	r18, r18
    1556:	74 9f       	mul	r23, r20
    1558:	33 27       	eor	r19, r19
    155a:	a0 0d       	add	r26, r0
    155c:	61 1d       	adc	r22, r1
    155e:	23 1f       	adc	r18, r19
    1560:	84 9f       	mul	r24, r20
    1562:	60 0d       	add	r22, r0
    1564:	21 1d       	adc	r18, r1
    1566:	82 2f       	mov	r24, r18
    1568:	76 2f       	mov	r23, r22
    156a:	6a 2f       	mov	r22, r26
    156c:	11 24       	eor	r1, r1
    156e:	9f 57       	subi	r25, 0x7F	; 127
    1570:	50 40       	sbci	r21, 0x00	; 0
    1572:	9a f0       	brmi	.+38     	; 0x159a <__mulsf3_pse+0x88>
    1574:	f1 f0       	breq	.+60     	; 0x15b2 <__mulsf3_pse+0xa0>
    1576:	88 23       	and	r24, r24
    1578:	4a f0       	brmi	.+18     	; 0x158c <__mulsf3_pse+0x7a>
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	bb 1f       	adc	r27, r27
    1580:	66 1f       	adc	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	91 50       	subi	r25, 0x01	; 1
    1588:	50 40       	sbci	r21, 0x00	; 0
    158a:	a9 f7       	brne	.-22     	; 0x1576 <__mulsf3_pse+0x64>
    158c:	9e 3f       	cpi	r25, 0xFE	; 254
    158e:	51 05       	cpc	r21, r1
    1590:	80 f0       	brcs	.+32     	; 0x15b2 <__mulsf3_pse+0xa0>
    1592:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__fp_inf>
    1596:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_szero>
    159a:	5f 3f       	cpi	r21, 0xFF	; 255
    159c:	e4 f3       	brlt	.-8      	; 0x1596 <__mulsf3_pse+0x84>
    159e:	98 3e       	cpi	r25, 0xE8	; 232
    15a0:	d4 f3       	brlt	.-12     	; 0x1596 <__mulsf3_pse+0x84>
    15a2:	86 95       	lsr	r24
    15a4:	77 95       	ror	r23
    15a6:	67 95       	ror	r22
    15a8:	b7 95       	ror	r27
    15aa:	f7 95       	ror	r31
    15ac:	e7 95       	ror	r30
    15ae:	9f 5f       	subi	r25, 0xFF	; 255
    15b0:	c1 f7       	brne	.-16     	; 0x15a2 <__mulsf3_pse+0x90>
    15b2:	fe 2b       	or	r31, r30
    15b4:	88 0f       	add	r24, r24
    15b6:	91 1d       	adc	r25, r1
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret

000015c0 <do_rand>:
    15c0:	8f 92       	push	r8
    15c2:	9f 92       	push	r9
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	ec 01       	movw	r28, r24
    15d6:	68 81       	ld	r22, Y
    15d8:	79 81       	ldd	r23, Y+1	; 0x01
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	9b 81       	ldd	r25, Y+3	; 0x03
    15de:	61 15       	cp	r22, r1
    15e0:	71 05       	cpc	r23, r1
    15e2:	81 05       	cpc	r24, r1
    15e4:	91 05       	cpc	r25, r1
    15e6:	21 f4       	brne	.+8      	; 0x15f0 <do_rand+0x30>
    15e8:	64 e2       	ldi	r22, 0x24	; 36
    15ea:	79 ed       	ldi	r23, 0xD9	; 217
    15ec:	8b e5       	ldi	r24, 0x5B	; 91
    15ee:	97 e0       	ldi	r25, 0x07	; 7
    15f0:	2d e1       	ldi	r18, 0x1D	; 29
    15f2:	33 ef       	ldi	r19, 0xF3	; 243
    15f4:	41 e0       	ldi	r20, 0x01	; 1
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__divmodsi4>
    15fc:	49 01       	movw	r8, r18
    15fe:	5a 01       	movw	r10, r20
    1600:	9b 01       	movw	r18, r22
    1602:	ac 01       	movw	r20, r24
    1604:	a7 ea       	ldi	r26, 0xA7	; 167
    1606:	b1 e4       	ldi	r27, 0x41	; 65
    1608:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__muluhisi3>
    160c:	6b 01       	movw	r12, r22
    160e:	7c 01       	movw	r14, r24
    1610:	ac ee       	ldi	r26, 0xEC	; 236
    1612:	b4 ef       	ldi	r27, 0xF4	; 244
    1614:	a5 01       	movw	r20, r10
    1616:	94 01       	movw	r18, r8
    1618:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulohisi3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8c 0d       	add	r24, r12
    1622:	9d 1d       	adc	r25, r13
    1624:	ae 1d       	adc	r26, r14
    1626:	bf 1d       	adc	r27, r15
    1628:	b7 ff       	sbrs	r27, 7
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <do_rand+0x72>
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	a1 09       	sbc	r26, r1
    1630:	b0 48       	sbci	r27, 0x80	; 128
    1632:	88 83       	st	Y, r24
    1634:	99 83       	std	Y+1, r25	; 0x01
    1636:	aa 83       	std	Y+2, r26	; 0x02
    1638:	bb 83       	std	Y+3, r27	; 0x03
    163a:	9f 77       	andi	r25, 0x7F	; 127
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	9f 90       	pop	r9
    164e:	8f 90       	pop	r8
    1650:	08 95       	ret

00001652 <rand_r>:
    1652:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <do_rand>
    1656:	08 95       	ret

00001658 <rand>:
    1658:	87 e0       	ldi	r24, 0x07	; 7
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <do_rand>
    1660:	08 95       	ret

00001662 <srand>:
    1662:	a0 e0       	ldi	r26, 0x00	; 0
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    166a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    166e:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    1672:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    1676:	08 95       	ret

00001678 <eeprom_read_byte>:
    1678:	f9 99       	sbic	0x1f, 1	; 31
    167a:	fe cf       	rjmp	.-4      	; 0x1678 <eeprom_read_byte>
    167c:	92 bd       	out	0x22, r25	; 34
    167e:	81 bd       	out	0x21, r24	; 33
    1680:	f8 9a       	sbi	0x1f, 0	; 31
    1682:	99 27       	eor	r25, r25
    1684:	80 b5       	in	r24, 0x20	; 32
    1686:	08 95       	ret

00001688 <eeprom_write_byte>:
    1688:	26 2f       	mov	r18, r22

0000168a <eeprom_write_r18>:
    168a:	f9 99       	sbic	0x1f, 1	; 31
    168c:	fe cf       	rjmp	.-4      	; 0x168a <eeprom_write_r18>
    168e:	1f ba       	out	0x1f, r1	; 31
    1690:	92 bd       	out	0x22, r25	; 34
    1692:	81 bd       	out	0x21, r24	; 33
    1694:	20 bd       	out	0x20, r18	; 32
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	fa 9a       	sbi	0x1f, 2	; 31
    169c:	f9 9a       	sbi	0x1f, 1	; 31
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	08 95       	ret

000016a4 <__divmodsi4>:
    16a4:	05 2e       	mov	r0, r21
    16a6:	97 fb       	bst	r25, 7
    16a8:	1e f4       	brtc	.+6      	; 0x16b0 <__divmodsi4+0xc>
    16aa:	00 94       	com	r0
    16ac:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__negsi2>
    16b0:	57 fd       	sbrc	r21, 7
    16b2:	07 d0       	rcall	.+14     	; 0x16c2 <__divmodsi4_neg2>
    16b4:	0e 94 84 0b 	call	0x1708	; 0x1708 <__udivmodsi4>
    16b8:	07 fc       	sbrc	r0, 7
    16ba:	03 d0       	rcall	.+6      	; 0x16c2 <__divmodsi4_neg2>
    16bc:	4e f4       	brtc	.+18     	; 0x16d0 <__divmodsi4_exit>
    16be:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__negsi2>

000016c2 <__divmodsi4_neg2>:
    16c2:	50 95       	com	r21
    16c4:	40 95       	com	r20
    16c6:	30 95       	com	r19
    16c8:	21 95       	neg	r18
    16ca:	3f 4f       	sbci	r19, 0xFF	; 255
    16cc:	4f 4f       	sbci	r20, 0xFF	; 255
    16ce:	5f 4f       	sbci	r21, 0xFF	; 255

000016d0 <__divmodsi4_exit>:
    16d0:	08 95       	ret

000016d2 <__negsi2>:
    16d2:	90 95       	com	r25
    16d4:	80 95       	com	r24
    16d6:	70 95       	com	r23
    16d8:	61 95       	neg	r22
    16da:	7f 4f       	sbci	r23, 0xFF	; 255
    16dc:	8f 4f       	sbci	r24, 0xFF	; 255
    16de:	9f 4f       	sbci	r25, 0xFF	; 255
    16e0:	08 95       	ret

000016e2 <__muluhisi3>:
    16e2:	0e 94 ad 08 	call	0x115a	; 0x115a <__umulhisi3>
    16e6:	a5 9f       	mul	r26, r21
    16e8:	90 0d       	add	r25, r0
    16ea:	b4 9f       	mul	r27, r20
    16ec:	90 0d       	add	r25, r0
    16ee:	a4 9f       	mul	r26, r20
    16f0:	80 0d       	add	r24, r0
    16f2:	91 1d       	adc	r25, r1
    16f4:	11 24       	eor	r1, r1
    16f6:	08 95       	ret

000016f8 <__mulshisi3>:
    16f8:	b7 ff       	sbrs	r27, 7
    16fa:	0c 94 71 0b 	jmp	0x16e2	; 0x16e2 <__muluhisi3>

000016fe <__mulohisi3>:
    16fe:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <__muluhisi3>
    1702:	82 1b       	sub	r24, r18
    1704:	93 0b       	sbc	r25, r19
    1706:	08 95       	ret

00001708 <__udivmodsi4>:
    1708:	a1 e2       	ldi	r26, 0x21	; 33
    170a:	1a 2e       	mov	r1, r26
    170c:	aa 1b       	sub	r26, r26
    170e:	bb 1b       	sub	r27, r27
    1710:	fd 01       	movw	r30, r26
    1712:	0d c0       	rjmp	.+26     	; 0x172e <__udivmodsi4_ep>

00001714 <__udivmodsi4_loop>:
    1714:	aa 1f       	adc	r26, r26
    1716:	bb 1f       	adc	r27, r27
    1718:	ee 1f       	adc	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	a2 17       	cp	r26, r18
    171e:	b3 07       	cpc	r27, r19
    1720:	e4 07       	cpc	r30, r20
    1722:	f5 07       	cpc	r31, r21
    1724:	20 f0       	brcs	.+8      	; 0x172e <__udivmodsi4_ep>
    1726:	a2 1b       	sub	r26, r18
    1728:	b3 0b       	sbc	r27, r19
    172a:	e4 0b       	sbc	r30, r20
    172c:	f5 0b       	sbc	r31, r21

0000172e <__udivmodsi4_ep>:
    172e:	66 1f       	adc	r22, r22
    1730:	77 1f       	adc	r23, r23
    1732:	88 1f       	adc	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	1a 94       	dec	r1
    1738:	69 f7       	brne	.-38     	; 0x1714 <__udivmodsi4_loop>
    173a:	60 95       	com	r22
    173c:	70 95       	com	r23
    173e:	80 95       	com	r24
    1740:	90 95       	com	r25
    1742:	9b 01       	movw	r18, r22
    1744:	ac 01       	movw	r20, r24
    1746:	bd 01       	movw	r22, r26
    1748:	cf 01       	movw	r24, r30
    174a:	08 95       	ret

0000174c <_exit>:
    174c:	f8 94       	cli

0000174e <__stop_program>:
    174e:	ff cf       	rjmp	.-2      	; 0x174e <__stop_program>
