
build/flash_rgb.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	a7 04       	cpc	r10, r7
      6a:	fe 04       	cpc	r15, r14
      6c:	12 05       	cpc	r17, r2
      6e:	43 05       	cpc	r20, r3
      70:	4a 05       	cpc	r20, r10
      72:	29 05       	cpc	r18, r9
      74:	4d 05       	cpc	r20, r13
      76:	ab 06       	cpc	r10, r27
      78:	9c 07       	cpc	r25, r28
      7a:	9c 07       	cpc	r25, r28
      7c:	b4 06       	cpc	r11, r20
      7e:	b7 06       	cpc	r11, r23
      80:	ba 06       	cpc	r11, r26
      82:	bc 06       	cpc	r11, r28
      84:	be 06       	cpc	r11, r30
      86:	c0 06       	cpc	r12, r16
      88:	71 07       	cpc	r23, r17
      8a:	d2 06       	cpc	r13, r18

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ec ed       	ldi	r30, 0xDC	; 220
      b8:	f6 e1       	ldi	r31, 0x16	; 22
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ae 30       	cpi	r26, 0x0E	; 14
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ae e0       	ldi	r26, 0x0E	; 14
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a0 37       	cpi	r26, 0x70	; 112
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 4e 08 	call	0x109c	; 0x109c <main>
      da:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
// global variables
uint16_t wait_time = 150;

// put your setup code here, will be run once at the beginning
void setup()
{
      e2:	08 95       	ret

000000e4 <loop>:
}

// put your main code here, will be run repeatedly
void loop() 
{
  set_color(RGB(0,0,1));
      e4:	80 e1       	ldi	r24, 0x10	; 16
      e6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
  delay(wait_time);
      ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
      ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
      f2:	0e 94 97 01 	call	0x32e	; 0x32e <delay>
  set_color(RGB(0,1,0));
      f6:	84 e0       	ldi	r24, 0x04	; 4
      f8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
  delay(wait_time);
      fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     104:	0e 94 97 01 	call	0x32e	; 0x32e <delay>
  set_color(RGB(1,0,0));
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
  delay(wait_time);
     10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     116:	0e 94 97 01 	call	0x32e	; 0x32e <delay>
  set_color(RGB(0,1,0));
     11a:	84 e0       	ldi	r24, 0x04	; 4
     11c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
  delay(wait_time);
     120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     124:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     128:	0c 94 97 01 	jmp	0x32e	; 0x32e <delay>

0000012c <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     12c:	08 95       	ret

0000012e <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	08 95       	ret

00000134 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     134:	08 95       	ret

00000136 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
    cli();
     144:	f8 94       	cli

    ports_off();
     146:	14 b8       	out	0x04, r1	; 4
     148:	17 b8       	out	0x07, r1	; 7
     14a:	1a b8       	out	0x0a, r1	; 10
     14c:	15 b8       	out	0x05, r1	; 5
     14e:	18 b8       	out	0x08, r1	; 8
     150:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     152:	52 9a       	sbi	0x0a, 2	; 10
     154:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     156:	14 bc       	out	0x24, r1	; 36
     158:	85 e0       	ldi	r24, 0x05	; 5
     15a:	85 bd       	out	0x25, r24	; 37
     15c:	8f ef       	ldi	r24, 0xFF	; 255
     15e:	87 bd       	out	0x27, r24	; 39
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     166:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     16a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     16e:	2f e8       	ldi	r18, 0x8F	; 143
     170:	3b e0       	ldi	r19, 0x0B	; 11
     172:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     176:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     17a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     17e:	53 98       	cbi	0x0a, 3	; 10
     180:	23 98       	cbi	0x04, 3	; 4
     182:	91 ea       	ldi	r25, 0xA1	; 161
     184:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     188:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     18c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     190:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     194:	8b e0       	ldi	r24, 0x0B	; 11
     196:	80 bf       	out	0x30, r24	; 48
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     19e:	86 e0       	ldi	r24, 0x06	; 6
     1a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     1a4:	83 e8       	ldi	r24, 0x83	; 131
     1a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1ae:	80 64       	ori	r24, 0x40	; 64
     1b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1b8:	86 fd       	sbrc	r24, 6
     1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <kilo_init+0x7e>
    adc_trigger_high_gain();
     1bc:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     1c0:	83 ea       	ldi	r24, 0xA3	; 163
     1c2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
    if (osccal != 0xFF)
     1d4:	8f 3f       	cpi	r24, 0xFF	; 255
     1d6:	11 f0       	breq	.+4      	; 0x1dc <kilo_init+0xa6>
        OSCCAL = osccal;
     1d8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     1dc:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
    rx_leadingbit = 1;
     1e0:	c1 e0       	ldi	r28, 0x01	; 1
     1e2:	c0 93 12 01 	sts	0x0112, r28	; 0x800112 <rx_leadingbit>
    rx_leadingbyte = 1;
     1e6:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <rx_leadingbyte>
    rx_byteindex = 0;
     1ea:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_byteindex>
    rx_bytevalue = 0;
     1ee:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1f2:	80 e9       	ldi	r24, 0x90	; 144
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
     1fa:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     1fe:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <tx_mask>
     202:	88 73       	andi	r24, 0x38	; 56
     204:	11 f0       	breq	.+4      	; 0x20a <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     206:	c0 93 2f 01 	sts	0x012F, r28	; 0x80012f <tx_mask>
    tx_clock = 0;
     20a:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tx_clock+0x1>
     20e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_clock>
    tx_increment = 255;
     212:	8f ef       	ldi	r24, 0xFF	; 255
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_increment+0x1>
     21a:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_increment>
    kilo_ticks = 0;
     21e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <kilo_ticks>
     222:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <kilo_ticks+0x1>
     226:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <kilo_ticks+0x2>
     22a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <kilo_ticks+0x3>
    kilo_state = IDLE;
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
    kilo_tx_period = 3906;
     234:	82 e4       	ldi	r24, 0x42	; 66
     236:	9f e0       	ldi	r25, 0x0F	; 15
     238:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <kilo_tx_period+0x1>
     23c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     240:	80 eb       	ldi	r24, 0xB0	; 176
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
     248:	c8 2f       	mov	r28, r24
     24a:	81 eb       	ldi	r24, 0xB1	; 177
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
     252:	2c 2f       	mov	r18, r28
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	38 2b       	or	r19, r24
     258:	30 93 6c 01 	sts	0x016C, r19	; 0x80016c <kilo_uid+0x1>
     25c:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     260:	85 e0       	ldi	r24, 0x05	; 5
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
     268:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     26c:	89 e0       	ldi	r24, 0x09	; 9
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
     274:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     278:	8c e0       	ldi	r24, 0x0C	; 12
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
     280:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     284:	84 e1       	ldi	r24, 0x14	; 20
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
     28c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_straight_right>
     290:	0a e3       	ldi	r16, 0x3A	; 58
     292:	11 e0       	ldi	r17, 0x01	; 1
     294:	53 e1       	ldi	r21, 0x13	; 19
     296:	e5 2e       	mov	r14, r21
     298:	51 e0       	ldi	r21, 0x01	; 1
     29a:	f5 2e       	mov	r15, r21
     29c:	c0 e2       	ldi	r28, 0x20	; 32
     29e:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     2a0:	ce 01       	movw	r24, r28
     2a2:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
     2a6:	d8 2e       	mov	r13, r24
     2a8:	ce 01       	movw	r24, r28
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
     2b0:	2d 2d       	mov	r18, r13
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	32 2f       	mov	r19, r18
     2b6:	22 27       	eor	r18, r18
     2b8:	28 2b       	or	r18, r24
     2ba:	f8 01       	movw	r30, r16
     2bc:	21 93       	st	Z+, r18
     2be:	31 93       	st	Z+, r19
     2c0:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     2c2:	ce 01       	movw	r24, r28
     2c4:	c0 96       	adiw	r24, 0x30	; 48
     2c6:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
     2ca:	d8 2e       	mov	r13, r24
     2cc:	ce 01       	movw	r24, r28
     2ce:	c1 96       	adiw	r24, 0x31	; 49
     2d0:	0e 94 02 0b 	call	0x1604	; 0x1604 <eeprom_read_byte>
     2d4:	2d 2d       	mov	r18, r13
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	32 2f       	mov	r19, r18
     2da:	22 27       	eor	r18, r18
     2dc:	28 2b       	or	r18, r24
     2de:	f7 01       	movw	r30, r14
     2e0:	21 93       	st	Z+, r18
     2e2:	31 93       	st	Z+, r19
     2e4:	7f 01       	movw	r14, r30
     2e6:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2e8:	cc 33       	cpi	r28, 0x3C	; 60
     2ea:	d1 05       	cpc	r29, r1
     2ec:	c9 f6       	brne	.-78     	; 0x2a0 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2ee:	78 94       	sei
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	df 90       	pop	r13
     2fe:	08 95       	ret

00000300 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	8f 93       	push	r24
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	a8 95       	wdr
     312:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     316:	88 61       	ori	r24, 0x18	; 24
     318:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     31c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     320:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     322:	8f 91       	pop	r24
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     32e:	00 97       	sbiw	r24, 0x00	; 0
     330:	41 f0       	breq	.+16     	; 0x342 <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     332:	ef ec       	ldi	r30, 0xCF	; 207
     334:	f7 e0       	ldi	r31, 0x07	; 7
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	f1 f7       	brne	.-4      	; 0x336 <delay+0x8>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <delay+0xe>
     33c:	00 00       	nop
        _delay_ms(1);
        ms--;
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f6 cf       	rjmp	.-20     	; 0x32e <delay>
    }
}
     342:	08 95       	ret

00000344 <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     344:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     348:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     34c:	08 95       	ret

0000034e <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     354:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     358:	8f e0       	ldi	r24, 0x0F	; 15
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0c 94 97 01 	jmp	0x32e	; 0x32e <delay>

00000360 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     360:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     364:	81 11       	cpse	r24, r1
     366:	1e c0       	rjmp	.+60     	; 0x3a4 <get_ambientlight+0x44>
        cli();
     368:	f8 94       	cli
        adc_setup_conversion(7);
     36a:	87 e0       	ldi	r24, 0x07	; 7
     36c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     370:	83 e8       	ldi	r24, 0x83	; 131
     372:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     376:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     37a:	80 64       	ori	r24, 0x40	; 64
     37c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     380:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     384:	86 fd       	sbrc	r24, 6
     386:	fc cf       	rjmp	.-8      	; 0x380 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     388:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     38c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     390:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     394:	23 ea       	ldi	r18, 0xA3	; 163
     396:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     3a0:	78 94       	sei
     3a2:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     3a8:	08 95       	ret

000003aa <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     3aa:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     3ae:	81 11       	cpse	r24, r1
     3b0:	1e c0       	rjmp	.+60     	; 0x3ee <get_temperature+0x44>
        cli();
     3b2:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     3b4:	88 ec       	ldi	r24, 0xC8	; 200
     3b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     3ba:	87 e8       	ldi	r24, 0x87	; 135
     3bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     3c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3c4:	80 64       	ori	r24, 0x40	; 64
     3c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     3ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3ce:	86 fd       	sbrc	r24, 6
     3d0:	fc cf       	rjmp	.-8      	; 0x3ca <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     3d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3d6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     3da:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     3de:	23 ea       	ldi	r18, 0xA3	; 163
     3e0:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     3ea:	78 94       	sei
     3ec:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     3ee:	8f ef       	ldi	r24, 0xFF	; 255
     3f0:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     3f2:	08 95       	ret

000003f4 <rand_hard>:

uint8_t rand_hard() {
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     3fc:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     3fe:	e3 ea       	ldi	r30, 0xA3	; 163
     400:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     402:	c6 e0       	ldi	r28, 0x06	; 6
     404:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     406:	a1 e0       	ldi	r26, 0x01	; 1
     408:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     40a:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     40c:	f8 94       	cli
            adc_setup_conversion(6);
     40e:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     412:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     416:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     41a:	40 64       	ori	r20, 0x40	; 64
     41c:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     420:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     424:	46 fd       	sbrc	r20, 6
     426:	fc cf       	rjmp	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
            a = ADCW&0x1;
     428:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     42c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     430:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     432:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     436:	50 64       	ori	r21, 0x40	; 64
     438:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     43c:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     440:	56 fd       	sbrc	r21, 6
     442:	fc cf       	rjmp	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
            b = ADCW&0x1;
     444:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     448:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     44c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     450:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     454:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     458:	78 94       	sei
            tries++;
     45a:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     45c:	61 70       	andi	r22, 0x01	; 1
     45e:	46 17       	cp	r20, r22
     460:	51 f0       	breq	.+20     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
        if (a)
     462:	44 23       	and	r20, r20
     464:	59 f0       	breq	.+22     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
            num |= (1<<i);
     466:	ad 01       	movw	r20, r26
     468:	02 2e       	mov	r0, r18
     46a:	01 c0       	rjmp	.+2      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
     46c:	44 0f       	add	r20, r20
     46e:	0a 94       	dec	r0
     470:	ea f7       	brpl	.-6      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     472:	84 2b       	or	r24, r20
     474:	03 c0       	rjmp	.+6      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     476:	90 38       	cpi	r25, 0x80	; 128
     478:	49 f6       	brne	.-110    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     47a:	f3 cf       	rjmp	.-26     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     47c:	2f 5f       	subi	r18, 0xFF	; 255
     47e:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     480:	28 30       	cpi	r18, 0x08	; 8
     482:	31 05       	cpc	r19, r1
     484:	09 f0       	breq	.+2      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     486:	c1 cf       	rjmp	.-126    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     48e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <seed>
     492:	98 e0       	ldi	r25, 0x08	; 8
     494:	89 9f       	mul	r24, r25
     496:	90 01       	movw	r18, r0
     498:	11 24       	eor	r1, r1
     49a:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     49c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__data_end>
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	89 0f       	add	r24, r25
     4a4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
     4a8:	82 2f       	mov	r24, r18
     4aa:	82 95       	swap	r24
     4ac:	86 95       	lsr	r24
     4ae:	87 70       	andi	r24, 0x07	; 7
     4b0:	28 27       	eor	r18, r24
     4b2:	96 95       	lsr	r25
     4b4:	96 95       	lsr	r25
     4b6:	82 2f       	mov	r24, r18
     4b8:	89 27       	eor	r24, r25
     4ba:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
    return seed;
}
     4be:	08 95       	ret

000004c0 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     4c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <seed>
     4c4:	08 95       	ret

000004c6 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     4c6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     4ca:	81 11       	cpse	r24, r1
     4cc:	16 c0       	rjmp	.+44     	; 0x4fa <get_voltage+0x34>
        cli();                                    // disable interrupts
     4ce:	f8 94       	cli
        adc_setup_conversion(6);
     4d0:	86 e0       	ldi	r24, 0x06	; 6
     4d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4d6:	83 e8       	ldi	r24, 0x83	; 131
     4d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     4dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4e0:	80 64       	ori	r24, 0x40	; 64
     4e2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     4e6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4ea:	86 fd       	sbrc	r24, 6
     4ec:	fc cf       	rjmp	.-8      	; 0x4e6 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     4ee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4f2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     4f6:	78 94       	sei
     4f8:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     4fe:	08 95       	ret

00000500 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     500:	2f 92       	push	r2
     502:	3f 92       	push	r3
     504:	4f 92       	push	r4
     506:	5f 92       	push	r5
     508:	6f 92       	push	r6
     50a:	7f 92       	push	r7
     50c:	8f 92       	push	r8
     50e:	9f 92       	push	r9
     510:	af 92       	push	r10
     512:	bf 92       	push	r11
     514:	cf 92       	push	r12
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     526:	fc 01       	movw	r30, r24
     528:	c2 81       	ldd	r28, Z+2	; 0x02
     52a:	d3 81       	ldd	r29, Z+3	; 0x03
     52c:	c4 38       	cpi	r28, 0x84	; 132
     52e:	f3 e0       	ldi	r31, 0x03	; 3
     530:	df 07       	cpc	r29, r31
     532:	0c f0       	brlt	.+2      	; 0x536 <estimate_distance+0x36>
     534:	7e c0       	rjmp	.+252    	; 0x632 <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     536:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <kilo_irhigh>
     53a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <kilo_irhigh+0x1>
     53e:	8c 17       	cp	r24, r28
     540:	9d 07       	cpc	r25, r29
     542:	08 f4       	brcc	.+2      	; 0x546 <estimate_distance+0x46>
     544:	6f c0       	rjmp	.+222    	; 0x624 <estimate_distance+0x124>
     546:	e5 e1       	ldi	r30, 0x15	; 21
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     54c:	81 91       	ld	r24, Z+
     54e:	91 91       	ld	r25, Z+
     550:	8c 17       	cp	r24, r28
     552:	9d 07       	cpc	r25, r29
     554:	20 f0       	brcs	.+8      	; 0x55e <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     556:	1f 5f       	subi	r17, 0xFF	; 255
     558:	1e 30       	cpi	r17, 0x0E	; 14
     55a:	c1 f7       	brne	.-16     	; 0x54c <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     55c:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     55e:	81 2f       	mov	r24, r17
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	fc 01       	movw	r30, r24
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	ed 5e       	subi	r30, 0xED	; 237
     56a:	fe 4f       	sbci	r31, 0xFE	; 254
     56c:	e0 80       	ld	r14, Z
     56e:	f1 80       	ldd	r15, Z+1	; 0x01
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	fc 01       	movw	r30, r24
     576:	ef 5e       	subi	r30, 0xEF	; 239
     578:	fe 4f       	sbci	r31, 0xFE	; 254
     57a:	80 81       	ld	r24, Z
     57c:	91 81       	ldd	r25, Z+1	; 0x01
     57e:	b7 01       	movw	r22, r14
     580:	68 1b       	sub	r22, r24
     582:	79 0b       	sbc	r23, r25
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 ab 09 	call	0x1356	; 0x1356 <__floatunsisf>
     58c:	9b 01       	movw	r18, r22
     58e:	ac 01       	movw	r20, r24
     590:	0e 94 97 08 	call	0x112e	; 0x112e <__addsf3>
     594:	4b 01       	movw	r8, r22
     596:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     598:	be 01       	movw	r22, r28
     59a:	0d 2e       	mov	r0, r29
     59c:	00 0c       	add	r0, r0
     59e:	88 0b       	sbc	r24, r24
     5a0:	99 0b       	sbc	r25, r25
     5a2:	0e 94 ad 09 	call	0x135a	; 0x135a <__floatsisf>
     5a6:	2b 01       	movw	r4, r22
     5a8:	3c 01       	movw	r6, r24
     5aa:	b7 01       	movw	r22, r14
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 ab 09 	call	0x1356	; 0x1356 <__floatunsisf>
     5b4:	6b 01       	movw	r12, r22
     5b6:	7c 01       	movw	r14, r24
     5b8:	61 2f       	mov	r22, r17
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 ab 09 	call	0x1356	; 0x1356 <__floatunsisf>
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	40 e0       	ldi	r20, 0x00	; 0
     5ca:	5f e3       	ldi	r21, 0x3F	; 63
     5cc:	0e 94 39 0a 	call	0x1472	; 0x1472 <__mulsf3>
     5d0:	20 e0       	ldi	r18, 0x00	; 0
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	a9 01       	movw	r20, r18
     5d6:	0e 94 97 08 	call	0x112e	; 0x112e <__addsf3>
     5da:	a5 01       	movw	r20, r10
     5dc:	94 01       	movw	r18, r8
     5de:	0e 94 39 0a 	call	0x1472	; 0x1472 <__mulsf3>
     5e2:	9b 01       	movw	r18, r22
     5e4:	ac 01       	movw	r20, r24
     5e6:	c7 01       	movw	r24, r14
     5e8:	b6 01       	movw	r22, r12
     5ea:	0e 94 96 08 	call	0x112c	; 0x112c <__subsf3>
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	c3 01       	movw	r24, r6
     5f4:	b2 01       	movw	r22, r4
     5f6:	0e 94 96 08 	call	0x112c	; 0x112c <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e2       	ldi	r20, 0x20	; 32
     600:	51 e4       	ldi	r21, 0x41	; 65
     602:	0e 94 39 0a 	call	0x1472	; 0x1472 <__mulsf3>
     606:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fixsfsi>
     60a:	7b 01       	movw	r14, r22
     60c:	c5 01       	movw	r24, r10
     60e:	b4 01       	movw	r22, r8
     610:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fixsfsi>
     614:	ab 01       	movw	r20, r22
     616:	bc 01       	movw	r22, r24
     618:	c7 01       	movw	r24, r14
     61a:	ba 01       	movw	r22, r20
     61c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__divmodhi4>
     620:	16 2f       	mov	r17, r22
     622:	01 c0       	rjmp	.+2      	; 0x626 <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     624:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     626:	cd 3b       	cpi	r28, 0xBD	; 189
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	d8 07       	cpc	r29, r24
     62c:	0c f4       	brge	.+2      	; 0x630 <estimate_distance+0x130>
     62e:	ca c0       	rjmp	.+404    	; 0x7c4 <estimate_distance+0x2c4>
     630:	01 c0       	rjmp	.+2      	; 0x634 <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     632:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     634:	f1 01       	movw	r30, r2
     636:	c0 80       	ld	r12, Z
     638:	d1 80       	ldd	r13, Z+1	; 0x01
     63a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <kilo_irlow>
     63e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <kilo_irlow+0x1>
     642:	8c 15       	cp	r24, r12
     644:	9d 05       	cpc	r25, r13
     646:	88 f0       	brcs	.+34     	; 0x66a <estimate_distance+0x16a>
     648:	ec e3       	ldi	r30, 0x3C	; 60
     64a:	f1 e0       	ldi	r31, 0x01	; 1
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     652:	e1 90       	ld	r14, Z+
     654:	f1 90       	ld	r15, Z+
     656:	ec 14       	cp	r14, r12
     658:	fd 04       	cpc	r15, r13
     65a:	08 f4       	brcc	.+2      	; 0x65e <estimate_distance+0x15e>
     65c:	58 c0       	rjmp	.+176    	; 0x70e <estimate_distance+0x20e>
     65e:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     660:	8e 30       	cpi	r24, 0x0E	; 14
     662:	91 05       	cpc	r25, r1
     664:	a9 f7       	brne	.-22     	; 0x650 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     666:	0a e5       	ldi	r16, 0x5A	; 90
     668:	01 c0       	rjmp	.+2      	; 0x66c <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     66a:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     66c:	1f 3f       	cpi	r17, 0xFF	; 255
     66e:	09 f4       	brne	.+2      	; 0x672 <estimate_distance+0x172>
     670:	4b c0       	rjmp	.+150    	; 0x708 <estimate_distance+0x208>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     672:	be 01       	movw	r22, r28
     674:	dd 0f       	add	r29, r29
     676:	88 0b       	sbc	r24, r24
     678:	99 0b       	sbc	r25, r25
     67a:	0e 94 ad 09 	call	0x135a	; 0x135a <__floatsisf>
     67e:	6b 01       	movw	r12, r22
     680:	7c 01       	movw	r14, r24
     682:	61 2f       	mov	r22, r17
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 ab 09 	call	0x1356	; 0x1356 <__floatunsisf>
     68e:	4b 01       	movw	r8, r22
     690:	5c 01       	movw	r10, r24
     692:	a7 01       	movw	r20, r14
     694:	96 01       	movw	r18, r12
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	81 e6       	ldi	r24, 0x61	; 97
     69c:	94 e4       	ldi	r25, 0x44	; 68
     69e:	0e 94 96 08 	call	0x112c	; 0x112c <__subsf3>
     6a2:	9b 01       	movw	r18, r22
     6a4:	ac 01       	movw	r20, r24
     6a6:	c5 01       	movw	r24, r10
     6a8:	b4 01       	movw	r22, r8
     6aa:	0e 94 39 0a 	call	0x1472	; 0x1472 <__mulsf3>
     6ae:	4b 01       	movw	r8, r22
     6b0:	5c 01       	movw	r10, r24
     6b2:	60 2f       	mov	r22, r16
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 ab 09 	call	0x1356	; 0x1356 <__floatunsisf>
     6be:	2b 01       	movw	r4, r22
     6c0:	3c 01       	movw	r6, r24
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	4f e2       	ldi	r20, 0x2F	; 47
     6c8:	54 e4       	ldi	r21, 0x44	; 68
     6ca:	c7 01       	movw	r24, r14
     6cc:	b6 01       	movw	r22, r12
     6ce:	0e 94 96 08 	call	0x112c	; 0x112c <__subsf3>
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
     6d6:	c3 01       	movw	r24, r6
     6d8:	b2 01       	movw	r22, r4
     6da:	0e 94 39 0a 	call	0x1472	; 0x1472 <__mulsf3>
     6de:	9b 01       	movw	r18, r22
     6e0:	ac 01       	movw	r20, r24
     6e2:	c5 01       	movw	r24, r10
     6e4:	b4 01       	movw	r22, r8
     6e6:	0e 94 97 08 	call	0x112e	; 0x112e <__addsf3>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	48 e4       	ldi	r20, 0x48	; 72
     6f0:	53 e4       	ldi	r21, 0x43	; 67
     6f2:	0e 94 03 09 	call	0x1206	; 0x1206 <__divsf3>
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	44 e0       	ldi	r20, 0x04	; 4
     6fc:	52 e4       	ldi	r21, 0x42	; 66
     6fe:	0e 94 97 08 	call	0x112e	; 0x112e <__addsf3>
     702:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__fixunssfsi>
     706:	60 c0       	rjmp	.+192    	; 0x7c8 <estimate_distance+0x2c8>
        } else {
            return 33 + dist_low;
     708:	61 e2       	ldi	r22, 0x21	; 33
     70a:	60 0f       	add	r22, r16
     70c:	5d c0       	rjmp	.+186    	; 0x7c8 <estimate_distance+0x2c8>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	fc 01       	movw	r30, r24
     714:	e8 5c       	subi	r30, 0xC8	; 200
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	80 81       	ld	r24, Z
     71a:	91 81       	ldd	r25, Z+1	; 0x01
     71c:	b7 01       	movw	r22, r14
     71e:	68 1b       	sub	r22, r24
     720:	79 0b       	sbc	r23, r25
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 ab 09 	call	0x1356	; 0x1356 <__floatunsisf>
     72a:	9b 01       	movw	r18, r22
     72c:	ac 01       	movw	r20, r24
     72e:	0e 94 97 08 	call	0x112e	; 0x112e <__addsf3>
     732:	4b 01       	movw	r8, r22
     734:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     736:	b6 01       	movw	r22, r12
     738:	dd 0c       	add	r13, r13
     73a:	88 0b       	sbc	r24, r24
     73c:	99 0b       	sbc	r25, r25
     73e:	0e 94 ad 09 	call	0x135a	; 0x135a <__floatsisf>
     742:	2b 01       	movw	r4, r22
     744:	3c 01       	movw	r6, r24
     746:	b7 01       	movw	r22, r14
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 ab 09 	call	0x1356	; 0x1356 <__floatunsisf>
     750:	6b 01       	movw	r12, r22
     752:	7c 01       	movw	r14, r24
     754:	63 2d       	mov	r22, r3
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 ab 09 	call	0x1356	; 0x1356 <__floatunsisf>
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	5f e3       	ldi	r21, 0x3F	; 63
     768:	0e 94 39 0a 	call	0x1472	; 0x1472 <__mulsf3>
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	a9 01       	movw	r20, r18
     772:	0e 94 97 08 	call	0x112e	; 0x112e <__addsf3>
     776:	a5 01       	movw	r20, r10
     778:	94 01       	movw	r18, r8
     77a:	0e 94 39 0a 	call	0x1472	; 0x1472 <__mulsf3>
     77e:	9b 01       	movw	r18, r22
     780:	ac 01       	movw	r20, r24
     782:	c7 01       	movw	r24, r14
     784:	b6 01       	movw	r22, r12
     786:	0e 94 96 08 	call	0x112c	; 0x112c <__subsf3>
     78a:	9b 01       	movw	r18, r22
     78c:	ac 01       	movw	r20, r24
     78e:	c3 01       	movw	r24, r6
     790:	b2 01       	movw	r22, r4
     792:	0e 94 96 08 	call	0x112c	; 0x112c <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e2       	ldi	r20, 0x20	; 32
     79c:	51 e4       	ldi	r21, 0x41	; 65
     79e:	0e 94 39 0a 	call	0x1472	; 0x1472 <__mulsf3>
     7a2:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fixsfsi>
     7a6:	7b 01       	movw	r14, r22
     7a8:	c5 01       	movw	r24, r10
     7aa:	b4 01       	movw	r22, r8
     7ac:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fixsfsi>
     7b0:	ab 01       	movw	r20, r22
     7b2:	bc 01       	movw	r22, r24
     7b4:	c7 01       	movw	r24, r14
     7b6:	ba 01       	movw	r22, r20
     7b8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__divmodhi4>
     7bc:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     7be:	6f 3f       	cpi	r22, 0xFF	; 255
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <estimate_distance+0x2c4>
     7c2:	54 cf       	rjmp	.-344    	; 0x66c <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     7c4:	61 e2       	ldi	r22, 0x21	; 33
     7c6:	61 0f       	add	r22, r17
    }
}
     7c8:	86 2f       	mov	r24, r22
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	ff 90       	pop	r15
     7d4:	ef 90       	pop	r14
     7d6:	df 90       	pop	r13
     7d8:	cf 90       	pop	r12
     7da:	bf 90       	pop	r11
     7dc:	af 90       	pop	r10
     7de:	9f 90       	pop	r9
     7e0:	8f 90       	pop	r8
     7e2:	7f 90       	pop	r7
     7e4:	6f 90       	pop	r6
     7e6:	5f 90       	pop	r5
     7e8:	4f 90       	pop	r4
     7ea:	3f 90       	pop	r3
     7ec:	2f 90       	pop	r2
     7ee:	08 95       	ret

000007f0 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     7f0:	1f 92       	push	r1
     7f2:	0f 92       	push	r0
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	2f 93       	push	r18
     7fc:	3f 93       	push	r19
     7fe:	4f 93       	push	r20
     800:	5f 93       	push	r21
     802:	6f 93       	push	r22
     804:	7f 93       	push	r23
     806:	8f 93       	push	r24
     808:	9f 93       	push	r25
     80a:	af 93       	push	r26
     80c:	bf 93       	push	r27
     80e:	ef 93       	push	r30
     810:	ff 93       	push	r31
    tx_clock += tx_increment;
     812:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <tx_clock>
     816:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <tx_clock+0x1>
     81a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <tx_increment>
     81e:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <tx_increment+0x1>
     822:	82 0f       	add	r24, r18
     824:	93 1f       	adc	r25, r19
     826:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <tx_clock+0x1>
     82a:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <tx_clock>
    tx_increment = 0xFF;
     82e:	8f ef       	ldi	r24, 0xFF	; 255
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_increment+0x1>
     836:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_increment>
    OCR0A = tx_increment;
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     83e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <kilo_ticks>
     842:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <kilo_ticks+0x1>
     846:	a0 91 37 01 	lds	r26, 0x0137	; 0x800137 <kilo_ticks+0x2>
     84a:	b0 91 38 01 	lds	r27, 0x0138	; 0x800138 <kilo_ticks+0x3>
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	a1 1d       	adc	r26, r1
     852:	b1 1d       	adc	r27, r1
     854:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <kilo_ticks>
     858:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <kilo_ticks+0x1>
     85c:	a0 93 37 01 	sts	0x0137, r26	; 0x800137 <kilo_ticks+0x2>
     860:	b0 93 38 01 	sts	0x0138, r27	; 0x800138 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     864:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     868:	81 11       	cpse	r24, r1
     86a:	2d c0       	rjmp	.+90     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     86c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <kilo_tx_period>
     870:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <kilo_tx_period+0x1>
     874:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <tx_clock>
     878:	30 91 5a 01 	lds	r19, 0x015A	; 0x80015a <tx_clock+0x1>
     87c:	82 17       	cp	r24, r18
     87e:	93 07       	cpc	r25, r19
     880:	10 f5       	brcc	.+68     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
     882:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     886:	84 30       	cpi	r24, 0x04	; 4
     888:	f1 f4       	brne	.+60     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
        message_t *msg = kilo_message_tx();
     88a:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_tx>
     88e:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_tx+0x1>
     892:	09 95       	icall
        if (msg) {
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	b9 f0       	breq	.+46     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
            if (message_send(msg)) {
     898:	0e 94 cb 07 	call	0xf96	; 0xf96 <message_send>
     89c:	88 23       	and	r24, r24
     89e:	51 f0       	breq	.+20     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
                kilo_message_tx_success();
     8a0:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx_success>
     8a4:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx_success+0x1>
     8a8:	09 95       	icall
                tx_clock = 0;
     8aa:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <tx_clock+0x1>
     8ae:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <tx_clock>
     8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
            } else {
                tx_increment = rand()&0xFF;
     8b4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <rand>
     8b8:	9c 01       	movw	r18, r24
     8ba:	33 27       	eor	r19, r19
     8bc:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <tx_increment+0x1>
     8c0:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <tx_increment>
                OCR0A = tx_increment;
     8c4:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     8c6:	ff 91       	pop	r31
     8c8:	ef 91       	pop	r30
     8ca:	bf 91       	pop	r27
     8cc:	af 91       	pop	r26
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	7f 91       	pop	r23
     8d4:	6f 91       	pop	r22
     8d6:	5f 91       	pop	r21
     8d8:	4f 91       	pop	r20
     8da:	3f 91       	pop	r19
     8dc:	2f 91       	pop	r18
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti

000008e8 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     8e8:	80 ff       	sbrs	r24, 0
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <set_color+0x8>
        DDRD |= (1<<5);
     8ec:	55 9a       	sbi	0x0a, 5	; 10
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     8f0:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     8f2:	81 ff       	sbrs	r24, 1
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <set_color+0x12>
        DDRD |= (1<<4);
     8f6:	54 9a       	sbi	0x0a, 4	; 10
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     8fa:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     8fc:	82 ff       	sbrs	r24, 2
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0x5>
        DDRC |= (1<<3);
     900:	3b 9a       	sbi	0x07, 3	; 7
     902:	01 c0       	rjmp	.+2      	; 0x906 <__stack+0x7>
    else
        DDRC &= ~(1<<3);
     904:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     906:	83 ff       	sbrs	r24, 3
     908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
        DDRC |= (1<<2);
     90a:	3a 9a       	sbi	0x07, 2	; 7
     90c:	01 c0       	rjmp	.+2      	; 0x910 <__stack+0x11>
    else
        DDRC &= ~(1<<2);
     90e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     910:	84 ff       	sbrs	r24, 4
     912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>
        DDRC |= (1<<5);
     914:	3d 9a       	sbi	0x07, 5	; 7
     916:	01 c0       	rjmp	.+2      	; 0x91a <__stack+0x1b>
    else
        DDRC &= ~(1<<5);
     918:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     91a:	85 ff       	sbrs	r24, 5
     91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
        DDRC |= (1<<4);
     91e:	3c 9a       	sbi	0x07, 4	; 7
     920:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     922:	3c 98       	cbi	0x07, 4	; 7
     924:	08 95       	ret

00000926 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     926:	8c 01       	movw	r16, r24
     928:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     92a:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     92c:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     92e:	84 e0       	ldi	r24, 0x04	; 4
     930:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     932:	98 e1       	ldi	r25, 0x18	; 24
     934:	c9 2e       	mov	r12, r25
     936:	29 e2       	ldi	r18, 0x29	; 41
     938:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     93a:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <kilo_state>
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	e7 30       	cpi	r30, 0x07	; 7
     942:	f1 05       	cpc	r31, r1
     944:	d0 f7       	brcc	.-12     	; 0x93a <kilo_start+0x14>
     946:	ec 5c       	subi	r30, 0xCC	; 204
     948:	ff 4f       	sbci	r31, 0xFF	; 255
     94a:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__tablejump2__>
            case SLEEPING:
                cli();
     94e:	f8 94       	cli
                acomp_off();
     950:	80 b7       	in	r24, 0x30	; 48
     952:	87 7f       	andi	r24, 0xF7	; 247
     954:	80 bf       	out	0x30, r24	; 48
                adc_off();
     956:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     95a:	8f 77       	andi	r24, 0x7F	; 127
     95c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     960:	14 b8       	out	0x04, r1	; 4
     962:	17 b8       	out	0x07, r1	; 7
     964:	1a b8       	out	0x0a, r1	; 10
     966:	15 b8       	out	0x05, r1	; 5
     968:	18 b8       	out	0x08, r1	; 8
     96a:	1b b8       	out	0x0b, r1	; 11
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	a8 95       	wdr
     972:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     976:	0f be       	out	0x3f, r0	; 63
     978:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     97c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     980:	80 64       	ori	r24, 0x40	; 64
     982:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     986:	83 b7       	in	r24, 0x33	; 51
     988:	81 7f       	andi	r24, 0xF1	; 241
     98a:	84 60       	ori	r24, 0x04	; 4
     98c:	83 bf       	out	0x33, r24	; 51
                cli();
     98e:	f8 94       	cli
                sleep_enable();
     990:	83 b7       	in	r24, 0x33	; 51
     992:	81 60       	ori	r24, 0x01	; 1
     994:	83 bf       	out	0x33, r24	; 51
                sei();
     996:	78 94       	sei
                sleep_cpu();
     998:	88 95       	sleep
                sleep_disable();
     99a:	83 b7       	in	r24, 0x33	; 51
     99c:	8e 7f       	andi	r24, 0xFE	; 254
     99e:	83 bf       	out	0x33, r24	; 51
                sei();
     9a0:	78 94       	sei
                rx_busy = 0;
     9a2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
                ports_on();
     9a6:	52 9a       	sbi	0x0a, 2	; 10
     9a8:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     9aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     9ae:	80 68       	ori	r24, 0x80	; 128
     9b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b4:	87 e5       	ldi	r24, 0x57	; 87
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	01 97       	sbiw	r24, 0x01	; 1
     9ba:	f1 f7       	brne	.-4      	; 0x9b8 <kilo_start+0x92>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <kilo_start+0x98>
     9be:	00 00       	nop
                _delay_us(300);
                acomp_on();
     9c0:	80 b7       	in	r24, 0x30	; 48
     9c2:	88 61       	ori	r24, 0x18	; 24
     9c4:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     9c6:	8f e3       	ldi	r24, 0x3F	; 63
     9c8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9cc:	ef e1       	ldi	r30, 0x1F	; 31
     9ce:	fe e4       	ldi	r31, 0x4E	; 78
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <kilo_start+0xaa>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <kilo_start+0xb0>
     9d6:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     9d8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <rx_busy>
     9dc:	88 23       	and	r24, r24
     9de:	09 f4       	brne	.+2      	; 0x9e2 <kilo_start+0xbc>
     9e0:	50 c0       	rjmp	.+160    	; 0xa82 <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     9e2:	83 e0       	ldi	r24, 0x03	; 3
     9e4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
     9e8:	ff ef       	ldi	r31, 0xFF	; 255
     9ea:	20 e7       	ldi	r18, 0x70	; 112
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	f1 50       	subi	r31, 0x01	; 1
     9f0:	20 40       	sbci	r18, 0x00	; 0
     9f2:	80 40       	sbci	r24, 0x00	; 0
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <kilo_start+0xc8>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <kilo_start+0xd2>
     9f8:	00 00       	nop
     9fa:	43 c0       	rjmp	.+134    	; 0xa82 <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     9fc:	8c e0       	ldi	r24, 0x0C	; 12
     9fe:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
     a02:	ef ec       	ldi	r30, 0xCF	; 207
     a04:	f7 e0       	ldi	r31, 0x07	; 7
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <kilo_start+0xe0>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <kilo_start+0xe6>
     a0c:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
     a14:	ff ef       	ldi	r31, 0xFF	; 255
     a16:	21 ee       	ldi	r18, 0xE1	; 225
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	f1 50       	subi	r31, 0x01	; 1
     a1c:	20 40       	sbci	r18, 0x00	; 0
     a1e:	80 40       	sbci	r24, 0x00	; 0
     a20:	e1 f7       	brne	.-8      	; 0xa1a <kilo_start+0xf4>
     a22:	2c c0       	rjmp	.+88     	; 0xa7c <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     a24:	0e 94 63 02 	call	0x4c6	; 0x4c6 <get_voltage>
                if(voltage > 682)
     a28:	8b 3a       	cpi	r24, 0xAB	; 171
     a2a:	e2 e0       	ldi	r30, 0x02	; 2
     a2c:	9e 07       	cpc	r25, r30
     a2e:	24 f0       	brlt	.+8      	; 0xa38 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     a30:	8c e0       	ldi	r24, 0x0C	; 12
     a32:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
     a36:	81 cf       	rjmp	.-254    	; 0x93a <kilo_start+0x14>
                else if(voltage > 648)
     a38:	89 38       	cpi	r24, 0x89	; 137
     a3a:	f2 e0       	ldi	r31, 0x02	; 2
     a3c:	9f 07       	cpc	r25, r31
     a3e:	14 f0       	brlt	.+4      	; 0xa44 <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     a40:	80 e3       	ldi	r24, 0x30	; 48
     a42:	f7 cf       	rjmp	.-18     	; 0xa32 <kilo_start+0x10c>
                else if(voltage > 614)
     a44:	87 36       	cpi	r24, 0x67	; 103
     a46:	92 40       	sbci	r25, 0x02	; 2
     a48:	14 f0       	brlt	.+4      	; 0xa4e <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     a4a:	8f e0       	ldi	r24, 0x0F	; 15
     a4c:	f2 cf       	rjmp	.-28     	; 0xa32 <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	f0 cf       	rjmp	.-32     	; 0xa32 <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     a52:	48 99       	sbic	0x09, 0	; 9
     a54:	16 c0       	rjmp	.+44     	; 0xa82 <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
     a5c:	8f ec       	ldi	r24, 0xCF	; 207
     a5e:	97 e0       	ldi	r25, 0x07	; 7
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	f1 f7       	brne	.-4      	; 0xa60 <kilo_start+0x13a>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <kilo_start+0x140>
     a66:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
     a6e:	9f ef       	ldi	r25, 0xFF	; 255
     a70:	e1 ee       	ldi	r30, 0xE1	; 225
     a72:	f4 e0       	ldi	r31, 0x04	; 4
     a74:	91 50       	subi	r25, 0x01	; 1
     a76:	e0 40       	sbci	r30, 0x00	; 0
     a78:	f0 40       	sbci	r31, 0x00	; 0
     a7a:	e1 f7       	brne	.-8      	; 0xa74 <kilo_start+0x14e>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <kilo_start+0x158>
     a7e:	00 00       	nop
     a80:	5c cf       	rjmp	.-328    	; 0x93a <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	d6 cf       	rjmp	.-84     	; 0xa32 <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     a86:	d1 11       	cpse	r29, r1
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <kilo_start+0x168>
                    setup();
     a8a:	f8 01       	movw	r30, r16
     a8c:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a8e:	d0 92 11 01 	sts	0x0111, r13	; 0x800111 <kilo_state>
     a92:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     a94:	f7 01       	movw	r30, r14
     a96:	09 95       	icall
                break;
     a98:	50 cf       	rjmp	.-352    	; 0x93a <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     a9a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     a9e:	81 11       	cpse	r24, r1
     aa0:	07 c0       	rjmp	.+14     	; 0xab0 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     aa2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     aa6:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     aaa:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
     aae:	45 cf       	rjmp	.-374    	; 0x93a <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     ab0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     ab4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <prev_motion>
     ab8:	98 17       	cp	r25, r24
     aba:	09 f4       	brne	.+2      	; 0xabe <kilo_start+0x198>
     abc:	3e cf       	rjmp	.-388    	; 0x93a <kilo_start+0x14>
                        prev_motion = cur_motion;
     abe:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     ac2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     ac6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
     aca:	81 30       	cpi	r24, 0x01	; 1
     acc:	89 f4       	brne	.+34     	; 0xaf0 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ace:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     ad2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ad6:	8f e2       	ldi	r24, 0x2F	; 47
     ad8:	95 e7       	ldi	r25, 0x75	; 117
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <kilo_start+0x1b4>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <kilo_start+0x1ba>
     ae0:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     ae2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     ae6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     aea:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     aee:	25 cf       	rjmp	.-438    	; 0x93a <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     af0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     af4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     af8:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	59 f4       	brne	.+22     	; 0xb16 <kilo_start+0x1f0>
     b00:	ef e2       	ldi	r30, 0x2F	; 47
     b02:	f5 e7       	ldi	r31, 0x75	; 117
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	f1 f7       	brne	.-4      	; 0xb04 <kilo_start+0x1de>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <kilo_start+0x1e4>
     b0a:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     b0c:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b10:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     b14:	10 c0       	rjmp	.+32     	; 0xb36 <kilo_start+0x210>
     b16:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b1a:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b1e:	8f e2       	ldi	r24, 0x2F	; 47
     b20:	95 e7       	ldi	r25, 0x75	; 117
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	f1 f7       	brne	.-4      	; 0xb22 <kilo_start+0x1fc>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <kilo_start+0x202>
     b28:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     b2a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <kilo_straight_right>
     b2e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     b32:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     b36:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     b3a:	ff ce       	rjmp	.-514    	; 0x93a <kilo_start+0x14>

00000b3c <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     b3c:	1f 92       	push	r1
     b3e:	0f 92       	push	r0
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	0f 92       	push	r0
     b44:	11 24       	eor	r1, r1
     b46:	8f 93       	push	r24
     b48:	9f 93       	push	r25
    rx_timer_off();
     b4a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     b4e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     b52:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <rx_leadingbit>
    rx_leadingbyte = 1;
     b5c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_leadingbyte>
    rx_busy = 0;
     b60:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
    adc_trigger_high_gain();
     b64:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     b68:	93 ea       	ldi	r25, 0xA3	; 163
     b6a:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     b6e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     b72:	9f 91       	pop	r25
     b74:	8f 91       	pop	r24
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti

00000b80 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     b80:	1f 92       	push	r1
     b82:	0f 92       	push	r0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	0f 92       	push	r0
     b88:	11 24       	eor	r1, r1
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	2f 93       	push	r18
     b90:	3f 93       	push	r19
     b92:	4f 93       	push	r20
     b94:	5f 93       	push	r21
     b96:	6f 93       	push	r22
     b98:	7f 93       	push	r23
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
     ba2:	ef 93       	push	r30
     ba4:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     ba6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     baa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	40 93 39 01 	sts	0x0139, r20	; 0x800139 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     bb4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rx_leadingbit>
     bb8:	88 23       	and	r24, r24
     bba:	21 f1       	breq	.+72     	; 0xc04 <__vector_23+0x84>
        rx_timer_on();
     bbc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     bc0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     bc4:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     bc8:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <rx_bytevalue>
        rx_leadingbit = 0;
     bcc:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rx_leadingbit>
        if (rx_leadingbyte) {
     bd0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_leadingbyte>
     bd4:	88 23       	and	r24, r24
     bd6:	09 f4       	brne	.+2      	; 0xbda <__vector_23+0x5a>
     bd8:	af c1       	rjmp	.+862    	; 0xf38 <__vector_23+0x3b8>
            adc_finish_conversion();
     bda:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bde:	86 fd       	sbrc	r24, 6
     be0:	fc cf       	rjmp	.-8      	; 0xbda <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     be2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     be6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     bea:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <rx_dist+0x3>
     bee:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <rx_dist+0x2>
            adc_trigger_low_gain();
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     bf8:	93 ea       	ldi	r25, 0xA3	; 163
     bfa:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     bfe:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c02:	9a c1       	rjmp	.+820    	; 0xf38 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     c04:	c9 01       	movw	r24, r18
     c06:	87 58       	subi	r24, 0x87	; 135
     c08:	91 09       	sbc	r25, r1
     c0a:	84 37       	cpi	r24, 0x74	; 116
     c0c:	99 40       	sbci	r25, 0x09	; 9
     c0e:	a0 f0       	brcs	.+40     	; 0xc38 <__vector_23+0xb8>
            rx_timer_off();
     c10:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c14:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c18:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     c1c:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <rx_leadingbit>
            rx_leadingbyte = 1;
     c20:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <rx_leadingbyte>
            rx_busy = 0;
     c24:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
            adc_trigger_high_gain();
     c28:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c2c:	83 ea       	ldi	r24, 0xA3	; 163
     c2e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c32:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     c36:	80 c1       	rjmp	.+768    	; 0xf38 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     c38:	26 58       	subi	r18, 0x86	; 134
     c3a:	31 09       	sbc	r19, r1
     c3c:	a4 ef       	ldi	r26, 0xF4	; 244
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__umulhisi3>
     c44:	8c 01       	movw	r16, r24
     c46:	22 27       	eor	r18, r18
     c48:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     c4a:	08 30       	cpi	r16, 0x08	; 8
     c4c:	60 f4       	brcc	.+24     	; 0xc66 <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <__vector_23+0xd6>
     c54:	88 0f       	add	r24, r24
     c56:	0a 95       	dec	r16
     c58:	ea f7       	brpl	.-6      	; 0xc54 <__vector_23+0xd4>
     c5a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     c5e:	89 2b       	or	r24, r25
     c60:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <rx_bytevalue>
     c64:	69 c1       	rjmp	.+722    	; 0xf38 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     c66:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <rx_leadingbit>
                if (rx_leadingbyte) {
     c6a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <rx_leadingbyte>
     c6e:	88 23       	and	r24, r24
     c70:	41 f1       	breq	.+80     	; 0xcc2 <__vector_23+0x142>
                    adc_finish_conversion();
     c72:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c76:	86 fd       	sbrc	r24, 6
     c78:	fc cf       	rjmp	.-8      	; 0xc72 <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     c7a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     c7e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     c82:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <rx_dist+0x1>
     c86:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <rx_dist>
                    adc_trigger_high_gain();
     c8a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c8e:	83 ea       	ldi	r24, 0xA3	; 163
     c90:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     c9a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     c9e:	99 23       	and	r25, r25
     ca0:	59 f0       	breq	.+22     	; 0xcb8 <__vector_23+0x138>
                        rx_timer_off();
     ca2:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ca6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     caa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     cae:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <rx_leadingbyte>
                        rx_busy = 0;
     cb2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>
     cb6:	40 c1       	rjmp	.+640    	; 0xf38 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     cb8:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <rx_leadingbyte>
                        rx_byteindex = 0;
     cbc:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <rx_byteindex>
     cc0:	3b c1       	rjmp	.+630    	; 0xf38 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     cc2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <rx_byteindex>
     cc6:	e8 2f       	mov	r30, r24
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	e4 5a       	subi	r30, 0xA4	; 164
     ccc:	fe 4f       	sbci	r31, 0xFE	; 254
     cce:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <rx_bytevalue>
     cd2:	90 83       	st	Z, r25
                    rx_byteindex++;
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     cda:	8c 30       	cpi	r24, 0x0C	; 12
     cdc:	09 f0       	breq	.+2      	; 0xce0 <__vector_23+0x160>
     cde:	2c c1       	rjmp	.+600    	; 0xf38 <__vector_23+0x3b8>
                        rx_timer_off();
     ce0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     ce4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     ce8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     cec:	40 93 56 01 	sts	0x0156, r20	; 0x800156 <rx_leadingbyte>
                        rx_busy = 0;
     cf0:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     cf4:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <rx_msg+0xa>
     cf8:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <rx_msg+0xb>
     cfc:	8c e5       	ldi	r24, 0x5C	; 92
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	0e 94 af 07 	call	0xf5e	; 0xf5e <message_crc>
     d04:	08 17       	cp	r16, r24
     d06:	19 07       	cpc	r17, r25
     d08:	09 f0       	breq	.+2      	; 0xd0c <__vector_23+0x18c>
     d0a:	16 c1       	rjmp	.+556    	; 0xf38 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     d0c:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <rx_msg+0x9>
     d10:	e7 fd       	sbrc	r30, 7
     d12:	0a c0       	rjmp	.+20     	; 0xd28 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     d14:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <kilo_message_rx>
     d18:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <kilo_message_rx+0x1>
     d1c:	61 e3       	ldi	r22, 0x31	; 49
     d1e:	71 e0       	ldi	r23, 0x01	; 1
     d20:	8c e5       	ldi	r24, 0x5C	; 92
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	09 95       	icall
     d26:	08 c1       	rjmp	.+528    	; 0xf38 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     d28:	88 e7       	ldi	r24, 0x78	; 120
     d2a:	8e 0f       	add	r24, r30
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	30 f0       	brcs	.+12     	; 0xd3c <__vector_23+0x1bc>
        motors_off();
     d30:	53 98       	cbi	0x0a, 3	; 10
     d32:	23 98       	cbi	0x04, 3	; 4
     d34:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d38:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     d3c:	8e 2f       	mov	r24, r30
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	fc 01       	movw	r30, r24
     d42:	e0 58       	subi	r30, 0x80	; 128
     d44:	f1 09       	sbc	r31, r1
     d46:	eb 30       	cpi	r30, 0x0B	; 11
     d48:	f1 05       	cpc	r31, r1
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <__vector_23+0x1ce>
     d4c:	f5 c0       	rjmp	.+490    	; 0xf38 <__vector_23+0x3b8>
     d4e:	e5 5c       	subi	r30, 0xC5	; 197
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__tablejump2__>
        case BOOT:
            tx_timer_off();
     d56:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d5a:	8d 7f       	andi	r24, 0xFD	; 253
     d5c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     d60:	16 bc       	out	0x26, r1	; 38
            bootload();
     d62:	e0 e0       	ldi	r30, 0x00	; 0
     d64:	f0 e7       	ldi	r31, 0x70	; 112
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     d68:	e0 e0       	ldi	r30, 0x00	; 0
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     d6e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <kilo_state>
     d72:	e2 c0       	rjmp	.+452    	; 0xf38 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	b2 c0       	rjmp	.+356    	; 0xedc <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     d78:	85 e0       	ldi	r24, 0x05	; 5
     d7a:	b0 c0       	rjmp	.+352    	; 0xedc <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	ae c0       	rjmp	.+348    	; 0xedc <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     d80:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     d84:	83 30       	cpi	r24, 0x03	; 3
     d86:	09 f4       	brne	.+2      	; 0xd8a <__vector_23+0x20a>
     d88:	d7 c0       	rjmp	.+430    	; 0xf38 <__vector_23+0x3b8>
     d8a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	09 f4       	brne	.+2      	; 0xd94 <__vector_23+0x214>
     d92:	d2 c0       	rjmp	.+420    	; 0xf38 <__vector_23+0x3b8>
                motors_on();
     d94:	53 9a       	sbi	0x0a, 3	; 10
     d96:	23 9a       	sbi	0x04, 3	; 4
     d98:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     d9c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     da0:	83 e0       	ldi	r24, 0x03	; 3
     da2:	9c c0       	rjmp	.+312    	; 0xedc <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     da4:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_msg>
     da8:	82 30       	cpi	r24, 0x02	; 2
     daa:	09 f4       	brne	.+2      	; 0xdae <__vector_23+0x22e>
     dac:	4b c0       	rjmp	.+150    	; 0xe44 <__vector_23+0x2c4>
     dae:	80 f4       	brcc	.+32     	; 0xdd0 <__vector_23+0x250>
     db0:	88 23       	and	r24, r24
     db2:	a9 f0       	breq	.+42     	; 0xdde <__vector_23+0x25e>
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	09 f0       	breq	.+2      	; 0xdba <__vector_23+0x23a>
     db8:	82 c0       	rjmp	.+260    	; 0xebe <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     dba:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_msg+0x1>
     dbe:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <rx_msg+0x2>
     dc2:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <kilo_uid+0x1>
     dc6:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_uid>
                    cur_motion = MOVE_STOP;
     dca:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
     dce:	77 c0       	rjmp	.+238    	; 0xebe <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     dd0:	83 30       	cpi	r24, 0x03	; 3
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <__vector_23+0x256>
     dd4:	49 c0       	rjmp	.+146    	; 0xe68 <__vector_23+0x2e8>
     dd6:	84 30       	cpi	r24, 0x04	; 4
     dd8:	09 f4       	brne	.+2      	; 0xddc <__vector_23+0x25c>
     dda:	58 c0       	rjmp	.+176    	; 0xe8c <__vector_23+0x30c>
     ddc:	70 c0       	rjmp	.+224    	; 0xebe <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     dde:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     de2:	86 30       	cpi	r24, 0x06	; 6
     de4:	09 f0       	breq	.+2      	; 0xde8 <__vector_23+0x268>
     de6:	6b c0       	rjmp	.+214    	; 0xebe <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     de8:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_uid>
     dec:	80 eb       	ldi	r24, 0xB0	; 176
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     df4:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <kilo_uid+0x1>
     df8:	81 eb       	ldi	r24, 0xB1	; 177
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 0a 0b 	call	0x1614	; 0x1614 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     e00:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <kilo_turn_left>
     e04:	85 e0       	ldi	r24, 0x05	; 5
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 0a 0b 	call	0x1614	; 0x1614 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     e0c:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <kilo_turn_right>
     e10:	89 e0       	ldi	r24, 0x09	; 9
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 0a 0b 	call	0x1614	; 0x1614 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     e18:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <kilo_straight_left>
     e1c:	8c e0       	ldi	r24, 0x0C	; 12
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 0a 0b 	call	0x1614	; 0x1614 <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     e24:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <kilo_straight_right>
     e28:	84 e1       	ldi	r24, 0x14	; 20
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <eeprom_write_byte>
                        motors_off();
     e30:	53 98       	cbi	0x0a, 3	; 10
     e32:	23 98       	cbi	0x04, 3	; 4
     e34:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e38:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
     e42:	3d c0       	rjmp	.+122    	; 0xebe <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     e44:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     e48:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_msg+0x3>
     e4c:	91 30       	cpi	r25, 0x01	; 1
     e4e:	21 f4       	brne	.+8      	; 0xe58 <__vector_23+0x2d8>
     e50:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <kilo_turn_left>
     e54:	89 17       	cp	r24, r25
     e56:	99 f1       	breq	.+102    	; 0xebe <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e58:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_LEFT;
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     e62:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <kilo_turn_left>
     e66:	2b c0       	rjmp	.+86     	; 0xebe <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     e68:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <cur_motion>
     e6c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <rx_msg+0x4>
     e70:	92 30       	cpi	r25, 0x02	; 2
     e72:	21 f4       	brne	.+8      	; 0xe7c <__vector_23+0x2fc>
     e74:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <kilo_turn_right>
     e78:	89 17       	cp	r24, r25
     e7a:	09 f1       	breq	.+66     	; 0xebe <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     e7c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     e80:	92 e0       	ldi	r25, 0x02	; 2
     e82:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     e86:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <kilo_turn_right>
     e8a:	19 c0       	rjmp	.+50     	; 0xebe <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     e8c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <cur_motion>
     e90:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <rx_msg+0x6>
     e94:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <rx_msg+0x5>
     e98:	23 30       	cpi	r18, 0x03	; 3
     e9a:	41 f4       	brne	.+16     	; 0xeac <__vector_23+0x32c>
     e9c:	20 91 6e 01 	lds	r18, 0x016E	; 0x80016e <kilo_straight_right>
     ea0:	82 13       	cpse	r24, r18
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <__vector_23+0x32c>
     ea4:	20 91 6d 01 	lds	r18, 0x016D	; 0x80016d <kilo_straight_left>
     ea8:	92 17       	cp	r25, r18
     eaa:	49 f0       	breq	.+18     	; 0xebe <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     eac:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     eb0:	23 e0       	ldi	r18, 0x03	; 3
     eb2:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     eb6:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     eba:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     ebe:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <rx_msg>
     ec2:	88 23       	and	r24, r24
     ec4:	c9 f1       	breq	.+114    	; 0xf38 <__vector_23+0x3b8>
     ec6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     eca:	86 30       	cpi	r24, 0x06	; 6
     ecc:	a9 f1       	breq	.+106    	; 0xf38 <__vector_23+0x3b8>
                motors_on();
     ece:	53 9a       	sbi	0x0a, 3	; 10
     ed0:	23 9a       	sbi	0x04, 3	; 4
     ed2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ed6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     eda:	86 e0       	ldi	r24, 0x06	; 6
     edc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
     ee0:	2b c0       	rjmp	.+86     	; 0xf38 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     ee2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_state>
     ee6:	86 30       	cpi	r24, 0x06	; 6
     ee8:	81 f0       	breq	.+32     	; 0xf0a <__vector_23+0x38a>
                motors_on();
     eea:	53 9a       	sbi	0x0a, 3	; 10
     eec:	23 9a       	sbi	0x04, 3	; 4
     eee:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     ef2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
     efc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
     f00:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <prev_motion>
                kilo_state = MOVING;
     f04:	86 e0       	ldi	r24, 0x06	; 6
     f06:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	00 90 5c 01 	lds	r0, 0x015C	; 0x80015c <rx_msg>
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <__vector_23+0x398>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <__vector_23+0x394>
     f1c:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <kilo_uid>
     f20:	30 91 6c 01 	lds	r19, 0x016C	; 0x80016c <kilo_uid+0x1>
     f24:	82 23       	and	r24, r18
     f26:	93 23       	and	r25, r19
     f28:	89 2b       	or	r24, r25
     f2a:	21 f0       	breq	.+8      	; 0xf34 <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cur_motion>
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
     f34:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cur_motion>
                    }
                }
            }
        }
    }
}
     f38:	ff 91       	pop	r31
     f3a:	ef 91       	pop	r30
     f3c:	bf 91       	pop	r27
     f3e:	af 91       	pop	r26
     f40:	9f 91       	pop	r25
     f42:	8f 91       	pop	r24
     f44:	7f 91       	pop	r23
     f46:	6f 91       	pop	r22
     f48:	5f 91       	pop	r21
     f4a:	4f 91       	pop	r20
     f4c:	3f 91       	pop	r19
     f4e:	2f 91       	pop	r18
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
     f5e:	fc 01       	movw	r30, r24
     f60:	9c 01       	movw	r18, r24
     f62:	26 5f       	subi	r18, 0xF6	; 246
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
     f6a:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
     f6c:	84 27       	eor	r24, r20
     f6e:	08 2e       	mov	r0, r24
     f70:	82 95       	swap	r24
     f72:	80 7f       	andi	r24, 0xF0	; 240
     f74:	80 25       	eor	r24, r0
     f76:	09 2e       	mov	r0, r25
     f78:	98 2f       	mov	r25, r24
     f7a:	82 95       	swap	r24
     f7c:	8f 70       	andi	r24, 0x0F	; 15
     f7e:	08 26       	eor	r0, r24
     f80:	86 95       	lsr	r24
     f82:	98 27       	eor	r25, r24
     f84:	89 27       	eor	r24, r25
     f86:	88 0f       	add	r24, r24
     f88:	88 0f       	add	r24, r24
     f8a:	88 0f       	add	r24, r24
     f8c:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
     f8e:	e2 17       	cp	r30, r18
     f90:	f3 07       	cpc	r31, r19
     f92:	59 f7       	brne	.-42     	; 0xf6a <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
     f94:	08 95       	ret

00000f96 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
     f96:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
     f98:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
     f9a:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
     f9c:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <tx_mask>
    or tmpreg1, ddrreg
     fa0:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
     fa2:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
     fa4:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     fa6:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
     faa:	20 30       	cpi	r18, 0x00	; 0
     fac:	29 f0       	breq	.+10     	; 0xfb8 <message_send+0x22>
     fae:	00 00       	nop
     fb0:	25 b1       	in	r18, 0x05	; 5
     fb2:	23 2b       	or	r18, r19
     fb4:	25 b9       	out	0x05, r18	; 5
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <message_send+0x2a>
     fb8:	00 00       	nop
     fba:	00 00       	nop
     fbc:	00 00       	nop
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <message_send+0x2a>
     fc0:	00 00       	nop
     fc2:	00 00       	nop
     fc4:	00 00       	nop
     fc6:	30 95       	com	r19
     fc8:	25 b1       	in	r18, 0x05	; 5
     fca:	23 23       	and	r18, r19
     fcc:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
     fce:	2e ea       	ldi	r18, 0xAE	; 174
     fd0:	2a 95       	dec	r18
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
     fd4:	2b ee       	ldi	r18, 0xEB	; 235

00000fd6 <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
     fd6:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
     fd8:	35 ff       	sbrs	r19, 5
    rjmp nocollision
     fda:	0a c0       	rjmp	.+20     	; 0xff0 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
     fdc:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
     fde:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    com tmpreg2
     fe2:	30 95       	com	r19
    in tmpreg1, IR_PORT
     fe4:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
     fe6:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
     fe8:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
     fea:	0f be       	out	0x3f, r0	; 63
    return 0
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	08 95       	ret

00000ff0 <nocollision>:
nocollision:
    nop
     ff0:	00 00       	nop
    dec tmpreg1
     ff2:	2a 95       	dec	r18
    brne checkcollision
     ff4:	81 f7       	brne	.-32     	; 0xfd6 <checkcollision>

    ldi tmpreg1, 0x01
     ff6:	21 e0       	ldi	r18, 0x01	; 1
    irsend
     ff8:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
     ffc:	20 30       	cpi	r18, 0x00	; 0
     ffe:	29 f0       	breq	.+10     	; 0x100a <nocollision+0x1a>
    1000:	00 00       	nop
    1002:	25 b1       	in	r18, 0x05	; 5
    1004:	23 2b       	or	r18, r19
    1006:	25 b9       	out	0x05, r18	; 5
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <nocollision+0x22>
    100a:	00 00       	nop
    100c:	00 00       	nop
    100e:	00 00       	nop
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <nocollision+0x22>
    1012:	00 00       	nop
    1014:	00 00       	nop
    1016:	00 00       	nop
    1018:	30 95       	com	r19
    101a:	25 b1       	in	r18, 0x05	; 5
    101c:	23 23       	and	r18, r19
    101e:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1020:	00 00       	nop
    1022:	24 e5       	ldi	r18, 0x54	; 84
    1024:	2a 95       	dec	r18
    1026:	f1 f7       	brne	.-4      	; 0x1024 <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1028:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    102a:	8c e0       	ldi	r24, 0x0C	; 12

0000102c <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    102c:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    102e:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1030:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    1032:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    1034:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    1036:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1038:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    103a:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    103c:	50 e0       	ldi	r21, 0x00	; 0

0000103e <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    103e:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1040:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    1042:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    1044:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    1046:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    104a:	20 30       	cpi	r18, 0x00	; 0
    104c:	29 f0       	breq	.+10     	; 0x1058 <sendbit+0x1a>
    104e:	00 00       	nop
    1050:	25 b1       	in	r18, 0x05	; 5
    1052:	23 2b       	or	r18, r19
    1054:	25 b9       	out	0x05, r18	; 5
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <sendbit+0x22>
    1058:	00 00       	nop
    105a:	00 00       	nop
    105c:	00 00       	nop
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <sendbit+0x22>
    1060:	00 00       	nop
    1062:	00 00       	nop
    1064:	00 00       	nop
    1066:	30 95       	com	r19
    1068:	25 b1       	in	r18, 0x05	; 5
    106a:	23 23       	and	r18, r19
    106c:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    106e:	00 00       	nop
    1070:	21 e5       	ldi	r18, 0x51	; 81
    1072:	2a 95       	dec	r18
    1074:	f1 f7       	brne	.-4      	; 0x1072 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    1076:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1078:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    107a:	9a 95       	dec	r25
    brne sendbit
    107c:	01 f7       	brne	.-64     	; 0x103e <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    107e:	8a 95       	dec	r24
    brne sendbyte
    1080:	a9 f6       	brne	.-86     	; 0x102c <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1082:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    1084:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    1086:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1088:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    108a:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <tx_mask>
    com tmpreg2
    108e:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1090:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1092:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1094:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1096:	0f be       	out	0x3f, r0	; 63
    return 1
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	08 95       	ret

0000109c <main>:
}

int main() 
{
  kilo_init();
    109c:	0e 94 9b 00 	call	0x136	; 0x136 <kilo_init>
  kilo_start(setup, loop);
    10a0:	62 e7       	ldi	r22, 0x72	; 114
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	81 e7       	ldi	r24, 0x71	; 113
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 93 04 	call	0x926	; 0x926 <kilo_start>

  return 0;
}
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	08 95       	ret

000010b2 <__divmodhi4>:
    10b2:	97 fb       	bst	r25, 7
    10b4:	07 2e       	mov	r0, r23
    10b6:	16 f4       	brtc	.+4      	; 0x10bc <__divmodhi4+0xa>
    10b8:	00 94       	com	r0
    10ba:	07 d0       	rcall	.+14     	; 0x10ca <__divmodhi4_neg1>
    10bc:	77 fd       	sbrc	r23, 7
    10be:	09 d0       	rcall	.+18     	; 0x10d2 <__divmodhi4_neg2>
    10c0:	0e 94 82 08 	call	0x1104	; 0x1104 <__udivmodhi4>
    10c4:	07 fc       	sbrc	r0, 7
    10c6:	05 d0       	rcall	.+10     	; 0x10d2 <__divmodhi4_neg2>
    10c8:	3e f4       	brtc	.+14     	; 0x10d8 <__divmodhi4_exit>

000010ca <__divmodhi4_neg1>:
    10ca:	90 95       	com	r25
    10cc:	81 95       	neg	r24
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	08 95       	ret

000010d2 <__divmodhi4_neg2>:
    10d2:	70 95       	com	r23
    10d4:	61 95       	neg	r22
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255

000010d8 <__divmodhi4_exit>:
    10d8:	08 95       	ret

000010da <__tablejump2__>:
    10da:	ee 0f       	add	r30, r30
    10dc:	ff 1f       	adc	r31, r31
    10de:	05 90       	lpm	r0, Z+
    10e0:	f4 91       	lpm	r31, Z
    10e2:	e0 2d       	mov	r30, r0
    10e4:	09 94       	ijmp

000010e6 <__umulhisi3>:
    10e6:	a2 9f       	mul	r26, r18
    10e8:	b0 01       	movw	r22, r0
    10ea:	b3 9f       	mul	r27, r19
    10ec:	c0 01       	movw	r24, r0
    10ee:	a3 9f       	mul	r26, r19
    10f0:	70 0d       	add	r23, r0
    10f2:	81 1d       	adc	r24, r1
    10f4:	11 24       	eor	r1, r1
    10f6:	91 1d       	adc	r25, r1
    10f8:	b2 9f       	mul	r27, r18
    10fa:	70 0d       	add	r23, r0
    10fc:	81 1d       	adc	r24, r1
    10fe:	11 24       	eor	r1, r1
    1100:	91 1d       	adc	r25, r1
    1102:	08 95       	ret

00001104 <__udivmodhi4>:
    1104:	aa 1b       	sub	r26, r26
    1106:	bb 1b       	sub	r27, r27
    1108:	51 e1       	ldi	r21, 0x11	; 17
    110a:	07 c0       	rjmp	.+14     	; 0x111a <__udivmodhi4_ep>

0000110c <__udivmodhi4_loop>:
    110c:	aa 1f       	adc	r26, r26
    110e:	bb 1f       	adc	r27, r27
    1110:	a6 17       	cp	r26, r22
    1112:	b7 07       	cpc	r27, r23
    1114:	10 f0       	brcs	.+4      	; 0x111a <__udivmodhi4_ep>
    1116:	a6 1b       	sub	r26, r22
    1118:	b7 0b       	sbc	r27, r23

0000111a <__udivmodhi4_ep>:
    111a:	88 1f       	adc	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	5a 95       	dec	r21
    1120:	a9 f7       	brne	.-22     	; 0x110c <__udivmodhi4_loop>
    1122:	80 95       	com	r24
    1124:	90 95       	com	r25
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	08 95       	ret

0000112c <__subsf3>:
    112c:	50 58       	subi	r21, 0x80	; 128

0000112e <__addsf3>:
    112e:	bb 27       	eor	r27, r27
    1130:	aa 27       	eor	r26, r26
    1132:	0e 94 ae 08 	call	0x115c	; 0x115c <__addsf3x>
    1136:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_round>
    113a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_pscA>
    113e:	38 f0       	brcs	.+14     	; 0x114e <__addsf3+0x20>
    1140:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_pscB>
    1144:	20 f0       	brcs	.+8      	; 0x114e <__addsf3+0x20>
    1146:	39 f4       	brne	.+14     	; 0x1156 <__addsf3+0x28>
    1148:	9f 3f       	cpi	r25, 0xFF	; 255
    114a:	19 f4       	brne	.+6      	; 0x1152 <__addsf3+0x24>
    114c:	26 f4       	brtc	.+8      	; 0x1156 <__addsf3+0x28>
    114e:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_nan>
    1152:	0e f4       	brtc	.+2      	; 0x1156 <__addsf3+0x28>
    1154:	e0 95       	com	r30
    1156:	e7 fb       	bst	r30, 7
    1158:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>

0000115c <__addsf3x>:
    115c:	e9 2f       	mov	r30, r25
    115e:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fp_split3>
    1162:	58 f3       	brcs	.-42     	; 0x113a <__addsf3+0xc>
    1164:	ba 17       	cp	r27, r26
    1166:	62 07       	cpc	r22, r18
    1168:	73 07       	cpc	r23, r19
    116a:	84 07       	cpc	r24, r20
    116c:	95 07       	cpc	r25, r21
    116e:	20 f0       	brcs	.+8      	; 0x1178 <__addsf3x+0x1c>
    1170:	79 f4       	brne	.+30     	; 0x1190 <__addsf3x+0x34>
    1172:	a6 f5       	brtc	.+104    	; 0x11dc <__addsf3x+0x80>
    1174:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_zero>
    1178:	0e f4       	brtc	.+2      	; 0x117c <__addsf3x+0x20>
    117a:	e0 95       	com	r30
    117c:	0b 2e       	mov	r0, r27
    117e:	ba 2f       	mov	r27, r26
    1180:	a0 2d       	mov	r26, r0
    1182:	0b 01       	movw	r0, r22
    1184:	b9 01       	movw	r22, r18
    1186:	90 01       	movw	r18, r0
    1188:	0c 01       	movw	r0, r24
    118a:	ca 01       	movw	r24, r20
    118c:	a0 01       	movw	r20, r0
    118e:	11 24       	eor	r1, r1
    1190:	ff 27       	eor	r31, r31
    1192:	59 1b       	sub	r21, r25
    1194:	99 f0       	breq	.+38     	; 0x11bc <__addsf3x+0x60>
    1196:	59 3f       	cpi	r21, 0xF9	; 249
    1198:	50 f4       	brcc	.+20     	; 0x11ae <__addsf3x+0x52>
    119a:	50 3e       	cpi	r21, 0xE0	; 224
    119c:	68 f1       	brcs	.+90     	; 0x11f8 <__addsf3x+0x9c>
    119e:	1a 16       	cp	r1, r26
    11a0:	f0 40       	sbci	r31, 0x00	; 0
    11a2:	a2 2f       	mov	r26, r18
    11a4:	23 2f       	mov	r18, r19
    11a6:	34 2f       	mov	r19, r20
    11a8:	44 27       	eor	r20, r20
    11aa:	58 5f       	subi	r21, 0xF8	; 248
    11ac:	f3 cf       	rjmp	.-26     	; 0x1194 <__addsf3x+0x38>
    11ae:	46 95       	lsr	r20
    11b0:	37 95       	ror	r19
    11b2:	27 95       	ror	r18
    11b4:	a7 95       	ror	r26
    11b6:	f0 40       	sbci	r31, 0x00	; 0
    11b8:	53 95       	inc	r21
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <__addsf3x+0x52>
    11bc:	7e f4       	brtc	.+30     	; 0x11dc <__addsf3x+0x80>
    11be:	1f 16       	cp	r1, r31
    11c0:	ba 0b       	sbc	r27, r26
    11c2:	62 0b       	sbc	r22, r18
    11c4:	73 0b       	sbc	r23, r19
    11c6:	84 0b       	sbc	r24, r20
    11c8:	ba f0       	brmi	.+46     	; 0x11f8 <__addsf3x+0x9c>
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	a1 f0       	breq	.+40     	; 0x11f6 <__addsf3x+0x9a>
    11ce:	ff 0f       	add	r31, r31
    11d0:	bb 1f       	adc	r27, r27
    11d2:	66 1f       	adc	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	88 1f       	adc	r24, r24
    11d8:	c2 f7       	brpl	.-16     	; 0x11ca <__addsf3x+0x6e>
    11da:	0e c0       	rjmp	.+28     	; 0x11f8 <__addsf3x+0x9c>
    11dc:	ba 0f       	add	r27, r26
    11de:	62 1f       	adc	r22, r18
    11e0:	73 1f       	adc	r23, r19
    11e2:	84 1f       	adc	r24, r20
    11e4:	48 f4       	brcc	.+18     	; 0x11f8 <__addsf3x+0x9c>
    11e6:	87 95       	ror	r24
    11e8:	77 95       	ror	r23
    11ea:	67 95       	ror	r22
    11ec:	b7 95       	ror	r27
    11ee:	f7 95       	ror	r31
    11f0:	9e 3f       	cpi	r25, 0xFE	; 254
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <__addsf3x+0x9a>
    11f4:	b0 cf       	rjmp	.-160    	; 0x1156 <__addsf3+0x28>
    11f6:	93 95       	inc	r25
    11f8:	88 0f       	add	r24, r24
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <__addsf3x+0xa2>
    11fc:	99 27       	eor	r25, r25
    11fe:	ee 0f       	add	r30, r30
    1200:	97 95       	ror	r25
    1202:	87 95       	ror	r24
    1204:	08 95       	ret

00001206 <__divsf3>:
    1206:	0e 94 17 09 	call	0x122e	; 0x122e <__divsf3x>
    120a:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_round>
    120e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_pscB>
    1212:	58 f0       	brcs	.+22     	; 0x122a <__divsf3+0x24>
    1214:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_pscA>
    1218:	40 f0       	brcs	.+16     	; 0x122a <__divsf3+0x24>
    121a:	29 f4       	brne	.+10     	; 0x1226 <__divsf3+0x20>
    121c:	5f 3f       	cpi	r21, 0xFF	; 255
    121e:	29 f0       	breq	.+10     	; 0x122a <__divsf3+0x24>
    1220:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    1224:	51 11       	cpse	r21, r1
    1226:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>
    122a:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_nan>

0000122e <__divsf3x>:
    122e:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fp_split3>
    1232:	68 f3       	brcs	.-38     	; 0x120e <__divsf3+0x8>

00001234 <__divsf3_pse>:
    1234:	99 23       	and	r25, r25
    1236:	b1 f3       	breq	.-20     	; 0x1224 <__divsf3+0x1e>
    1238:	55 23       	and	r21, r21
    123a:	91 f3       	breq	.-28     	; 0x1220 <__divsf3+0x1a>
    123c:	95 1b       	sub	r25, r21
    123e:	55 0b       	sbc	r21, r21
    1240:	bb 27       	eor	r27, r27
    1242:	aa 27       	eor	r26, r26
    1244:	62 17       	cp	r22, r18
    1246:	73 07       	cpc	r23, r19
    1248:	84 07       	cpc	r24, r20
    124a:	38 f0       	brcs	.+14     	; 0x125a <__divsf3_pse+0x26>
    124c:	9f 5f       	subi	r25, 0xFF	; 255
    124e:	5f 4f       	sbci	r21, 0xFF	; 255
    1250:	22 0f       	add	r18, r18
    1252:	33 1f       	adc	r19, r19
    1254:	44 1f       	adc	r20, r20
    1256:	aa 1f       	adc	r26, r26
    1258:	a9 f3       	breq	.-22     	; 0x1244 <__divsf3_pse+0x10>
    125a:	35 d0       	rcall	.+106    	; 0x12c6 <__divsf3_pse+0x92>
    125c:	0e 2e       	mov	r0, r30
    125e:	3a f0       	brmi	.+14     	; 0x126e <__divsf3_pse+0x3a>
    1260:	e0 e8       	ldi	r30, 0x80	; 128
    1262:	32 d0       	rcall	.+100    	; 0x12c8 <__divsf3_pse+0x94>
    1264:	91 50       	subi	r25, 0x01	; 1
    1266:	50 40       	sbci	r21, 0x00	; 0
    1268:	e6 95       	lsr	r30
    126a:	00 1c       	adc	r0, r0
    126c:	ca f7       	brpl	.-14     	; 0x1260 <__divsf3_pse+0x2c>
    126e:	2b d0       	rcall	.+86     	; 0x12c6 <__divsf3_pse+0x92>
    1270:	fe 2f       	mov	r31, r30
    1272:	29 d0       	rcall	.+82     	; 0x12c6 <__divsf3_pse+0x92>
    1274:	66 0f       	add	r22, r22
    1276:	77 1f       	adc	r23, r23
    1278:	88 1f       	adc	r24, r24
    127a:	bb 1f       	adc	r27, r27
    127c:	26 17       	cp	r18, r22
    127e:	37 07       	cpc	r19, r23
    1280:	48 07       	cpc	r20, r24
    1282:	ab 07       	cpc	r26, r27
    1284:	b0 e8       	ldi	r27, 0x80	; 128
    1286:	09 f0       	breq	.+2      	; 0x128a <__divsf3_pse+0x56>
    1288:	bb 0b       	sbc	r27, r27
    128a:	80 2d       	mov	r24, r0
    128c:	bf 01       	movw	r22, r30
    128e:	ff 27       	eor	r31, r31
    1290:	93 58       	subi	r25, 0x83	; 131
    1292:	5f 4f       	sbci	r21, 0xFF	; 255
    1294:	3a f0       	brmi	.+14     	; 0x12a4 <__divsf3_pse+0x70>
    1296:	9e 3f       	cpi	r25, 0xFE	; 254
    1298:	51 05       	cpc	r21, r1
    129a:	78 f0       	brcs	.+30     	; 0x12ba <__divsf3_pse+0x86>
    129c:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    12a0:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>
    12a4:	5f 3f       	cpi	r21, 0xFF	; 255
    12a6:	e4 f3       	brlt	.-8      	; 0x12a0 <__divsf3_pse+0x6c>
    12a8:	98 3e       	cpi	r25, 0xE8	; 232
    12aa:	d4 f3       	brlt	.-12     	; 0x12a0 <__divsf3_pse+0x6c>
    12ac:	86 95       	lsr	r24
    12ae:	77 95       	ror	r23
    12b0:	67 95       	ror	r22
    12b2:	b7 95       	ror	r27
    12b4:	f7 95       	ror	r31
    12b6:	9f 5f       	subi	r25, 0xFF	; 255
    12b8:	c9 f7       	brne	.-14     	; 0x12ac <__divsf3_pse+0x78>
    12ba:	88 0f       	add	r24, r24
    12bc:	91 1d       	adc	r25, r1
    12be:	96 95       	lsr	r25
    12c0:	87 95       	ror	r24
    12c2:	97 f9       	bld	r25, 7
    12c4:	08 95       	ret
    12c6:	e1 e0       	ldi	r30, 0x01	; 1
    12c8:	66 0f       	add	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	88 1f       	adc	r24, r24
    12ce:	bb 1f       	adc	r27, r27
    12d0:	62 17       	cp	r22, r18
    12d2:	73 07       	cpc	r23, r19
    12d4:	84 07       	cpc	r24, r20
    12d6:	ba 07       	cpc	r27, r26
    12d8:	20 f0       	brcs	.+8      	; 0x12e2 <__divsf3_pse+0xae>
    12da:	62 1b       	sub	r22, r18
    12dc:	73 0b       	sbc	r23, r19
    12de:	84 0b       	sbc	r24, r20
    12e0:	ba 0b       	sbc	r27, r26
    12e2:	ee 1f       	adc	r30, r30
    12e4:	88 f7       	brcc	.-30     	; 0x12c8 <__divsf3_pse+0x94>
    12e6:	e0 95       	com	r30
    12e8:	08 95       	ret

000012ea <__fixsfsi>:
    12ea:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <__fixunssfsi>
    12ee:	68 94       	set
    12f0:	b1 11       	cpse	r27, r1
    12f2:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>
    12f6:	08 95       	ret

000012f8 <__fixunssfsi>:
    12f8:	0e 94 18 0a 	call	0x1430	; 0x1430 <__fp_splitA>
    12fc:	88 f0       	brcs	.+34     	; 0x1320 <__fixunssfsi+0x28>
    12fe:	9f 57       	subi	r25, 0x7F	; 127
    1300:	98 f0       	brcs	.+38     	; 0x1328 <__fixunssfsi+0x30>
    1302:	b9 2f       	mov	r27, r25
    1304:	99 27       	eor	r25, r25
    1306:	b7 51       	subi	r27, 0x17	; 23
    1308:	b0 f0       	brcs	.+44     	; 0x1336 <__fixunssfsi+0x3e>
    130a:	e1 f0       	breq	.+56     	; 0x1344 <__fixunssfsi+0x4c>
    130c:	66 0f       	add	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	88 1f       	adc	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	1a f0       	brmi	.+6      	; 0x131c <__fixunssfsi+0x24>
    1316:	ba 95       	dec	r27
    1318:	c9 f7       	brne	.-14     	; 0x130c <__fixunssfsi+0x14>
    131a:	14 c0       	rjmp	.+40     	; 0x1344 <__fixunssfsi+0x4c>
    131c:	b1 30       	cpi	r27, 0x01	; 1
    131e:	91 f0       	breq	.+36     	; 0x1344 <__fixunssfsi+0x4c>
    1320:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fp_zero>
    1324:	b1 e0       	ldi	r27, 0x01	; 1
    1326:	08 95       	ret
    1328:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_zero>
    132c:	67 2f       	mov	r22, r23
    132e:	78 2f       	mov	r23, r24
    1330:	88 27       	eor	r24, r24
    1332:	b8 5f       	subi	r27, 0xF8	; 248
    1334:	39 f0       	breq	.+14     	; 0x1344 <__fixunssfsi+0x4c>
    1336:	b9 3f       	cpi	r27, 0xF9	; 249
    1338:	cc f3       	brlt	.-14     	; 0x132c <__fixunssfsi+0x34>
    133a:	86 95       	lsr	r24
    133c:	77 95       	ror	r23
    133e:	67 95       	ror	r22
    1340:	b3 95       	inc	r27
    1342:	d9 f7       	brne	.-10     	; 0x133a <__fixunssfsi+0x42>
    1344:	3e f4       	brtc	.+14     	; 0x1354 <__fixunssfsi+0x5c>
    1346:	90 95       	com	r25
    1348:	80 95       	com	r24
    134a:	70 95       	com	r23
    134c:	61 95       	neg	r22
    134e:	7f 4f       	sbci	r23, 0xFF	; 255
    1350:	8f 4f       	sbci	r24, 0xFF	; 255
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	08 95       	ret

00001356 <__floatunsisf>:
    1356:	e8 94       	clt
    1358:	09 c0       	rjmp	.+18     	; 0x136c <__floatsisf+0x12>

0000135a <__floatsisf>:
    135a:	97 fb       	bst	r25, 7
    135c:	3e f4       	brtc	.+14     	; 0x136c <__floatsisf+0x12>
    135e:	90 95       	com	r25
    1360:	80 95       	com	r24
    1362:	70 95       	com	r23
    1364:	61 95       	neg	r22
    1366:	7f 4f       	sbci	r23, 0xFF	; 255
    1368:	8f 4f       	sbci	r24, 0xFF	; 255
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	99 23       	and	r25, r25
    136e:	a9 f0       	breq	.+42     	; 0x139a <__floatsisf+0x40>
    1370:	f9 2f       	mov	r31, r25
    1372:	96 e9       	ldi	r25, 0x96	; 150
    1374:	bb 27       	eor	r27, r27
    1376:	93 95       	inc	r25
    1378:	f6 95       	lsr	r31
    137a:	87 95       	ror	r24
    137c:	77 95       	ror	r23
    137e:	67 95       	ror	r22
    1380:	b7 95       	ror	r27
    1382:	f1 11       	cpse	r31, r1
    1384:	f8 cf       	rjmp	.-16     	; 0x1376 <__floatsisf+0x1c>
    1386:	fa f4       	brpl	.+62     	; 0x13c6 <__floatsisf+0x6c>
    1388:	bb 0f       	add	r27, r27
    138a:	11 f4       	brne	.+4      	; 0x1390 <__floatsisf+0x36>
    138c:	60 ff       	sbrs	r22, 0
    138e:	1b c0       	rjmp	.+54     	; 0x13c6 <__floatsisf+0x6c>
    1390:	6f 5f       	subi	r22, 0xFF	; 255
    1392:	7f 4f       	sbci	r23, 0xFF	; 255
    1394:	8f 4f       	sbci	r24, 0xFF	; 255
    1396:	9f 4f       	sbci	r25, 0xFF	; 255
    1398:	16 c0       	rjmp	.+44     	; 0x13c6 <__floatsisf+0x6c>
    139a:	88 23       	and	r24, r24
    139c:	11 f0       	breq	.+4      	; 0x13a2 <__floatsisf+0x48>
    139e:	96 e9       	ldi	r25, 0x96	; 150
    13a0:	11 c0       	rjmp	.+34     	; 0x13c4 <__floatsisf+0x6a>
    13a2:	77 23       	and	r23, r23
    13a4:	21 f0       	breq	.+8      	; 0x13ae <__floatsisf+0x54>
    13a6:	9e e8       	ldi	r25, 0x8E	; 142
    13a8:	87 2f       	mov	r24, r23
    13aa:	76 2f       	mov	r23, r22
    13ac:	05 c0       	rjmp	.+10     	; 0x13b8 <__floatsisf+0x5e>
    13ae:	66 23       	and	r22, r22
    13b0:	71 f0       	breq	.+28     	; 0x13ce <__floatsisf+0x74>
    13b2:	96 e8       	ldi	r25, 0x86	; 134
    13b4:	86 2f       	mov	r24, r22
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	2a f0       	brmi	.+10     	; 0x13c6 <__floatsisf+0x6c>
    13bc:	9a 95       	dec	r25
    13be:	66 0f       	add	r22, r22
    13c0:	77 1f       	adc	r23, r23
    13c2:	88 1f       	adc	r24, r24
    13c4:	da f7       	brpl	.-10     	; 0x13bc <__floatsisf+0x62>
    13c6:	88 0f       	add	r24, r24
    13c8:	96 95       	lsr	r25
    13ca:	87 95       	ror	r24
    13cc:	97 f9       	bld	r25, 7
    13ce:	08 95       	ret

000013d0 <__fp_inf>:
    13d0:	97 f9       	bld	r25, 7
    13d2:	9f 67       	ori	r25, 0x7F	; 127
    13d4:	80 e8       	ldi	r24, 0x80	; 128
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	08 95       	ret

000013dc <__fp_nan>:
    13dc:	9f ef       	ldi	r25, 0xFF	; 255
    13de:	80 ec       	ldi	r24, 0xC0	; 192
    13e0:	08 95       	ret

000013e2 <__fp_pscA>:
    13e2:	00 24       	eor	r0, r0
    13e4:	0a 94       	dec	r0
    13e6:	16 16       	cp	r1, r22
    13e8:	17 06       	cpc	r1, r23
    13ea:	18 06       	cpc	r1, r24
    13ec:	09 06       	cpc	r0, r25
    13ee:	08 95       	ret

000013f0 <__fp_pscB>:
    13f0:	00 24       	eor	r0, r0
    13f2:	0a 94       	dec	r0
    13f4:	12 16       	cp	r1, r18
    13f6:	13 06       	cpc	r1, r19
    13f8:	14 06       	cpc	r1, r20
    13fa:	05 06       	cpc	r0, r21
    13fc:	08 95       	ret

000013fe <__fp_round>:
    13fe:	09 2e       	mov	r0, r25
    1400:	03 94       	inc	r0
    1402:	00 0c       	add	r0, r0
    1404:	11 f4       	brne	.+4      	; 0x140a <__fp_round+0xc>
    1406:	88 23       	and	r24, r24
    1408:	52 f0       	brmi	.+20     	; 0x141e <__fp_round+0x20>
    140a:	bb 0f       	add	r27, r27
    140c:	40 f4       	brcc	.+16     	; 0x141e <__fp_round+0x20>
    140e:	bf 2b       	or	r27, r31
    1410:	11 f4       	brne	.+4      	; 0x1416 <__fp_round+0x18>
    1412:	60 ff       	sbrs	r22, 0
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__fp_round+0x20>
    1416:	6f 5f       	subi	r22, 0xFF	; 255
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	8f 4f       	sbci	r24, 0xFF	; 255
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	08 95       	ret

00001420 <__fp_split3>:
    1420:	57 fd       	sbrc	r21, 7
    1422:	90 58       	subi	r25, 0x80	; 128
    1424:	44 0f       	add	r20, r20
    1426:	55 1f       	adc	r21, r21
    1428:	59 f0       	breq	.+22     	; 0x1440 <__fp_splitA+0x10>
    142a:	5f 3f       	cpi	r21, 0xFF	; 255
    142c:	71 f0       	breq	.+28     	; 0x144a <__fp_splitA+0x1a>
    142e:	47 95       	ror	r20

00001430 <__fp_splitA>:
    1430:	88 0f       	add	r24, r24
    1432:	97 fb       	bst	r25, 7
    1434:	99 1f       	adc	r25, r25
    1436:	61 f0       	breq	.+24     	; 0x1450 <__fp_splitA+0x20>
    1438:	9f 3f       	cpi	r25, 0xFF	; 255
    143a:	79 f0       	breq	.+30     	; 0x145a <__fp_splitA+0x2a>
    143c:	87 95       	ror	r24
    143e:	08 95       	ret
    1440:	12 16       	cp	r1, r18
    1442:	13 06       	cpc	r1, r19
    1444:	14 06       	cpc	r1, r20
    1446:	55 1f       	adc	r21, r21
    1448:	f2 cf       	rjmp	.-28     	; 0x142e <__fp_split3+0xe>
    144a:	46 95       	lsr	r20
    144c:	f1 df       	rcall	.-30     	; 0x1430 <__fp_splitA>
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <__fp_splitA+0x30>
    1450:	16 16       	cp	r1, r22
    1452:	17 06       	cpc	r1, r23
    1454:	18 06       	cpc	r1, r24
    1456:	99 1f       	adc	r25, r25
    1458:	f1 cf       	rjmp	.-30     	; 0x143c <__fp_splitA+0xc>
    145a:	86 95       	lsr	r24
    145c:	71 05       	cpc	r23, r1
    145e:	61 05       	cpc	r22, r1
    1460:	08 94       	sec
    1462:	08 95       	ret

00001464 <__fp_zero>:
    1464:	e8 94       	clt

00001466 <__fp_szero>:
    1466:	bb 27       	eor	r27, r27
    1468:	66 27       	eor	r22, r22
    146a:	77 27       	eor	r23, r23
    146c:	cb 01       	movw	r24, r22
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret

00001472 <__mulsf3>:
    1472:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__mulsf3x>
    1476:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__fp_round>
    147a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_pscA>
    147e:	38 f0       	brcs	.+14     	; 0x148e <__mulsf3+0x1c>
    1480:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__fp_pscB>
    1484:	20 f0       	brcs	.+8      	; 0x148e <__mulsf3+0x1c>
    1486:	95 23       	and	r25, r21
    1488:	11 f0       	breq	.+4      	; 0x148e <__mulsf3+0x1c>
    148a:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    148e:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__fp_nan>
    1492:	11 24       	eor	r1, r1
    1494:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>

00001498 <__mulsf3x>:
    1498:	0e 94 10 0a 	call	0x1420	; 0x1420 <__fp_split3>
    149c:	70 f3       	brcs	.-36     	; 0x147a <__mulsf3+0x8>

0000149e <__mulsf3_pse>:
    149e:	95 9f       	mul	r25, r21
    14a0:	c1 f3       	breq	.-16     	; 0x1492 <__mulsf3+0x20>
    14a2:	95 0f       	add	r25, r21
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	55 1f       	adc	r21, r21
    14a8:	62 9f       	mul	r22, r18
    14aa:	f0 01       	movw	r30, r0
    14ac:	72 9f       	mul	r23, r18
    14ae:	bb 27       	eor	r27, r27
    14b0:	f0 0d       	add	r31, r0
    14b2:	b1 1d       	adc	r27, r1
    14b4:	63 9f       	mul	r22, r19
    14b6:	aa 27       	eor	r26, r26
    14b8:	f0 0d       	add	r31, r0
    14ba:	b1 1d       	adc	r27, r1
    14bc:	aa 1f       	adc	r26, r26
    14be:	64 9f       	mul	r22, r20
    14c0:	66 27       	eor	r22, r22
    14c2:	b0 0d       	add	r27, r0
    14c4:	a1 1d       	adc	r26, r1
    14c6:	66 1f       	adc	r22, r22
    14c8:	82 9f       	mul	r24, r18
    14ca:	22 27       	eor	r18, r18
    14cc:	b0 0d       	add	r27, r0
    14ce:	a1 1d       	adc	r26, r1
    14d0:	62 1f       	adc	r22, r18
    14d2:	73 9f       	mul	r23, r19
    14d4:	b0 0d       	add	r27, r0
    14d6:	a1 1d       	adc	r26, r1
    14d8:	62 1f       	adc	r22, r18
    14da:	83 9f       	mul	r24, r19
    14dc:	a0 0d       	add	r26, r0
    14de:	61 1d       	adc	r22, r1
    14e0:	22 1f       	adc	r18, r18
    14e2:	74 9f       	mul	r23, r20
    14e4:	33 27       	eor	r19, r19
    14e6:	a0 0d       	add	r26, r0
    14e8:	61 1d       	adc	r22, r1
    14ea:	23 1f       	adc	r18, r19
    14ec:	84 9f       	mul	r24, r20
    14ee:	60 0d       	add	r22, r0
    14f0:	21 1d       	adc	r18, r1
    14f2:	82 2f       	mov	r24, r18
    14f4:	76 2f       	mov	r23, r22
    14f6:	6a 2f       	mov	r22, r26
    14f8:	11 24       	eor	r1, r1
    14fa:	9f 57       	subi	r25, 0x7F	; 127
    14fc:	50 40       	sbci	r21, 0x00	; 0
    14fe:	9a f0       	brmi	.+38     	; 0x1526 <__mulsf3_pse+0x88>
    1500:	f1 f0       	breq	.+60     	; 0x153e <__mulsf3_pse+0xa0>
    1502:	88 23       	and	r24, r24
    1504:	4a f0       	brmi	.+18     	; 0x1518 <__mulsf3_pse+0x7a>
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	bb 1f       	adc	r27, r27
    150c:	66 1f       	adc	r22, r22
    150e:	77 1f       	adc	r23, r23
    1510:	88 1f       	adc	r24, r24
    1512:	91 50       	subi	r25, 0x01	; 1
    1514:	50 40       	sbci	r21, 0x00	; 0
    1516:	a9 f7       	brne	.-22     	; 0x1502 <__mulsf3_pse+0x64>
    1518:	9e 3f       	cpi	r25, 0xFE	; 254
    151a:	51 05       	cpc	r21, r1
    151c:	80 f0       	brcs	.+32     	; 0x153e <__mulsf3_pse+0xa0>
    151e:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__fp_inf>
    1522:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__fp_szero>
    1526:	5f 3f       	cpi	r21, 0xFF	; 255
    1528:	e4 f3       	brlt	.-8      	; 0x1522 <__mulsf3_pse+0x84>
    152a:	98 3e       	cpi	r25, 0xE8	; 232
    152c:	d4 f3       	brlt	.-12     	; 0x1522 <__mulsf3_pse+0x84>
    152e:	86 95       	lsr	r24
    1530:	77 95       	ror	r23
    1532:	67 95       	ror	r22
    1534:	b7 95       	ror	r27
    1536:	f7 95       	ror	r31
    1538:	e7 95       	ror	r30
    153a:	9f 5f       	subi	r25, 0xFF	; 255
    153c:	c1 f7       	brne	.-16     	; 0x152e <__mulsf3_pse+0x90>
    153e:	fe 2b       	or	r31, r30
    1540:	88 0f       	add	r24, r24
    1542:	91 1d       	adc	r25, r1
    1544:	96 95       	lsr	r25
    1546:	87 95       	ror	r24
    1548:	97 f9       	bld	r25, 7
    154a:	08 95       	ret

0000154c <do_rand>:
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	ec 01       	movw	r28, r24
    1562:	68 81       	ld	r22, Y
    1564:	79 81       	ldd	r23, Y+1	; 0x01
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	9b 81       	ldd	r25, Y+3	; 0x03
    156a:	61 15       	cp	r22, r1
    156c:	71 05       	cpc	r23, r1
    156e:	81 05       	cpc	r24, r1
    1570:	91 05       	cpc	r25, r1
    1572:	21 f4       	brne	.+8      	; 0x157c <do_rand+0x30>
    1574:	64 e2       	ldi	r22, 0x24	; 36
    1576:	79 ed       	ldi	r23, 0xD9	; 217
    1578:	8b e5       	ldi	r24, 0x5B	; 91
    157a:	97 e0       	ldi	r25, 0x07	; 7
    157c:	2d e1       	ldi	r18, 0x1D	; 29
    157e:	33 ef       	ldi	r19, 0xF3	; 243
    1580:	41 e0       	ldi	r20, 0x01	; 1
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	0e 94 18 0b 	call	0x1630	; 0x1630 <__divmodsi4>
    1588:	49 01       	movw	r8, r18
    158a:	5a 01       	movw	r10, r20
    158c:	9b 01       	movw	r18, r22
    158e:	ac 01       	movw	r20, r24
    1590:	a7 ea       	ldi	r26, 0xA7	; 167
    1592:	b1 e4       	ldi	r27, 0x41	; 65
    1594:	0e 94 37 0b 	call	0x166e	; 0x166e <__muluhisi3>
    1598:	6b 01       	movw	r12, r22
    159a:	7c 01       	movw	r14, r24
    159c:	ac ee       	ldi	r26, 0xEC	; 236
    159e:	b4 ef       	ldi	r27, 0xF4	; 244
    15a0:	a5 01       	movw	r20, r10
    15a2:	94 01       	movw	r18, r8
    15a4:	0e 94 45 0b 	call	0x168a	; 0x168a <__mulohisi3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	8c 0d       	add	r24, r12
    15ae:	9d 1d       	adc	r25, r13
    15b0:	ae 1d       	adc	r26, r14
    15b2:	bf 1d       	adc	r27, r15
    15b4:	b7 ff       	sbrs	r27, 7
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <do_rand+0x72>
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	a1 09       	sbc	r26, r1
    15bc:	b0 48       	sbci	r27, 0x80	; 128
    15be:	88 83       	st	Y, r24
    15c0:	99 83       	std	Y+1, r25	; 0x01
    15c2:	aa 83       	std	Y+2, r26	; 0x02
    15c4:	bb 83       	std	Y+3, r27	; 0x03
    15c6:	9f 77       	andi	r25, 0x7F	; 127
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	ff 90       	pop	r15
    15ce:	ef 90       	pop	r14
    15d0:	df 90       	pop	r13
    15d2:	cf 90       	pop	r12
    15d4:	bf 90       	pop	r11
    15d6:	af 90       	pop	r10
    15d8:	9f 90       	pop	r9
    15da:	8f 90       	pop	r8
    15dc:	08 95       	ret

000015de <rand_r>:
    15de:	0e 94 a6 0a 	call	0x154c	; 0x154c <do_rand>
    15e2:	08 95       	ret

000015e4 <rand>:
    15e4:	89 e0       	ldi	r24, 0x09	; 9
    15e6:	91 e0       	ldi	r25, 0x01	; 1
    15e8:	0e 94 a6 0a 	call	0x154c	; 0x154c <do_rand>
    15ec:	08 95       	ret

000015ee <srand>:
    15ee:	a0 e0       	ldi	r26, 0x00	; 0
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <next>
    15f6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <next+0x1>
    15fa:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <next+0x2>
    15fe:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <next+0x3>
    1602:	08 95       	ret

00001604 <eeprom_read_byte>:
    1604:	f9 99       	sbic	0x1f, 1	; 31
    1606:	fe cf       	rjmp	.-4      	; 0x1604 <eeprom_read_byte>
    1608:	92 bd       	out	0x22, r25	; 34
    160a:	81 bd       	out	0x21, r24	; 33
    160c:	f8 9a       	sbi	0x1f, 0	; 31
    160e:	99 27       	eor	r25, r25
    1610:	80 b5       	in	r24, 0x20	; 32
    1612:	08 95       	ret

00001614 <eeprom_write_byte>:
    1614:	26 2f       	mov	r18, r22

00001616 <eeprom_write_r18>:
    1616:	f9 99       	sbic	0x1f, 1	; 31
    1618:	fe cf       	rjmp	.-4      	; 0x1616 <eeprom_write_r18>
    161a:	1f ba       	out	0x1f, r1	; 31
    161c:	92 bd       	out	0x22, r25	; 34
    161e:	81 bd       	out	0x21, r24	; 33
    1620:	20 bd       	out	0x20, r18	; 32
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	fa 9a       	sbi	0x1f, 2	; 31
    1628:	f9 9a       	sbi	0x1f, 1	; 31
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	08 95       	ret

00001630 <__divmodsi4>:
    1630:	05 2e       	mov	r0, r21
    1632:	97 fb       	bst	r25, 7
    1634:	1e f4       	brtc	.+6      	; 0x163c <__divmodsi4+0xc>
    1636:	00 94       	com	r0
    1638:	0e 94 2f 0b 	call	0x165e	; 0x165e <__negsi2>
    163c:	57 fd       	sbrc	r21, 7
    163e:	07 d0       	rcall	.+14     	; 0x164e <__divmodsi4_neg2>
    1640:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__udivmodsi4>
    1644:	07 fc       	sbrc	r0, 7
    1646:	03 d0       	rcall	.+6      	; 0x164e <__divmodsi4_neg2>
    1648:	4e f4       	brtc	.+18     	; 0x165c <__divmodsi4_exit>
    164a:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__negsi2>

0000164e <__divmodsi4_neg2>:
    164e:	50 95       	com	r21
    1650:	40 95       	com	r20
    1652:	30 95       	com	r19
    1654:	21 95       	neg	r18
    1656:	3f 4f       	sbci	r19, 0xFF	; 255
    1658:	4f 4f       	sbci	r20, 0xFF	; 255
    165a:	5f 4f       	sbci	r21, 0xFF	; 255

0000165c <__divmodsi4_exit>:
    165c:	08 95       	ret

0000165e <__negsi2>:
    165e:	90 95       	com	r25
    1660:	80 95       	com	r24
    1662:	70 95       	com	r23
    1664:	61 95       	neg	r22
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	8f 4f       	sbci	r24, 0xFF	; 255
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	08 95       	ret

0000166e <__muluhisi3>:
    166e:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__umulhisi3>
    1672:	a5 9f       	mul	r26, r21
    1674:	90 0d       	add	r25, r0
    1676:	b4 9f       	mul	r27, r20
    1678:	90 0d       	add	r25, r0
    167a:	a4 9f       	mul	r26, r20
    167c:	80 0d       	add	r24, r0
    167e:	91 1d       	adc	r25, r1
    1680:	11 24       	eor	r1, r1
    1682:	08 95       	ret

00001684 <__mulshisi3>:
    1684:	b7 ff       	sbrs	r27, 7
    1686:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__muluhisi3>

0000168a <__mulohisi3>:
    168a:	0e 94 37 0b 	call	0x166e	; 0x166e <__muluhisi3>
    168e:	82 1b       	sub	r24, r18
    1690:	93 0b       	sbc	r25, r19
    1692:	08 95       	ret

00001694 <__udivmodsi4>:
    1694:	a1 e2       	ldi	r26, 0x21	; 33
    1696:	1a 2e       	mov	r1, r26
    1698:	aa 1b       	sub	r26, r26
    169a:	bb 1b       	sub	r27, r27
    169c:	fd 01       	movw	r30, r26
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <__udivmodsi4_ep>

000016a0 <__udivmodsi4_loop>:
    16a0:	aa 1f       	adc	r26, r26
    16a2:	bb 1f       	adc	r27, r27
    16a4:	ee 1f       	adc	r30, r30
    16a6:	ff 1f       	adc	r31, r31
    16a8:	a2 17       	cp	r26, r18
    16aa:	b3 07       	cpc	r27, r19
    16ac:	e4 07       	cpc	r30, r20
    16ae:	f5 07       	cpc	r31, r21
    16b0:	20 f0       	brcs	.+8      	; 0x16ba <__udivmodsi4_ep>
    16b2:	a2 1b       	sub	r26, r18
    16b4:	b3 0b       	sbc	r27, r19
    16b6:	e4 0b       	sbc	r30, r20
    16b8:	f5 0b       	sbc	r31, r21

000016ba <__udivmodsi4_ep>:
    16ba:	66 1f       	adc	r22, r22
    16bc:	77 1f       	adc	r23, r23
    16be:	88 1f       	adc	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	1a 94       	dec	r1
    16c4:	69 f7       	brne	.-38     	; 0x16a0 <__udivmodsi4_loop>
    16c6:	60 95       	com	r22
    16c8:	70 95       	com	r23
    16ca:	80 95       	com	r24
    16cc:	90 95       	com	r25
    16ce:	9b 01       	movw	r18, r22
    16d0:	ac 01       	movw	r20, r24
    16d2:	bd 01       	movw	r22, r26
    16d4:	cf 01       	movw	r24, r30
    16d6:	08 95       	ret

000016d8 <_exit>:
    16d8:	f8 94       	cli

000016da <__stop_program>:
    16da:	ff cf       	rjmp	.-2      	; 0x16da <__stop_program>
