
build/nonblocked-movement.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	33 05       	cpc	r19, r3
      6a:	8a 05       	cpc	r24, r10
      6c:	9e 05       	cpc	r25, r14
      6e:	cf 05       	cpc	r28, r15
      70:	d6 05       	cpc	r29, r6
      72:	b5 05       	cpc	r27, r5
      74:	d9 05       	cpc	r29, r9
      76:	37 07       	cpc	r19, r23
      78:	28 08       	sbc	r2, r8
      7a:	28 08       	sbc	r2, r8
      7c:	40 07       	cpc	r20, r16
      7e:	43 07       	cpc	r20, r19
      80:	46 07       	cpc	r20, r22
      82:	48 07       	cpc	r20, r24
      84:	4a 07       	cpc	r20, r26
      86:	4c 07       	cpc	r20, r28
      88:	fd 07       	cpc	r31, r29
      8a:	5e 07       	cpc	r21, r30

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e4 ef       	ldi	r30, 0xF4	; 244
      b8:	f7 e1       	ldi	r31, 0x17	; 23
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a8 37       	cpi	r26, 0x78	; 120
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <main>
      da:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <set_motion>:

// Function to handle motion.
void set_motion(int new_motion)
{
    // Only take an action if the motion is being changed.
    if (current_motion != new_motion)
      e2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
      e6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
      ea:	28 17       	cp	r18, r24
      ec:	39 07       	cpc	r19, r25
      ee:	21 f1       	breq	.+72     	; 0x138 <set_motion+0x56>
    {
        current_motion = new_motion;
      f0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
      f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
        
        if (current_motion == STOP)
      f8:	00 97       	sbiw	r24, 0x00	; 0
      fa:	11 f4       	brne	.+4      	; 0x100 <set_motion+0x1e>
        {
            set_motors(0, 0);
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	19 c0       	rjmp	.+50     	; 0x132 <set_motion+0x50>
        }
        else if (current_motion == FORWARD)
     100:	81 30       	cpi	r24, 0x01	; 1
     102:	91 05       	cpc	r25, r1
     104:	39 f4       	brne	.+14     	; 0x114 <set_motion+0x32>
        {
            spinup_motors();
     106:	0e 94 33 02 	call	0x466	; 0x466 <spinup_motors>
            set_motors(kilo_straight_left, kilo_straight_right);
     10a:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <kilo_straight_right>
     10e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <kilo_straight_left>
     112:	10 c0       	rjmp	.+32     	; 0x134 <set_motion+0x52>
        }
        else if (current_motion == LEFT)
     114:	82 30       	cpi	r24, 0x02	; 2
     116:	91 05       	cpc	r25, r1
     118:	31 f4       	brne	.+12     	; 0x126 <set_motion+0x44>
        {
            spinup_motors();
     11a:	0e 94 33 02 	call	0x466	; 0x466 <spinup_motors>
            set_motors(kilo_turn_left, 0);
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <kilo_turn_left>
     124:	07 c0       	rjmp	.+14     	; 0x134 <set_motion+0x52>
        }
        else if (current_motion == RIGHT)
     126:	03 97       	sbiw	r24, 0x03	; 3
     128:	39 f4       	brne	.+14     	; 0x138 <set_motion+0x56>
        {
            spinup_motors();
     12a:	0e 94 33 02 	call	0x466	; 0x466 <spinup_motors>
            set_motors(0, kilo_turn_right);
     12e:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <kilo_turn_right>
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0c 94 2e 02 	jmp	0x45c	; 0x45c <set_motors>
     138:	08 95       	ret

0000013a <setup>:
    }
}

void setup()
{
    set_motion(STOP); // redundant
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0c 94 71 00 	jmp	0xe2	; 0xe2 <set_motion>

00000142 <loop>:
}

void loop()
{
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
    if(kilo_ticks > (last_changed + 64))
     146:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <kilo_ticks>
     14a:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <kilo_ticks+0x1>
     14e:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <kilo_ticks+0x2>
     152:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <kilo_ticks+0x3>
     156:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <last_changed>
     15a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <last_changed+0x1>
     15e:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <last_changed+0x2>
     162:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <last_changed+0x3>
     166:	80 5c       	subi	r24, 0xC0	; 192
     168:	9f 4f       	sbci	r25, 0xFF	; 255
     16a:	af 4f       	sbci	r26, 0xFF	; 255
     16c:	bf 4f       	sbci	r27, 0xFF	; 255
     16e:	84 17       	cp	r24, r20
     170:	95 07       	cpc	r25, r21
     172:	a6 07       	cpc	r26, r22
     174:	b7 07       	cpc	r27, r23
     176:	00 f5       	brcc	.+64     	; 0x1b8 <loop+0x76>
    {
        last_changed = kilo_ticks; // To remember the current time... I guess?
     178:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <kilo_ticks>
     17c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <kilo_ticks+0x1>
     180:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <kilo_ticks+0x2>
     184:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <kilo_ticks+0x3>
     188:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <last_changed>
     18c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <last_changed+0x1>
     190:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <last_changed+0x2>
     194:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <last_changed+0x3>
        state_changed = 1;
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <state_changed+0x1>
     1a0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <state_changed>
        set_color(RGB(1,1,0));
     1a4:	85 e0       	ldi	r24, 0x05	; 5
     1a6:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
        delay(100);
     1aa:	84 e6       	ldi	r24, 0x64	; 100
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 23 02 	call	0x446	; 0x446 <delay>
        set_color(RGB(0,0,0));
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
    }
    if(state_changed == 1)
     1b8:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <state_changed>
     1bc:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <state_changed+0x1>
     1c0:	c1 30       	cpi	r28, 0x01	; 1
     1c2:	d1 05       	cpc	r29, r1
     1c4:	e1 f5       	brne	.+120    	; 0x23e <loop+0xfc>
    {
        state_changed = 0;
     1c6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <state_changed+0x1>
     1ca:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <state_changed>
        switch (state)
     1ce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
     1d2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <state+0x1>
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	91 05       	cpc	r25, r1
     1da:	89 f0       	breq	.+34     	; 0x1fe <loop+0xbc>
     1dc:	82 30       	cpi	r24, 0x02	; 2
     1de:	91 05       	cpc	r25, r1
     1e0:	e1 f0       	breq	.+56     	; 0x21a <loop+0xd8>
     1e2:	89 2b       	or	r24, r25
     1e4:	31 f5       	brne	.+76     	; 0x232 <loop+0xf0>
        {
            case 0:
                set_color(RGB(0,1,0));
     1e6:	84 e0       	ldi	r24, 0x04	; 4
     1e8:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
                set_motion(FORWARD);
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 71 00 	call	0xe2	; 0xe2 <set_motion>
                state = 1;
     1f4:	d0 93 11 01 	sts	0x0111, r29	; 0x800111 <state+0x1>
     1f8:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <state>
     1fc:	20 c0       	rjmp	.+64     	; 0x23e <loop+0xfc>
                break;
            case 1:
                set_color(RGB(1,0,0));
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
                set_motion(LEFT);
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 71 00 	call	0xe2	; 0xe2 <set_motion>
                state = 2;
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <state+0x1>
     214:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
     218:	12 c0       	rjmp	.+36     	; 0x23e <loop+0xfc>
                break;
            case 2:
                set_color(RGB(0,0,1));
     21a:	80 e1       	ldi	r24, 0x10	; 16
     21c:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
                set_motion(RIGHT);
     220:	83 e0       	ldi	r24, 0x03	; 3
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 71 00 	call	0xe2	; 0xe2 <set_motion>
                state = 0;
     228:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state+0x1>
     22c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
     230:	06 c0       	rjmp	.+12     	; 0x23e <loop+0xfc>
                break;
            default:
                set_motion(STOP); // again, redundant most likely
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
                break;
        }
    }
}
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
                set_color(RGB(0,0,1));
                set_motion(RIGHT);
                state = 0;
                break;
            default:
                set_motion(STOP); // again, redundant most likely
     23a:	0c 94 71 00 	jmp	0xe2	; 0xe2 <set_motion>
                break;
        }
    }
}
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     244:	08 95       	ret

00000246 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	08 95       	ret

0000024c <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     24c:	08 95       	ret

0000024e <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     24e:	df 92       	push	r13
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
    cli();
     25c:	f8 94       	cli

    ports_off();
     25e:	14 b8       	out	0x04, r1	; 4
     260:	17 b8       	out	0x07, r1	; 7
     262:	1a b8       	out	0x0a, r1	; 10
     264:	15 b8       	out	0x05, r1	; 5
     266:	18 b8       	out	0x08, r1	; 8
     268:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     26a:	52 9a       	sbi	0x0a, 2	; 10
     26c:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     26e:	14 bc       	out	0x24, r1	; 36
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	85 bd       	out	0x25, r24	; 37
     274:	8f ef       	ldi	r24, 0xFF	; 255
     276:	87 bd       	out	0x27, r24	; 39
     278:	82 e0       	ldi	r24, 0x02	; 2
     27a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    rx_timer_setup();
     27e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
     282:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     286:	2f e8       	ldi	r18, 0x8F	; 143
     288:	3b e0       	ldi	r19, 0x0B	; 11
     28a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     28e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     292:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    motors_setup();
     296:	53 98       	cbi	0x0a, 3	; 10
     298:	23 98       	cbi	0x04, 3	; 4
     29a:	91 ea       	ldi	r25, 0xA1	; 161
     29c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     2a0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     2a4:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     2a8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    acomp_setup();
     2ac:	8b e0       	ldi	r24, 0x0B	; 11
     2ae:	80 bf       	out	0x30, r24	; 48
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
    adc_setup();
     2b6:	86 e0       	ldi	r24, 0x06	; 6
     2b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     2bc:	83 e8       	ldi	r24, 0x83	; 131
     2be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2c6:	80 64       	ori	r24, 0x40	; 64
     2c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2d0:	86 fd       	sbrc	r24, 6
     2d2:	fc cf       	rjmp	.-8      	; 0x2cc <kilo_init+0x7e>
    adc_trigger_high_gain();
     2d4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     2d8:	83 ea       	ldi	r24, 0xA3	; 163
     2da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
    if (osccal != 0xFF)
     2ec:	8f 3f       	cpi	r24, 0xFF	; 255
     2ee:	11 f0       	breq	.+4      	; 0x2f4 <kilo_init+0xa6>
        OSCCAL = osccal;
     2f0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7f8066>

    rx_busy = 0;
     2f4:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <rx_busy>
    rx_leadingbit = 1;
     2f8:	c1 e0       	ldi	r28, 0x01	; 1
     2fa:	c0 93 1a 01 	sts	0x011A, r28	; 0x80011a <rx_leadingbit>
    rx_leadingbyte = 1;
     2fe:	c0 93 5e 01 	sts	0x015E, r28	; 0x80015e <rx_leadingbyte>
    rx_byteindex = 0;
     302:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <rx_byteindex>
    rx_bytevalue = 0;
     306:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     30a:	80 e9       	ldi	r24, 0x90	; 144
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
     312:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     316:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <tx_mask>
     31a:	88 73       	andi	r24, 0x38	; 56
     31c:	11 f0       	breq	.+4      	; 0x322 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     31e:	c0 93 37 01 	sts	0x0137, r28	; 0x800137 <tx_mask>
    tx_clock = 0;
     322:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <tx_clock+0x1>
     326:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <tx_clock>
    tx_increment = 255;
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <tx_increment+0x1>
     332:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <tx_increment>
    kilo_ticks = 0;
     336:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <kilo_ticks>
     33a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <kilo_ticks+0x1>
     33e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <kilo_ticks+0x2>
     342:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <kilo_ticks+0x3>
    kilo_state = IDLE;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
    kilo_tx_period = 3906;
     34c:	82 e4       	ldi	r24, 0x42	; 66
     34e:	9f e0       	ldi	r25, 0x0F	; 15
     350:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <kilo_tx_period+0x1>
     354:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     358:	80 eb       	ldi	r24, 0xB0	; 176
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
     360:	c8 2f       	mov	r28, r24
     362:	81 eb       	ldi	r24, 0xB1	; 177
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
     36a:	2c 2f       	mov	r18, r28
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	38 2b       	or	r19, r24
     370:	30 93 74 01 	sts	0x0174, r19	; 0x800174 <kilo_uid+0x1>
     374:	20 93 73 01 	sts	0x0173, r18	; 0x800173 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     378:	85 e0       	ldi	r24, 0x05	; 5
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
     380:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     384:	89 e0       	ldi	r24, 0x09	; 9
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
     38c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     390:	8c e0       	ldi	r24, 0x0C	; 12
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
     398:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     39c:	84 e1       	ldi	r24, 0x14	; 20
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
     3a4:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <kilo_straight_right>
     3a8:	02 e4       	ldi	r16, 0x42	; 66
     3aa:	11 e0       	ldi	r17, 0x01	; 1
     3ac:	5b e1       	ldi	r21, 0x1B	; 27
     3ae:	e5 2e       	mov	r14, r21
     3b0:	51 e0       	ldi	r21, 0x01	; 1
     3b2:	f5 2e       	mov	r15, r21
     3b4:	c0 e2       	ldi	r28, 0x20	; 32
     3b6:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     3b8:	ce 01       	movw	r24, r28
     3ba:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
     3be:	d8 2e       	mov	r13, r24
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
     3c8:	2d 2d       	mov	r18, r13
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	32 2f       	mov	r19, r18
     3ce:	22 27       	eor	r18, r18
     3d0:	28 2b       	or	r18, r24
     3d2:	f8 01       	movw	r30, r16
     3d4:	21 93       	st	Z+, r18
     3d6:	31 93       	st	Z+, r19
     3d8:	8f 01       	movw	r16, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     3da:	ce 01       	movw	r24, r28
     3dc:	c0 96       	adiw	r24, 0x30	; 48
     3de:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
     3e2:	d8 2e       	mov	r13, r24
     3e4:	ce 01       	movw	r24, r28
     3e6:	c1 96       	adiw	r24, 0x31	; 49
     3e8:	0e 94 8e 0b 	call	0x171c	; 0x171c <eeprom_read_byte>
     3ec:	2d 2d       	mov	r18, r13
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	32 2f       	mov	r19, r18
     3f2:	22 27       	eor	r18, r18
     3f4:	28 2b       	or	r18, r24
     3f6:	f7 01       	movw	r30, r14
     3f8:	21 93       	st	Z+, r18
     3fa:	31 93       	st	Z+, r19
     3fc:	7f 01       	movw	r14, r30
     3fe:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     400:	cc 33       	cpi	r28, 0x3C	; 60
     402:	d1 05       	cpc	r29, r1
     404:	c9 f6       	brne	.-78     	; 0x3b8 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     406:	78 94       	sei
}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	df 90       	pop	r13
     416:	08 95       	ret

00000418 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     418:	1f 92       	push	r1
     41a:	0f 92       	push	r0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	0f 92       	push	r0
     420:	11 24       	eor	r1, r1
     422:	8f 93       	push	r24
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	a8 95       	wdr
     42a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     42e:	88 61       	ori	r24, 0x18	; 24
     430:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     434:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     438:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     43a:	8f 91       	pop	r24
     43c:	0f 90       	pop	r0
     43e:	0f be       	out	0x3f, r0	; 63
     440:	0f 90       	pop	r0
     442:	1f 90       	pop	r1
     444:	18 95       	reti

00000446 <delay>:
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	41 f0       	breq	.+16     	; 0x45a <delay+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44a:	ef ec       	ldi	r30, 0xCF	; 207
     44c:	f7 e0       	ldi	r31, 0x07	; 7
     44e:	31 97       	sbiw	r30, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <delay+0x8>
     452:	00 c0       	rjmp	.+0      	; 0x454 <delay+0xe>
     454:	00 00       	nop
        _delay_ms(1);
        ms--;
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f6 cf       	rjmp	.-20     	; 0x446 <delay>
    }
}
     45a:	08 95       	ret

0000045c <set_motors>:

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     45c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     460:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     464:	08 95       	ret

00000466 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     46c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
     470:	8f e0       	ldi	r24, 0x0F	; 15
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0c 94 23 02 	jmp	0x446	; 0x446 <delay>

00000478 <get_ambientlight>:
}

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     478:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <rx_busy>
     47c:	81 11       	cpse	r24, r1
     47e:	1e c0       	rjmp	.+60     	; 0x4bc <get_ambientlight+0x44>
        cli();
     480:	f8 94       	cli
        adc_setup_conversion(7);
     482:	87 e0       	ldi	r24, 0x07	; 7
     484:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     488:	83 e8       	ldi	r24, 0x83	; 131
     48a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     48e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     492:	80 64       	ori	r24, 0x40	; 64
     494:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     498:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     49c:	86 fd       	sbrc	r24, 6
     49e:	fc cf       	rjmp	.-8      	; 0x498 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     4a0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     4a8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4ac:	23 ea       	ldi	r18, 0xA3	; 163
     4ae:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     4b8:	78 94       	sei
     4ba:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     4bc:	8f ef       	ldi	r24, 0xFF	; 255
     4be:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     4c0:	08 95       	ret

000004c2 <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     4c2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <rx_busy>
     4c6:	81 11       	cpse	r24, r1
     4c8:	1e c0       	rjmp	.+60     	; 0x506 <get_temperature+0x44>
        cli();
     4ca:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     4cc:	88 ec       	ldi	r24, 0xC8	; 200
     4ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     4d2:	87 e8       	ldi	r24, 0x87	; 135
     4d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     4d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4dc:	80 64       	ori	r24, 0x40	; 64
     4de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     4e2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4e6:	86 fd       	sbrc	r24, 6
     4e8:	fc cf       	rjmp	.-8      	; 0x4e2 <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     4ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     4ee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     4f2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     4f6:	23 ea       	ldi	r18, 0xA3	; 163
     4f8:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
        sei();                                    // reenable interrupts
     502:	78 94       	sei
     504:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     506:	8f ef       	ldi	r24, 0xFF	; 255
     508:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     50a:	08 95       	ret

0000050c <rand_hard>:

uint8_t rand_hard() {
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t num = 0;
     514:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     516:	e3 ea       	ldi	r30, 0xA3	; 163
     518:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     51a:	c6 e0       	ldi	r28, 0x06	; 6
     51c:	d3 e8       	ldi	r29, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     51e:	a1 e0       	ldi	r26, 0x01	; 1
     520:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     522:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     524:	f8 94       	cli
            adc_setup_conversion(6);
     526:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     52a:	d0 93 7a 00 	sts	0x007A, r29	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_start_conversion();
     52e:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     532:	40 64       	ori	r20, 0x40	; 64
     534:	40 93 7a 00 	sts	0x007A, r20	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     538:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     53c:	46 fd       	sbrc	r20, 6
     53e:	fc cf       	rjmp	.-8      	; 0x538 <rand_hard+0x2c>
            a = ADCW&0x1;
     540:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     544:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     548:	41 70       	andi	r20, 0x01	; 1
            adc_start_conversion();
     54a:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     54e:	50 64       	ori	r21, 0x40	; 64
     550:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
            adc_finish_conversion();
     554:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     558:	56 fd       	sbrc	r21, 6
     55a:	fc cf       	rjmp	.-8      	; 0x554 <rand_hard+0x48>
            b = ADCW&0x1;
     55c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     560:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
            adc_trigger_high_gain();
     564:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     568:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     56c:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
            sei();
     570:	78 94       	sei
            tries++;
     572:	9f 5f       	subi	r25, 0xFF	; 255
        } while (a == b && tries < 128);
     574:	61 70       	andi	r22, 0x01	; 1
     576:	46 17       	cp	r20, r22
     578:	51 f0       	breq	.+20     	; 0x58e <rand_hard+0x82>
        if (a)
     57a:	44 23       	and	r20, r20
     57c:	59 f0       	breq	.+22     	; 0x594 <rand_hard+0x88>
            num |= (1<<i);
     57e:	ad 01       	movw	r20, r26
     580:	02 2e       	mov	r0, r18
     582:	01 c0       	rjmp	.+2      	; 0x586 <rand_hard+0x7a>
     584:	44 0f       	add	r20, r20
     586:	0a 94       	dec	r0
     588:	ea f7       	brpl	.-6      	; 0x584 <rand_hard+0x78>
     58a:	84 2b       	or	r24, r20
     58c:	03 c0       	rjmp	.+6      	; 0x594 <rand_hard+0x88>
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     58e:	90 38       	cpi	r25, 0x80	; 128
     590:	49 f6       	brne	.-110    	; 0x524 <rand_hard+0x18>
     592:	f3 cf       	rjmp	.-26     	; 0x57a <rand_hard+0x6e>
     594:	2f 5f       	subi	r18, 0xFF	; 255
     596:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     598:	28 30       	cpi	r18, 0x08	; 8
     59a:	31 05       	cpc	r19, r1
     59c:	09 f0       	breq	.+2      	; 0x5a0 <rand_hard+0x94>
     59e:	c1 cf       	rjmp	.-126    	; 0x522 <rand_hard+0x16>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     5a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5aa:	98 e0       	ldi	r25, 0x08	; 8
     5ac:	89 9f       	mul	r24, r25
     5ae:	90 01       	movw	r18, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	28 27       	eor	r18, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     5b4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <accumulator>
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	89 0f       	add	r24, r25
     5bc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <accumulator>
     5c0:	82 2f       	mov	r24, r18
     5c2:	82 95       	swap	r24
     5c4:	86 95       	lsr	r24
     5c6:	87 70       	andi	r24, 0x07	; 7
     5c8:	28 27       	eor	r18, r24
     5ca:	96 95       	lsr	r25
     5cc:	96 95       	lsr	r25
     5ce:	82 2f       	mov	r24, r18
     5d0:	89 27       	eor	r24, r25
     5d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    return seed;
}
     5d6:	08 95       	ret

000005d8 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     5d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     5dc:	08 95       	ret

000005de <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     5de:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <rx_busy>
     5e2:	81 11       	cpse	r24, r1
     5e4:	16 c0       	rjmp	.+44     	; 0x612 <get_voltage+0x34>
        cli();                                    // disable interrupts
     5e6:	f8 94       	cli
        adc_setup_conversion(6);
     5e8:	86 e0       	ldi	r24, 0x06	; 6
     5ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     5ee:	83 e8       	ldi	r24, 0x83	; 131
     5f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_start_conversion();
     5f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     5f8:	80 64       	ori	r24, 0x40	; 64
     5fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        adc_finish_conversion();
     5fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     602:	86 fd       	sbrc	r24, 6
     604:	fc cf       	rjmp	.-8      	; 0x5fe <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     606:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     60a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     60e:	78 94       	sei
     610:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     616:	08 95       	ret

00000618 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     618:	2f 92       	push	r2
     61a:	3f 92       	push	r3
     61c:	4f 92       	push	r4
     61e:	5f 92       	push	r5
     620:	6f 92       	push	r6
     622:	7f 92       	push	r7
     624:	8f 92       	push	r8
     626:	9f 92       	push	r9
     628:	af 92       	push	r10
     62a:	bf 92       	push	r11
     62c:	cf 92       	push	r12
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     63e:	fc 01       	movw	r30, r24
     640:	c2 81       	ldd	r28, Z+2	; 0x02
     642:	d3 81       	ldd	r29, Z+3	; 0x03
     644:	c4 38       	cpi	r28, 0x84	; 132
     646:	f3 e0       	ldi	r31, 0x03	; 3
     648:	df 07       	cpc	r29, r31
     64a:	0c f0       	brlt	.+2      	; 0x64e <estimate_distance+0x36>
     64c:	7e c0       	rjmp	.+252    	; 0x74a <estimate_distance+0x132>
        if (dist->high_gain > kilo_irhigh[0]) {
     64e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <kilo_irhigh>
     652:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <kilo_irhigh+0x1>
     656:	8c 17       	cp	r24, r28
     658:	9d 07       	cpc	r25, r29
     65a:	08 f4       	brcc	.+2      	; 0x65e <estimate_distance+0x46>
     65c:	6f c0       	rjmp	.+222    	; 0x73c <estimate_distance+0x124>
     65e:	ed e1       	ldi	r30, 0x1D	; 29
     660:	f1 e0       	ldi	r31, 0x01	; 1
     662:	11 e0       	ldi	r17, 0x01	; 1
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     664:	81 91       	ld	r24, Z+
     666:	91 91       	ld	r25, Z+
     668:	8c 17       	cp	r24, r28
     66a:	9d 07       	cpc	r25, r29
     66c:	20 f0       	brcs	.+8      	; 0x676 <estimate_distance+0x5e>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     66e:	1f 5f       	subi	r17, 0xFF	; 255
     670:	1e 30       	cpi	r17, 0x0E	; 14
     672:	c1 f7       	brne	.-16     	; 0x664 <estimate_distance+0x4c>
    return voltage;
}

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
     674:	1d e0       	ldi	r17, 0x0D	; 13
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     676:	81 2f       	mov	r24, r17
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	fc 01       	movw	r30, r24
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	e5 5e       	subi	r30, 0xE5	; 229
     682:	fe 4f       	sbci	r31, 0xFE	; 254
     684:	e0 80       	ld	r14, Z
     686:	f1 80       	ldd	r15, Z+1	; 0x01
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	fc 01       	movw	r30, r24
     68e:	e7 5e       	subi	r30, 0xE7	; 231
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	80 81       	ld	r24, Z
     694:	91 81       	ldd	r25, Z+1	; 0x01
     696:	b7 01       	movw	r22, r14
     698:	68 1b       	sub	r22, r24
     69a:	79 0b       	sbc	r23, r25
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 37 0a 	call	0x146e	; 0x146e <__floatunsisf>
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3>
     6ac:	4b 01       	movw	r8, r22
     6ae:	5c 01       	movw	r10, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     6b0:	be 01       	movw	r22, r28
     6b2:	0d 2e       	mov	r0, r29
     6b4:	00 0c       	add	r0, r0
     6b6:	88 0b       	sbc	r24, r24
     6b8:	99 0b       	sbc	r25, r25
     6ba:	0e 94 39 0a 	call	0x1472	; 0x1472 <__floatsisf>
     6be:	2b 01       	movw	r4, r22
     6c0:	3c 01       	movw	r6, r24
     6c2:	b7 01       	movw	r22, r14
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 37 0a 	call	0x146e	; 0x146e <__floatunsisf>
     6cc:	6b 01       	movw	r12, r22
     6ce:	7c 01       	movw	r14, r24
     6d0:	61 2f       	mov	r22, r17
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 37 0a 	call	0x146e	; 0x146e <__floatunsisf>
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	5f e3       	ldi	r21, 0x3F	; 63
     6e4:	0e 94 c5 0a 	call	0x158a	; 0x158a <__mulsf3>
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	a9 01       	movw	r20, r18
     6ee:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3>
     6f2:	a5 01       	movw	r20, r10
     6f4:	94 01       	movw	r18, r8
     6f6:	0e 94 c5 0a 	call	0x158a	; 0x158a <__mulsf3>
     6fa:	9b 01       	movw	r18, r22
     6fc:	ac 01       	movw	r20, r24
     6fe:	c7 01       	movw	r24, r14
     700:	b6 01       	movw	r22, r12
     702:	0e 94 22 09 	call	0x1244	; 0x1244 <__subsf3>
     706:	9b 01       	movw	r18, r22
     708:	ac 01       	movw	r20, r24
     70a:	c3 01       	movw	r24, r6
     70c:	b2 01       	movw	r22, r4
     70e:	0e 94 22 09 	call	0x1244	; 0x1244 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e2       	ldi	r20, 0x20	; 32
     718:	51 e4       	ldi	r21, 0x41	; 65
     71a:	0e 94 c5 0a 	call	0x158a	; 0x158a <__mulsf3>
     71e:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fixsfsi>
     722:	7b 01       	movw	r14, r22
     724:	c5 01       	movw	r24, r10
     726:	b4 01       	movw	r22, r8
     728:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fixsfsi>
     72c:	ab 01       	movw	r20, r22
     72e:	bc 01       	movw	r22, r24
     730:	c7 01       	movw	r24, r14
     732:	ba 01       	movw	r22, r20
     734:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__divmodhi4>
     738:	16 2f       	mov	r17, r22
     73a:	01 c0       	rjmp	.+2      	; 0x73e <estimate_distance+0x126>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     73c:	10 e0       	ldi	r17, 0x00	; 0
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     73e:	cd 3b       	cpi	r28, 0xBD	; 189
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	d8 07       	cpc	r29, r24
     744:	0c f4       	brge	.+2      	; 0x748 <estimate_distance+0x130>
     746:	ca c0       	rjmp	.+404    	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
     748:	01 c0       	rjmp	.+2      	; 0x74c <estimate_distance+0x134>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     74a:	1f ef       	ldi	r17, 0xFF	; 255
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     74c:	f1 01       	movw	r30, r2
     74e:	c0 80       	ld	r12, Z
     750:	d1 80       	ldd	r13, Z+1	; 0x01
     752:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <kilo_irlow>
     756:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <kilo_irlow+0x1>
     75a:	8c 15       	cp	r24, r12
     75c:	9d 05       	cpc	r25, r13
     75e:	88 f0       	brcs	.+34     	; 0x782 <estimate_distance+0x16a>
     760:	e4 e4       	ldi	r30, 0x44	; 68
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	38 2e       	mov	r3, r24
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     76a:	e1 90       	ld	r14, Z+
     76c:	f1 90       	ld	r15, Z+
     76e:	ec 14       	cp	r14, r12
     770:	fd 04       	cpc	r15, r13
     772:	08 f4       	brcc	.+2      	; 0x776 <estimate_distance+0x15e>
     774:	58 c0       	rjmp	.+176    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     776:	01 96       	adiw	r24, 0x01	; 1

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     778:	8e 30       	cpi	r24, 0x0E	; 14
     77a:	91 05       	cpc	r25, r1
     77c:	a9 f7       	brne	.-22     	; 0x768 <estimate_distance+0x150>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     77e:	0a e5       	ldi	r16, 0x5A	; 90
     780:	01 c0       	rjmp	.+2      	; 0x784 <estimate_distance+0x16c>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     782:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     784:	1f 3f       	cpi	r17, 0xFF	; 255
     786:	09 f4       	brne	.+2      	; 0x78a <estimate_distance+0x172>
     788:	4b c0       	rjmp	.+150    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     78a:	be 01       	movw	r22, r28
     78c:	dd 0f       	add	r29, r29
     78e:	88 0b       	sbc	r24, r24
     790:	99 0b       	sbc	r25, r25
     792:	0e 94 39 0a 	call	0x1472	; 0x1472 <__floatsisf>
     796:	6b 01       	movw	r12, r22
     798:	7c 01       	movw	r14, r24
     79a:	61 2f       	mov	r22, r17
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 37 0a 	call	0x146e	; 0x146e <__floatunsisf>
     7a6:	4b 01       	movw	r8, r22
     7a8:	5c 01       	movw	r10, r24
     7aa:	a7 01       	movw	r20, r14
     7ac:	96 01       	movw	r18, r12
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	81 e6       	ldi	r24, 0x61	; 97
     7b4:	94 e4       	ldi	r25, 0x44	; 68
     7b6:	0e 94 22 09 	call	0x1244	; 0x1244 <__subsf3>
     7ba:	9b 01       	movw	r18, r22
     7bc:	ac 01       	movw	r20, r24
     7be:	c5 01       	movw	r24, r10
     7c0:	b4 01       	movw	r22, r8
     7c2:	0e 94 c5 0a 	call	0x158a	; 0x158a <__mulsf3>
     7c6:	4b 01       	movw	r8, r22
     7c8:	5c 01       	movw	r10, r24
     7ca:	60 2f       	mov	r22, r16
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 37 0a 	call	0x146e	; 0x146e <__floatunsisf>
     7d6:	2b 01       	movw	r4, r22
     7d8:	3c 01       	movw	r6, r24
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	4f e2       	ldi	r20, 0x2F	; 47
     7e0:	54 e4       	ldi	r21, 0x44	; 68
     7e2:	c7 01       	movw	r24, r14
     7e4:	b6 01       	movw	r22, r12
     7e6:	0e 94 22 09 	call	0x1244	; 0x1244 <__subsf3>
     7ea:	9b 01       	movw	r18, r22
     7ec:	ac 01       	movw	r20, r24
     7ee:	c3 01       	movw	r24, r6
     7f0:	b2 01       	movw	r22, r4
     7f2:	0e 94 c5 0a 	call	0x158a	; 0x158a <__mulsf3>
     7f6:	9b 01       	movw	r18, r22
     7f8:	ac 01       	movw	r20, r24
     7fa:	c5 01       	movw	r24, r10
     7fc:	b4 01       	movw	r22, r8
     7fe:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	48 e4       	ldi	r20, 0x48	; 72
     808:	53 e4       	ldi	r21, 0x43	; 67
     80a:	0e 94 8f 09 	call	0x131e	; 0x131e <__divsf3>
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	44 e0       	ldi	r20, 0x04	; 4
     814:	52 e4       	ldi	r21, 0x42	; 66
     816:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3>
     81a:	0e 94 08 0a 	call	0x1410	; 0x1410 <__fixunssfsi>
     81e:	60 c0       	rjmp	.+192    	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
        } else {
            return 33 + dist_low;
     820:	61 e2       	ldi	r22, 0x21	; 33
     822:	60 0f       	add	r22, r16
     824:	5d c0       	rjmp	.+186    	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	fc 01       	movw	r30, r24
     82c:	e0 5c       	subi	r30, 0xC0	; 192
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	80 81       	ld	r24, Z
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	b7 01       	movw	r22, r14
     836:	68 1b       	sub	r22, r24
     838:	79 0b       	sbc	r23, r25
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 37 0a 	call	0x146e	; 0x146e <__floatunsisf>
     842:	9b 01       	movw	r18, r22
     844:	ac 01       	movw	r20, r24
     846:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3>
     84a:	4b 01       	movw	r8, r22
     84c:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     84e:	b6 01       	movw	r22, r12
     850:	dd 0c       	add	r13, r13
     852:	88 0b       	sbc	r24, r24
     854:	99 0b       	sbc	r25, r25
     856:	0e 94 39 0a 	call	0x1472	; 0x1472 <__floatsisf>
     85a:	2b 01       	movw	r4, r22
     85c:	3c 01       	movw	r6, r24
     85e:	b7 01       	movw	r22, r14
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 37 0a 	call	0x146e	; 0x146e <__floatunsisf>
     868:	6b 01       	movw	r12, r22
     86a:	7c 01       	movw	r14, r24
     86c:	63 2d       	mov	r22, r3
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 37 0a 	call	0x146e	; 0x146e <__floatunsisf>
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	5f e3       	ldi	r21, 0x3F	; 63
     880:	0e 94 c5 0a 	call	0x158a	; 0x158a <__mulsf3>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	a9 01       	movw	r20, r18
     88a:	0e 94 23 09 	call	0x1246	; 0x1246 <__addsf3>
     88e:	a5 01       	movw	r20, r10
     890:	94 01       	movw	r18, r8
     892:	0e 94 c5 0a 	call	0x158a	; 0x158a <__mulsf3>
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	c7 01       	movw	r24, r14
     89c:	b6 01       	movw	r22, r12
     89e:	0e 94 22 09 	call	0x1244	; 0x1244 <__subsf3>
     8a2:	9b 01       	movw	r18, r22
     8a4:	ac 01       	movw	r20, r24
     8a6:	c3 01       	movw	r24, r6
     8a8:	b2 01       	movw	r22, r4
     8aa:	0e 94 22 09 	call	0x1244	; 0x1244 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e2       	ldi	r20, 0x20	; 32
     8b4:	51 e4       	ldi	r21, 0x41	; 65
     8b6:	0e 94 c5 0a 	call	0x158a	; 0x158a <__mulsf3>
     8ba:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fixsfsi>
     8be:	7b 01       	movw	r14, r22
     8c0:	c5 01       	movw	r24, r10
     8c2:	b4 01       	movw	r22, r8
     8c4:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fixsfsi>
     8c8:	ab 01       	movw	r20, r22
     8ca:	bc 01       	movw	r22, r24
     8cc:	c7 01       	movw	r24, r14
     8ce:	ba 01       	movw	r22, r20
     8d0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__divmodhi4>
     8d4:	06 2f       	mov	r16, r22
            }
        }
    }

    if (dist_low != 255) {
     8d6:	6f 3f       	cpi	r22, 0xFF	; 255
     8d8:	09 f0       	breq	.+2      	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
     8da:	54 cf       	rjmp	.-344    	; 0x784 <estimate_distance+0x16c>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     8dc:	61 e2       	ldi	r22, 0x21	; 33
     8de:	61 0f       	add	r22, r17
    }
}
     8e0:	86 2f       	mov	r24, r22
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	9f 90       	pop	r9
     8f8:	8f 90       	pop	r8
     8fa:	7f 90       	pop	r7
     8fc:	6f 90       	pop	r6
     8fe:	5f 90       	pop	r5
     900:	4f 90       	pop	r4
     902:	3f 90       	pop	r3
     904:	2f 90       	pop	r2
     906:	08 95       	ret

00000908 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	2f 93       	push	r18
     914:	3f 93       	push	r19
     916:	4f 93       	push	r20
     918:	5f 93       	push	r21
     91a:	6f 93       	push	r22
     91c:	7f 93       	push	r23
     91e:	8f 93       	push	r24
     920:	9f 93       	push	r25
     922:	af 93       	push	r26
     924:	bf 93       	push	r27
     926:	ef 93       	push	r30
     928:	ff 93       	push	r31
    tx_clock += tx_increment;
     92a:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <tx_clock>
     92e:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <tx_clock+0x1>
     932:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <tx_increment>
     936:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <tx_increment+0x1>
     93a:	82 0f       	add	r24, r18
     93c:	93 1f       	adc	r25, r19
     93e:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <tx_clock+0x1>
     942:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <tx_clock>
    tx_increment = 0xFF;
     946:	8f ef       	ldi	r24, 0xFF	; 255
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <tx_increment+0x1>
     94e:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <tx_increment>
    OCR0A = tx_increment;
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     956:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <kilo_ticks>
     95a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <kilo_ticks+0x1>
     95e:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <kilo_ticks+0x2>
     962:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <kilo_ticks+0x3>
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	a1 1d       	adc	r26, r1
     96a:	b1 1d       	adc	r27, r1
     96c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <kilo_ticks>
     970:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <kilo_ticks+0x1>
     974:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <kilo_ticks+0x2>
     978:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     97c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <rx_busy>
     980:	81 11       	cpse	r24, r1
     982:	2d c0       	rjmp	.+90     	; 0x9de <__vector_14+0xd6>
     984:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <kilo_tx_period>
     988:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <kilo_tx_period+0x1>
     98c:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <tx_clock>
     990:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <tx_clock+0x1>
     994:	82 17       	cp	r24, r18
     996:	93 07       	cpc	r25, r19
     998:	10 f5       	brcc	.+68     	; 0x9de <__vector_14+0xd6>
     99a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     99e:	84 30       	cpi	r24, 0x04	; 4
     9a0:	f1 f4       	brne	.+60     	; 0x9de <__vector_14+0xd6>
        message_t *msg = kilo_message_tx();
     9a2:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     9a6:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     9aa:	09 95       	icall
        if (msg) {
     9ac:	00 97       	sbiw	r24, 0x00	; 0
     9ae:	b9 f0       	breq	.+46     	; 0x9de <__vector_14+0xd6>
            if (message_send(msg)) {
     9b0:	0e 94 57 08 	call	0x10ae	; 0x10ae <message_send>
     9b4:	88 23       	and	r24, r24
     9b6:	51 f0       	breq	.+20     	; 0x9cc <__vector_14+0xc4>
                kilo_message_tx_success();
     9b8:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     9bc:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     9c0:	09 95       	icall
                tx_clock = 0;
     9c2:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <tx_clock+0x1>
     9c6:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <tx_clock>
     9ca:	09 c0       	rjmp	.+18     	; 0x9de <__vector_14+0xd6>
            } else {
                tx_increment = rand()&0xFF;
     9cc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <rand>
     9d0:	9c 01       	movw	r18, r24
     9d2:	33 27       	eor	r19, r19
     9d4:	30 93 60 01 	sts	0x0160, r19	; 0x800160 <tx_increment+0x1>
     9d8:	20 93 5f 01 	sts	0x015F, r18	; 0x80015f <tx_increment>
                OCR0A = tx_increment;
     9dc:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	bf 91       	pop	r27
     9e4:	af 91       	pop	r26
     9e6:	9f 91       	pop	r25
     9e8:	8f 91       	pop	r24
     9ea:	7f 91       	pop	r23
     9ec:	6f 91       	pop	r22
     9ee:	5f 91       	pop	r21
     9f0:	4f 91       	pop	r20
     9f2:	3f 91       	pop	r19
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     a00:	80 ff       	sbrs	r24, 0
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <set_color+0x8>
        DDRD |= (1<<5);
     a04:	55 9a       	sbi	0x0a, 5	; 10
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <set_color+0xa>
    else
        DDRD &= ~(1<<5);
     a08:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     a0a:	81 ff       	sbrs	r24, 1
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <set_color+0x12>
        DDRD |= (1<<4);
     a0e:	54 9a       	sbi	0x0a, 4	; 10
     a10:	01 c0       	rjmp	.+2      	; 0xa14 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
     a12:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     a14:	82 ff       	sbrs	r24, 2
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <set_color+0x1c>
        DDRC |= (1<<3);
     a18:	3b 9a       	sbi	0x07, 3	; 7
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
     a1c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     a1e:	83 ff       	sbrs	r24, 3
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <set_color+0x26>
        DDRC |= (1<<2);
     a22:	3a 9a       	sbi	0x07, 2	; 7
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <set_color+0x28>
    else
        DDRC &= ~(1<<2);
     a26:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     a28:	84 ff       	sbrs	r24, 4
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <set_color+0x30>
        DDRC |= (1<<5);
     a2c:	3d 9a       	sbi	0x07, 5	; 7
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
     a30:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     a32:	85 ff       	sbrs	r24, 5
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <set_color+0x3a>
        DDRC |= (1<<4);
     a36:	3c 9a       	sbi	0x07, 4	; 7
     a38:	08 95       	ret
    else
        DDRC &= ~(1<<4);
     a3a:	3c 98       	cbi	0x07, 4	; 7
     a3c:	08 95       	ret

00000a3e <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     a3e:	8c 01       	movw	r16, r24
     a40:	7b 01       	movw	r14, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     a42:	d0 e0       	ldi	r29, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     a44:	cf ef       	ldi	r28, 0xFF	; 255
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     a46:	84 e0       	ldi	r24, 0x04	; 4
     a48:	d8 2e       	mov	r13, r24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     a4a:	98 e1       	ldi	r25, 0x18	; 24
     a4c:	c9 2e       	mov	r12, r25
     a4e:	29 e2       	ldi	r18, 0x29	; 41
     a50:	b2 2e       	mov	r11, r18

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     a52:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <kilo_state>
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	e7 30       	cpi	r30, 0x07	; 7
     a5a:	f1 05       	cpc	r31, r1
     a5c:	d0 f7       	brcc	.-12     	; 0xa52 <kilo_start+0x14>
     a5e:	ec 5c       	subi	r30, 0xCC	; 204
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__tablejump2__>
            case SLEEPING:
                cli();
     a66:	f8 94       	cli
                acomp_off();
     a68:	80 b7       	in	r24, 0x30	; 48
     a6a:	87 7f       	andi	r24, 0xF7	; 247
     a6c:	80 bf       	out	0x30, r24	; 48
                adc_off();
     a6e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     a72:	8f 77       	andi	r24, 0x7F	; 127
     a74:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
                ports_off();
     a78:	14 b8       	out	0x04, r1	; 4
     a7a:	17 b8       	out	0x07, r1	; 7
     a7c:	1a b8       	out	0x0a, r1	; 10
     a7e:	15 b8       	out	0x05, r1	; 5
     a80:	18 b8       	out	0x08, r1	; 8
     a82:	1b b8       	out	0x0b, r1	; 11
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	a8 95       	wdr
     a8a:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	b0 92 60 00 	sts	0x0060, r11	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     a94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     a98:	80 64       	ori	r24, 0x40	; 64
     a9a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     a9e:	83 b7       	in	r24, 0x33	; 51
     aa0:	81 7f       	andi	r24, 0xF1	; 241
     aa2:	84 60       	ori	r24, 0x04	; 4
     aa4:	83 bf       	out	0x33, r24	; 51
                cli();
     aa6:	f8 94       	cli
                sleep_enable();
     aa8:	83 b7       	in	r24, 0x33	; 51
     aaa:	81 60       	ori	r24, 0x01	; 1
     aac:	83 bf       	out	0x33, r24	; 51
                sei();
     aae:	78 94       	sei
                sleep_cpu();
     ab0:	88 95       	sleep
                sleep_disable();
     ab2:	83 b7       	in	r24, 0x33	; 51
     ab4:	8e 7f       	andi	r24, 0xFE	; 254
     ab6:	83 bf       	out	0x33, r24	; 51
                sei();
     ab8:	78 94       	sei
                rx_busy = 0;
     aba:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <rx_busy>
                ports_on();
     abe:	52 9a       	sbi	0x0a, 2	; 10
     ac0:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     ac2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     ac6:	80 68       	ori	r24, 0x80	; 128
     ac8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     acc:	87 e5       	ldi	r24, 0x57	; 87
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	01 97       	sbiw	r24, 0x01	; 1
     ad2:	f1 f7       	brne	.-4      	; 0xad0 <kilo_start+0x92>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <kilo_start+0x98>
     ad6:	00 00       	nop
                _delay_us(300);
                acomp_on();
     ad8:	80 b7       	in	r24, 0x30	; 48
     ada:	88 61       	ori	r24, 0x18	; 24
     adc:	80 bf       	out	0x30, r24	; 48

                set_color(RGB(3,3,3));
     ade:	8f e3       	ldi	r24, 0x3F	; 63
     ae0:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae4:	ef e1       	ldi	r30, 0x1F	; 31
     ae6:	fe e4       	ldi	r31, 0x4E	; 78
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <kilo_start+0xaa>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <kilo_start+0xb0>
     aee:	00 00       	nop
                _delay_ms(10);
                if (rx_busy) {
     af0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <rx_busy>
     af4:	88 23       	and	r24, r24
     af6:	09 f4       	brne	.+2      	; 0xafa <kilo_start+0xbc>
     af8:	50 c0       	rjmp	.+160    	; 0xb9a <kilo_start+0x15c>
                    set_color(RGB(3,0,0));
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
     b00:	ff ef       	ldi	r31, 0xFF	; 255
     b02:	20 e7       	ldi	r18, 0x70	; 112
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	f1 50       	subi	r31, 0x01	; 1
     b08:	20 40       	sbci	r18, 0x00	; 0
     b0a:	80 40       	sbci	r24, 0x00	; 0
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <kilo_start+0xc8>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <kilo_start+0xd2>
     b10:	00 00       	nop
     b12:	43 c0       	rjmp	.+134    	; 0xb9a <kilo_start+0x15c>
                    _delay_ms(100);
                }
                set_color(RGB(0,0,0));
                break;
            case IDLE:
                set_color(RGB(0,3,0));
     b14:	8c e0       	ldi	r24, 0x0C	; 12
     b16:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
     b1a:	ef ec       	ldi	r30, 0xCF	; 207
     b1c:	f7 e0       	ldi	r31, 0x07	; 7
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <kilo_start+0xe0>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <kilo_start+0xe6>
     b24:	00 00       	nop
                _delay_ms(1);
                set_color(RGB(0,0,0));
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
     b2c:	ff ef       	ldi	r31, 0xFF	; 255
     b2e:	21 ee       	ldi	r18, 0xE1	; 225
     b30:	84 e0       	ldi	r24, 0x04	; 4
     b32:	f1 50       	subi	r31, 0x01	; 1
     b34:	20 40       	sbci	r18, 0x00	; 0
     b36:	80 40       	sbci	r24, 0x00	; 0
     b38:	e1 f7       	brne	.-8      	; 0xb32 <kilo_start+0xf4>
     b3a:	2c c0       	rjmp	.+88     	; 0xb94 <kilo_start+0x156>
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
     b3c:	0e 94 ef 02 	call	0x5de	; 0x5de <get_voltage>
                if(voltage > 682)
     b40:	8b 3a       	cpi	r24, 0xAB	; 171
     b42:	e2 e0       	ldi	r30, 0x02	; 2
     b44:	9e 07       	cpc	r25, r30
     b46:	24 f0       	brlt	.+8      	; 0xb50 <kilo_start+0x112>
                    set_color(RGB(0,3,0));
     b48:	8c e0       	ldi	r24, 0x0C	; 12
     b4a:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
     b4e:	81 cf       	rjmp	.-254    	; 0xa52 <kilo_start+0x14>
                else if(voltage > 648)
     b50:	89 38       	cpi	r24, 0x89	; 137
     b52:	f2 e0       	ldi	r31, 0x02	; 2
     b54:	9f 07       	cpc	r25, r31
     b56:	14 f0       	brlt	.+4      	; 0xb5c <kilo_start+0x11e>
                    set_color(RGB(0,0,3));
     b58:	80 e3       	ldi	r24, 0x30	; 48
     b5a:	f7 cf       	rjmp	.-18     	; 0xb4a <kilo_start+0x10c>
                else if(voltage > 614)
     b5c:	87 36       	cpi	r24, 0x67	; 103
     b5e:	92 40       	sbci	r25, 0x02	; 2
     b60:	14 f0       	brlt	.+4      	; 0xb66 <kilo_start+0x128>
                    set_color(RGB(3,3,0));
     b62:	8f e0       	ldi	r24, 0x0F	; 15
     b64:	f2 cf       	rjmp	.-28     	; 0xb4a <kilo_start+0x10c>
                else
                    set_color(RGB(3,0,0));
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	f0 cf       	rjmp	.-32     	; 0xb4a <kilo_start+0x10c>
                break;
            case CHARGING:
                if (is_charging()) {
     b6a:	48 99       	sbic	0x09, 0	; 9
     b6c:	16 c0       	rjmp	.+44     	; 0xb9a <kilo_start+0x15c>
                    set_color(RGB(1,0,0));
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
     b74:	8f ec       	ldi	r24, 0xCF	; 207
     b76:	97 e0       	ldi	r25, 0x07	; 7
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <kilo_start+0x13a>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <kilo_start+0x140>
     b7e:	00 00       	nop
                    _delay_ms(1);
                    set_color(RGB(0,0,0));
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	e1 ee       	ldi	r30, 0xE1	; 225
     b8a:	f4 e0       	ldi	r31, 0x04	; 4
     b8c:	91 50       	subi	r25, 0x01	; 1
     b8e:	e0 40       	sbci	r30, 0x00	; 0
     b90:	f0 40       	sbci	r31, 0x00	; 0
     b92:	e1 f7       	brne	.-8      	; 0xb8c <kilo_start+0x14e>
     b94:	00 c0       	rjmp	.+0      	; 0xb96 <kilo_start+0x158>
     b96:	00 00       	nop
     b98:	5c cf       	rjmp	.-328    	; 0xa52 <kilo_start+0x14>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	d6 cf       	rjmp	.-84     	; 0xb4a <kilo_start+0x10c>
                break;
            case SETUP:
                if (!has_setup) {
     b9e:	d1 11       	cpse	r29, r1
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <kilo_start+0x168>
                    setup();
     ba2:	f8 01       	movw	r30, r16
     ba4:	09 95       	icall
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     ba6:	d0 92 15 01 	sts	0x0115, r13	; 0x800115 <kilo_state>
     baa:	d1 e0       	ldi	r29, 0x01	; 1
            case RUNNING:
                loop();
     bac:	f7 01       	movw	r30, r14
     bae:	09 95       	icall
                break;
     bb0:	50 cf       	rjmp	.-352    	; 0xa52 <kilo_start+0x14>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     bb2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     bb6:	81 11       	cpse	r24, r1
     bb8:	07 c0       	rjmp	.+14     	; 0xbc8 <kilo_start+0x18a>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bba:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bbe:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     bc2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
     bc6:	45 cf       	rjmp	.-374    	; 0xa52 <kilo_start+0x14>
                } else {
                    if (cur_motion != prev_motion) {
     bc8:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
     bcc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <prev_motion>
     bd0:	98 17       	cp	r25, r24
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <kilo_start+0x198>
     bd4:	3e cf       	rjmp	.-388    	; 0xa52 <kilo_start+0x14>
                        prev_motion = cur_motion;
     bd6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     bda:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     bde:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	89 f4       	brne	.+34     	; 0xc08 <kilo_start+0x1ca>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     be6:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     bea:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     bee:	8f e2       	ldi	r24, 0x2F	; 47
     bf0:	95 e7       	ldi	r25, 0x75	; 117
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <kilo_start+0x1b4>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <kilo_start+0x1ba>
     bf8:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     bfa:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     bfe:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c02:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c06:	25 cf       	rjmp	.-438    	; 0xa52 <kilo_start+0x14>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c08:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c0c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c10:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	59 f4       	brne	.+22     	; 0xc2e <kilo_start+0x1f0>
     c18:	ef e2       	ldi	r30, 0x2F	; 47
     c1a:	f5 e7       	ldi	r31, 0x75	; 117
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <kilo_start+0x1de>
     c20:	00 c0       	rjmp	.+0      	; 0xc22 <kilo_start+0x1e4>
     c22:	00 00       	nop
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     c24:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c28:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     c2c:	10 c0       	rjmp	.+32     	; 0xc4e <kilo_start+0x210>
     c2e:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c32:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c36:	8f e2       	ldi	r24, 0x2F	; 47
     c38:	95 e7       	ldi	r25, 0x75	; 117
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <kilo_start+0x1fc>
     c3e:	00 c0       	rjmp	.+0      	; 0xc40 <kilo_start+0x202>
     c40:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     c42:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <kilo_straight_right>
     c46:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     c4a:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = cw;
     c4e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     c52:	ff ce       	rjmp	.-514    	; 0xa52 <kilo_start+0x14>

00000c54 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	8f 93       	push	r24
     c60:	9f 93       	push	r25
    rx_timer_off();
     c62:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     c66:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     c6a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    rx_leadingbit = 1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <rx_leadingbit>
    rx_leadingbyte = 1;
     c74:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <rx_leadingbyte>
    rx_busy = 0;
     c78:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <rx_busy>
    adc_trigger_high_gain();
     c7c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     c80:	93 ea       	ldi	r25, 0xA3	; 163
     c82:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     c86:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
}
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

00000c98 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	2f 93       	push	r18
     ca8:	3f 93       	push	r19
     caa:	4f 93       	push	r20
     cac:	5f 93       	push	r21
     cae:	6f 93       	push	r22
     cb0:	7f 93       	push	r23
     cb2:	8f 93       	push	r24
     cb4:	9f 93       	push	r25
     cb6:	af 93       	push	r26
     cb8:	bf 93       	push	r27
     cba:	ef 93       	push	r30
     cbc:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     cbe:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     cc2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    rx_busy = 1;
     cc6:	41 e0       	ldi	r20, 0x01	; 1
     cc8:	40 93 41 01 	sts	0x0141, r20	; 0x800141 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     ccc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <rx_leadingbit>
     cd0:	88 23       	and	r24, r24
     cd2:	21 f1       	breq	.+72     	; 0xd1c <__vector_23+0x84>
        rx_timer_on();
     cd4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     cd8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     cdc:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
        rx_bytevalue = 0;
     ce0:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <rx_bytevalue>
        rx_leadingbit = 0;
     ce4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <rx_leadingbit>
        if (rx_leadingbyte) {
     ce8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_leadingbyte>
     cec:	88 23       	and	r24, r24
     cee:	09 f4       	brne	.+2      	; 0xcf2 <__vector_23+0x5a>
     cf0:	af c1       	rjmp	.+862    	; 0x1050 <__vector_23+0x3b8>
            adc_finish_conversion();
     cf2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     cf6:	86 fd       	sbrc	r24, 6
     cf8:	fc cf       	rjmp	.-8      	; 0xcf2 <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
     cfa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     cfe:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d02:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <rx_dist+0x3>
     d06:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <rx_dist+0x2>
            adc_trigger_low_gain();
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d10:	93 ea       	ldi	r25, 0xA3	; 163
     d12:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d16:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d1a:	9a c1       	rjmp	.+820    	; 0x1050 <__vector_23+0x3b8>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     d1c:	c9 01       	movw	r24, r18
     d1e:	87 58       	subi	r24, 0x87	; 135
     d20:	91 09       	sbc	r25, r1
     d22:	84 37       	cpi	r24, 0x74	; 116
     d24:	99 40       	sbci	r25, 0x09	; 9
     d26:	a0 f0       	brcs	.+40     	; 0xd50 <__vector_23+0xb8>
            rx_timer_off();
     d28:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d2c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d30:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
            rx_leadingbit = 1;
     d34:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <rx_leadingbit>
            rx_leadingbyte = 1;
     d38:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <rx_leadingbyte>
            rx_busy = 0;
     d3c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <rx_busy>
            adc_trigger_high_gain();
     d40:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     d44:	83 ea       	ldi	r24, 0xA3	; 163
     d46:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d4a:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     d4e:	80 c1       	rjmp	.+768    	; 0x1050 <__vector_23+0x3b8>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     d50:	26 58       	subi	r18, 0x86	; 134
     d52:	31 09       	sbc	r19, r1
     d54:	a4 ef       	ldi	r26, 0xF4	; 244
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__umulhisi3>
     d5c:	8c 01       	movw	r16, r24
     d5e:	22 27       	eor	r18, r18
     d60:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
     d62:	08 30       	cpi	r16, 0x08	; 8
     d64:	60 f4       	brcc	.+24     	; 0xd7e <__vector_23+0xe6>
                rx_bytevalue |= (1<<bitindex);
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <__vector_23+0xd6>
     d6c:	88 0f       	add	r24, r24
     d6e:	0a 95       	dec	r16
     d70:	ea f7       	brpl	.-6      	; 0xd6c <__vector_23+0xd4>
     d72:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <rx_bytevalue>
     d76:	89 2b       	or	r24, r25
     d78:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <rx_bytevalue>
     d7c:	69 c1       	rjmp	.+722    	; 0x1050 <__vector_23+0x3b8>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     d7e:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <rx_leadingbit>
                if (rx_leadingbyte) {
     d82:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_leadingbyte>
     d86:	88 23       	and	r24, r24
     d88:	41 f1       	breq	.+80     	; 0xdda <__vector_23+0x142>
                    adc_finish_conversion();
     d8a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     d8e:	86 fd       	sbrc	r24, 6
     d90:	fc cf       	rjmp	.-8      	; 0xd8a <__vector_23+0xf2>
                    rx_dist.low_gain = ADCW;
     d92:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     d96:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     d9a:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <rx_dist+0x1>
     d9e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <rx_dist>
                    adc_trigger_high_gain();
     da2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     da6:	83 ea       	ldi	r24, 0xA3	; 163
     da8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
                    if (rx_bytevalue != 0) { // Collision detected.
     db2:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <rx_bytevalue>
     db6:	99 23       	and	r25, r25
     db8:	59 f0       	breq	.+22     	; 0xdd0 <__vector_23+0x138>
                        rx_timer_off();
     dba:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     dbe:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     dc2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     dc6:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <rx_leadingbyte>
                        rx_busy = 0;
     dca:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <rx_busy>
     dce:	40 c1       	rjmp	.+640    	; 0x1050 <__vector_23+0x3b8>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
     dd0:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rx_leadingbyte>
                        rx_byteindex = 0;
     dd4:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <rx_byteindex>
     dd8:	3b c1       	rjmp	.+630    	; 0x1050 <__vector_23+0x3b8>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     dda:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <rx_byteindex>
     dde:	e8 2f       	mov	r30, r24
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	ec 59       	subi	r30, 0x9C	; 156
     de4:	fe 4f       	sbci	r31, 0xFE	; 254
     de6:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <rx_bytevalue>
     dea:	90 83       	st	Z, r25
                    rx_byteindex++;
     dec:	8f 5f       	subi	r24, 0xFF	; 255
     dee:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     df2:	8c 30       	cpi	r24, 0x0C	; 12
     df4:	09 f0       	breq	.+2      	; 0xdf8 <__vector_23+0x160>
     df6:	2c c1       	rjmp	.+600    	; 0x1050 <__vector_23+0x3b8>
                        rx_timer_off();
     df8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     dfc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     e00:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
                        rx_leadingbyte = 1;
     e04:	40 93 5e 01 	sts	0x015E, r20	; 0x80015e <rx_leadingbyte>
                        rx_busy = 0;
     e08:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     e0c:	00 91 6e 01 	lds	r16, 0x016E	; 0x80016e <rx_msg+0xa>
     e10:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <rx_msg+0xb>
     e14:	84 e6       	ldi	r24, 0x64	; 100
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	0e 94 3b 08 	call	0x1076	; 0x1076 <message_crc>
     e1c:	08 17       	cp	r16, r24
     e1e:	19 07       	cpc	r17, r25
     e20:	09 f0       	breq	.+2      	; 0xe24 <__vector_23+0x18c>
     e22:	16 c1       	rjmp	.+556    	; 0x1050 <__vector_23+0x3b8>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     e24:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <rx_msg+0x9>
     e28:	e7 fd       	sbrc	r30, 7
     e2a:	0a c0       	rjmp	.+20     	; 0xe40 <__vector_23+0x1a8>
        kilo_message_rx(&rx_msg, &rx_dist);
     e2c:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
     e30:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
     e34:	69 e3       	ldi	r22, 0x39	; 57
     e36:	71 e0       	ldi	r23, 0x01	; 1
     e38:	84 e6       	ldi	r24, 0x64	; 100
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	09 95       	icall
     e3e:	08 c1       	rjmp	.+528    	; 0x1050 <__vector_23+0x3b8>
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     e40:	88 e7       	ldi	r24, 0x78	; 120
     e42:	8e 0f       	add	r24, r30
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	30 f0       	brcs	.+12     	; 0xe54 <__vector_23+0x1bc>
        motors_off();
     e48:	53 98       	cbi	0x0a, 3	; 10
     e4a:	23 98       	cbi	0x04, 3	; 4
     e4c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     e50:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    switch (rx_msg.type) {
     e54:	8e 2f       	mov	r24, r30
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	fc 01       	movw	r30, r24
     e5a:	e0 58       	subi	r30, 0x80	; 128
     e5c:	f1 09       	sbc	r31, r1
     e5e:	eb 30       	cpi	r30, 0x0B	; 11
     e60:	f1 05       	cpc	r31, r1
     e62:	08 f0       	brcs	.+2      	; 0xe66 <__vector_23+0x1ce>
     e64:	f5 c0       	rjmp	.+490    	; 0x1050 <__vector_23+0x3b8>
     e66:	e5 5c       	subi	r30, 0xC5	; 197
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__tablejump2__>
        case BOOT:
            tx_timer_off();
     e6e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e72:	8d 7f       	andi	r24, 0xFD	; 253
     e74:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     e78:	16 bc       	out	0x26, r1	; 38
            bootload();
     e7a:	e0 e0       	ldi	r30, 0x00	; 0
     e7c:	f0 e7       	ldi	r31, 0x70	; 112
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <__vector_23+0x1ec>
            break;
        case RESET:
            reset();
     e80:	e0 e0       	ldi	r30, 0x00	; 0
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	09 95       	icall
            break;
        case SLEEP:
            kilo_state = SLEEPING;
     e86:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <kilo_state>
     e8a:	e2 c0       	rjmp	.+452    	; 0x1050 <__vector_23+0x3b8>
            break;
        case WAKEUP:
            kilo_state = IDLE;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	b2 c0       	rjmp	.+356    	; 0xff4 <__vector_23+0x35c>
            break;
        case CHARGE:
            kilo_state = CHARGING;
     e90:	85 e0       	ldi	r24, 0x05	; 5
     e92:	b0 c0       	rjmp	.+352    	; 0xff4 <__vector_23+0x35c>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	ae c0       	rjmp	.+348    	; 0xff4 <__vector_23+0x35c>
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
     e98:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     e9c:	83 30       	cpi	r24, 0x03	; 3
     e9e:	09 f4       	brne	.+2      	; 0xea2 <__vector_23+0x20a>
     ea0:	d7 c0       	rjmp	.+430    	; 0x1050 <__vector_23+0x3b8>
     ea2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     ea6:	84 30       	cpi	r24, 0x04	; 4
     ea8:	09 f4       	brne	.+2      	; 0xeac <__vector_23+0x214>
     eaa:	d2 c0       	rjmp	.+420    	; 0x1050 <__vector_23+0x3b8>
                motors_on();
     eac:	53 9a       	sbi	0x0a, 3	; 10
     eae:	23 9a       	sbi	0x04, 3	; 4
     eb0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     eb4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = SETUP;
     eb8:	83 e0       	ldi	r24, 0x03	; 3
     eba:	9c c0       	rjmp	.+312    	; 0xff4 <__vector_23+0x35c>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     ebc:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rx_msg>
     ec0:	82 30       	cpi	r24, 0x02	; 2
     ec2:	09 f4       	brne	.+2      	; 0xec6 <__vector_23+0x22e>
     ec4:	4b c0       	rjmp	.+150    	; 0xf5c <__vector_23+0x2c4>
     ec6:	80 f4       	brcc	.+32     	; 0xee8 <__vector_23+0x250>
     ec8:	88 23       	and	r24, r24
     eca:	a9 f0       	breq	.+42     	; 0xef6 <__vector_23+0x25e>
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	09 f0       	breq	.+2      	; 0xed2 <__vector_23+0x23a>
     ed0:	82 c0       	rjmp	.+260    	; 0xfd6 <__vector_23+0x33e>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
     ed2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <rx_msg+0x1>
     ed6:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <rx_msg+0x2>
     eda:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <kilo_uid+0x1>
     ede:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <kilo_uid>
                    cur_motion = MOVE_STOP;
     ee2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
     ee6:	77 c0       	rjmp	.+238    	; 0xfd6 <__vector_23+0x33e>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	09 f4       	brne	.+2      	; 0xeee <__vector_23+0x256>
     eec:	49 c0       	rjmp	.+146    	; 0xf80 <__vector_23+0x2e8>
     eee:	84 30       	cpi	r24, 0x04	; 4
     ef0:	09 f4       	brne	.+2      	; 0xef4 <__vector_23+0x25c>
     ef2:	58 c0       	rjmp	.+176    	; 0xfa4 <__vector_23+0x30c>
     ef4:	70 c0       	rjmp	.+224    	; 0xfd6 <__vector_23+0x33e>
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
     ef6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     efa:	86 30       	cpi	r24, 0x06	; 6
     efc:	09 f0       	breq	.+2      	; 0xf00 <__vector_23+0x268>
     efe:	6b c0       	rjmp	.+214    	; 0xfd6 <__vector_23+0x33e>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
     f00:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <kilo_uid>
     f04:	80 eb       	ldi	r24, 0xB0	; 176
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
     f0c:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <kilo_uid+0x1>
     f10:	81 eb       	ldi	r24, 0xB1	; 177
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
     f18:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <kilo_turn_left>
     f1c:	85 e0       	ldi	r24, 0x05	; 5
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
     f24:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <kilo_turn_right>
     f28:	89 e0       	ldi	r24, 0x09	; 9
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
     f30:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <kilo_straight_left>
     f34:	8c e0       	ldi	r24, 0x0C	; 12
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
     f3c:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <kilo_straight_right>
     f40:	84 e1       	ldi	r24, 0x14	; 20
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 96 0b 	call	0x172c	; 0x172c <eeprom_write_byte>
                        motors_off();
     f48:	53 98       	cbi	0x0a, 3	; 10
     f4a:	23 98       	cbi	0x04, 3	; 4
     f4c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     f50:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                        kilo_state = IDLE;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
     f5a:	3d c0       	rjmp	.+122    	; 0xfd6 <__vector_23+0x33e>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
     f5c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
     f60:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <rx_msg+0x3>
     f64:	91 30       	cpi	r25, 0x01	; 1
     f66:	21 f4       	brne	.+8      	; 0xf70 <__vector_23+0x2d8>
     f68:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <kilo_turn_left>
     f6c:	89 17       	cp	r24, r25
     f6e:	99 f1       	breq	.+102    	; 0xfd6 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f70:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_LEFT;
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
     f7a:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <kilo_turn_left>
     f7e:	2b c0       	rjmp	.+86     	; 0xfd6 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
     f80:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <cur_motion>
     f84:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <rx_msg+0x4>
     f88:	92 30       	cpi	r25, 0x02	; 2
     f8a:	21 f4       	brne	.+8      	; 0xf94 <__vector_23+0x2fc>
     f8c:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <kilo_turn_right>
     f90:	89 17       	cp	r24, r25
     f92:	09 f1       	breq	.+66     	; 0xfd6 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     f94:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_RIGHT;
     f98:	92 e0       	ldi	r25, 0x02	; 2
     f9a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
     f9e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <kilo_turn_right>
     fa2:	19 c0       	rjmp	.+50     	; 0xfd6 <__vector_23+0x33e>
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
     fa4:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <cur_motion>
     fa8:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <rx_msg+0x6>
     fac:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <rx_msg+0x5>
     fb0:	23 30       	cpi	r18, 0x03	; 3
     fb2:	41 f4       	brne	.+16     	; 0xfc4 <__vector_23+0x32c>
     fb4:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <kilo_straight_right>
     fb8:	82 13       	cpse	r24, r18
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <__vector_23+0x32c>
     fbc:	20 91 75 01 	lds	r18, 0x0175	; 0x800175 <kilo_straight_left>
     fc0:	92 17       	cp	r25, r18
     fc2:	49 f0       	breq	.+18     	; 0xfd6 <__vector_23+0x33e>
                        prev_motion = MOVE_STOP;
     fc4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
     fc8:	23 e0       	ldi	r18, 0x03	; 3
     fca:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
     fce:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
     fd2:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
     fd6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rx_msg>
     fda:	88 23       	and	r24, r24
     fdc:	c9 f1       	breq	.+114    	; 0x1050 <__vector_23+0x3b8>
     fde:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     fe2:	86 30       	cpi	r24, 0x06	; 6
     fe4:	a9 f1       	breq	.+106    	; 0x1050 <__vector_23+0x3b8>
                motors_on();
     fe6:	53 9a       	sbi	0x0a, 3	; 10
     fe8:	23 9a       	sbi	0x04, 3	; 4
     fea:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     fee:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                kilo_state = MOVING;
     ff2:	86 e0       	ldi	r24, 0x06	; 6
     ff4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
     ff8:	2b c0       	rjmp	.+86     	; 0x1050 <__vector_23+0x3b8>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
     ffa:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <kilo_state>
     ffe:	86 30       	cpi	r24, 0x06	; 6
    1000:	81 f0       	breq	.+32     	; 0x1022 <__vector_23+0x38a>
                motors_on();
    1002:	53 9a       	sbi	0x0a, 3	; 10
    1004:	23 9a       	sbi	0x04, 3	; 4
    1006:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
    100a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
                set_color(RGB(0,0,0));
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	0e 94 00 05 	call	0xa00	; 0xa00 <set_color>
                prev_motion = cur_motion = MOVE_STOP;
    1014:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
    1018:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <prev_motion>
                kilo_state = MOVING;
    101c:	86 e0       	ldi	r24, 0x06	; 6
    101e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	00 90 64 01 	lds	r0, 0x0164	; 0x800164 <rx_msg>
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <__vector_23+0x398>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <__vector_23+0x394>
    1034:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <kilo_uid>
    1038:	30 91 74 01 	lds	r19, 0x0174	; 0x800174 <kilo_uid+0x1>
    103c:	82 23       	and	r24, r18
    103e:	93 23       	and	r25, r19
    1040:	89 2b       	or	r24, r25
    1042:	21 f0       	breq	.+8      	; 0x104c <__vector_23+0x3b4>
                cur_motion = MOVE_LEFT;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <cur_motion>
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <__vector_23+0x3b8>
            else
                cur_motion = MOVE_STOP;
    104c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <cur_motion>
                    }
                }
            }
        }
    }
}
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	bf 91       	pop	r27
    1056:	af 91       	pop	r26
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	7f 91       	pop	r23
    105e:	6f 91       	pop	r22
    1060:	5f 91       	pop	r21
    1062:	4f 91       	pop	r20
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    1076:	fc 01       	movw	r30, r24
    1078:	9c 01       	movw	r18, r24
    107a:	26 5f       	subi	r18, 0xF6	; 246
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    1082:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    1084:	84 27       	eor	r24, r20
    1086:	08 2e       	mov	r0, r24
    1088:	82 95       	swap	r24
    108a:	80 7f       	andi	r24, 0xF0	; 240
    108c:	80 25       	eor	r24, r0
    108e:	09 2e       	mov	r0, r25
    1090:	98 2f       	mov	r25, r24
    1092:	82 95       	swap	r24
    1094:	8f 70       	andi	r24, 0x0F	; 15
    1096:	08 26       	eor	r0, r24
    1098:	86 95       	lsr	r24
    109a:	98 27       	eor	r25, r24
    109c:	89 27       	eor	r24, r25
    109e:	88 0f       	add	r24, r24
    10a0:	88 0f       	add	r24, r24
    10a2:	88 0f       	add	r24, r24
    10a4:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    10a6:	e2 17       	cp	r30, r18
    10a8:	f3 07       	cpc	r31, r19
    10aa:	59 f7       	brne	.-42     	; 0x1082 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    10ac:	08 95       	ret

000010ae <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    10ae:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    10b0:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    10b2:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    10b4:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <tx_mask>
    or tmpreg1, ddrreg
    10b8:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    10ba:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    10bc:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    10be:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <tx_mask>
    10c2:	20 30       	cpi	r18, 0x00	; 0
    10c4:	29 f0       	breq	.+10     	; 0x10d0 <message_send+0x22>
    10c6:	00 00       	nop
    10c8:	25 b1       	in	r18, 0x05	; 5
    10ca:	23 2b       	or	r18, r19
    10cc:	25 b9       	out	0x05, r18	; 5
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <message_send+0x2a>
    10d0:	00 00       	nop
    10d2:	00 00       	nop
    10d4:	00 00       	nop
    10d6:	00 c0       	rjmp	.+0      	; 0x10d8 <message_send+0x2a>
    10d8:	00 00       	nop
    10da:	00 00       	nop
    10dc:	00 00       	nop
    10de:	30 95       	com	r19
    10e0:	25 b1       	in	r18, 0x05	; 5
    10e2:	23 23       	and	r18, r19
    10e4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    10e6:	2e ea       	ldi	r18, 0xAE	; 174
    10e8:	2a 95       	dec	r18
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    10ec:	2b ee       	ldi	r18, 0xEB	; 235

000010ee <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    10ee:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    10f0:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    10f2:	0a c0       	rjmp	.+20     	; 0x1108 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    10f4:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    10f6:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <tx_mask>
    com tmpreg2
    10fa:	30 95       	com	r19
    in tmpreg1, IR_PORT
    10fc:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    10fe:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1100:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1102:	0f be       	out	0x3f, r0	; 63
    return 0
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	08 95       	ret

00001108 <nocollision>:
nocollision:
    nop
    1108:	00 00       	nop
    dec tmpreg1
    110a:	2a 95       	dec	r18
    brne checkcollision
    110c:	81 f7       	brne	.-32     	; 0x10ee <checkcollision>

    ldi tmpreg1, 0x01
    110e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1110:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <tx_mask>
    1114:	20 30       	cpi	r18, 0x00	; 0
    1116:	29 f0       	breq	.+10     	; 0x1122 <nocollision+0x1a>
    1118:	00 00       	nop
    111a:	25 b1       	in	r18, 0x05	; 5
    111c:	23 2b       	or	r18, r19
    111e:	25 b9       	out	0x05, r18	; 5
    1120:	04 c0       	rjmp	.+8      	; 0x112a <nocollision+0x22>
    1122:	00 00       	nop
    1124:	00 00       	nop
    1126:	00 00       	nop
    1128:	00 c0       	rjmp	.+0      	; 0x112a <nocollision+0x22>
    112a:	00 00       	nop
    112c:	00 00       	nop
    112e:	00 00       	nop
    1130:	30 95       	com	r19
    1132:	25 b1       	in	r18, 0x05	; 5
    1134:	23 23       	and	r18, r19
    1136:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1138:	00 00       	nop
    113a:	24 e5       	ldi	r18, 0x54	; 84
    113c:	2a 95       	dec	r18
    113e:	f1 f7       	brne	.-4      	; 0x113c <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1140:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1142:	8c e0       	ldi	r24, 0x0C	; 12

00001144 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1144:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1146:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1148:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    114a:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    114c:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    114e:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1150:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1152:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1154:	50 e0       	ldi	r21, 0x00	; 0

00001156 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1156:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1158:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    115a:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    115c:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    115e:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <tx_mask>
    1162:	20 30       	cpi	r18, 0x00	; 0
    1164:	29 f0       	breq	.+10     	; 0x1170 <sendbit+0x1a>
    1166:	00 00       	nop
    1168:	25 b1       	in	r18, 0x05	; 5
    116a:	23 2b       	or	r18, r19
    116c:	25 b9       	out	0x05, r18	; 5
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <sendbit+0x22>
    1170:	00 00       	nop
    1172:	00 00       	nop
    1174:	00 00       	nop
    1176:	00 c0       	rjmp	.+0      	; 0x1178 <sendbit+0x22>
    1178:	00 00       	nop
    117a:	00 00       	nop
    117c:	00 00       	nop
    117e:	30 95       	com	r19
    1180:	25 b1       	in	r18, 0x05	; 5
    1182:	23 23       	and	r18, r19
    1184:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1186:	00 00       	nop
    1188:	21 e5       	ldi	r18, 0x51	; 81
    118a:	2a 95       	dec	r18
    118c:	f1 f7       	brne	.-4      	; 0x118a <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    118e:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    1190:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1192:	9a 95       	dec	r25
    brne sendbit
    1194:	01 f7       	brne	.-64     	; 0x1156 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1196:	8a 95       	dec	r24
    brne sendbyte
    1198:	a9 f6       	brne	.-86     	; 0x1144 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    119a:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    119c:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    119e:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    11a0:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    11a2:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <tx_mask>
    com tmpreg2
    11a6:	30 95       	com	r19
    in tmpreg1, IR_PORT
    11a8:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    11aa:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    11ac:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    11ae:	0f be       	out	0x3f, r0	; 63
    return 1
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	08 95       	ret

000011b4 <main>:

int main()
{
    kilo_init();
    11b4:	0e 94 27 01 	call	0x24e	; 0x24e <kilo_init>
    kilo_start(setup, loop);
    11b8:	61 ea       	ldi	r22, 0xA1	; 161
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	8d e9       	ldi	r24, 0x9D	; 157
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <kilo_start>

    return 0;
}
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	08 95       	ret

000011ca <__divmodhi4>:
    11ca:	97 fb       	bst	r25, 7
    11cc:	07 2e       	mov	r0, r23
    11ce:	16 f4       	brtc	.+4      	; 0x11d4 <__divmodhi4+0xa>
    11d0:	00 94       	com	r0
    11d2:	07 d0       	rcall	.+14     	; 0x11e2 <__divmodhi4_neg1>
    11d4:	77 fd       	sbrc	r23, 7
    11d6:	09 d0       	rcall	.+18     	; 0x11ea <__divmodhi4_neg2>
    11d8:	0e 94 0e 09 	call	0x121c	; 0x121c <__udivmodhi4>
    11dc:	07 fc       	sbrc	r0, 7
    11de:	05 d0       	rcall	.+10     	; 0x11ea <__divmodhi4_neg2>
    11e0:	3e f4       	brtc	.+14     	; 0x11f0 <__divmodhi4_exit>

000011e2 <__divmodhi4_neg1>:
    11e2:	90 95       	com	r25
    11e4:	81 95       	neg	r24
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	08 95       	ret

000011ea <__divmodhi4_neg2>:
    11ea:	70 95       	com	r23
    11ec:	61 95       	neg	r22
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255

000011f0 <__divmodhi4_exit>:
    11f0:	08 95       	ret

000011f2 <__tablejump2__>:
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	05 90       	lpm	r0, Z+
    11f8:	f4 91       	lpm	r31, Z
    11fa:	e0 2d       	mov	r30, r0
    11fc:	09 94       	ijmp

000011fe <__umulhisi3>:
    11fe:	a2 9f       	mul	r26, r18
    1200:	b0 01       	movw	r22, r0
    1202:	b3 9f       	mul	r27, r19
    1204:	c0 01       	movw	r24, r0
    1206:	a3 9f       	mul	r26, r19
    1208:	70 0d       	add	r23, r0
    120a:	81 1d       	adc	r24, r1
    120c:	11 24       	eor	r1, r1
    120e:	91 1d       	adc	r25, r1
    1210:	b2 9f       	mul	r27, r18
    1212:	70 0d       	add	r23, r0
    1214:	81 1d       	adc	r24, r1
    1216:	11 24       	eor	r1, r1
    1218:	91 1d       	adc	r25, r1
    121a:	08 95       	ret

0000121c <__udivmodhi4>:
    121c:	aa 1b       	sub	r26, r26
    121e:	bb 1b       	sub	r27, r27
    1220:	51 e1       	ldi	r21, 0x11	; 17
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <__udivmodhi4_ep>

00001224 <__udivmodhi4_loop>:
    1224:	aa 1f       	adc	r26, r26
    1226:	bb 1f       	adc	r27, r27
    1228:	a6 17       	cp	r26, r22
    122a:	b7 07       	cpc	r27, r23
    122c:	10 f0       	brcs	.+4      	; 0x1232 <__udivmodhi4_ep>
    122e:	a6 1b       	sub	r26, r22
    1230:	b7 0b       	sbc	r27, r23

00001232 <__udivmodhi4_ep>:
    1232:	88 1f       	adc	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	5a 95       	dec	r21
    1238:	a9 f7       	brne	.-22     	; 0x1224 <__udivmodhi4_loop>
    123a:	80 95       	com	r24
    123c:	90 95       	com	r25
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	08 95       	ret

00001244 <__subsf3>:
    1244:	50 58       	subi	r21, 0x80	; 128

00001246 <__addsf3>:
    1246:	bb 27       	eor	r27, r27
    1248:	aa 27       	eor	r26, r26
    124a:	0e 94 3a 09 	call	0x1274	; 0x1274 <__addsf3x>
    124e:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_round>
    1252:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_pscA>
    1256:	38 f0       	brcs	.+14     	; 0x1266 <__addsf3+0x20>
    1258:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_pscB>
    125c:	20 f0       	brcs	.+8      	; 0x1266 <__addsf3+0x20>
    125e:	39 f4       	brne	.+14     	; 0x126e <__addsf3+0x28>
    1260:	9f 3f       	cpi	r25, 0xFF	; 255
    1262:	19 f4       	brne	.+6      	; 0x126a <__addsf3+0x24>
    1264:	26 f4       	brtc	.+8      	; 0x126e <__addsf3+0x28>
    1266:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__fp_nan>
    126a:	0e f4       	brtc	.+2      	; 0x126e <__addsf3+0x28>
    126c:	e0 95       	com	r30
    126e:	e7 fb       	bst	r30, 7
    1270:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_inf>

00001274 <__addsf3x>:
    1274:	e9 2f       	mov	r30, r25
    1276:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fp_split3>
    127a:	58 f3       	brcs	.-42     	; 0x1252 <__addsf3+0xc>
    127c:	ba 17       	cp	r27, r26
    127e:	62 07       	cpc	r22, r18
    1280:	73 07       	cpc	r23, r19
    1282:	84 07       	cpc	r24, r20
    1284:	95 07       	cpc	r25, r21
    1286:	20 f0       	brcs	.+8      	; 0x1290 <__addsf3x+0x1c>
    1288:	79 f4       	brne	.+30     	; 0x12a8 <__addsf3x+0x34>
    128a:	a6 f5       	brtc	.+104    	; 0x12f4 <__addsf3x+0x80>
    128c:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_zero>
    1290:	0e f4       	brtc	.+2      	; 0x1294 <__addsf3x+0x20>
    1292:	e0 95       	com	r30
    1294:	0b 2e       	mov	r0, r27
    1296:	ba 2f       	mov	r27, r26
    1298:	a0 2d       	mov	r26, r0
    129a:	0b 01       	movw	r0, r22
    129c:	b9 01       	movw	r22, r18
    129e:	90 01       	movw	r18, r0
    12a0:	0c 01       	movw	r0, r24
    12a2:	ca 01       	movw	r24, r20
    12a4:	a0 01       	movw	r20, r0
    12a6:	11 24       	eor	r1, r1
    12a8:	ff 27       	eor	r31, r31
    12aa:	59 1b       	sub	r21, r25
    12ac:	99 f0       	breq	.+38     	; 0x12d4 <__addsf3x+0x60>
    12ae:	59 3f       	cpi	r21, 0xF9	; 249
    12b0:	50 f4       	brcc	.+20     	; 0x12c6 <__addsf3x+0x52>
    12b2:	50 3e       	cpi	r21, 0xE0	; 224
    12b4:	68 f1       	brcs	.+90     	; 0x1310 <__addsf3x+0x9c>
    12b6:	1a 16       	cp	r1, r26
    12b8:	f0 40       	sbci	r31, 0x00	; 0
    12ba:	a2 2f       	mov	r26, r18
    12bc:	23 2f       	mov	r18, r19
    12be:	34 2f       	mov	r19, r20
    12c0:	44 27       	eor	r20, r20
    12c2:	58 5f       	subi	r21, 0xF8	; 248
    12c4:	f3 cf       	rjmp	.-26     	; 0x12ac <__addsf3x+0x38>
    12c6:	46 95       	lsr	r20
    12c8:	37 95       	ror	r19
    12ca:	27 95       	ror	r18
    12cc:	a7 95       	ror	r26
    12ce:	f0 40       	sbci	r31, 0x00	; 0
    12d0:	53 95       	inc	r21
    12d2:	c9 f7       	brne	.-14     	; 0x12c6 <__addsf3x+0x52>
    12d4:	7e f4       	brtc	.+30     	; 0x12f4 <__addsf3x+0x80>
    12d6:	1f 16       	cp	r1, r31
    12d8:	ba 0b       	sbc	r27, r26
    12da:	62 0b       	sbc	r22, r18
    12dc:	73 0b       	sbc	r23, r19
    12de:	84 0b       	sbc	r24, r20
    12e0:	ba f0       	brmi	.+46     	; 0x1310 <__addsf3x+0x9c>
    12e2:	91 50       	subi	r25, 0x01	; 1
    12e4:	a1 f0       	breq	.+40     	; 0x130e <__addsf3x+0x9a>
    12e6:	ff 0f       	add	r31, r31
    12e8:	bb 1f       	adc	r27, r27
    12ea:	66 1f       	adc	r22, r22
    12ec:	77 1f       	adc	r23, r23
    12ee:	88 1f       	adc	r24, r24
    12f0:	c2 f7       	brpl	.-16     	; 0x12e2 <__addsf3x+0x6e>
    12f2:	0e c0       	rjmp	.+28     	; 0x1310 <__addsf3x+0x9c>
    12f4:	ba 0f       	add	r27, r26
    12f6:	62 1f       	adc	r22, r18
    12f8:	73 1f       	adc	r23, r19
    12fa:	84 1f       	adc	r24, r20
    12fc:	48 f4       	brcc	.+18     	; 0x1310 <__addsf3x+0x9c>
    12fe:	87 95       	ror	r24
    1300:	77 95       	ror	r23
    1302:	67 95       	ror	r22
    1304:	b7 95       	ror	r27
    1306:	f7 95       	ror	r31
    1308:	9e 3f       	cpi	r25, 0xFE	; 254
    130a:	08 f0       	brcs	.+2      	; 0x130e <__addsf3x+0x9a>
    130c:	b0 cf       	rjmp	.-160    	; 0x126e <__addsf3+0x28>
    130e:	93 95       	inc	r25
    1310:	88 0f       	add	r24, r24
    1312:	08 f0       	brcs	.+2      	; 0x1316 <__addsf3x+0xa2>
    1314:	99 27       	eor	r25, r25
    1316:	ee 0f       	add	r30, r30
    1318:	97 95       	ror	r25
    131a:	87 95       	ror	r24
    131c:	08 95       	ret

0000131e <__divsf3>:
    131e:	0e 94 a3 09 	call	0x1346	; 0x1346 <__divsf3x>
    1322:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_round>
    1326:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_pscB>
    132a:	58 f0       	brcs	.+22     	; 0x1342 <__divsf3+0x24>
    132c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_pscA>
    1330:	40 f0       	brcs	.+16     	; 0x1342 <__divsf3+0x24>
    1332:	29 f4       	brne	.+10     	; 0x133e <__divsf3+0x20>
    1334:	5f 3f       	cpi	r21, 0xFF	; 255
    1336:	29 f0       	breq	.+10     	; 0x1342 <__divsf3+0x24>
    1338:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_inf>
    133c:	51 11       	cpse	r21, r1
    133e:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_szero>
    1342:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__fp_nan>

00001346 <__divsf3x>:
    1346:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fp_split3>
    134a:	68 f3       	brcs	.-38     	; 0x1326 <__divsf3+0x8>

0000134c <__divsf3_pse>:
    134c:	99 23       	and	r25, r25
    134e:	b1 f3       	breq	.-20     	; 0x133c <__divsf3+0x1e>
    1350:	55 23       	and	r21, r21
    1352:	91 f3       	breq	.-28     	; 0x1338 <__divsf3+0x1a>
    1354:	95 1b       	sub	r25, r21
    1356:	55 0b       	sbc	r21, r21
    1358:	bb 27       	eor	r27, r27
    135a:	aa 27       	eor	r26, r26
    135c:	62 17       	cp	r22, r18
    135e:	73 07       	cpc	r23, r19
    1360:	84 07       	cpc	r24, r20
    1362:	38 f0       	brcs	.+14     	; 0x1372 <__divsf3_pse+0x26>
    1364:	9f 5f       	subi	r25, 0xFF	; 255
    1366:	5f 4f       	sbci	r21, 0xFF	; 255
    1368:	22 0f       	add	r18, r18
    136a:	33 1f       	adc	r19, r19
    136c:	44 1f       	adc	r20, r20
    136e:	aa 1f       	adc	r26, r26
    1370:	a9 f3       	breq	.-22     	; 0x135c <__divsf3_pse+0x10>
    1372:	35 d0       	rcall	.+106    	; 0x13de <__divsf3_pse+0x92>
    1374:	0e 2e       	mov	r0, r30
    1376:	3a f0       	brmi	.+14     	; 0x1386 <__divsf3_pse+0x3a>
    1378:	e0 e8       	ldi	r30, 0x80	; 128
    137a:	32 d0       	rcall	.+100    	; 0x13e0 <__divsf3_pse+0x94>
    137c:	91 50       	subi	r25, 0x01	; 1
    137e:	50 40       	sbci	r21, 0x00	; 0
    1380:	e6 95       	lsr	r30
    1382:	00 1c       	adc	r0, r0
    1384:	ca f7       	brpl	.-14     	; 0x1378 <__divsf3_pse+0x2c>
    1386:	2b d0       	rcall	.+86     	; 0x13de <__divsf3_pse+0x92>
    1388:	fe 2f       	mov	r31, r30
    138a:	29 d0       	rcall	.+82     	; 0x13de <__divsf3_pse+0x92>
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	bb 1f       	adc	r27, r27
    1394:	26 17       	cp	r18, r22
    1396:	37 07       	cpc	r19, r23
    1398:	48 07       	cpc	r20, r24
    139a:	ab 07       	cpc	r26, r27
    139c:	b0 e8       	ldi	r27, 0x80	; 128
    139e:	09 f0       	breq	.+2      	; 0x13a2 <__divsf3_pse+0x56>
    13a0:	bb 0b       	sbc	r27, r27
    13a2:	80 2d       	mov	r24, r0
    13a4:	bf 01       	movw	r22, r30
    13a6:	ff 27       	eor	r31, r31
    13a8:	93 58       	subi	r25, 0x83	; 131
    13aa:	5f 4f       	sbci	r21, 0xFF	; 255
    13ac:	3a f0       	brmi	.+14     	; 0x13bc <__divsf3_pse+0x70>
    13ae:	9e 3f       	cpi	r25, 0xFE	; 254
    13b0:	51 05       	cpc	r21, r1
    13b2:	78 f0       	brcs	.+30     	; 0x13d2 <__divsf3_pse+0x86>
    13b4:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_inf>
    13b8:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_szero>
    13bc:	5f 3f       	cpi	r21, 0xFF	; 255
    13be:	e4 f3       	brlt	.-8      	; 0x13b8 <__divsf3_pse+0x6c>
    13c0:	98 3e       	cpi	r25, 0xE8	; 232
    13c2:	d4 f3       	brlt	.-12     	; 0x13b8 <__divsf3_pse+0x6c>
    13c4:	86 95       	lsr	r24
    13c6:	77 95       	ror	r23
    13c8:	67 95       	ror	r22
    13ca:	b7 95       	ror	r27
    13cc:	f7 95       	ror	r31
    13ce:	9f 5f       	subi	r25, 0xFF	; 255
    13d0:	c9 f7       	brne	.-14     	; 0x13c4 <__divsf3_pse+0x78>
    13d2:	88 0f       	add	r24, r24
    13d4:	91 1d       	adc	r25, r1
    13d6:	96 95       	lsr	r25
    13d8:	87 95       	ror	r24
    13da:	97 f9       	bld	r25, 7
    13dc:	08 95       	ret
    13de:	e1 e0       	ldi	r30, 0x01	; 1
    13e0:	66 0f       	add	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	88 1f       	adc	r24, r24
    13e6:	bb 1f       	adc	r27, r27
    13e8:	62 17       	cp	r22, r18
    13ea:	73 07       	cpc	r23, r19
    13ec:	84 07       	cpc	r24, r20
    13ee:	ba 07       	cpc	r27, r26
    13f0:	20 f0       	brcs	.+8      	; 0x13fa <__divsf3_pse+0xae>
    13f2:	62 1b       	sub	r22, r18
    13f4:	73 0b       	sbc	r23, r19
    13f6:	84 0b       	sbc	r24, r20
    13f8:	ba 0b       	sbc	r27, r26
    13fa:	ee 1f       	adc	r30, r30
    13fc:	88 f7       	brcc	.-30     	; 0x13e0 <__divsf3_pse+0x94>
    13fe:	e0 95       	com	r30
    1400:	08 95       	ret

00001402 <__fixsfsi>:
    1402:	0e 94 08 0a 	call	0x1410	; 0x1410 <__fixunssfsi>
    1406:	68 94       	set
    1408:	b1 11       	cpse	r27, r1
    140a:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_szero>
    140e:	08 95       	ret

00001410 <__fixunssfsi>:
    1410:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fp_splitA>
    1414:	88 f0       	brcs	.+34     	; 0x1438 <__fixunssfsi+0x28>
    1416:	9f 57       	subi	r25, 0x7F	; 127
    1418:	98 f0       	brcs	.+38     	; 0x1440 <__fixunssfsi+0x30>
    141a:	b9 2f       	mov	r27, r25
    141c:	99 27       	eor	r25, r25
    141e:	b7 51       	subi	r27, 0x17	; 23
    1420:	b0 f0       	brcs	.+44     	; 0x144e <__fixunssfsi+0x3e>
    1422:	e1 f0       	breq	.+56     	; 0x145c <__fixunssfsi+0x4c>
    1424:	66 0f       	add	r22, r22
    1426:	77 1f       	adc	r23, r23
    1428:	88 1f       	adc	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	1a f0       	brmi	.+6      	; 0x1434 <__fixunssfsi+0x24>
    142e:	ba 95       	dec	r27
    1430:	c9 f7       	brne	.-14     	; 0x1424 <__fixunssfsi+0x14>
    1432:	14 c0       	rjmp	.+40     	; 0x145c <__fixunssfsi+0x4c>
    1434:	b1 30       	cpi	r27, 0x01	; 1
    1436:	91 f0       	breq	.+36     	; 0x145c <__fixunssfsi+0x4c>
    1438:	0e 94 be 0a 	call	0x157c	; 0x157c <__fp_zero>
    143c:	b1 e0       	ldi	r27, 0x01	; 1
    143e:	08 95       	ret
    1440:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_zero>
    1444:	67 2f       	mov	r22, r23
    1446:	78 2f       	mov	r23, r24
    1448:	88 27       	eor	r24, r24
    144a:	b8 5f       	subi	r27, 0xF8	; 248
    144c:	39 f0       	breq	.+14     	; 0x145c <__fixunssfsi+0x4c>
    144e:	b9 3f       	cpi	r27, 0xF9	; 249
    1450:	cc f3       	brlt	.-14     	; 0x1444 <__fixunssfsi+0x34>
    1452:	86 95       	lsr	r24
    1454:	77 95       	ror	r23
    1456:	67 95       	ror	r22
    1458:	b3 95       	inc	r27
    145a:	d9 f7       	brne	.-10     	; 0x1452 <__fixunssfsi+0x42>
    145c:	3e f4       	brtc	.+14     	; 0x146c <__fixunssfsi+0x5c>
    145e:	90 95       	com	r25
    1460:	80 95       	com	r24
    1462:	70 95       	com	r23
    1464:	61 95       	neg	r22
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	08 95       	ret

0000146e <__floatunsisf>:
    146e:	e8 94       	clt
    1470:	09 c0       	rjmp	.+18     	; 0x1484 <__floatsisf+0x12>

00001472 <__floatsisf>:
    1472:	97 fb       	bst	r25, 7
    1474:	3e f4       	brtc	.+14     	; 0x1484 <__floatsisf+0x12>
    1476:	90 95       	com	r25
    1478:	80 95       	com	r24
    147a:	70 95       	com	r23
    147c:	61 95       	neg	r22
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	8f 4f       	sbci	r24, 0xFF	; 255
    1482:	9f 4f       	sbci	r25, 0xFF	; 255
    1484:	99 23       	and	r25, r25
    1486:	a9 f0       	breq	.+42     	; 0x14b2 <__floatsisf+0x40>
    1488:	f9 2f       	mov	r31, r25
    148a:	96 e9       	ldi	r25, 0x96	; 150
    148c:	bb 27       	eor	r27, r27
    148e:	93 95       	inc	r25
    1490:	f6 95       	lsr	r31
    1492:	87 95       	ror	r24
    1494:	77 95       	ror	r23
    1496:	67 95       	ror	r22
    1498:	b7 95       	ror	r27
    149a:	f1 11       	cpse	r31, r1
    149c:	f8 cf       	rjmp	.-16     	; 0x148e <__floatsisf+0x1c>
    149e:	fa f4       	brpl	.+62     	; 0x14de <__floatsisf+0x6c>
    14a0:	bb 0f       	add	r27, r27
    14a2:	11 f4       	brne	.+4      	; 0x14a8 <__floatsisf+0x36>
    14a4:	60 ff       	sbrs	r22, 0
    14a6:	1b c0       	rjmp	.+54     	; 0x14de <__floatsisf+0x6c>
    14a8:	6f 5f       	subi	r22, 0xFF	; 255
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	8f 4f       	sbci	r24, 0xFF	; 255
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	16 c0       	rjmp	.+44     	; 0x14de <__floatsisf+0x6c>
    14b2:	88 23       	and	r24, r24
    14b4:	11 f0       	breq	.+4      	; 0x14ba <__floatsisf+0x48>
    14b6:	96 e9       	ldi	r25, 0x96	; 150
    14b8:	11 c0       	rjmp	.+34     	; 0x14dc <__floatsisf+0x6a>
    14ba:	77 23       	and	r23, r23
    14bc:	21 f0       	breq	.+8      	; 0x14c6 <__floatsisf+0x54>
    14be:	9e e8       	ldi	r25, 0x8E	; 142
    14c0:	87 2f       	mov	r24, r23
    14c2:	76 2f       	mov	r23, r22
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <__floatsisf+0x5e>
    14c6:	66 23       	and	r22, r22
    14c8:	71 f0       	breq	.+28     	; 0x14e6 <__floatsisf+0x74>
    14ca:	96 e8       	ldi	r25, 0x86	; 134
    14cc:	86 2f       	mov	r24, r22
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	2a f0       	brmi	.+10     	; 0x14de <__floatsisf+0x6c>
    14d4:	9a 95       	dec	r25
    14d6:	66 0f       	add	r22, r22
    14d8:	77 1f       	adc	r23, r23
    14da:	88 1f       	adc	r24, r24
    14dc:	da f7       	brpl	.-10     	; 0x14d4 <__floatsisf+0x62>
    14de:	88 0f       	add	r24, r24
    14e0:	96 95       	lsr	r25
    14e2:	87 95       	ror	r24
    14e4:	97 f9       	bld	r25, 7
    14e6:	08 95       	ret

000014e8 <__fp_inf>:
    14e8:	97 f9       	bld	r25, 7
    14ea:	9f 67       	ori	r25, 0x7F	; 127
    14ec:	80 e8       	ldi	r24, 0x80	; 128
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	08 95       	ret

000014f4 <__fp_nan>:
    14f4:	9f ef       	ldi	r25, 0xFF	; 255
    14f6:	80 ec       	ldi	r24, 0xC0	; 192
    14f8:	08 95       	ret

000014fa <__fp_pscA>:
    14fa:	00 24       	eor	r0, r0
    14fc:	0a 94       	dec	r0
    14fe:	16 16       	cp	r1, r22
    1500:	17 06       	cpc	r1, r23
    1502:	18 06       	cpc	r1, r24
    1504:	09 06       	cpc	r0, r25
    1506:	08 95       	ret

00001508 <__fp_pscB>:
    1508:	00 24       	eor	r0, r0
    150a:	0a 94       	dec	r0
    150c:	12 16       	cp	r1, r18
    150e:	13 06       	cpc	r1, r19
    1510:	14 06       	cpc	r1, r20
    1512:	05 06       	cpc	r0, r21
    1514:	08 95       	ret

00001516 <__fp_round>:
    1516:	09 2e       	mov	r0, r25
    1518:	03 94       	inc	r0
    151a:	00 0c       	add	r0, r0
    151c:	11 f4       	brne	.+4      	; 0x1522 <__fp_round+0xc>
    151e:	88 23       	and	r24, r24
    1520:	52 f0       	brmi	.+20     	; 0x1536 <__fp_round+0x20>
    1522:	bb 0f       	add	r27, r27
    1524:	40 f4       	brcc	.+16     	; 0x1536 <__fp_round+0x20>
    1526:	bf 2b       	or	r27, r31
    1528:	11 f4       	brne	.+4      	; 0x152e <__fp_round+0x18>
    152a:	60 ff       	sbrs	r22, 0
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <__fp_round+0x20>
    152e:	6f 5f       	subi	r22, 0xFF	; 255
    1530:	7f 4f       	sbci	r23, 0xFF	; 255
    1532:	8f 4f       	sbci	r24, 0xFF	; 255
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	08 95       	ret

00001538 <__fp_split3>:
    1538:	57 fd       	sbrc	r21, 7
    153a:	90 58       	subi	r25, 0x80	; 128
    153c:	44 0f       	add	r20, r20
    153e:	55 1f       	adc	r21, r21
    1540:	59 f0       	breq	.+22     	; 0x1558 <__fp_splitA+0x10>
    1542:	5f 3f       	cpi	r21, 0xFF	; 255
    1544:	71 f0       	breq	.+28     	; 0x1562 <__fp_splitA+0x1a>
    1546:	47 95       	ror	r20

00001548 <__fp_splitA>:
    1548:	88 0f       	add	r24, r24
    154a:	97 fb       	bst	r25, 7
    154c:	99 1f       	adc	r25, r25
    154e:	61 f0       	breq	.+24     	; 0x1568 <__fp_splitA+0x20>
    1550:	9f 3f       	cpi	r25, 0xFF	; 255
    1552:	79 f0       	breq	.+30     	; 0x1572 <__fp_splitA+0x2a>
    1554:	87 95       	ror	r24
    1556:	08 95       	ret
    1558:	12 16       	cp	r1, r18
    155a:	13 06       	cpc	r1, r19
    155c:	14 06       	cpc	r1, r20
    155e:	55 1f       	adc	r21, r21
    1560:	f2 cf       	rjmp	.-28     	; 0x1546 <__fp_split3+0xe>
    1562:	46 95       	lsr	r20
    1564:	f1 df       	rcall	.-30     	; 0x1548 <__fp_splitA>
    1566:	08 c0       	rjmp	.+16     	; 0x1578 <__fp_splitA+0x30>
    1568:	16 16       	cp	r1, r22
    156a:	17 06       	cpc	r1, r23
    156c:	18 06       	cpc	r1, r24
    156e:	99 1f       	adc	r25, r25
    1570:	f1 cf       	rjmp	.-30     	; 0x1554 <__fp_splitA+0xc>
    1572:	86 95       	lsr	r24
    1574:	71 05       	cpc	r23, r1
    1576:	61 05       	cpc	r22, r1
    1578:	08 94       	sec
    157a:	08 95       	ret

0000157c <__fp_zero>:
    157c:	e8 94       	clt

0000157e <__fp_szero>:
    157e:	bb 27       	eor	r27, r27
    1580:	66 27       	eor	r22, r22
    1582:	77 27       	eor	r23, r23
    1584:	cb 01       	movw	r24, r22
    1586:	97 f9       	bld	r25, 7
    1588:	08 95       	ret

0000158a <__mulsf3>:
    158a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__mulsf3x>
    158e:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__fp_round>
    1592:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_pscA>
    1596:	38 f0       	brcs	.+14     	; 0x15a6 <__mulsf3+0x1c>
    1598:	0e 94 84 0a 	call	0x1508	; 0x1508 <__fp_pscB>
    159c:	20 f0       	brcs	.+8      	; 0x15a6 <__mulsf3+0x1c>
    159e:	95 23       	and	r25, r21
    15a0:	11 f0       	breq	.+4      	; 0x15a6 <__mulsf3+0x1c>
    15a2:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_inf>
    15a6:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__fp_nan>
    15aa:	11 24       	eor	r1, r1
    15ac:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_szero>

000015b0 <__mulsf3x>:
    15b0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fp_split3>
    15b4:	70 f3       	brcs	.-36     	; 0x1592 <__mulsf3+0x8>

000015b6 <__mulsf3_pse>:
    15b6:	95 9f       	mul	r25, r21
    15b8:	c1 f3       	breq	.-16     	; 0x15aa <__mulsf3+0x20>
    15ba:	95 0f       	add	r25, r21
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	55 1f       	adc	r21, r21
    15c0:	62 9f       	mul	r22, r18
    15c2:	f0 01       	movw	r30, r0
    15c4:	72 9f       	mul	r23, r18
    15c6:	bb 27       	eor	r27, r27
    15c8:	f0 0d       	add	r31, r0
    15ca:	b1 1d       	adc	r27, r1
    15cc:	63 9f       	mul	r22, r19
    15ce:	aa 27       	eor	r26, r26
    15d0:	f0 0d       	add	r31, r0
    15d2:	b1 1d       	adc	r27, r1
    15d4:	aa 1f       	adc	r26, r26
    15d6:	64 9f       	mul	r22, r20
    15d8:	66 27       	eor	r22, r22
    15da:	b0 0d       	add	r27, r0
    15dc:	a1 1d       	adc	r26, r1
    15de:	66 1f       	adc	r22, r22
    15e0:	82 9f       	mul	r24, r18
    15e2:	22 27       	eor	r18, r18
    15e4:	b0 0d       	add	r27, r0
    15e6:	a1 1d       	adc	r26, r1
    15e8:	62 1f       	adc	r22, r18
    15ea:	73 9f       	mul	r23, r19
    15ec:	b0 0d       	add	r27, r0
    15ee:	a1 1d       	adc	r26, r1
    15f0:	62 1f       	adc	r22, r18
    15f2:	83 9f       	mul	r24, r19
    15f4:	a0 0d       	add	r26, r0
    15f6:	61 1d       	adc	r22, r1
    15f8:	22 1f       	adc	r18, r18
    15fa:	74 9f       	mul	r23, r20
    15fc:	33 27       	eor	r19, r19
    15fe:	a0 0d       	add	r26, r0
    1600:	61 1d       	adc	r22, r1
    1602:	23 1f       	adc	r18, r19
    1604:	84 9f       	mul	r24, r20
    1606:	60 0d       	add	r22, r0
    1608:	21 1d       	adc	r18, r1
    160a:	82 2f       	mov	r24, r18
    160c:	76 2f       	mov	r23, r22
    160e:	6a 2f       	mov	r22, r26
    1610:	11 24       	eor	r1, r1
    1612:	9f 57       	subi	r25, 0x7F	; 127
    1614:	50 40       	sbci	r21, 0x00	; 0
    1616:	9a f0       	brmi	.+38     	; 0x163e <__mulsf3_pse+0x88>
    1618:	f1 f0       	breq	.+60     	; 0x1656 <__mulsf3_pse+0xa0>
    161a:	88 23       	and	r24, r24
    161c:	4a f0       	brmi	.+18     	; 0x1630 <__mulsf3_pse+0x7a>
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	bb 1f       	adc	r27, r27
    1624:	66 1f       	adc	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	88 1f       	adc	r24, r24
    162a:	91 50       	subi	r25, 0x01	; 1
    162c:	50 40       	sbci	r21, 0x00	; 0
    162e:	a9 f7       	brne	.-22     	; 0x161a <__mulsf3_pse+0x64>
    1630:	9e 3f       	cpi	r25, 0xFE	; 254
    1632:	51 05       	cpc	r21, r1
    1634:	80 f0       	brcs	.+32     	; 0x1656 <__mulsf3_pse+0xa0>
    1636:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__fp_inf>
    163a:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_szero>
    163e:	5f 3f       	cpi	r21, 0xFF	; 255
    1640:	e4 f3       	brlt	.-8      	; 0x163a <__mulsf3_pse+0x84>
    1642:	98 3e       	cpi	r25, 0xE8	; 232
    1644:	d4 f3       	brlt	.-12     	; 0x163a <__mulsf3_pse+0x84>
    1646:	86 95       	lsr	r24
    1648:	77 95       	ror	r23
    164a:	67 95       	ror	r22
    164c:	b7 95       	ror	r27
    164e:	f7 95       	ror	r31
    1650:	e7 95       	ror	r30
    1652:	9f 5f       	subi	r25, 0xFF	; 255
    1654:	c1 f7       	brne	.-16     	; 0x1646 <__mulsf3_pse+0x90>
    1656:	fe 2b       	or	r31, r30
    1658:	88 0f       	add	r24, r24
    165a:	91 1d       	adc	r25, r1
    165c:	96 95       	lsr	r25
    165e:	87 95       	ror	r24
    1660:	97 f9       	bld	r25, 7
    1662:	08 95       	ret

00001664 <do_rand>:
    1664:	8f 92       	push	r8
    1666:	9f 92       	push	r9
    1668:	af 92       	push	r10
    166a:	bf 92       	push	r11
    166c:	cf 92       	push	r12
    166e:	df 92       	push	r13
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	ec 01       	movw	r28, r24
    167a:	68 81       	ld	r22, Y
    167c:	79 81       	ldd	r23, Y+1	; 0x01
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	9b 81       	ldd	r25, Y+3	; 0x03
    1682:	61 15       	cp	r22, r1
    1684:	71 05       	cpc	r23, r1
    1686:	81 05       	cpc	r24, r1
    1688:	91 05       	cpc	r25, r1
    168a:	21 f4       	brne	.+8      	; 0x1694 <do_rand+0x30>
    168c:	64 e2       	ldi	r22, 0x24	; 36
    168e:	79 ed       	ldi	r23, 0xD9	; 217
    1690:	8b e5       	ldi	r24, 0x5B	; 91
    1692:	97 e0       	ldi	r25, 0x07	; 7
    1694:	2d e1       	ldi	r18, 0x1D	; 29
    1696:	33 ef       	ldi	r19, 0xF3	; 243
    1698:	41 e0       	ldi	r20, 0x01	; 1
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__divmodsi4>
    16a0:	49 01       	movw	r8, r18
    16a2:	5a 01       	movw	r10, r20
    16a4:	9b 01       	movw	r18, r22
    16a6:	ac 01       	movw	r20, r24
    16a8:	a7 ea       	ldi	r26, 0xA7	; 167
    16aa:	b1 e4       	ldi	r27, 0x41	; 65
    16ac:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__muluhisi3>
    16b0:	6b 01       	movw	r12, r22
    16b2:	7c 01       	movw	r14, r24
    16b4:	ac ee       	ldi	r26, 0xEC	; 236
    16b6:	b4 ef       	ldi	r27, 0xF4	; 244
    16b8:	a5 01       	movw	r20, r10
    16ba:	94 01       	movw	r18, r8
    16bc:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__mulohisi3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	8c 0d       	add	r24, r12
    16c6:	9d 1d       	adc	r25, r13
    16c8:	ae 1d       	adc	r26, r14
    16ca:	bf 1d       	adc	r27, r15
    16cc:	b7 ff       	sbrs	r27, 7
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <do_rand+0x72>
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	a1 09       	sbc	r26, r1
    16d4:	b0 48       	sbci	r27, 0x80	; 128
    16d6:	88 83       	st	Y, r24
    16d8:	99 83       	std	Y+1, r25	; 0x01
    16da:	aa 83       	std	Y+2, r26	; 0x02
    16dc:	bb 83       	std	Y+3, r27	; 0x03
    16de:	9f 77       	andi	r25, 0x7F	; 127
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	ff 90       	pop	r15
    16e6:	ef 90       	pop	r14
    16e8:	df 90       	pop	r13
    16ea:	cf 90       	pop	r12
    16ec:	bf 90       	pop	r11
    16ee:	af 90       	pop	r10
    16f0:	9f 90       	pop	r9
    16f2:	8f 90       	pop	r8
    16f4:	08 95       	ret

000016f6 <rand_r>:
    16f6:	0e 94 32 0b 	call	0x1664	; 0x1664 <do_rand>
    16fa:	08 95       	ret

000016fc <rand>:
    16fc:	87 e0       	ldi	r24, 0x07	; 7
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 32 0b 	call	0x1664	; 0x1664 <do_rand>
    1704:	08 95       	ret

00001706 <srand>:
    1706:	a0 e0       	ldi	r26, 0x00	; 0
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    170e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    1712:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    1716:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    171a:	08 95       	ret

0000171c <eeprom_read_byte>:
    171c:	f9 99       	sbic	0x1f, 1	; 31
    171e:	fe cf       	rjmp	.-4      	; 0x171c <eeprom_read_byte>
    1720:	92 bd       	out	0x22, r25	; 34
    1722:	81 bd       	out	0x21, r24	; 33
    1724:	f8 9a       	sbi	0x1f, 0	; 31
    1726:	99 27       	eor	r25, r25
    1728:	80 b5       	in	r24, 0x20	; 32
    172a:	08 95       	ret

0000172c <eeprom_write_byte>:
    172c:	26 2f       	mov	r18, r22

0000172e <eeprom_write_r18>:
    172e:	f9 99       	sbic	0x1f, 1	; 31
    1730:	fe cf       	rjmp	.-4      	; 0x172e <eeprom_write_r18>
    1732:	1f ba       	out	0x1f, r1	; 31
    1734:	92 bd       	out	0x22, r25	; 34
    1736:	81 bd       	out	0x21, r24	; 33
    1738:	20 bd       	out	0x20, r18	; 32
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	fa 9a       	sbi	0x1f, 2	; 31
    1740:	f9 9a       	sbi	0x1f, 1	; 31
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	08 95       	ret

00001748 <__divmodsi4>:
    1748:	05 2e       	mov	r0, r21
    174a:	97 fb       	bst	r25, 7
    174c:	1e f4       	brtc	.+6      	; 0x1754 <__divmodsi4+0xc>
    174e:	00 94       	com	r0
    1750:	0e 94 bb 0b 	call	0x1776	; 0x1776 <__negsi2>
    1754:	57 fd       	sbrc	r21, 7
    1756:	07 d0       	rcall	.+14     	; 0x1766 <__divmodsi4_neg2>
    1758:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__udivmodsi4>
    175c:	07 fc       	sbrc	r0, 7
    175e:	03 d0       	rcall	.+6      	; 0x1766 <__divmodsi4_neg2>
    1760:	4e f4       	brtc	.+18     	; 0x1774 <__divmodsi4_exit>
    1762:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__negsi2>

00001766 <__divmodsi4_neg2>:
    1766:	50 95       	com	r21
    1768:	40 95       	com	r20
    176a:	30 95       	com	r19
    176c:	21 95       	neg	r18
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
    1770:	4f 4f       	sbci	r20, 0xFF	; 255
    1772:	5f 4f       	sbci	r21, 0xFF	; 255

00001774 <__divmodsi4_exit>:
    1774:	08 95       	ret

00001776 <__negsi2>:
    1776:	90 95       	com	r25
    1778:	80 95       	com	r24
    177a:	70 95       	com	r23
    177c:	61 95       	neg	r22
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	8f 4f       	sbci	r24, 0xFF	; 255
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	08 95       	ret

00001786 <__muluhisi3>:
    1786:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__umulhisi3>
    178a:	a5 9f       	mul	r26, r21
    178c:	90 0d       	add	r25, r0
    178e:	b4 9f       	mul	r27, r20
    1790:	90 0d       	add	r25, r0
    1792:	a4 9f       	mul	r26, r20
    1794:	80 0d       	add	r24, r0
    1796:	91 1d       	adc	r25, r1
    1798:	11 24       	eor	r1, r1
    179a:	08 95       	ret

0000179c <__mulshisi3>:
    179c:	b7 ff       	sbrs	r27, 7
    179e:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__muluhisi3>

000017a2 <__mulohisi3>:
    17a2:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__muluhisi3>
    17a6:	82 1b       	sub	r24, r18
    17a8:	93 0b       	sbc	r25, r19
    17aa:	08 95       	ret

000017ac <__udivmodsi4>:
    17ac:	a1 e2       	ldi	r26, 0x21	; 33
    17ae:	1a 2e       	mov	r1, r26
    17b0:	aa 1b       	sub	r26, r26
    17b2:	bb 1b       	sub	r27, r27
    17b4:	fd 01       	movw	r30, r26
    17b6:	0d c0       	rjmp	.+26     	; 0x17d2 <__udivmodsi4_ep>

000017b8 <__udivmodsi4_loop>:
    17b8:	aa 1f       	adc	r26, r26
    17ba:	bb 1f       	adc	r27, r27
    17bc:	ee 1f       	adc	r30, r30
    17be:	ff 1f       	adc	r31, r31
    17c0:	a2 17       	cp	r26, r18
    17c2:	b3 07       	cpc	r27, r19
    17c4:	e4 07       	cpc	r30, r20
    17c6:	f5 07       	cpc	r31, r21
    17c8:	20 f0       	brcs	.+8      	; 0x17d2 <__udivmodsi4_ep>
    17ca:	a2 1b       	sub	r26, r18
    17cc:	b3 0b       	sbc	r27, r19
    17ce:	e4 0b       	sbc	r30, r20
    17d0:	f5 0b       	sbc	r31, r21

000017d2 <__udivmodsi4_ep>:
    17d2:	66 1f       	adc	r22, r22
    17d4:	77 1f       	adc	r23, r23
    17d6:	88 1f       	adc	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	1a 94       	dec	r1
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <__udivmodsi4_loop>
    17de:	60 95       	com	r22
    17e0:	70 95       	com	r23
    17e2:	80 95       	com	r24
    17e4:	90 95       	com	r25
    17e6:	9b 01       	movw	r18, r22
    17e8:	ac 01       	movw	r20, r24
    17ea:	bd 01       	movw	r22, r26
    17ec:	cf 01       	movw	r24, r30
    17ee:	08 95       	ret

000017f0 <_exit>:
    17f0:	f8 94       	cli

000017f2 <__stop_program>:
    17f2:	ff cf       	rjmp	.-2      	; 0x17f2 <__stop_program>
