
build/bootldr.elf:     file format elf32-avr


Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7008:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    700c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7010:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7014:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7018:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    701c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7020:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7024:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7028:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    702c:	0c 94 90 39 	jmp	0x7320	; 0x7320 <__vector_11>
    7030:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7034:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7038:	0c 94 70 39 	jmp	0x72e0	; 0x72e0 <__vector_14>
    703c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7040:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7044:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7048:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    704c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7050:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7054:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7058:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    705c:	0c 94 b2 39 	jmp	0x7364	; 0x7364 <__vector_23>
    7060:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7064:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_copy_data>:
    7074:	11 e0       	ldi	r17, 0x01	; 1
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	e2 e0       	ldi	r30, 0x02	; 2
    707c:	f6 e7       	ldi	r31, 0x76	; 118
    707e:	02 c0       	rjmp	.+4      	; 0x7084 <__do_copy_data+0x10>
    7080:	05 90       	lpm	r0, Z+
    7082:	0d 92       	st	X+, r0
    7084:	a6 30       	cpi	r26, 0x06	; 6
    7086:	b1 07       	cpc	r27, r17
    7088:	d9 f7       	brne	.-10     	; 0x7080 <__do_copy_data+0xc>

0000708a <__do_clear_bss>:
    708a:	21 e0       	ldi	r18, 0x01	; 1
    708c:	a6 e0       	ldi	r26, 0x06	; 6
    708e:	b1 e0       	ldi	r27, 0x01	; 1
    7090:	01 c0       	rjmp	.+2      	; 0x7094 <.do_clear_bss_start>

00007092 <.do_clear_bss_loop>:
    7092:	1d 92       	st	X+, r1

00007094 <.do_clear_bss_start>:
    7094:	a6 3c       	cpi	r26, 0xC6	; 198
    7096:	b2 07       	cpc	r27, r18
    7098:	e1 f7       	brne	.-8      	; 0x7092 <.do_clear_bss_loop>
    709a:	0e 94 b1 3a 	call	0x7562	; 0x7562 <main>
    709e:	0c 94 ff 3a 	jmp	0x75fe	; 0x75fe <_exit>

000070a2 <__bad_interrupt>:
    70a2:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

000070a6 <goto_program>:
uint16_t page_buffer[SPM_PAGESIZE/2+2];
bootmsg_t *bootmsg;
BF_create(page_table, 224);

void goto_program() {
    MCUCR = (1<<IVCE);
    70a6:	81 e0       	ldi	r24, 0x01	; 1
    70a8:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0;
    70aa:	15 be       	out	0x35, r1	; 53
    asm volatile ("jmp 0x0000");
    70ac:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
    70b0:	08 95       	ret

000070b2 <message_rx>:
}

void message_rx(message_t *msg, distance_measurement_t *dist) {
    70b2:	fc 01       	movw	r30, r24
    if (msg->type == BOOTPGM_PAGE) {
    70b4:	81 85       	ldd	r24, Z+9	; 0x09
    70b6:	81 38       	cpi	r24, 0x81	; 129
    70b8:	09 f0       	breq	.+2      	; 0x70bc <message_rx+0xa>
    70ba:	a0 c0       	rjmp	.+320    	; 0x71fc <message_rx+0x14a>
        bootmsg = (bootmsg_t*)msg->data;
    70bc:	f0 93 25 01 	sts	0x0125, r31
    70c0:	e0 93 24 01 	sts	0x0124, r30
        if (page_address != bootmsg->page_address) {
    70c4:	80 81       	ld	r24, Z
    70c6:	90 91 ad 01 	lds	r25, 0x01AD
    70ca:	98 17       	cp	r25, r24
    70cc:	31 f0       	breq	.+12     	; 0x70da <message_rx+0x28>
            page_address = bootmsg->page_address;
    70ce:	80 93 ad 01 	sts	0x01AD, r24
            page_byte_count = 0;
    70d2:	10 92 28 01 	sts	0x0128, r1
    70d6:	10 92 27 01 	sts	0x0127, r1
        }
        page_buffer[bootmsg->page_offset] = bootmsg->word1;
    70da:	21 81       	ldd	r18, Z+1	; 0x01
    70dc:	30 e0       	ldi	r19, 0x00	; 0
    70de:	82 81       	ldd	r24, Z+2	; 0x02
    70e0:	93 81       	ldd	r25, Z+3	; 0x03
    70e2:	d9 01       	movw	r26, r18
    70e4:	aa 0f       	add	r26, r26
    70e6:	bb 1f       	adc	r27, r27
    70e8:	a7 5d       	subi	r26, 0xD7	; 215
    70ea:	be 4f       	sbci	r27, 0xFE	; 254
    70ec:	8d 93       	st	X+, r24
    70ee:	9c 93       	st	X, r25
        page_buffer[bootmsg->page_offset+1] = bootmsg->word2;
    70f0:	84 81       	ldd	r24, Z+4	; 0x04
    70f2:	95 81       	ldd	r25, Z+5	; 0x05
    70f4:	d9 01       	movw	r26, r18
    70f6:	aa 0f       	add	r26, r26
    70f8:	bb 1f       	adc	r27, r27
    70fa:	a5 5d       	subi	r26, 0xD5	; 213
    70fc:	be 4f       	sbci	r27, 0xFE	; 254
    70fe:	8d 93       	st	X+, r24
    7100:	9c 93       	st	X, r25
        page_buffer[bootmsg->page_offset+2] = bootmsg->word3;
    7102:	86 81       	ldd	r24, Z+6	; 0x06
    7104:	97 81       	ldd	r25, Z+7	; 0x07
    7106:	22 0f       	add	r18, r18
    7108:	33 1f       	adc	r19, r19
    710a:	f9 01       	movw	r30, r18
    710c:	e3 5d       	subi	r30, 0xD3	; 211
    710e:	fe 4f       	sbci	r31, 0xFE	; 254
    7110:	91 83       	std	Z+1, r25	; 0x01
    7112:	80 83       	st	Z, r24
        page_byte_count += 6;
    7114:	80 91 27 01 	lds	r24, 0x0127
    7118:	90 91 28 01 	lds	r25, 0x0128
    711c:	06 96       	adiw	r24, 0x06	; 6
    711e:	90 93 28 01 	sts	0x0128, r25
    7122:	80 93 27 01 	sts	0x0127, r24
        if (page_byte_count >= SPM_PAGESIZE && !BF_get(page_table, page_address)) {
    7126:	80 38       	cpi	r24, 0x80	; 128
    7128:	91 05       	cpc	r25, r1
    712a:	08 f4       	brcc	.+2      	; 0x712e <message_rx+0x7c>
    712c:	64 c0       	rjmp	.+200    	; 0x71f6 <message_rx+0x144>
    712e:	80 91 ad 01 	lds	r24, 0x01AD
    7132:	e8 2f       	mov	r30, r24
    7134:	e6 95       	lsr	r30
    7136:	e6 95       	lsr	r30
    7138:	e6 95       	lsr	r30
    713a:	f0 e0       	ldi	r31, 0x00	; 0
    713c:	ea 5f       	subi	r30, 0xFA	; 250
    713e:	fe 4f       	sbci	r31, 0xFE	; 254
    7140:	20 81       	ld	r18, Z
    7142:	30 e0       	ldi	r19, 0x00	; 0
    7144:	98 2f       	mov	r25, r24
    7146:	97 70       	andi	r25, 0x07	; 7
    7148:	02 c0       	rjmp	.+4      	; 0x714e <message_rx+0x9c>
    714a:	35 95       	asr	r19
    714c:	27 95       	ror	r18
    714e:	9a 95       	dec	r25
    7150:	e2 f7       	brpl	.-8      	; 0x714a <message_rx+0x98>
    7152:	20 fd       	sbrc	r18, 0
    7154:	50 c0       	rjmp	.+160    	; 0x71f6 <message_rx+0x144>
             * Write program page to flash.
             *
             * Taken from http://www.nongnu.org/avr-libc/user-manual/group__avr__boot.html
             */

            eeprom_busy_wait ();
    7156:	f9 99       	sbic	0x1f, 1	; 31
    7158:	fe cf       	rjmp	.-4      	; 0x7156 <message_rx+0xa4>

            boot_page_erase(page_address*SPM_PAGESIZE);
    715a:	20 e8       	ldi	r18, 0x80	; 128
    715c:	82 9f       	mul	r24, r18
    715e:	c0 01       	movw	r24, r0
    7160:	11 24       	eor	r1, r1
    7162:	23 e0       	ldi	r18, 0x03	; 3
    7164:	fc 01       	movw	r30, r24
    7166:	20 93 57 00 	sts	0x0057, r18
    716a:	e8 95       	spm
            boot_spm_busy_wait();
    716c:	07 b6       	in	r0, 0x37	; 55
    716e:	00 fc       	sbrc	r0, 0
    7170:	fd cf       	rjmp	.-6      	; 0x716c <message_rx+0xba>
    7172:	a9 e2       	ldi	r26, 0x29	; 41
    7174:	b1 e0       	ldi	r27, 0x01	; 1
    7176:	bc 01       	movw	r22, r24
    7178:	69 52       	subi	r22, 0x29	; 41
    717a:	71 40       	sbci	r23, 0x01	; 1

            int i,j;
            for (i=0, j=0; i<SPM_PAGESIZE; i+=2, j++)
                boot_page_fill(page_address*SPM_PAGESIZE+i, page_buffer[j]);
    717c:	21 e0       	ldi	r18, 0x01	; 1
    717e:	fb 01       	movw	r30, r22
    7180:	ea 0f       	add	r30, r26
    7182:	fb 1f       	adc	r31, r27
    7184:	4d 91       	ld	r20, X+
    7186:	5d 91       	ld	r21, X+
    7188:	0a 01       	movw	r0, r20
    718a:	20 93 57 00 	sts	0x0057, r18
    718e:	e8 95       	spm
    7190:	11 24       	eor	r1, r1

            boot_page_erase(page_address*SPM_PAGESIZE);
            boot_spm_busy_wait();

            int i,j;
            for (i=0, j=0; i<SPM_PAGESIZE; i+=2, j++)
    7192:	f1 e0       	ldi	r31, 0x01	; 1
    7194:	a9 3a       	cpi	r26, 0xA9	; 169
    7196:	bf 07       	cpc	r27, r31
    7198:	91 f7       	brne	.-28     	; 0x717e <message_rx+0xcc>
                boot_page_fill(page_address*SPM_PAGESIZE+i, page_buffer[j]);

            boot_page_write(page_address*SPM_PAGESIZE);
    719a:	25 e0       	ldi	r18, 0x05	; 5
    719c:	fc 01       	movw	r30, r24
    719e:	20 93 57 00 	sts	0x0057, r18
    71a2:	e8 95       	spm
            boot_spm_busy_wait();
    71a4:	07 b6       	in	r0, 0x37	; 55
    71a6:	00 fc       	sbrc	r0, 0
    71a8:	fd cf       	rjmp	.-6      	; 0x71a4 <message_rx+0xf2>

            boot_rww_enable ();
    71aa:	81 e1       	ldi	r24, 0x11	; 17
    71ac:	80 93 57 00 	sts	0x0057, r24
    71b0:	e8 95       	spm

            set_color(RGB(0,3,0));
    71b2:	8c e0       	ldi	r24, 0x0C	; 12
    71b4:	0e 94 71 39 	call	0x72e2	; 0x72e2 <set_color>
            BF_set(page_table, page_address);
    71b8:	80 91 ad 01 	lds	r24, 0x01AD
    71bc:	e8 2f       	mov	r30, r24
    71be:	e6 95       	lsr	r30
    71c0:	e6 95       	lsr	r30
    71c2:	e6 95       	lsr	r30
    71c4:	f0 e0       	ldi	r31, 0x00	; 0
    71c6:	ea 5f       	subi	r30, 0xFA	; 250
    71c8:	fe 4f       	sbci	r31, 0xFE	; 254
    71ca:	28 2f       	mov	r18, r24
    71cc:	27 70       	andi	r18, 0x07	; 7
    71ce:	81 e0       	ldi	r24, 0x01	; 1
    71d0:	90 e0       	ldi	r25, 0x00	; 0
    71d2:	01 c0       	rjmp	.+2      	; 0x71d6 <message_rx+0x124>
    71d4:	88 0f       	add	r24, r24
    71d6:	2a 95       	dec	r18
    71d8:	ea f7       	brpl	.-6      	; 0x71d4 <message_rx+0x122>
    71da:	90 81       	ld	r25, Z
    71dc:	89 2b       	or	r24, r25
    71de:	80 83       	st	Z, r24
            page_count++;
    71e0:	80 91 23 01 	lds	r24, 0x0123
    71e4:	8f 5f       	subi	r24, 0xFF	; 255
    71e6:	80 93 23 01 	sts	0x0123, r24
            if (page_count == page_total)
    71ea:	90 91 26 01 	lds	r25, 0x0126
    71ee:	89 13       	cpse	r24, r25
    71f0:	18 c0       	rjmp	.+48     	; 0x7222 <message_rx+0x170>
                goto_program();
    71f2:	0c 94 53 38 	jmp	0x70a6	; 0x70a6 <goto_program>
        }
        else
            set_color(RGB(0,0,1));
    71f6:	80 e1       	ldi	r24, 0x10	; 16
    71f8:	0c 94 71 39 	jmp	0x72e2	; 0x72e2 <set_color>
    } else if (msg->type == BOOTPGM_SIZE) {
    71fc:	82 38       	cpi	r24, 0x82	; 130
    71fe:	41 f4       	brne	.+16     	; 0x7210 <message_rx+0x15e>
        page_total = msg->data[0];
    7200:	80 81       	ld	r24, Z
    7202:	80 93 26 01 	sts	0x0126, r24
        if (page_count == page_total)
    7206:	90 91 23 01 	lds	r25, 0x0123
    720a:	98 13       	cpse	r25, r24
    720c:	0a c0       	rjmp	.+20     	; 0x7222 <message_rx+0x170>
    720e:	f1 cf       	rjmp	.-30     	; 0x71f2 <message_rx+0x140>
            goto_program();
    } else if (msg->type == BOOT) {
    7210:	80 38       	cpi	r24, 0x80	; 128
    7212:	19 f4       	brne	.+6      	; 0x721a <message_rx+0x168>
            asm volatile ("jmp 0x7000");
    7214:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>
    7218:	08 95       	ret
    } else {
        if (page_count == 0)
    721a:	80 91 23 01 	lds	r24, 0x0123
    721e:	88 23       	and	r24, r24
    7220:	41 f3       	breq	.-48     	; 0x71f2 <message_rx+0x140>
    7222:	08 95       	ret

00007224 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
    7224:	08 95       	ret

00007226 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
    7226:	80 e0       	ldi	r24, 0x00	; 0
    7228:	90 e0       	ldi	r25, 0x00	; 0
    722a:	08 95       	ret

0000722c <message_tx_success_dummy>:
void message_tx_success_dummy() {}
    722c:	08 95       	ret

0000722e <kilo_init>:
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
    cli();
    722e:	f8 94       	cli

    ports_off();
    7230:	14 b8       	out	0x04, r1	; 4
    7232:	17 b8       	out	0x07, r1	; 7
    7234:	1a b8       	out	0x0a, r1	; 10
    7236:	15 b8       	out	0x05, r1	; 5
    7238:	18 b8       	out	0x08, r1	; 8
    723a:	1b b8       	out	0x0b, r1	; 11
    ports_on();
    723c:	52 9a       	sbi	0x0a, 2	; 10
    723e:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
    7240:	14 bc       	out	0x24, r1	; 36
    7242:	85 e0       	ldi	r24, 0x05	; 5
    7244:	85 bd       	out	0x25, r24	; 37
    7246:	8f ef       	ldi	r24, 0xFF	; 255
    7248:	87 bd       	out	0x27, r24	; 39
    724a:	82 e0       	ldi	r24, 0x02	; 2
    724c:	80 93 6e 00 	sts	0x006E, r24
    rx_timer_setup();
    7250:	10 92 80 00 	sts	0x0080, r1
    7254:	10 92 81 00 	sts	0x0081, r1
    7258:	2f e8       	ldi	r18, 0x8F	; 143
    725a:	3b e0       	ldi	r19, 0x0B	; 11
    725c:	30 93 89 00 	sts	0x0089, r19
    7260:	20 93 88 00 	sts	0x0088, r18
    7264:	80 93 6f 00 	sts	0x006F, r24
    motors_setup();
    7268:	53 98       	cbi	0x0a, 3	; 10
    726a:	23 98       	cbi	0x04, 3	; 4
    726c:	91 ea       	ldi	r25, 0xA1	; 161
    726e:	90 93 b0 00 	sts	0x00B0, r25
    7272:	80 93 b1 00 	sts	0x00B1, r24
    7276:	10 92 b4 00 	sts	0x00B4, r1
    727a:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
    727e:	8b e0       	ldi	r24, 0x0B	; 11
    7280:	80 bf       	out	0x30, r24	; 48
    7282:	83 e0       	ldi	r24, 0x03	; 3
    7284:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
    7288:	86 e0       	ldi	r24, 0x06	; 6
    728a:	80 93 7c 00 	sts	0x007C, r24
    728e:	83 e8       	ldi	r24, 0x83	; 131
    7290:	80 93 7a 00 	sts	0x007A, r24
    7294:	80 91 7a 00 	lds	r24, 0x007A
    7298:	80 64       	ori	r24, 0x40	; 64
    729a:	80 93 7a 00 	sts	0x007A, r24
    729e:	80 91 7a 00 	lds	r24, 0x007A
    72a2:	86 fd       	sbrc	r24, 6
    72a4:	fc cf       	rjmp	.-8      	; 0x729e <kilo_init+0x70>
    adc_trigger_high_gain();
    72a6:	10 92 7c 00 	sts	0x007C, r1
    72aa:	83 ea       	ldi	r24, 0xA3	; 163
    72ac:	80 93 7a 00 	sts	0x007A, r24
    72b0:	81 e0       	ldi	r24, 0x01	; 1
    72b2:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
    72b6:	81 e0       	ldi	r24, 0x01	; 1
    72b8:	90 e0       	ldi	r25, 0x00	; 0
    72ba:	0e 94 f7 3a 	call	0x75ee	; 0x75ee <eeprom_read_byte>
    if (osccal != 0xFF)
    72be:	8f 3f       	cpi	r24, 0xFF	; 255
    72c0:	11 f0       	breq	.+4      	; 0x72c6 <kilo_init+0x98>
        OSCCAL = osccal;
    72c2:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
    72c6:	10 92 b5 01 	sts	0x01B5, r1
    rx_leadingbit = 1;
    72ca:	81 e0       	ldi	r24, 0x01	; 1
    72cc:	80 93 ae 01 	sts	0x01AE, r24
    rx_leadingbyte = 1;
    72d0:	80 93 b6 01 	sts	0x01B6, r24
    rx_byteindex = 0;
    72d4:	10 92 b0 01 	sts	0x01B0, r1
    rx_bytevalue = 0;
    72d8:	10 92 c5 01 	sts	0x01C5, r1
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
    72dc:	78 94       	sei
    72de:	08 95       	ret

000072e0 <__vector_14>:

static inline void process_message() {
    kilo_message_rx(&rx_msg, &rx_dist);
}

EMPTY_INTERRUPT(TIMER0_COMPA_vect)
    72e0:	18 95       	reti

000072e2 <set_color>:

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    72e2:	80 ff       	sbrs	r24, 0
    72e4:	02 c0       	rjmp	.+4      	; 0x72ea <set_color+0x8>
        DDRD |= (1<<5);
    72e6:	55 9a       	sbi	0x0a, 5	; 10
    72e8:	01 c0       	rjmp	.+2      	; 0x72ec <set_color+0xa>
    else
        DDRD &= ~(1<<5);
    72ea:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    72ec:	81 ff       	sbrs	r24, 1
    72ee:	02 c0       	rjmp	.+4      	; 0x72f4 <set_color+0x12>
        DDRD |= (1<<4);
    72f0:	54 9a       	sbi	0x0a, 4	; 10
    72f2:	01 c0       	rjmp	.+2      	; 0x72f6 <set_color+0x14>
    else
        DDRD &= ~(1<<4);
    72f4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    72f6:	82 ff       	sbrs	r24, 2
    72f8:	02 c0       	rjmp	.+4      	; 0x72fe <set_color+0x1c>
        DDRC |= (1<<3);
    72fa:	3b 9a       	sbi	0x07, 3	; 7
    72fc:	01 c0       	rjmp	.+2      	; 0x7300 <set_color+0x1e>
    else
        DDRC &= ~(1<<3);
    72fe:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    7300:	83 ff       	sbrs	r24, 3
    7302:	02 c0       	rjmp	.+4      	; 0x7308 <set_color+0x26>
        DDRC |= (1<<2);
    7304:	3a 9a       	sbi	0x07, 2	; 7
    7306:	01 c0       	rjmp	.+2      	; 0x730a <set_color+0x28>
    else
        DDRC &= ~(1<<2);
    7308:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    730a:	84 ff       	sbrs	r24, 4
    730c:	02 c0       	rjmp	.+4      	; 0x7312 <set_color+0x30>
        DDRC |= (1<<5);
    730e:	3d 9a       	sbi	0x07, 5	; 7
    7310:	01 c0       	rjmp	.+2      	; 0x7314 <set_color+0x32>
    else
        DDRC &= ~(1<<5);
    7312:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    7314:	85 ff       	sbrs	r24, 5
    7316:	02 c0       	rjmp	.+4      	; 0x731c <set_color+0x3a>
        DDRC |= (1<<4);
    7318:	3c 9a       	sbi	0x07, 4	; 7
    731a:	08 95       	ret
    else
        DDRC &= ~(1<<4);
    731c:	3c 98       	cbi	0x07, 4	; 7
    731e:	08 95       	ret

00007320 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    7320:	1f 92       	push	r1
    7322:	0f 92       	push	r0
    7324:	0f b6       	in	r0, 0x3f	; 63
    7326:	0f 92       	push	r0
    7328:	11 24       	eor	r1, r1
    732a:	8f 93       	push	r24
    732c:	9f 93       	push	r25
    rx_timer_off();
    732e:	10 92 81 00 	sts	0x0081, r1
    7332:	10 92 85 00 	sts	0x0085, r1
    7336:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
    733a:	81 e0       	ldi	r24, 0x01	; 1
    733c:	80 93 ae 01 	sts	0x01AE, r24
    rx_leadingbyte = 1;
    7340:	80 93 b6 01 	sts	0x01B6, r24
    rx_busy = 0;
    7344:	10 92 b5 01 	sts	0x01B5, r1
    adc_trigger_high_gain();
    7348:	10 92 7c 00 	sts	0x007C, r1
    734c:	93 ea       	ldi	r25, 0xA3	; 163
    734e:	90 93 7a 00 	sts	0x007A, r25
    7352:	80 93 7b 00 	sts	0x007B, r24
}
    7356:	9f 91       	pop	r25
    7358:	8f 91       	pop	r24
    735a:	0f 90       	pop	r0
    735c:	0f be       	out	0x3f, r0	; 63
    735e:	0f 90       	pop	r0
    7360:	1f 90       	pop	r1
    7362:	18 95       	reti

00007364 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    7364:	1f 92       	push	r1
    7366:	0f 92       	push	r0
    7368:	0f b6       	in	r0, 0x3f	; 63
    736a:	0f 92       	push	r0
    736c:	11 24       	eor	r1, r1
    736e:	0f 93       	push	r16
    7370:	1f 93       	push	r17
    7372:	2f 93       	push	r18
    7374:	3f 93       	push	r19
    7376:	4f 93       	push	r20
    7378:	5f 93       	push	r21
    737a:	6f 93       	push	r22
    737c:	7f 93       	push	r23
    737e:	8f 93       	push	r24
    7380:	9f 93       	push	r25
    7382:	af 93       	push	r26
    7384:	bf 93       	push	r27
    7386:	ef 93       	push	r30
    7388:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    738a:	20 91 84 00 	lds	r18, 0x0084
    738e:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
    7392:	41 e0       	ldi	r20, 0x01	; 1
    7394:	40 93 b5 01 	sts	0x01B5, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    7398:	80 91 ae 01 	lds	r24, 0x01AE
    739c:	88 23       	and	r24, r24
    739e:	21 f1       	breq	.+72     	; 0x73e8 <__vector_23+0x84>
        rx_timer_on();
    73a0:	10 92 85 00 	sts	0x0085, r1
    73a4:	10 92 84 00 	sts	0x0084, r1
    73a8:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
    73ac:	10 92 c5 01 	sts	0x01C5, r1
        rx_leadingbit = 0;
    73b0:	10 92 ae 01 	sts	0x01AE, r1
        if (rx_leadingbyte) {
    73b4:	80 91 b6 01 	lds	r24, 0x01B6
    73b8:	88 23       	and	r24, r24
    73ba:	09 f4       	brne	.+2      	; 0x73be <__vector_23+0x5a>
    73bc:	a3 c0       	rjmp	.+326    	; 0x7504 <__vector_23+0x1a0>
            adc_finish_conversion();
    73be:	80 91 7a 00 	lds	r24, 0x007A
    73c2:	86 fd       	sbrc	r24, 6
    73c4:	fc cf       	rjmp	.-8      	; 0x73be <__vector_23+0x5a>
            rx_dist.high_gain = ADCW;
    73c6:	80 91 78 00 	lds	r24, 0x0078
    73ca:	90 91 79 00 	lds	r25, 0x0079
    73ce:	90 93 b4 01 	sts	0x01B4, r25
    73d2:	80 93 b3 01 	sts	0x01B3, r24
            adc_trigger_low_gain();
    73d6:	81 e0       	ldi	r24, 0x01	; 1
    73d8:	80 93 7c 00 	sts	0x007C, r24
    73dc:	93 ea       	ldi	r25, 0xA3	; 163
    73de:	90 93 7a 00 	sts	0x007A, r25
    73e2:	80 93 7b 00 	sts	0x007B, r24
    73e6:	8e c0       	rjmp	.+284    	; 0x7504 <__vector_23+0x1a0>
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    73e8:	c9 01       	movw	r24, r18
    73ea:	87 58       	subi	r24, 0x87	; 135
    73ec:	91 09       	sbc	r25, r1
    73ee:	84 37       	cpi	r24, 0x74	; 116
    73f0:	99 40       	sbci	r25, 0x09	; 9
    73f2:	a0 f0       	brcs	.+40     	; 0x741c <__vector_23+0xb8>
            rx_timer_off();
    73f4:	10 92 81 00 	sts	0x0081, r1
    73f8:	10 92 85 00 	sts	0x0085, r1
    73fc:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
    7400:	40 93 ae 01 	sts	0x01AE, r20
            rx_leadingbyte = 1;
    7404:	40 93 b6 01 	sts	0x01B6, r20
            rx_busy = 0;
    7408:	10 92 b5 01 	sts	0x01B5, r1
            adc_trigger_high_gain();
    740c:	10 92 7c 00 	sts	0x007C, r1
    7410:	83 ea       	ldi	r24, 0xA3	; 163
    7412:	80 93 7a 00 	sts	0x007A, r24
    7416:	40 93 7b 00 	sts	0x007B, r20
    741a:	74 c0       	rjmp	.+232    	; 0x7504 <__vector_23+0x1a0>
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    741c:	26 58       	subi	r18, 0x86	; 134
    741e:	31 09       	sbc	r19, r1
    7420:	a4 ef       	ldi	r26, 0xF4	; 244
    7422:	b0 e0       	ldi	r27, 0x00	; 0
    7424:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <__umulhisi3>
    7428:	8c 01       	movw	r16, r24
    742a:	22 27       	eor	r18, r18
    742c:	33 27       	eor	r19, r19
            if (bitindex <= 7) { // Data bit received.
    742e:	08 30       	cpi	r16, 0x08	; 8
    7430:	11 05       	cpc	r17, r1
    7432:	21 05       	cpc	r18, r1
    7434:	31 05       	cpc	r19, r1
    7436:	60 f4       	brcc	.+24     	; 0x7450 <__vector_23+0xec>
                rx_bytevalue |= (1<<bitindex);
    7438:	81 e0       	ldi	r24, 0x01	; 1
    743a:	90 e0       	ldi	r25, 0x00	; 0
    743c:	01 c0       	rjmp	.+2      	; 0x7440 <__vector_23+0xdc>
    743e:	88 0f       	add	r24, r24
    7440:	0a 95       	dec	r16
    7442:	ea f7       	brpl	.-6      	; 0x743e <__vector_23+0xda>
    7444:	90 91 c5 01 	lds	r25, 0x01C5
    7448:	89 2b       	or	r24, r25
    744a:	80 93 c5 01 	sts	0x01C5, r24
    744e:	5a c0       	rjmp	.+180    	; 0x7504 <__vector_23+0x1a0>
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    7450:	40 93 ae 01 	sts	0x01AE, r20
                if (rx_leadingbyte) {
    7454:	80 91 b6 01 	lds	r24, 0x01B6
    7458:	88 23       	and	r24, r24
    745a:	41 f1       	breq	.+80     	; 0x74ac <__vector_23+0x148>
                    adc_finish_conversion();
    745c:	80 91 7a 00 	lds	r24, 0x007A
    7460:	86 fd       	sbrc	r24, 6
    7462:	fc cf       	rjmp	.-8      	; 0x745c <__vector_23+0xf8>
                    rx_dist.low_gain = ADCW;
    7464:	80 91 78 00 	lds	r24, 0x0078
    7468:	90 91 79 00 	lds	r25, 0x0079
    746c:	90 93 b2 01 	sts	0x01B2, r25
    7470:	80 93 b1 01 	sts	0x01B1, r24
                    adc_trigger_high_gain();
    7474:	10 92 7c 00 	sts	0x007C, r1
    7478:	83 ea       	ldi	r24, 0xA3	; 163
    747a:	80 93 7a 00 	sts	0x007A, r24
    747e:	81 e0       	ldi	r24, 0x01	; 1
    7480:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    7484:	90 91 c5 01 	lds	r25, 0x01C5
    7488:	99 23       	and	r25, r25
    748a:	59 f0       	breq	.+22     	; 0x74a2 <__vector_23+0x13e>
                        rx_timer_off();
    748c:	10 92 81 00 	sts	0x0081, r1
    7490:	10 92 85 00 	sts	0x0085, r1
    7494:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    7498:	80 93 b6 01 	sts	0x01B6, r24
                        rx_busy = 0;
    749c:	10 92 b5 01 	sts	0x01B5, r1
    74a0:	31 c0       	rjmp	.+98     	; 0x7504 <__vector_23+0x1a0>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    74a2:	10 92 b6 01 	sts	0x01B6, r1
                        rx_byteindex = 0;
    74a6:	10 92 b0 01 	sts	0x01B0, r1
    74aa:	2c c0       	rjmp	.+88     	; 0x7504 <__vector_23+0x1a0>
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    74ac:	80 91 b0 01 	lds	r24, 0x01B0
    74b0:	e8 2f       	mov	r30, r24
    74b2:	f0 e0       	ldi	r31, 0x00	; 0
    74b4:	e9 54       	subi	r30, 0x49	; 73
    74b6:	fe 4f       	sbci	r31, 0xFE	; 254
    74b8:	90 91 c5 01 	lds	r25, 0x01C5
    74bc:	90 83       	st	Z, r25
                    rx_byteindex++;
    74be:	8f 5f       	subi	r24, 0xFF	; 255
    74c0:	80 93 b0 01 	sts	0x01B0, r24
                    if (rx_byteindex == sizeof(message_t)) {
    74c4:	8c 30       	cpi	r24, 0x0C	; 12
    74c6:	f1 f4       	brne	.+60     	; 0x7504 <__vector_23+0x1a0>
                        rx_timer_off();
    74c8:	10 92 81 00 	sts	0x0081, r1
    74cc:	10 92 85 00 	sts	0x0085, r1
    74d0:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    74d4:	40 93 b6 01 	sts	0x01B6, r20
                        rx_busy = 0;
    74d8:	10 92 b5 01 	sts	0x01B5, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
    74dc:	00 91 c1 01 	lds	r16, 0x01C1
    74e0:	10 91 c2 01 	lds	r17, 0x01C2
    74e4:	87 eb       	ldi	r24, 0xB7	; 183
    74e6:	91 e0       	ldi	r25, 0x01	; 1
    74e8:	0e 94 95 3a 	call	0x752a	; 0x752a <message_crc>
    74ec:	08 17       	cp	r16, r24
    74ee:	19 07       	cpc	r17, r25
    74f0:	49 f4       	brne	.+18     	; 0x7504 <__vector_23+0x1a0>
}

#else// BOOTLOADER

static inline void process_message() {
    kilo_message_rx(&rx_msg, &rx_dist);
    74f2:	e0 91 04 01 	lds	r30, 0x0104
    74f6:	f0 91 05 01 	lds	r31, 0x0105
    74fa:	61 eb       	ldi	r22, 0xB1	; 177
    74fc:	71 e0       	ldi	r23, 0x01	; 1
    74fe:	87 eb       	ldi	r24, 0xB7	; 183
    7500:	91 e0       	ldi	r25, 0x01	; 1
    7502:	09 95       	icall
                    }
                }
            }
        }
    }
}
    7504:	ff 91       	pop	r31
    7506:	ef 91       	pop	r30
    7508:	bf 91       	pop	r27
    750a:	af 91       	pop	r26
    750c:	9f 91       	pop	r25
    750e:	8f 91       	pop	r24
    7510:	7f 91       	pop	r23
    7512:	6f 91       	pop	r22
    7514:	5f 91       	pop	r21
    7516:	4f 91       	pop	r20
    7518:	3f 91       	pop	r19
    751a:	2f 91       	pop	r18
    751c:	1f 91       	pop	r17
    751e:	0f 91       	pop	r16
    7520:	0f 90       	pop	r0
    7522:	0f be       	out	0x3f, r0	; 63
    7524:	0f 90       	pop	r0
    7526:	1f 90       	pop	r1
    7528:	18 95       	reti

0000752a <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    752a:	fc 01       	movw	r30, r24
    752c:	9c 01       	movw	r18, r24
    752e:	26 5f       	subi	r18, 0xF6	; 246
    7530:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    7532:	8f ef       	ldi	r24, 0xFF	; 255
    7534:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    7536:	41 91       	ld	r20, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    7538:	84 27       	eor	r24, r20
    753a:	08 2e       	mov	r0, r24
    753c:	82 95       	swap	r24
    753e:	80 7f       	andi	r24, 0xF0	; 240
    7540:	80 25       	eor	r24, r0
    7542:	09 2e       	mov	r0, r25
    7544:	98 2f       	mov	r25, r24
    7546:	82 95       	swap	r24
    7548:	8f 70       	andi	r24, 0x0F	; 15
    754a:	08 26       	eor	r0, r24
    754c:	86 95       	lsr	r24
    754e:	98 27       	eor	r25, r24
    7550:	89 27       	eor	r24, r25
    7552:	88 0f       	add	r24, r24
    7554:	88 0f       	add	r24, r24
    7556:	88 0f       	add	r24, r24
    7558:	80 25       	eor	r24, r0

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    755a:	e2 17       	cp	r30, r18
    755c:	f3 07       	cpc	r31, r19
    755e:	59 f7       	brne	.-42     	; 0x7536 <message_crc+0xc>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    7560:	08 95       	ret

00007562 <main>:
            goto_program();
    }
}

int main() {
    cli();
    7562:	f8 94       	cli
    // move interrupt vectors to bootloader interupts
    MCUCR = (1<<IVCE);
    7564:	81 e0       	ldi	r24, 0x01	; 1
    7566:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1<<IVSEL);
    7568:	82 e0       	ldi	r24, 0x02	; 2
    756a:	85 bf       	out	0x35, r24	; 53
    756c:	e6 e0       	ldi	r30, 0x06	; 6
    756e:	f1 e0       	ldi	r31, 0x01	; 1
    // initalize variables
    BF_init(page_table);
    7570:	21 e0       	ldi	r18, 0x01	; 1
    7572:	e2 32       	cpi	r30, 0x22	; 34
    7574:	f2 07       	cpc	r31, r18
    7576:	11 f0       	breq	.+4      	; 0x757c <main+0x1a>
    7578:	11 92       	st	Z+, r1
    757a:	fa cf       	rjmp	.-12     	; 0x7570 <main+0xe>
    page_total = 220;
    757c:	8c ed       	ldi	r24, 0xDC	; 220
    757e:	80 93 26 01 	sts	0x0126, r24
    page_count = 0;
    7582:	10 92 23 01 	sts	0x0123, r1
    page_address = 0;
    7586:	10 92 ad 01 	sts	0x01AD, r1
    page_byte_count = 0;
    758a:	10 92 28 01 	sts	0x0128, r1
    758e:	10 92 27 01 	sts	0x0127, r1
    sei();
    7592:	78 94       	sei
    kilo_message_rx = message_rx;
    7594:	89 e5       	ldi	r24, 0x59	; 89
    7596:	98 e3       	ldi	r25, 0x38	; 56
    7598:	90 93 05 01 	sts	0x0105, r25
    759c:	80 93 04 01 	sts	0x0104, r24
    // initialize hardware
    kilo_init();
    75a0:	0e 94 17 39 	call	0x722e	; 0x722e <kilo_init>

    // flash blue led
    while(1) {
        set_color(RGB(0,0,3));
    75a4:	80 e3       	ldi	r24, 0x30	; 48
    75a6:	0e 94 71 39 	call	0x72e2	; 0x72e2 <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    75aa:	8f e0       	ldi	r24, 0x0F	; 15
    75ac:	97 e2       	ldi	r25, 0x27	; 39
    75ae:	01 97       	sbiw	r24, 0x01	; 1
    75b0:	f1 f7       	brne	.-4      	; 0x75ae <main+0x4c>
    75b2:	00 c0       	rjmp	.+0      	; 0x75b4 <main+0x52>
    75b4:	00 00       	nop
        _delay_ms(5);
        set_color(RGB(0,0,0));
    75b6:	80 e0       	ldi	r24, 0x00	; 0
    75b8:	0e 94 71 39 	call	0x72e2	; 0x72e2 <set_color>
    75bc:	9f ef       	ldi	r25, 0xFF	; 255
    75be:	29 e6       	ldi	r18, 0x69	; 105
    75c0:	88 e1       	ldi	r24, 0x18	; 24
    75c2:	91 50       	subi	r25, 0x01	; 1
    75c4:	20 40       	sbci	r18, 0x00	; 0
    75c6:	80 40       	sbci	r24, 0x00	; 0
    75c8:	e1 f7       	brne	.-8      	; 0x75c2 <main+0x60>
    75ca:	00 c0       	rjmp	.+0      	; 0x75cc <main+0x6a>
    75cc:	00 00       	nop
    75ce:	ea cf       	rjmp	.-44     	; 0x75a4 <main+0x42>

000075d0 <__umulhisi3>:
    75d0:	a2 9f       	mul	r26, r18
    75d2:	b0 01       	movw	r22, r0
    75d4:	b3 9f       	mul	r27, r19
    75d6:	c0 01       	movw	r24, r0
    75d8:	a3 9f       	mul	r26, r19
    75da:	70 0d       	add	r23, r0
    75dc:	81 1d       	adc	r24, r1
    75de:	11 24       	eor	r1, r1
    75e0:	91 1d       	adc	r25, r1
    75e2:	b2 9f       	mul	r27, r18
    75e4:	70 0d       	add	r23, r0
    75e6:	81 1d       	adc	r24, r1
    75e8:	11 24       	eor	r1, r1
    75ea:	91 1d       	adc	r25, r1
    75ec:	08 95       	ret

000075ee <eeprom_read_byte>:
    75ee:	f9 99       	sbic	0x1f, 1	; 31
    75f0:	fe cf       	rjmp	.-4      	; 0x75ee <eeprom_read_byte>
    75f2:	92 bd       	out	0x22, r25	; 34
    75f4:	81 bd       	out	0x21, r24	; 33
    75f6:	f8 9a       	sbi	0x1f, 0	; 31
    75f8:	99 27       	eor	r25, r25
    75fa:	80 b5       	in	r24, 0x20	; 32
    75fc:	08 95       	ret

000075fe <_exit>:
    75fe:	f8 94       	cli

00007600 <__stop_program>:
    7600:	ff cf       	rjmp	.-2      	; 0x7600 <__stop_program>
